create macro PROD_EDW_BASE_VIEWS.m_ADVENT_CARDLOCK_PRICE_ADJ (begin_date date, end_date date)
as (
	SELECT
		CASE 
			WHEN dcd.SalesPerson_Name is null THEN cust.slsman -- If there is no Name, use ID instead
			ELSE dcd.SalesPerson_Name
		END as "Sales Rep"
		,cdata.Cust_Key as "Act #"
		,cust.Name as "Account Name"
		,'    ' as "Prod"
		,CASE 
			WHEN CHARACTER_LENGTH(cast(fhist.Site as varchar(8))) > 4
			THEN 'EXT - FUELMAN'
			ELSE 'CFN REMOTE'
		END as "Type"
		,cdata.prindex as "Index"
		,price.price_adj as "Adjustment"
		,SUM(fhist.fuel_qty) as sum_Fuel_QTY 
		,CASE 
			WHEN sum_Fuel_QTY - CAST(sum_Fuel_QTY as int) >= 0.5 THEN CAST(sum_Fuel_QTY as int) +1 ELSE CAST(sum_Fuel_QTY as int) 
			END as "Gallons and Notes"
		,2 as Sort_Key
	FROM 
		Prod_Edw_Base_Views.WSale_Advent_CustData cdata
	INNER JOIN
		Prod_Edw_Base_Views.WSale_Advent_Customer cust
		ON	cust.Cust_Key = cdata.Cust_Key
	INNER JOIN 
		Prod_Edw_Base_Views.WSale_Advent_FuelHist fhist
		ON	fhist.Cust_Key = cdata.Cust_Key
	LEFT OUTER JOIN
		(	Select pre.Cust_Key, pre.Prod_Code, pre.Price_Adj
			From prod_edw_base_views.wsale_advent_fuelhist pre
			Inner Join -- Max_Time by Max_Date
				(Select tm.Cust_Key, dt.Max_Date, max(tm.trans_timedisp) as max_Time
				From prod_edw_base_views.wsale_advent_fuelhist tm
					INNER JOIN -- Max_Date by Cust_Key
						(Select Cust_Key, max(load_date) as max_Date
							From prod_edw_base_views.wsale_advent_fuelhist
							Where load_date between :begin_date and :end_date 
							AND source_tran = 'R'
							Group By Cust_Key) dt
					ON dt.Cust_Key = tm.Cust_Key 
					AND dt.max_Date = tm.load_date
					WHERE tm.Source_tran = 'R'
				Group By tm.Cust_Key, dt.Max_Date			
				)agg
			ON
				pre.cust_key = agg.cust_key
			AND pre.load_date = agg.max_date
			AND pre.trans_timedisp = agg.max_time
			WHERE pre.source_tran = 'R'
		)price
		ON price.cust_key = cdata.cust_key 
	LEFT OUTER JOIN 	
		Prod_EDW_Base_Views.WSale_PDS_SalesPerson_DCD dcd
		ON	cust.slsman = dcd.PDS_Number
	WHERE
		fhist.trans_date between :begin_date and :end_date 
		and fhist.source_tran = 'R'
	GROUP BY "Sales Rep", "Act #", "Account Name", "Prod", "Type", "Index", "Adjustment"
UNION	
		SELECT
		CASE 
			WHEN dcd.SalesPerson_Name is null THEN cust.slsman -- If there is no Name, use ID instead
			ELSE dcd.SalesPerson_Name
		END as "Sales Rep"
		,cdata.Cust_Key as "Act #"
		,cust.Name as "Account Name"
		,Cast(fhist.Prod_Code as char(8))as "Prod"
		,'Domestic' as "Type"
		,cdata.prindex as "Index"
		,price.price_adj as "Adjustment"
		,SUM(fhist.fuel_qty) as sum_Fuel_QTY 
		,CASE 
			WHEN sum_Fuel_QTY - CAST(sum_Fuel_QTY as int) >= 0.5 THEN CAST(sum_Fuel_QTY as int) +1 ELSE CAST(sum_Fuel_QTY as int) 
			END as "Gallons and Notes"
		,1 as Sort_Key
	FROM 
		Prod_Edw_Base_Views.WSale_Advent_CustData cdata
	INNER JOIN
		Prod_Edw_Base_Views.WSale_Advent_Customer cust
		ON	cust.Cust_Key = cdata.Cust_Key
	INNER JOIN 
		Prod_Edw_Base_Views.WSale_Advent_FuelHist fhist
		ON	fhist.Cust_Key = cdata.Cust_Key
	LEFT OUTER JOIN
		(	Select pre.Cust_Key, pre.Prod_Code, pre.Price_Adj
			From prod_edw_base_views.wsale_advent_fuelhist pre
			Inner Join -- Max_Time by Max_Date
				(Select tm.Cust_Key, dt.Max_Date, max(tm.trans_timedisp) as max_Time
				From prod_edw_base_views.wsale_advent_fuelhist tm
					INNER JOIN -- Max_Date by Cust_Key
						(Select Cust_Key, max(load_date) as max_Date
							From prod_edw_base_views.wsale_advent_fuelhist
							Where load_date between :begin_date and :end_date 
							Group By Cust_Key) dt
					ON dt.Cust_Key = tm.Cust_Key 
					AND dt.max_Date = tm.load_date 
				Group By tm.Cust_Key, dt.Max_Date			
				)agg
			ON
				pre.cust_key = agg.cust_key
			AND pre.load_date = agg.max_date
			AND pre.trans_timedisp = agg.max_time
		)price
		ON price.cust_key = cdata.cust_key 
	LEFT OUTER JOIN 	
		Prod_EDW_Base_Views.WSale_PDS_SalesPerson_DCD dcd
		ON	cust.slsman = dcd.PDS_Number
	WHERE
		fhist.trans_date between :begin_date and :end_date 
	GROUP BY "Sales Rep", "Act #", "Account Name", "Prod", "Type", "Index", "Adjustment"
ORDER BY 3, 2, 9, 4
;
);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_AMPVA(End_Date DATE) AS
	(
	SELECT 'CurrentDay' AS TimePeriod, area, name
		,SUM(TotalRowCount) AS TotalRecords
		,SUM(ExceedanceCount_Under) AS ExceedanceRecords_Under
		,SUM(ExceedanceCount_Over) AS ExceedanceRecords_Over
		,(CAST(SUM(ExceedanceCount_Under) AS FLOAT))/SUM(TotalRowCount)*100 AS ExceedancePercent_Under
		,(CAST(SUM(ExceedanceCount_Over) AS FLOAT))/SUM(TotalRowCount)*100 AS ExceedancePercent_Over
	FROM
		(
		SELECT	Pi.Ref_Prod_Location, area, name, Pi.Trans_Date, Pi.Tag_ID, Tag_Value, Plan_Max, Plan_Min
			,1 AS TotalRowCount
			,CASE WHEN Tag_Value < Plan_Min 
				THEN 1
				ELSE 0
			END AS ExceedanceCount_Under
			,CASE WHEN Tag_Value > Plan_Max 
				THEN 1
				ELSE 0
			END AS ExceedanceCount_Over
		FROM	prod_edw_base_views.PI
		LEFT OUTER JOIN
			(
			SELECT ref_prod_location, trans_date, area, name, tag_id
				,MAX(Plan_Max) AS Plan_Max, MAX(Plan_Min) AS Plan_Min
			FROM
				(
				SELECT	Ref_Prod_Location, Eff_Date AS Trans_Date, PI_Tag AS Tag_Id, Section,	Name, Area
						,CASE WHEN measurement_type = 'Max'
							THEN Plan_Value
						END AS Plan_Max
						,CASE WHEN measurement_type = 'Min'
							THEN Plan_Value
						END AS Plan_Min
				FROM	prod_edw_base_views.Refops_Plan_Target
				) AS tmpPlan2
			GROUP BY ref_prod_location, trans_date, Tag_Id, area, name	
			) AS tmpPlan
		ON pi.ref_prod_location = tmpPlan.ref_prod_location
			AND pi.trans_date = tmpPlan.trans_date
			AND pi.tag_id = tmpPlan.tag_id
		WHERE PI.trans_date = :End_Date
			AND PI.Tag_Id IN 
				(
				--El Paso Tags
				'38FC102.pv','39fc102.pv','E.39DSLPROD.FLASH_PM.Flash_Pensky_Martens.lab','E.39DSLPROD.SULF_5453.Sulfur_ppm.lab'
				,'16FC202.pv','41FC124.pv','41FC410.pv','E.16C1604.FREEZE_AUT.Freeze_deg_F.lab','e.41refor.octane.research_octane_d2699.lab'
				,'30FC104.pv','70FC124.pv','80FC820.pv','81FC100.pv','89FC101A.PV','01FI163.PV','cpscrude'
				)
		) AS tmpCurrentDay
	GROUP BY area,name
	
	UNION ALL

	SELECT 'MTD' AS TimePeriod, area, name
		,SUM(TotalRowCount) AS TotalRecords
		,SUM(ExceedanceCount_Under) AS ExceedanceRecords_Under
		,SUM(ExceedanceCount_Over) AS ExceedanceRecords_Over
		,(CAST(SUM(ExceedanceCount_Under) AS FLOAT))/SUM(TotalRowCount)*100 AS ExceedancePercent_Under
		,(CAST(SUM(ExceedanceCount_Over) AS FLOAT))/SUM(TotalRowCount)*100 AS ExceedancePercent_Over
	FROM
		(
		SELECT	Pi.Ref_Prod_Location, area, name, Pi.Trans_Date, Pi.Tag_ID, Tag_Value, Plan_Max, Plan_Min
			,1 AS TotalRowCount
			,CASE WHEN Tag_Value < Plan_Min 
				THEN 1
				ELSE 0
			END AS ExceedanceCount_Under
			,CASE WHEN Tag_Value > Plan_Max 
				THEN 1
				ELSE 0
			END AS ExceedanceCount_Over
		FROM	prod_edw_base_views.PI
		LEFT OUTER JOIN
			(
			SELECT ref_prod_location, trans_date, area, name, tag_id
				,MAX(Plan_Max) AS Plan_Max, MAX(Plan_Min) AS Plan_Min
			FROM
				(
				SELECT	Ref_Prod_Location, Eff_Date AS Trans_Date, PI_Tag AS Tag_Id, Section,	Name, Area
						,CASE WHEN measurement_type = 'Max'
							THEN Plan_Value
						END AS Plan_Max
						,CASE WHEN measurement_type = 'Min'
							THEN Plan_Value
						END AS Plan_Min
				FROM	prod_edw_base_views.Refops_Plan_Target
				) AS tmpPlan2
			GROUP BY ref_prod_location, trans_date, Tag_Id, area, name	
			) AS tmpPlan
		ON pi.ref_prod_location = tmpPlan.ref_prod_location
			AND pi.trans_date = tmpPlan.trans_date
			AND pi.tag_id = tmpPlan.tag_id
		WHERE PI.trans_date BETWEEN TRUNC(ADD_MONTHS(:End_Date,0),'mon') AND :End_Date
			AND PI.Tag_Id IN 
				(
				--El Paso Tags
				'38FC102.pv','39fc102.pv','E.39DSLPROD.FLASH_PM.Flash_Pensky_Martens.lab','E.39DSLPROD.SULF_5453.Sulfur_ppm.lab'
				,'16FC202.pv','41FC124.pv','41FC410.pv','E.16C1604.FREEZE_AUT.Freeze_deg_F.lab','e.41refor.octane.research_octane_d2699.lab'
				,'30FC104.pv','70FC124.pv','80FC820.pv','81FC100.pv','89FC101A.PV','01FI163.PV','cpscrude'
				)
		) AS tmpCurrentDay
	GROUP BY area,name
		
	UNION ALL

	SELECT 'YTD' AS TimePeriod, area, name
		,SUM(TotalRowCount) AS TotalRecords
		,SUM(ExceedanceCount_Under) AS ExceedanceRecords_Under
		,SUM(ExceedanceCount_Over) AS ExceedanceRecords_Over
		,(CAST(SUM(ExceedanceCount_Under) AS FLOAT))/SUM(TotalRowCount)*100 AS ExceedancePercent_Under
		,(CAST(SUM(ExceedanceCount_Over) AS FLOAT))/SUM(TotalRowCount)*100 AS ExceedancePercent_Over
	FROM
		(
		SELECT	Pi.Ref_Prod_Location, area, name, Pi.Trans_Date, Pi.Tag_ID, Tag_Value, Plan_Max, Plan_Min
			,1 AS TotalRowCount
			,CASE WHEN Tag_Value < Plan_Min 
				THEN 1
				ELSE 0
			END AS ExceedanceCount_Under
			,CASE WHEN Tag_Value > Plan_Max 
				THEN 1
				ELSE 0
			END AS ExceedanceCount_Over
		FROM	prod_edw_base_views.PI
		LEFT OUTER JOIN
			(
			SELECT ref_prod_location, trans_date, area, name, tag_id
				,MAX(Plan_Max) AS Plan_Max, MAX(Plan_Min) AS Plan_Min
			FROM
				(
				SELECT	Ref_Prod_Location, Eff_Date AS Trans_Date, PI_Tag AS Tag_Id, Section,	Name, Area
						,CASE WHEN measurement_type = 'Max'
							THEN Plan_Value
						END AS Plan_Max
						,CASE WHEN measurement_type = 'Min'
							THEN Plan_Value
						END AS Plan_Min
				FROM	prod_edw_base_views.Refops_Plan_Target
				) AS tmpPlan2
			GROUP BY ref_prod_location, trans_date, Tag_Id, area, name	
			) AS tmpPlan
		ON pi.ref_prod_location = tmpPlan.ref_prod_location
			AND pi.trans_date = tmpPlan.trans_date
			AND pi.tag_id = tmpPlan.tag_id
		WHERE PI.trans_date BETWEEN ADD_MONTHS(:End_Date, -(EXTRACT(MONTH FROM :End_Date) - 1)) + (1 - EXTRACT(DAY FROM :End_Date))
				AND :End_Date
			AND PI.Tag_Id IN 
				(
				--El Paso Tags
				'38FC102.pv','39fc102.pv','E.39DSLPROD.FLASH_PM.Flash_Pensky_Martens.lab','E.39DSLPROD.SULF_5453.Sulfur_ppm.lab'
				,'16FC202.pv','41FC124.pv','41FC410.pv','E.16C1604.FREEZE_AUT.Freeze_deg_F.lab','e.41refor.octane.research_octane_d2699.lab'
				,'30FC104.pv','70FC124.pv','80FC820.pv','81FC100.pv','89FC101A.PV','01FI163.PV','cpscrude'
				)
		) AS tmpCurrentDay
	GROUP BY area,name;

);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_Backcast_RefDetail (End_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
	(
	SELECT  ref_prod_location, eff_date, prod_group_subcat1,prod_group_subcat2,prod_group_subcat4,
		Actual_Production_MTD, Planned_Production_MTD, Planned_Price,
		Production_Diff_MTD, Price_Diff_MTD, Actual_Production, Actual_Production_MTD_Avg
	FROM prod_edw_base_views.backcast
	WHERE eff_date = :End_Date
	AND ref_prod_location = :Ref_Prod_Location
	ORDER BY ref_prod_location, prod_group_subcat1,prod_group_subcat2,prod_group_subcat4,eff_date;
	);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_Backcast_Totals (Begin_Date DATE,End_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
	(
	SELECT tmpBackcast. ref_prod_location, tmpBackcast.eff_date
		,(Gasolines_Price_Diff_MTD+Distillates_Price_Diff_MTD+HeavyProducts_Price_Diff_MTD
		+LPGProducts_Price_Diff_MTD+ IntProducts_Price_Diff_MTD+ Crude_Price_Diff_MTD
		+Ints_Price_Diff_MTD+ PurBlend_Price_Diff_MTD+Recovered_Price_Diff_MTD) AS Total_Price_Diff_MTD
	
		,Gasolines_Price_Diff_MTD,Distillates_Price_Diff_MTD,HeavyProducts_Price_Diff_MTD
		,LPGProducts_Price_Diff_MTD, IntProducts_Price_Diff_MTD, Crude_Price_Diff_MTD
		,Ints_Price_Diff_MTD, PurBlend_Price_Diff_MTD,Recovered_Price_Diff_MTD
		
		,Percent_LVR, Percent_LVR_MTD_Avg
	FROM
		(
		SELECT ref_prod_location, eff_date
			,MAX(Gasolines_Price_Diff_MTD) AS Gasolines_Price_Diff_MTD
			,MAX(Distillates_Price_Diff_MTD) AS Distillates_Price_Diff_MTD
			,MAX(HeavyProducts_Price_Diff_MTD) AS HeavyProducts_Price_Diff_MTD
			,MAX(LPGProducts_Price_Diff_MTD) AS LPGProducts_Price_Diff_MTD
			,MAX(IntProducts_Price_Diff_MTD) AS IntProducts_Price_Diff_MTD
			,MAX(Crude_Price_Diff_MTD) AS Crude_Price_Diff_MTD
			,MAX(Intermediates_Price_Diff_MTD) AS Ints_Price_Diff_MTD
			,MAX(PurBlend_Price_Diff_MTD) AS PurBlend_Price_Diff_MTD
			,MAX(Recovered_Price_Diff_MTD) AS Recovered_Price_Diff_MTD
		FROM
			(
			SELECT  ref_prod_location, eff_date, prod_group_subcat2
				,CASE WHEN prod_group_subcat2 = 'Gasolines' THEN SUM(price_diff_mtd) END AS Gasolines_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'Distillates' THEN SUM(price_diff_mtd) END AS Distillates_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'Heavy Products' THEN SUM(price_diff_mtd) END AS HeavyProducts_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'LPG Products' THEN SUM(price_diff_mtd) END AS LPGProducts_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'Intermediate Products' THEN SUM(price_diff_mtd) END AS IntProducts_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'Crude' THEN SUM(price_diff_mtd) END AS Crude_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'Intermediates' THEN SUM(price_diff_mtd) END AS Intermediates_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'Purchased Blendstocks' THEN SUM(price_diff_mtd) END AS PurBlend_Price_Diff_MTD
				,CASE WHEN prod_group_subcat2 = 'Recovered' THEN SUM(price_diff_mtd) END AS Recovered_Price_Diff_MTD
			FROM prod_edw_base_views.backcast
			WHERE eff_date BETWEEN :Begin_Date AND :End_Date
				AND ref_prod_location =:Ref_Prod_Location
			GROUP BY ref_prod_location, prod_group_subcat2, eff_date
			) AS tmpBackcast2
		GROUP BY ref_prod_location, eff_date
		) AS tmpBackcast
	LEFT OUTER JOIN
		(
		SELECT ref_prod_location, eff_date, Percent_LVR, Percent_LVR_MTD_Avg
		FROM prod_edw_base_views.backcast_lvr
		) AS tmpLVR
	ON tmpBackcast.ref_prod_location = tmpLVR.ref_prod_location
		AND tmpBackcast.eff_date = tmpLVR.eff_date
		
	UNION		

	SELECT :Ref_Prod_Location AS ref_prod_location, CAST(:Begin_Date-1 AS DATE) AS eff_date
		,0 AS Total_Price_Diff_MTD
		,0 AS Gasolines_Price_Diff_MTD,0 AS Distillates_Price_Diff_MTD,0 AS HeavyProducts_Price_Diff_MTD
		,0 AS LPGProducts_Price_Diff_MTD, 0 AS IntProducts_Price_Diff_MTD, 0 AS Crude_Price_Diff_MTD
		,0 AS Ints_Price_Diff_MTD, 0 AS PurBlend_Price_Diff_MTD, 0 AS Recovered_Price_Diff_MTD
		,100 AS Percent_LVR, 100 AS Percent_LVR_MTD_Avg
	FROM prod_edw_base_views.cur_date
	WHERE cur_date = :End_date
		
	ORDER BY 1,2;
	);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_BBPL_CompOpis (Run_Date date) as
(
select cast(20.1 as decimal(6, 2)) as sort_ord, cast('Regular Unleaded El Paso Average' as varchar(100))  as RIC_Desc, cast('Regular Unleaded El Paso Average * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP06394' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(21.1 as decimal(6, 2)) as sort_ord,cast( 'Unleaded CBGW/10% Phoenix Average' as varchar(100)) as RIC_Desc, cast('Unleaded CBGW/10% Phoenix Average * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP13188' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(22.1 as decimal(6, 2)) as sort_ord, cast('Premium Unleaded El Paso Average' as varchar(100)) as RIC_Desc, cast('Premium Unleaded El Paso Average * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP06574' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(23.1 as decimal(6, 2)) as sort_ord, cast('Premium CBG/10% Phoenix Average' as varchar(100)) as RIC_Desc, cast('Premium CBG/10% Phoenix Average * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP13362' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(24.1 as decimal(6, 2)) as sort_ord, cast('ULSD El Paso Average' as varchar(100)) as RIC_Desc, cast('ULSD El Paso Average * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP06880' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(25.1 as decimal(6, 2)) as sort_ord, cast('Propane Mont Belvieu' as varchar(100)) as RIC_Desc, cast('(Propane Mont Belvieu/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='OPLP00034' and Price_Source='OPIS LP' and price_type='Low' and Price_Eff_Date=:Run_Date 
union
select cast(26.1 as decimal(6, 2)) as sort_ord, cast('ULSD El Paso' as varchar(100)) as RIC_Desc, cast('ULSD El Paso * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP06880' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(26.2 as decimal(6, 2)) as sort_ord, cast('Unl El Paso' as varchar(100)) as RIC_Desc, cast('Unl El Paso * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP06394' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(26.3 as decimal(6, 2)) as sort_ord, cast('El Paso Transmix (50% ULSD + 50% Unl)' as varchar(100)) as RIC_Desc, cast('(El Paso Transmix (50% ULSD + 50% Unl)-.4) * 42' as varchar(100)) as BB_Indicator, 'N/A' as pricing_code, 'N/A' as pricing_desc,'Motor Gasolines' as Pricing_Group,'El Paso' as Pricing_Location, 'N/A' as Price_Type, 'COMPETITOR' as Price_Source, 'G' as Gross_Net_Status,cast(null as Decimal(15,5)) as Price,(((((0.5*a.BB_Price1)+(0.5*b.BB_Price2)))-.4)*42)  as BB_Price
from	(select  (Price) as BB_Price1 from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP06880' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date) a,
			(select (Price) as BB_Price2 from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP06394' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date) b
union
select cast(27.1 as decimal(6, 2)) as sort_ord, cast('FCC Feed (VGO) USGC LSVGO' as varchar(100)) as RIC_Desc, cast('(FCC Feed (VGO) USGC LSVGO/100+.2) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.2)*42) as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='OPFS00014' and Price_Source='OPIS FEEDSTOCKS' and price_type='Average' and Price_Eff_Date=:Run_Date 
union
select cast(28.1 as decimal(6, 2)) as sort_ord, cast('Isobutane Mont Belvieu' as varchar(100)) as RIC_Desc, cast('(Isobutane Mont Belvieu/100+.125) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.125)*42) as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='OPLP00036' and Price_Source='OPIS LP' and Price_Type='Low' and Price_Eff_Date=:Run_Date
union
select cast(29.1 as decimal(6, 2)) as sort_ord, cast('Butane Mont Belvieu' as varchar(100)) as RIC_Desc, cast('(Butane Mont Belvieu/100+.2) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.2) *42) as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='OPLP00035' and Price_Source='OPIS LP' and Price_Type='Low' and Price_Eff_Date=:Run_Date
union
select cast(30.1 as decimal(6, 2)) as sort_ord, cast('Ethanol Chicago Avg.' as varchar(100)) as RIC_Desc, cast('(Ethanol Chicago Avg/100+.13) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.13)*42) as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='OPSPT00749'  and Price_Source='OPIS SPOT' and price_type='Average' and Price_Eff_Date=:Run_Date 
union
select cast(31.1 as decimal(6, 2)) as sort_ord, cast('Regular Unleaded Albq Rack Avg.' as varchar(100)) as RIC_Desc, cast('Regular Unleaded Albq Rack Avg. * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP24970' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(32.1 as decimal(6, 2)) as sort_ord, cast('Premium Unleaded Albq Rack Avg.' as varchar(100)) as RIC_Desc, cast('Premium Unleaded Albq Rack Avg. * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP25052' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(33.1 as decimal(6, 2)) as sort_ord, cast('ULSD Albq Rack Avg.' as varchar(100)) as RIC_Desc, cast('ULSD Albq Rack Avg * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP03610' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(34.1 as decimal(6, 2)) as sort_ord, cast('Natural Gasoline Mont Belvieu' as varchar(100)) as RIC_Desc, cast('Natural Gasoline Mont Belvieu/100  * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  ((Price/100)*42) as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='OPLP00037' and Price_Source='OPIS LP' and Price_Type='Low' and Price_Eff_Date=:Run_Date
union
select cast(35.1 as decimal(6, 2)) as sort_ord, cast('Base Gasoline Albq Rack Avg.' as varchar(100)) as RIC_Desc, cast('Base Gasoline Albq Rack Avg. * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP24970' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(36.1 as decimal(6, 2)) as sort_ord, cast('Propane Mont Belvieu' as varchar(100)) as RIC_Desc, cast('(Propane Mont Belvieu/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='OPLP00034' and Price_Type='Low' and Price_Source='OPIS LP' and Price_Eff_Date=:Run_Date
union
select cast(37.1 as decimal(6, 2)) as sort_ord, cast('ULSD Albuquerque' as varchar(100)) as RIC_Desc, cast('ULSD Albuquerque * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP03610' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(37.2 as decimal(6, 2)) as sort_ord, cast('Unl Albuquerque' as varchar(100)) as RIC_Desc, cast('Unl Albuquerque * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price*42 as BB_Price from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP24970' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date
union
select cast(37.3 as decimal(6, 2)) as sort_ord, cast('Albuquerque Transmix (50% ULSD + 50% Unl)' as varchar(100)) as RIC_Desc, cast('Albuquerque Transmix (50% ULSD + 50% Unl) * 42' as varchar(100)) as BB_Indicator, 'N/A' as pricing_code, 'N/A' as pricing_desc,'Motor Gasolines' as Pricing_Group,'Albuquerque' as Pricing_Location, 'N/A' as Price_Type, 'COMPETITOR' as Price_Source, 'G' as Gross_Net_Status,cast(null as Decimal(15,5))  as Price,((((0.5*a.BB_Price1)+(0.5*b.BB_Price2)))*42)  as BB_Price
from	(select  (Price) as BB_Price1 from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP03610' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date) a,
			(select (Price) as BB_Price2 from  prod_edw_base_views.COMBINED_PRICING where pricing_code='COMP24970' and Price_Source='COMPETITOR' and Price_Eff_Date=:Run_Date) b;
)
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_BBPL_Plats (Run_Date date) as
(
select cast(1.1 as decimal(6, 2)) as sort_ord, cast('Alkylate' as varchar(100)) as RIC_Desc,  cast('(Alkylate/100+.20) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.2)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PGACT00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(2.1 as decimal(6, 2)) as sort_ord,cast( 'Cat Gas' as varchar(100)) as RIC_Desc, cast('(Cat Gas/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price, (((Price/100)+.08)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AARQU00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(3.1 as decimal(6, 2)) as sort_ord, cast('Light Straight Run' as varchar(100)) as RIC_Desc, cast('((Light Straight Run/100)+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AARQU00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(4.1 as decimal(6, 2)) as sort_ord, cast('BSU Feed' as varchar(100)) as RIC_Desc, cast('(BSU Feed/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AARQU00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(5.1 as decimal(6, 2)) as sort_ord, cast('Reformate' as varchar(100)) as RIC_Desc, cast('(Reformate/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AARQU00' and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(6.1 as decimal(6, 2)) sort_ord, cast('CGHT Feed' as varchar(100)) as RIC_Desc, cast('(CGHT Feed/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AARQU00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(7.1 as decimal(6, 2)) as sort_ord, cast('DHT Feed' as varchar(100)) as RIC_Desc, cast('(DHT Feed/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AATGY00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(8.1 as decimal(6, 2)) as sort_ord, cast('Heavy Straight Run Naphtha' as varchar(100)) as RIC_Desc, cast('(Heavy Straight Run Naphtha/100+.2) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.2)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AALPI00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(9.1 as decimal(6, 2)) as sort_ord, cast('JHT Feed' as varchar(100))  as RIC_Desc, cast('(JHT Feed/100-.02) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)-.02)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PJAAP00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(10.1 as decimal(6, 2)) as sort_ord, cast('Olefins' as varchar(100)) as RIC_Desc, cast('(Olefins/100*.85) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)*.85)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PGACU00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(11.1 as decimal(6, 2)) as sort_ord, cast('Sweet Heavy Straight Run' as varchar(100)) as RIC_Desc, cast('(Sweet Heavy Straight Run/100+.20) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.2)*42)  as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AALPI00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(12.1 as decimal(6, 2)) as sort_ord, cast('Rerun Oil' as varchar(100)) as RIC_Desc, cast('Rerun Oil' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PCACJ00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(12.2 as decimal(6, 2)) as sort_ord, cast('Rerun Oil' as varchar(100)) as RIC_Desc, cast('Rerun Oil' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PCACK00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(13.1 as decimal(6, 2)) as sort_ord, cast('Jet A' as varchar(100)) as RIC_Desc, cast('(Jet A/100+.08) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.08)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PJABO00' and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(14.1 as decimal(6, 2)) as sort_ord, cast('JP 8' as varchar(100)) as RIC_Desc, cast('(JP 8/100) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  ((Price/100)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PJAAP00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(15.1 as decimal(6, 2)) as sort_ord, cast('HS Diesel' as varchar(100)) as RIC_Desc, cast('(HS Diesel/100+.06) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.06)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AATGY00' and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(16.1 as decimal(6, 2)) as sort_ord, cast('HS Fuel Oil' as varchar(100)) as RIC_Desc, cast('HS Fuel Oil' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  Price as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PUAFZ00'  and Price_Type='Close'  and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(17.1 as decimal(6, 2)) as sort_ord, cast('Decant/CBO' as varchar(100)) as RIC_Desc, cast('Decant/CBO-4' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (Price-4) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PUAFZ00'  and Price_Type='Close'  and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(18.1 as decimal(6, 2)) as sort_ord, cast( 'Biodiesel' as varchar(100)) as RIC_Desc, cast('(Biodiesel/100-1.00) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)-1)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='AAURS00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date
union
select cast(19.1 as decimal(6, 2)) as sort_ord, cast('Toluene' as varchar(100)) as RIC_Desc, cast('(Toluene/100+.20) * 42' as varchar(100)) as BB_Indicator, pricing_code, pricing_desc,Pricing_Group,Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,Price,  (((Price/100)+.2)*42) as BB_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code='PHAAR00'  and Price_Type='Close' and Price_Source='PLATTS' and Price_Eff_Date=:Run_Date;
)
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_Blend (Begin_Date DATE, End_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
(
-- Final display select
SELECT Ref_Prod_Location AS Location, productdescription AS "Product Description", BlendNumber AS "Blend Number", BlendDate
	,EXTRACT(MONTH FROM Blenddate) AS "Blend Month", NULL AS CAA
	,CAST(TotalVolume AS INTEGER) AS PPLVolume, CAST(TotalVolume AS INTEGER) AS Volume

	,Octane_GA_WV AS "Octane GA WV", RVI_GA_WV AS "RVI GA WV"
	,(Octane_GA_WV*4/100*42) AS "Octane Giveaway"
	,RVI_GA_WV*(((AARQU00-PMAAI00)+((91.5-84)*4))/((60**1.25-AARQURV**1.25)**0.8)/100*42) AS "RVI Giveaway"

	,LCCVolume AS "LCC Volume", WREFVolume AS "WREF Volume", HREFVolume AS "HREF Volume", LREFVolume AS "LREF Volume"
	,LOALKYVolume AS "LOALKY Volume", HYDROBATEVolume AS "HYDROBATE Volume", TOLUENEVolume AS "TOLUENE Volume"
	,OLEFINSVolume AS "OLEFINS Volume", CAST(IsoButaneVolume+NButaneVolume+MButaneVolume AS INTEGER) AS "BUTANE Volume"
	,TRANSFERVolume AS "TRANSFER Volume"

	,RON_Actual AS "RON Actual", RON_Predicted AS "RON Predicted", RON_Actual-RON_Predicted AS "RON Delta"
	,MON_Actual AS "MON Actual", MON_Predicted AS "MON Predicted", MON_Actual-MON_Predicted AS "MON Delta"
	,TVLF_Actual AS "TV/LF Actual", TVLF_Predicted AS "TV/LF Predicted", TVLF_Actual-TVLF_Predicted AS "TV/LF Delta"
	,DI_Actual AS "DI Actual", DI_Predicted AS "DI Predicted", DI_Actual-DI_Predicted AS "DI Delta"
	,Benzene_Actual AS "Benzene Actual", Benzene_Predicted AS "Benzene Predicted", Benzene_Actual-Benzene_Predicted AS "Benzene Delta"
	,Sulfur_Actual AS "Sulfur Actual", Sulfur_Predicted AS "Sulfur Predicted", Sulfur_Actual-Sulfur_Predicted AS "Sulfur Delta"
	,Aromatics_Actual AS "Aromatics Actual", Aromatics_Predicted AS "Aromatics Predicted", Aromatics_Actual-Aromatics_Predicted AS "Aromatics Delta"
	,Olefins_Actual AS "Olefins Actual", Olefins_Predicted AS "Olefins Predicted", Olefins_Actual-Olefins_Predicted AS "Olefins Delta"
	,E200_Actual AS "E200 Actual", E200_Predicted AS "E200 Predicted", E200_Actual-E200_Predicted AS "E200 Delta"
	,E300_Actual AS "E300 Actual", E300_Predicted AS "E300 Predicted", E300_Actual-E300_Predicted AS "E300 Delta"
	,D8610F_Actual AS "D-86 10F Actual", D8610F_Predicted AS "D-86 10F Predicted", D8610F_Actual-D8610F_Predicted AS "D-86 10F Delta"
	,D8650F_Actual AS "D-86 50F Actual", D8650F_Predicted AS "D-86 50F Predicted", D8650F_Actual-D8650F_Predicted AS "D-86 50F Delta"
	,D8690F_Actual AS "D-86 90F Actual", D8690F_Predicted AS "D-86 90F Predicted", D8690F_Actual-D8690F_Predicted AS "D-86 90F Delta"
	,API_Actual AS "API Actual", API_Predicted AS "API Predicted", API_Actual-API_Predicted AS "API Delta"
	,RVP_Actual AS "RVP Actual", RVP_Predicted AS "RVP Predicted", RVP_Actual-RVP_Predicted AS "RVP Delta"
	,RM2_Actual AS "RM2 Actual", RM2_Predicted AS "RM2 Predicted", RM2_Actual-RM2_Predicted AS "RM2 Delta"


FROM prod_edw_base_views.Blend_V5

ORDER BY BlendDate DESC, blendnumber
;);
--------------------------------------------------------------------------------

Replace Macro PROD_EDW_BASE_VIEWS.M_Blend_AZ (Begin_Date date, End_Date date) as
	
	(SELECT 
                tmpBlendData.Blendnum, 
                tmpBlendData.product_desc, 
                tmpBlendData.Blend_AZ_GasType, 
                tmpBlendData.Blend_AZ_FuelGrade, 
                tmpBlendData.Blend_Ship_Date, 
                tmpBlendData.Blend_Submit_Date, 
                tmpBlendData.Blendvol_AZ, 
                tmpBlendData.BlendTOV, 
                tmpBlendData.Component_Name_AZ, 
                tmpBlendData.Component_Value_AZ, 
                tmpBlendData.results_value
                
FROM
                                (SELECT  Blend_AZ.Ref_Prod_Location, Blend_Az.Blendnum, Component_Name_AZ,
                                max(CAST(CAST(date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
                                FROM    prod_edw_base_views.Blend_AZ
                                INNER JOIN Blend
                                        ON Blend_AZ.ref_prod_location=blend.ref_prod_location
                                        AND Blend_AZ.Blendnum = Blend.BlendNum
                                LEFT OUTER JOIN Lab_results
                                        ON Blend_AZ.ref_prod_location = Lab_Results.Ref_Prod_Location
                                        AND Blend_AZ.BlendNum = Lab_Results.Job_Name
                                        AND Blend_AZ.Component_Name_WNRLIMS = Lab_Results.Component_Name
                                where Blend_Ship_Date between :Begin_Date and  :End_Date
                                        AND (substr(product ,character_length(product)-2+1, 2) = '_1'
                                                OR substr(product ,character_length(product)-2+1, 2) is null)
                                Group by Blend_AZ.Ref_Prod_Location, Blend_AZ.BlendNum, Component_Name_AZ) as tmpMaxBlendDateTime
INNER JOIN        
                (SELECT  Blend_AZ.Ref_Prod_Location, Blend_Az.Blendnum, product_desc, Blend_AZ_GasType, Blend_AZ_FuelGrade, Blend_Ship_Date, Blend_Submit_Date, 
                CAST(CAST(date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) as DateTimesampled,
                Blendvol_AZ, BlendTOV, Blend_AZ.Component_Name_AZ,
                                Component_Value_AZ, results_value
                FROM    prod_edw_base_views.Blend_AZ
                INNER JOIN Blend
                        ON Blend_AZ.ref_prod_location=blend.ref_prod_location
                        AND Blend_AZ.Blendnum = Blend.BlendNum
                INNER JOIN Ref_Product
                        ON Blend.ref_prod_location=ref_product.ref_prod_location
                        AND blend.productid=ref_product.product_id
                LEFT OUTER JOIN Lab_results
                        ON Blend_AZ.ref_prod_location = Lab_Results.Ref_Prod_Location
                        AND Blend_AZ.BlendNum = Lab_Results.Job_Name
                        AND Blend_AZ.Component_Name_WNRLIMS = Lab_Results.Component_Name
                where Blend_Ship_Date between :Begin_Date and  :End_Date
                        AND (substr(product ,character_length(product)-2+1, 2) = '_1'
                                OR substr(product ,character_length(product)-2+1, 2) is null)) AS tmpBlendData

                ON tmpMaxBlendDateTime.Ref_Prod_Location = tmpBlendData.Ref_Prod_Location
                AND tmpMaxBlendDateTime.Blendnum = tmpBlendData.Blendnum
                AND (tmpMaxBlendDateTime.MaxDateTimeSampled = tmpBlendData.DateTimeSampled OR tmpBlendData.DateTimeSampled is NULL)
                AND tmpMaxBlendDateTime.Component_Name_AZ = tmpBlendData.Component_Name_AZ

Where tmpBlendData.Component_Name_AZ not in ('ETBE','MTBE','TAME')
Order by tmpBlendData.Ref_Prod_Location, tmpBlendData.Blendnum, tmpBlendData.Component_Name_AZ

;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Blend_Crew (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(
	SELECT tmpBlend_Crew_BBL.Blend_Crew, Blend_Crew_Volume, Blend_Crew_Volume/Shift_Hours_Total AS Blend_BBL_Per_Hour
	FROM
		(
		SELECT Blend_Crew, sum(Blend_Crew_Volume) AS Blend_Crew_Volume
		FROM
			(	
			SELECT	BlendNum, BlendTOV,
				CAST(OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
				CAST(CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
					 
				(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
				 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
			
				(Close_DTS-Open_DTS) day(4) to minute as diff_Shift,		 
				 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift) as Shift_Minutes,  
			
				Shift_Start_DateTime, Shift_End_DateTime
				,Blend_Crew
				,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
				
			FROM	prod_edw_base_views.Blend
			INNER JOIN prod_edw_base_views.Blend_Crew
				ON blend.ref_prod_location = blend_crew.ref_prod_location
				AND Open_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
				AND Close_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
			WHERE Blend.ref_prod_location = :Ref_Prod_Location
			AND BlendDate BETWEEN :Begin_Date AND :End_Date
			
			UNION ALL
			
			SELECT	BlendNum, BlendTOV,
				CAST(  OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
				CAST(  CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
					 
				(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
				 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
			
				(Shift_End_DateTime-Open_DTS) day(4) to minute as diff_Shift,		 
				 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift) as Shift_Minutes,  
			
				Shift_Start_DateTime, Shift_End_DateTime
				,Blend_Crew
				,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
			
			FROM	prod_edw_base_views.Blend
			INNER JOIN prod_edw_base_views.Blend_Crew
				ON blend.ref_prod_location = blend_crew.ref_prod_location
				AND Open_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
				AND Close_DTS > Shift_End_DateTime
			WHERE Blend.ref_prod_location = :Ref_Prod_Location
			AND BlendDate BETWEEN :Begin_Date AND :End_Date
			
			UNION ALL
			
			SELECT	BlendNum, BlendTOV,
				CAST(  OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
				CAST(  CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
					 
				(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
				 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
			
				(Close_DTS - Shift_Start_DateTime) day(4) to minute as diff_Shift,		 
				 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift)+1 as Shift_Minutes,  
			
				Shift_Start_DateTime, Shift_End_DateTime
				,Blend_Crew
				,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
			
			FROM	prod_edw_base_views.Blend
			INNER JOIN prod_edw_base_views.Blend_Crew
				ON blend.ref_prod_location = blend_crew.ref_prod_location
				AND Open_DTS < Shift_Start_DateTime
				AND Close_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
			WHERE Blend.ref_prod_location = :Ref_Prod_Location
			AND BlendDate BETWEEN :Begin_Date AND :End_Date
			
			UNION ALL
			
			SELECT	BlendNum, BlendTOV,
				CAST(  OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
				CAST(  CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
					 
				(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
				 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
			
				(Shift_End_DateTime - Shift_Start_DateTime) day(4) to minute as diff_Shift,		 
				 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift)+1 as Shift_Minutes,  
			
				Shift_Start_DateTime, Shift_End_DateTime
				,Blend_Crew
				,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
			
			FROM	prod_edw_base_views.Blend
			INNER JOIN prod_edw_base_views.Blend_Crew
				ON blend.ref_prod_location = blend_crew.ref_prod_location
				AND Open_DTS < Shift_Start_DateTime
				AND Close_DTS > Shift_End_DateTime
			WHERE Blend.ref_prod_location = :Ref_Prod_Location
			AND BlendDate BETWEEN :Begin_Date AND :End_Date
			)
			AS tmpBlend_Crew
		
		GROUP BY Blend_Crew	
		)
		AS tmpBlend_Crew_BBL
	
	INNER JOIN
		(
		SELECT Blend_Crew, sum(Shift_Hours_Total) AS Shift_Hours_Total
		FROM
			(	
			SELECT Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
					,CASE WHEN Shift_Start_DateTime = Min_Shift_Start_DateTime OR Shift_Start_DateTime = Max_Shift_Start_DateTime THEN 6
					ELSE 12
					END AS Shift_Hours_Total
			FROM
				(
				SELECT Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
					,Shift_Start_Date, Shift_End_Date
				FROM	
					(
					SELECT	Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
						, cast(shift_start_datetime AS date) AS Shift_Start_Date
						, cast(shift_end_datetime AS date) AS Shift_End_Date
					FROM	prod_edw_base_views.Blend_Crew
					)
					AS tmpBlend_Crew1
				WHERE Ref_Prod_Location = :Ref_Prod_Location
				AND Shift_Start_Date BETWEEN :Begin_Date AND :End_Date
				UNION ALL
				SELECT Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
					,Shift_Start_Date, Shift_End_Date
				FROM	
					(
					SELECT	Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
						, cast(shift_start_datetime AS date) AS Shift_Start_Date
						, cast(shift_end_datetime AS date) AS Shift_End_Date
					FROM	prod_edw_base_views.Blend_Crew
					)
					AS tmpBlend_Crew2
				WHERE Ref_Prod_Location = :Ref_Prod_Location
				AND Shift_Start_Date < :Begin_Date
				AND Shift_End_Date =:Begin_Date
				)
				AS tmpBlend_Crew
			
			LEFT OUTER JOIN
				(
				SELECT min(Shift_Start_DateTime) AS Min_Shift_Start_DateTime, max(Shift_Start_DateTime) AS Max_Shift_Start_DateTime
				FROM
					(
					SELECT Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
						,Shift_Start_Date, Shift_End_Date
					FROM	
						(
						SELECT	Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
							, cast(shift_start_datetime AS date) AS Shift_Start_Date
							, cast(shift_end_datetime AS date) AS Shift_End_Date
						FROM	prod_edw_base_views.Blend_Crew
						)
						AS tmpBlend_Crew_MinMax1
					WHERE Ref_Prod_Location = :Ref_Prod_Location
					AND Shift_Start_Date BETWEEN :Begin_Date AND :End_Date
						
					UNION ALL
							
					SELECT Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
						,Shift_Start_Date, Shift_End_Date
					FROM	
						(
						SELECT	Ref_Prod_Location, Blend_Crew, Shift_Start_DateTime, Shift_End_DateTime
							, cast(shift_start_datetime AS date) AS Shift_Start_Date
							, cast(shift_end_datetime AS date) AS Shift_End_Date
						FROM	prod_edw_base_views.Blend_Crew
						)
						AS tmpBlend_Crew_MinMax2
					WHERE Ref_Prod_Location = :Ref_Prod_Location
					AND Shift_Start_Date < :Begin_Date
					AND Shift_End_Date =:Begin_Date
					)
					AS tmpBlend_Crew_MinMax3
				) 
				AS tmpBlend_Crew_MinMax
			
			ON tmpBlend_Crew.Ref_Prod_Location IS NOT NULL
			)
			AS tmpShift_Hours_Total2
		
		GROUP BY Blend_Crew
		)
		AS tmpShift_Hours_Total
	
	ON tmpBlend_Crew_BBL.Blend_Crew = tmpShift_Hours_Total.Blend_Crew
	
	ORDER BY tmpBlend_Crew_BBL.Blend_Crew

;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Blend_Crew_Detail (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(

	SELECT	BlendNum, BlendTOV,
		CAST(OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
		CAST(CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
			 
		(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
		 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
	
		(Close_DTS-Open_DTS) day(4) to minute as diff_Shift,		 
		 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift) as Shift_Minutes,  
	
		Shift_Start_DateTime, Shift_End_DateTime
		,Blend_Crew
		,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
		
	FROM	prod_edw_base_views.Blend
	INNER JOIN prod_edw_base_views.Blend_Crew
		ON blend.ref_prod_location = blend_crew.ref_prod_location
		AND Open_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
		AND Close_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
	WHERE Blend.ref_prod_location = :Ref_Prod_Location
	AND BlendDate BETWEEN :Begin_Date AND :End_Date
	
	UNION ALL
	
	SELECT	BlendNum, BlendTOV,
		CAST(  OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
		CAST(  CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
			 
		(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
		 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
	
		(Shift_End_DateTime-Open_DTS) day(4) to minute as diff_Shift,		 
		 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift) as Shift_Minutes,  
	
		Shift_Start_DateTime, Shift_End_DateTime
		,Blend_Crew
		,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
	
	FROM	prod_edw_base_views.Blend
	INNER JOIN prod_edw_base_views.Blend_Crew
		ON blend.ref_prod_location = blend_crew.ref_prod_location
		AND Open_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
		AND Close_DTS > Shift_End_DateTime
	WHERE Blend.ref_prod_location = :Ref_Prod_Location
	AND BlendDate BETWEEN :Begin_Date AND :End_Date
	
	UNION ALL
	
	SELECT	BlendNum, BlendTOV,
		CAST(  OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
		CAST(  CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
			 
		(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
		 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
	
		(Close_DTS - Shift_Start_DateTime) day(4) to minute as diff_Shift,		 
		 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift)+1 as Shift_Minutes,  
	
		Shift_Start_DateTime, Shift_End_DateTime
		,Blend_Crew
		,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
	
	FROM	prod_edw_base_views.Blend
	INNER JOIN prod_edw_base_views.Blend_Crew
		ON blend.ref_prod_location = blend_crew.ref_prod_location
		AND Open_DTS < Shift_Start_DateTime
		AND Close_DTS BETWEEN Shift_Start_DateTime AND Shift_End_DateTime
	WHERE Blend.ref_prod_location = :Ref_Prod_Location
	AND BlendDate BETWEEN :Begin_Date AND :End_Date
	
	UNION ALL
	
	SELECT	BlendNum, BlendTOV,
		CAST(  OpenGaugeDate AS TIMESTAMP(0)) + (OpenGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Open_DTS,
		CAST(  CloseGaugeDate AS TIMESTAMP(0)) + (CloseGaugeTime - TIME '00:00:00' HOUR TO SECOND) AS Close_DTS,
			 
		(Close_DTS-Open_DTS) day(4) to minute as diff_total,		 
		 Extract(day from diff_total)*24*60+Extract(hour from diff_total)*60+Extract(minute from diff_total) as Total_Minutes,  
	
		(Shift_End_DateTime - Shift_Start_DateTime) day(4) to minute as diff_Shift,		 
		 Extract(day from diff_Shift)*24*60+Extract(hour from diff_Shift)*60+Extract(minute from diff_Shift)+1 as Shift_Minutes,  
	
		Shift_Start_DateTime, Shift_End_DateTime
		,Blend_Crew
		,Cast(BlendTOV*Shift_Minutes/Total_Minutes AS Decimal(10,0)) AS Blend_Crew_Volume
	
	FROM	prod_edw_base_views.Blend
	INNER JOIN prod_edw_base_views.Blend_Crew
		ON blend.ref_prod_location = blend_crew.ref_prod_location
		AND Open_DTS < Shift_Start_DateTime
		AND Close_DTS > Shift_End_DateTime
	WHERE Blend.ref_prod_location = :Ref_Prod_Location
	AND BlendDate BETWEEN :Begin_Date AND :End_Date
	
	ORDER by 1,10
	
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Blend_LabData (Blend1 varchar(20), Ref_Prod_Location varchar(20)) as
	(
	SELECT	Product, Date_Sampled, substr(cast(time_sampled as varchar(15)), 1, 8)  as Time_Sampled,Lab_Results.Component_Name,
					Results_Text as Results, Units
	
	FROM	prod_edw_base_views.LAB_RESULTS
	INNER JOIN
		(
		SELECT CAST(:Blend1 AS varchar(20)) AS BlendNum
		FROM prod_edw_base_views.cur_date
		WHERE cur_date = current_date
		UNION
		SELECT :Blend1||'A' AS BlendNum
		FROM prod_edw_base_views.cur_date
		WHERE cur_date = current_date
		UNION
		SELECT :Blend1||'B' AS BlendNum
		FROM prod_edw_base_views.cur_date
		WHERE cur_date = current_date
		UNION
		SELECT :Blend1||'C' AS BlendNum
		FROM prod_edw_base_views.cur_date
		WHERE cur_date = current_date
		UNION
		SELECT :Blend1||'D' AS BlendNum
		FROM prod_edw_base_views.cur_date
		WHERE cur_date = current_date
		) as tmpReblendNum
	ON Lab_Results.Job_Name = tmpReblendNum.BlendNum
	
	WHERE Lab_Results.ref_prod_location = :Ref_Prod_Location
	AND Lab_Results.SampleStatus in ('C','V','A')

	Order by Date_Sampled desc, Time_Sampled desc, product, component_name

;);
--------------------------------------------------------------------------------

--********************

Replace Macro prod_edw_base_views.M_Blend_Old (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(

SELECT
	tmpTotalAgg.ref_prod_location as Location,
	tmpTotalAgg.product_desc as "Product Description",
	tmpTotalAgg.BlendNumAdj as "Blend Number",
	max(tmpTotalAgg.Blend_Date) as "BlendDate",
	extract(month from Blenddate) as "Blend Month",	
	max(tmpTotalAgg.product) as "CAA",	
	
	/* Subtract total drawoff volume from blend volume to get a final volume */

	max(tmpPPLVol.Volume) as PPLVolume,
	max(tmpPPLVol.Volume) as Volume,
	
	
/*	Bug Fix to deal with reblends in lab sample ids
	(zeroifnull(sum(tmpTotalAgg.Volume))-zeroifnull(max(drawoff))) as Volume,
*/
	/* Components need to calculate RVP and Octane Giveaway */

/*	max(tmpTotalAgg. API) as API, 
	max(tmpTotalAgg.RM2) as "R+M/2",
	("R+M/2" - max(Blend_Octane_Diff.Octane)) as CalcOctane,	
	CASE WHEN CalcOctane > 0 THEN (CalcOctane*CalcVolume)
		ELSE 0
	END as "CalcOctaneGAWV",
*/		
	CASE WHEN (max(tmpTotalAgg.RM2)-max(Blend_Octane_Diff.Octane)) > 0 THEN ((max(tmpTotalAgg.RM2)-max(Blend_Octane_Diff.Octane))*(zeroifnull(sum(tmpTotalAgg.Volume))-zeroifnull(max(drawoff))))
		ELSE 0
	END as "Octane GA WV",
		
/*	max(tmpTotalAgg.LabRVP) as "CalcLabRVP", 	
	max(RVP_Spec) - "CalcLabRVP" as CalcRVP,	
	CASE WHEN CalcRVP > 0 THEN	(CalcRVP**1.2) 
		ELSE 0
	END as CalcRVI,
	(CalcRVI*CalcVolume) as CalcRVIGAWV,*/

	CASE WHEN (max(RVP_Spec)-max(tmpTotalAgg.LabRVP))>0 Then (((max(RVP_Spec)-max(tmpTotalAgg.LabRVP))**1.2) *(zeroifnull(sum(tmpTotalAgg.Volume))-zeroifnull(max(drawoff))))
		ELSE 0
	END as "RVI GA WV",
	
/*	max(AARQU00) as CalcAARQU00,
	max(AARQURV) as CalcAARQURV,
	max(PMAAI00) as CalcPMAAI00,
	((CalcAARQU00-CalcPMAAI00)+((91.5-84)*4))/((60**1.25-CalcAARQURV**1.25)**0.8) as RVPPriceFactor_CentGal,
	(RVPPriceFactor_CentGal/100*42) as RVPPriceFactor_DollarBBL,
	CalcRVIGAWV*RVPPriceFactor_DollarBBL as RVIGiveaway,
*/	
	("Octane GA WV"*4/100*42) as "Octane Giveaway",
	"RVI GA WV"*(((max(AARQU00)-max(PMAAI00))+((91.5-84)*4))/((60**1.25-max(AARQURV)**1.25)**0.8)/100*42) as "RVI Giveaway",
	
	/* Subtract total drawoff volume from blend volume to get a final volume for each component */

	sum(tmpTotalAgg.LCCVOL)-max(tmpDrawoff.LCCVOL) as "LCC Volume", 
	sum(tmpTotalAgg.WREFVOL)-max(tmpDrawoff.WREFVOL) as "WREF Volume", 
	sum(tmpTotalAgg.HREFVOL)-max(tmpDrawOff.HREFVOL) as "HREF Volume", 
	sum(tmpTotalAgg.LREFVOL)-max(tmpDrawOff.LREFVOL) as "LREF Volume", 
	sum(tmpTotalAgg.LOALKYVOL)-max(tmpDrawOff.LOALKYVOL) as "LOALKY Volume",	
	sum(tmpTotalAgg.HYDROBATEVOL)-max(tmpDrawOff.HYDROBATEVOL) as "HYDROBATE Volume", 
	sum(tmpTotalAgg.TOLUENEVOL)-max(tmpDrawOff.TOLUENEVOL) as "TOLUENE Volume", 
	sum(tmpTotalAgg.OLEFINSVOL)-max(tmpDrawOff.OLEFINSVOL) as "OLEFINS Volume", 
	sum(tmpTotalAgg.BUTANEVOL)-max(tmpDrawOff.BUTANEVOL) as "BUTANE Volume",
	sum(tmpTotalAgg.TRANSFERVOL)-max(tmpDrawOff.TRANSFERVOL) as "TRANSFER Volume",
		
	/* Actual and Predicted lab values */
	/* Calculate Deltas between Actual and Predicted */

	max(tmpTotalAgg.RON) as "RON Actual", max(tmpTotalAgg.RON_PRED) as "RON Predicted", "RON Predicted"-"RON Actual" as "RON Delta",
	max(tmpTotalAgg.MON) as "MON Actual", max(tmpTotalAgg.MON_PRED) as "MON Predicted", "MON Predicted"-"MON Actual" as "MON Delta",
	max(tmpTotalAgg.TVLF) as "TV/LF Actual", max(tmpTotalAgg.TVLF_PRED) as "TV/LF Predicted", "TV/LF Predicted"-"TV/LF Actual" as "TV/LF Delta",
	max(tmpTotalAgg.DI) as "DI Actual",  max(tmpTotalAgg.DI_PRED) as "DI Predicted", "DI Predicted"-"DI Actual" as "DI Delta",
	max(tmpTotalAgg.Benzene) as "Benzene Actual", max(tmpTotalAgg.Benzene_PRED) as "Benzene Predicted", "Benzene Predicted"-"Benzene Actual" as "Benzene Delta",
	max(tmpTotalAgg.Sulfur) as "Sulfur Actual", max(tmpTotalAgg.Sulfur_PRED) as "Sulfur Predicted", "Sulfur Predicted"-"Sulfur Actual" as "Sulfur Delta",
	max(tmpTotalAgg.Aromatics) as "Aromatics Actual", max(tmpTotalAgg.Aromatics_PRED) as "Aromatics Predicted", "Aromatics Predicted"-"Aromatics Actual" as "Aromatics Delta",
	max(tmpTotalAgg.Olefins) as "Olefins Actual",max(tmpTotalAgg.Olefins_PRED) as "Olefins Predicted", "Olefins Predicted"-"Olefins Actual" as "Olefins Delta",
	max(tmpTotalAgg.E200) as "E200 Actual",max(tmpTotalAgg.E200_PRED) as "E200 Predicted", "E200 Predicted"-"E200 Actual" as "E200 Delta",
	max(tmpTotalAgg.E300) as "E300 Actual", max(tmpTotalAgg.E300_PRED) as "E300 Predicted", "E300 Predicted"-"E300 Actual" as "E300 Delta",
	max(tmpTotalAgg.D8610F) as "D-86 10F Actual", max(tmpTotalAgg.D8610F_PRED) as "D-86 10F Predicted", "D-86 10F Predicted"-"D-86 10F Actual" as "D-86 10F Delta",
	max(tmpTotalAgg.D8650F) as "D-86 50F Actual", max(tmpTotalAgg.D8650F_PRED) as "D-86 50F Predicted", "D-86 50F Predicted"-"D-86 50F Actual" as "D-86 50F Delta",
	max(tmpTotalAgg.D8690F) as "D-86 90F Actual", max(tmpTotalAgg.D8690F_PRED) as "D-86 90F Predicted", "D-86 90F Predicted"-"D-86 90F Actual" as "D-86 90F Delta",
	max(tmpTotalAgg.API) as "API Actual", max(tmpTotalAgg.API_PRED) as "API Predicted", "API Predicted"-"API Actual" as "API Delta",
	max(tmpTotalAgg.LabRVP) as "RVP Actual", max(tmpTotalAgg.LabRVP_PRED) as "RVP Predicted", "RVP Predicted"-"RVP Actual" as "RVP Delta",
	max(tmpTotalAgg.RM2) as "RM2 Actual", max(tmpTotalAgg.RM2_PRED) as "RM2 Predicted", "RM2 Predicted"-"RM2 Actual" as "RM2 Delta"
		
FROM
	(SELECT 
		tmpTotal.ref_prod_location,tmpTotal.product_desc,tmpTotal.BlendDate as Blend_Date,tmpTotal.BlendNum,

		/* CASE statement and grouping combines blends and reblends into a single record */

		CASE WHEN substring(tmpTotal.Blendnum from character_length(tmpTotal.Blendnum) for character_length(tmpTotal.Blendnum)) in ('A' ,'B','C')
			THEN substring(tmpTotal.Blendnum from 1 for character_length(tmpTotal.Blendnum)-1)
			ELSE tmpTotal.BlendNum
		END AS BlendNumAdj,
		tmpTotal.Product,max(tmpTotal.ActualVolume) as Volume,	tmpTotal.Tank,
		
		max(tmpTotal.API) as API, max(tmpTotal.API_PRED) as API_PRED,
		max(tmpTotal.RVP) as LabRVP, max(tmpTotal.RVP_PRED) as LabRVP_PRED,
		max(tmpTotal.RM2) as RM2, max(tmpTotal.RM2_PRED) as RM2_PRED,
		max(tmpTotal.RON) as RON, max(tmpTotal.RON_PRED) as RON_PRED,
		max(tmpTotal.MON) as MON, max(tmpTotal.MON_PRED) as MON_PRED,
		max(tmpTotal.TVLF) as TVLF, max(tmpTotal.TVLF_PRED) as TVLF_PRED,
		max(tmpTotal.DI) as DI, max(tmpTotal.DI_PRED) as DI_PRED,
		max(tmpTotal.Benzene) as Benzene, max(tmpTotal.Benzene_PRED) as Benzene_PRED,
		max(tmpTotal.Sulfur) as Sulfur, max(tmpTotal.Sulfur_PRED) as Sulfur_PRED,
		max(tmpTotal.Aromatics) as Aromatics, max(tmpTotal.Aromatics_PRED) as Aromatics_PRED,
		max(tmpTotal.Olefins) as Olefins, max(tmpTotal.Olefins_PRED) as Olefins_PRED,
		max(tmpTotal.E200) as E200, max(tmpTotal.E200_PRED) as E200_PRED,
		max(tmpTotal.E300) as E300, max(tmpTotal.E300_PRED) as E300_PRED,
		max(tmpTotal.D8610F) as D8610F, max(tmpTotal.D8610F_PRED) as D8610F_PRED,
		max(tmpTotal.D8650F) as D8650F, max(tmpTotal.D8650F_PRED) as D8650F_PRED,
		max(tmpTotal.D8690F) as D8690F, max(tmpTotal.D8690F_PRED) as D8690F_PRED,
	
		max(tmpComponentVolumes.LCC) as "LCCVOL", max(tmpComponentVolumes.WREF) as "WREFVOL", max(tmpComponentVolumes.HREF) as "HREFVOL", 
		max(tmpComponentVolumes.LREF) as "LREFVOL", max(tmpComponentVolumes.LOALKY) as "LOALKYVOL",	max(tmpComponentVolumes.HYDROBATE) as "HYDROBATEVOL", 
		max(tmpComponentVolumes.TOLUENE) as "TOLUENEVOL", max(tmpComponentVolumes.OLEFINS) as "OLEFINSVOL", max(tmpComponentVolumes.BUTANE) as "BUTANEVOL",
		max(tmpComponentVolumes.TRANSFER) as "TRANSFERVOL"
					
	FROM 
		(SELECT 

			/* Pivot records to columns to enable calculations */

			Ref_Product.Ref_prod_location, Blend.BlendNum, BlendDate, product_desc, tmpLabResults.Tank, tmpLabResults.Component_Name,
			substring(tmpLabResults.Product from 1 for 8) as Product,
			CASE WHEN Component_Name = 'Gravity_Average' THEN max(results_value) END as "API",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN max(results_value) END as "RM2",
			CASE WHEN Component_Name = 'RVP_Average' THEN max(results_value) END as "RVP",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN max(results_value) END as "RON",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN max(results_value) END as "MON",
			CASE WHEN Component_Name = 'VL_Ratio' THEN max(results_value) END as "TVLF",
			CASE WHEN Component_Name = 'Drivability_Index' THEN max(results_value) END as "DI",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN max(results_value) END as "Benzene",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN max(results_value) END as "Sulfur",
			CASE WHEN Component_Name = 'Aromatics_D5769' THEN max(results_value) END as "Aromatics",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN max(results_value) END as "Olefins",
			CASE WHEN Component_Name = 'E200' THEN max(results_value) END as "E200",
			CASE WHEN Component_Name = 'E300' THEN max(results_value) END as "E300",
			CASE WHEN Component_Name = '10%' THEN max(results_value) END as "D8610F",
			CASE WHEN Component_Name = '50%' THEN max(results_value) END as "D8650F",
			CASE WHEN Component_Name = '90%' THEN max(results_value) END as "D8690F",
			
			CASE WHEN Component_Name = 'Gravity_Average' THEN CAST(max(predicted_value) as Decimal(10,1)) END as "API_PRED",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST(max(predicted_value) as Decimal(10,1)) END as "RM2_PRED",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(max(predicted_value) as Decimal(10,1)) END as "RVP_PRED",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST(max(Predicted_Value) as Decimal(10,1)) END as "RON_PRED",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST(max(Predicted_Value) as Decimal(10,1)) END as "MON_PRED",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST(max(Predicted_Value) as Decimal(10,1)) END as "TVLF_PRED",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST(max(Predicted_Value) as Decimal(10,1)) END as "DI_PRED",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "Benzene_PRED",
			CASE WHEN Component_Name= 'Sulfur_ppm' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "Sulfur_PRED",
			CASE WHEN Component_Name = 'Aromatics_D5769' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "Aromatics_PRED",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "Olefins_PRED",
			CASE WHEN Component_Name = 'E200' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "E200_PRED",
			CASE WHEN Component_Name = 'E300' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "E300_PRED",
			CASE WHEN Component_Name = '10%' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "D8610F_PRED",
			CASE WHEN Component_Name = '50%' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "D8650F_PRED",
			CASE WHEN Component_Name = '90%' THEN CAST(max(Predicted_Value) as Decimal(10,1))END as "D8690F_PRED",
			
			sum(actualvolume) as ActualVolume
		FROM    prod_edw_base_views.BLEND
		
		INNER JOIN

			/* This select will retrieve and provide an adjusted blend number to the lab_results
			select to resolve the issue of blends and reblends being split across the start date of the query */

			(SELECT Ref_Prod_Location, Blendnum,
			CASE WHEN substring(Blendnum from character_length(Blendnum) for character_length(Blendnum)) in ('A' ,'B','C')
				THEN substring(Blendnum from 1 for character_length(Blendnum)-1)
				ELSE BlendNum
			END AS BlendNumAdj
			FROM prod_edw_base_views.BLEND) as tmpBlendNumAdj
			ON blend.ref_prod_location = tmpBlendNumAdj.ref_prod_location
				AND blend.Blendnum = tmpBlendNumAdj.BlendNum		
		
		INNER JOIN prod_edw_base_views.ref_product
			ON Ref_Product.Product_ID = Blend.ProductID
				AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
		LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
			ON Blend.blendid = blendrecipe.blendid
				AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
		LEFT OUTER JOIN
			(
			SELECT	Lab_Results.Ref_prod_location, Tank
				,CASE WHEN substring(Lab_Results.Job_Name from character_length(Lab_Results.Job_Name) for character_length(Lab_Results.Job_Name)) in ('A' ,'B','C')
					THEN substring(Lab_Results.Job_Name from 1 for character_length(Lab_Results.Job_Name)-1)
					ELSE Lab_Results.Job_Name
				END AS Job_Name
				,Lab_Results.Test_Number, Lab_Results.Component_Name,
				Lab_Results.Product, Results_Value, Units
			FROM	prod_edw_base_views.LAB_RESULTS
			INNER JOIN 

				/* Select of Actual lab results from LIMS data */
				(
				SELECT ref_prod_location
					,CASE WHEN substring(Lab_Results.Job_Name from character_length(Lab_Results.Job_Name) for character_length(Lab_Results.Job_Name)) in ('A' ,'B','C')
						THEN substring(Lab_Results.Job_Name from 1 for character_length(Lab_Results.Job_Name)-1)
						ELSE Lab_Results.Job_Name
					END AS Job_Name
					,component_name, max(test_number) as test_number
				FROM prod_edw_base_views.LAB_RESULTS
					
				/* Include only lab samples with a sample status of Complete, Available or Authorized */					
				WHERE Lab_Results.SampleStatus in ('C','V','A')
					
				/* Include only lab samples from Clear tests */					
				AND substring(lab_results.product from character_length(lab_results.product)-1 for 1) <> '_'
				AND substring(lab_results.product from character_length(lab_results.product)-2 for 1) <> '_'
				GROUP BY ref_prod_location, job_name, component_name
				) as tmpRecentTest
				
			ON Lab_Results.ref_prod_location = tmpRecentTest.ref_prod_location
				AND (Lab_Results.job_name = tmpRecentTest.job_name
					OR Lab_Results.job_name = tmpRecentTest.job_name||'A'
					OR Lab_Results.job_name = tmpRecentTest.job_name||'B'
					OR Lab_Results.job_name = tmpRecentTest.job_name||'C')
				AND Lab_Results.component_name = tmpRecentTest.component_name
				AND Lab_Results.test_number = tmpRecentTest.test_number
			WHERE Lab_Results.component_name in 
				('gravity_average','rvp_average','Road_Octane_(R+M)/2',
				'Research_Octane_D2699','Motor_Octane_D2700','Road_Octane_(R+M)/2','RVP_Average',
				'VL_Ratio','Drivability_Index','Benzene_%vol','Sulfur_ppm','Aromatics_D5769','FIA_Olefins',
				'E200','E300','10%','50%','90%')
			) as tmpLabResults

		ON tmpLabResults.ref_prod_location = blend.ref_prod_location
			AND tmpLabResults.job_name = tmpBlendNumAdj.BlendNumAdj

		/* Join actual lab results to Blend_PredictedValue to get predicted lab results */
		/* Pull only the lab data for the the highest reblend */

		LEFT OUTER JOIN 
			(SELECT Blend_PredictedValue.ref_prod_location, 
			CASE WHEN substring(Blend_number from character_length(Blend_number) for character_length(Blend_number)) in ('A' ,'B','C')
				THEN substring(Blend_number from 1 for character_length(Blend_number)-1)
				ELSE Blend_Number
			END AS BlendNumAdj,
			blend_number, Component_Name_LIMS, Predicted_Value
			FROM prod_edw_base_views.Blend_PredictedValue
			INNER JOIN
			    (SELECT ref_prod_location,	
				CASE WHEN substring(Blend_number from character_length(Blend_number) for character_length(Blend_number)) in ('A' ,'B','C')
							THEN substring(Blend_number from 1 for character_length(Blend_number)-1)
							ELSE Blend_Number
				END AS BlendNumAdj,
				max(Blend_Number) as MaxBlendNumber
				FROM	prod_edw_base_views.Blend_PredictedValue
				Group by ref_prod_location, blendnumadj) as tmpBlend_PredictedValue1
			ON Blend_PredictedValue.ref_prod_location = tmpBlend_PredictedValue1.Ref_Prod_Location
				AND Blend_PredictedValue.Blend_Number = tmpBlend_PredictedValue1.MaxBlendNumber
			WHERE Blend_PredictedValue.Blend_Type = 'Neat') as tmpBlend_PredictedValue
		ON tmpLabResults.ref_prod_location = tmpBlend_PredictedValue.ref_prod_location
			AND tmpLabResults.job_name = tmpBlend_PredictedValue.BlendNumAdj
			AND tmpLabResults.component_name = tmpBlend_PredictedValue.Component_Name_LIMS
	GROUP BY ref_product.ref_prod_location, Blend.BlendNum, BlendDate, blend.ProductID, product_desc, tmpLabResults.Tank, 
			tmpLabResults.Component_Name, tmpLabResults.Product) as tmpTotal
	LEFT OUTER JOIN
		(SELECT
				/* Combine pivoted data for component volumes not including drawoffs */

				ref_prod_location, BlendNum, zeroifnull(LCC) as "LCC", zeroifnull(WREF) as "WREF", 
				zeroifnull(HREF) as "HREF", zeroifnull(LREF) as "LREF", zeroifnull(LOALKY) as "LOALKY", 
				zeroifnull(HYDROBATE) as "HYDROBATE", zeroifnull(TOLUENE) as "TOLUENE",
				zeroifnull(OLEFINS) as "OLEFINS",
				(zeroifnull(IsoButane)+zeroifnull(NormalButane)+zeroifnull(MixedButane)) as "BUTANE",
				(zeroifnull(TRANS1)+zeroifnull(TRANS2)+zeroifnull(TRANS3)+zeroifnull(TRANS4)+
				zeroifnull(TRANS5)+zeroifnull(TRANS6)+zeroifnull(TRANS7)+zeroifnull(TRANS8)+
				zeroifnull(TRANS9)+zeroifnull(TRANS10)+zeroifnull(TRANS11)+zeroifnull(TRANS12)) as "TRANSFER"
		FROM
			(SELECT
				ref_prod_location, BlendNum, 
				sum(LCC) as "LCC", sum(IsoButane) as "IsoButane", sum(NormalButane) as "NormalButane", 
				sum(MixedButane) as "MixedButane", sum(WREF) as "WREF", sum(HREF) as "HREF", 
				sum(LREF) as "LREF", sum(LOALKY) as "LOALKY", sum(HYDROBATE) as "HYDROBATE",
				sum(TOLUENE) as "TOLUENE", sum(OLEFINS) as "OLEFINS", sum(TRANS1) as "TRANS1",
				sum(TRANS2) as "TRANS2", sum(TRANS3) as "TRANS3", sum(TRANS4) as "TRANS4", 
				sum(TRANS5) as "TRANS5", sum(TRANS6) as "TRANS6", sum(TRANS7) as "TRANS7",
				sum(TRANS8) as "TRANS8", sum(TRANS9) as "TRANS9", sum(TRANS10) as "TRANS10", 
				sum(TRANS11) as "TRANS11", sum(TRANS12) as "TRANS12"
			FROM		
				(SELECT
					ref_prod_location, BlendNum,
					CASE WHEN FeedProduct = 'Cat Gasoline' THEN volume END as "LCC",
					CASE WHEN FeedProduct = 'Iso Butane' THEN volume END as "IsoButane",
					CASE WHEN FeedProduct = 'Normal Butane' THEN volume END as "NormalButane",
					CASE WHEN FeedProduct = 'Mixed Butane' THEN volume END as "MixedButane",
					CASE WHEN FeedProduct = 'Reformate' THEN volume END as "WREF",
					CASE WHEN FeedProduct = 'Heavy Reformate' THEN volume END as "HREF",
					CASE WHEN FeedProduct = 'Light Reformate' THEN volume END as "LREF",
					CASE WHEN FeedProduct = 'Alkylate' THEN volume END as "LOALKY",
					CASE WHEN FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN volume END as "HYDROBATE",
					CASE WHEN FeedProduct = 'Toluene' THEN volume END as "TOLUENE",
					CASE WHEN FeedProduct = 'Olefins' THEN volume END as "OLEFINS",
					CASE WHEN FeedProduct = 'Albuquerque Sub Unleaded' THEN volume END as "TRANS1",
					CASE WHEN FeedProduct = 'CBG Premium' THEN volume END as "TRANS2",
					CASE WHEN FeedProduct = 'CBG Unlead' THEN volume END as "TRANS3",
					CASE WHEN FeedProduct = 'Conv Premium' THEN volume END as "TRANS4",
					CASE WHEN FeedProduct = 'Conv Unlead' THEN volume END as "TRANS5",
					CASE WHEN FeedProduct = 'Pemex Premium' THEN volume END as "TRANS6",
					CASE WHEN FeedProduct = 'Pemex Unleaded' THEN volume END as "TRANS7",
					CASE WHEN FeedProduct = 'Tucson Subgrade Unleaded' THEN volume END as "TRANS8",
					CASE WHEN FeedProduct = 'BSU Feed' THEN volume END as "TRANS9",
					CASE WHEN FeedProduct = 'Albuquerque Sub Premium Unleaded' THEN volume END as "TRANS10",
					CASE WHEN FeedProduct = 'Tucson Sub Premium Unleaded' THEN volume END as "TRANS11",
					CASE WHEN FeedProduct = 'Light Straight Run' THEN volume END as "TRANS12"
					
				FROM

					/* Allocate volumes per blend recipe */

					(SELECT 
					Blend.ref_prod_location,
					Blend.BlendNum, 
					Feedproduct, 
					sum(actualvolume) as Volume
							FROM    prod_edw_base_views.BLEND
						INNER JOIN prod_edw_base_views.ref_product
							ON Ref_Product.Product_ID = Blend.ProductID
								AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
						LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
							ON Blend.blendid = blendrecipe.blendid
								AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
						LEFT OUTER JOIN 
								(Select ref_prod_location, product_id, product_desc as FeedProduct
									From prod_edw_base_views.ref_product) as tmpFeedProduct
							ON Blendrecipe.productid = tmpFeedProduct.product_id
								AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
					GROUP BY 1,2,3) as tmpComponentVolumes1
				) as tmpComponentVolumes2
			GROUP BY 1,2
			) as tmpComponentVolumes3
	) as tmpComponentVolumes
	ON
		tmpTotal.ref_prod_location = tmpComponentVolumes.ref_prod_location
		AND tmpTotal.blendnum = tmpComponentVolumes.blendnum
	GROUP BY tmpTotal.Ref_Prod_Location,tmpTotal.Product_Desc, tmpTotal.BlendDate, tmpTotal.Blendnum,tmpTotal.Tank,
		tmpTotal.Product) as tmpTotalAgg
LEFT OUTER JOIN
	(SELECT
		ref_prod_location, tankid, blendnumadj, DrawOff,
		zeroifnull(LCC) as "LCCVOL", zeroifnull(WREF) as "WREFVOL", 
		zeroifnull(HREF) as "HREFVOL", zeroifnull(LREF) as "LREFVOL", zeroifnull(LOALKY) as "LOALKYVOL", 
		zeroifnull(HYDROBATE) as "HYDROBATEVOL", zeroifnull(TOLUENE) as "TOLUENEVOL",
		zeroifnull(OLEFINS) as "OLEFINSVOL",
		(zeroifnull(IsoButane)+zeroifnull(NormalButane)+zeroifnull(MixedButane)) as "BUTANEVOL",
		(zeroifnull(TRANS1)+zeroifnull(TRANS2)+zeroifnull(TRANS3)+zeroifnull(TRANS4)+
		zeroifnull(TRANS5)+zeroifnull(TRANS6)+zeroifnull(TRANS7)+zeroifnull(TRANS8)+
		zeroifnull(TRANS9)+zeroifnull(TRANS10)+zeroifnull(TRANS11)+zeroifnull(TRANS12)) as "TRANSFERVOL"
	FROM
		(SELECT
			ref_prod_location, tankid, blendnumadj, min(DrawOff) as "DrawOff",
			sum(LCC) as "LCC", sum(IsoButane) as "IsoButane", sum(NormalButane) as "NormalButane", 
			sum(MixedButane) as "MixedButane", sum(WREF) as "WREF", sum(HREF) as "HREF", 
			sum(LREF) as "LREF", sum(LOALKY) as "LOALKY", sum(HYDROBATE) as "HYDROBATE",
			sum(TOLUENE) as "TOLUENE", sum(OLEFINS) as "OLEFINS", sum(TRANS1) as "TRANS1",
			sum(TRANS2) as "TRANS2", sum(TRANS3) as "TRANS3", sum(TRANS4) as "TRANS4", 
			sum(TRANS5) as "TRANS5", sum(TRANS6) as "TRANS6", sum(TRANS7) as "TRANS7",
			sum(TRANS8) as "TRANS8", sum(TRANS9) as "TRANS9", sum(TRANS10) as "TRANS10", 
			sum(TRANS11) as "TRANS11", sum(TRANS12) as "TRANS12"
		FROM
			
			/* Combine blend, blend recipe and movement data to get component drawoff volumes */			

			(SELECT tmpBlendDate.ref_prod_location, tmpBlendDate.tankid, blendnumadj, sum(volume_estimated) as Drawoff, product_desc as "FeedProduct", recipepercent,
				CASE WHEN FeedProduct = 'Cat Gasoline' THEN (drawoff*recipepercent/100) END as "LCC",
				CASE WHEN FeedProduct = 'Iso Butane' THEN (drawoff*recipepercent/100) END as "IsoButane",
				CASE WHEN FeedProduct = 'Normal Butane' THEN (drawoff*recipepercent/100) END as "NormalButane",
				CASE WHEN FeedProduct = 'Mixed Butane' THEN (drawoff*recipepercent/100) END as "MixedButane",
				CASE WHEN FeedProduct = 'Reformate' THEN (drawoff*recipepercent/100) END as "WREF",
				CASE WHEN FeedProduct = 'Heavy Reformate' THEN (drawoff*recipepercent/100) END as "HREF",
				CASE WHEN FeedProduct = 'Light Reformate' THEN (drawoff*recipepercent/100) END as "LREF",
				CASE WHEN FeedProduct = 'Alkylate' THEN (drawoff*recipepercent/100) END as "LOALKY",
				CASE WHEN FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN (drawoff*recipepercent/100) END as "HYDROBATE",
				CASE WHEN FeedProduct = 'Toluene' THEN (drawoff*recipepercent/100) END as "TOLUENE",
				CASE WHEN FeedProduct = 'Olefins' THEN (drawoff*recipepercent/100) END as "OLEFINS",
				CASE WHEN FeedProduct = 'Albuquerque Sub Unleaded' THEN (drawoff*recipepercent/100) END as "TRANS1",
				CASE WHEN FeedProduct = 'CBG Premium' THEN (drawoff*recipepercent/100) END as "TRANS2",
				CASE WHEN FeedProduct = 'CBG Unlead' THEN (drawoff*recipepercent/100) END as "TRANS3",
				CASE WHEN FeedProduct = 'Conv Premium' THEN (drawoff*recipepercent/100) END as "TRANS4",
				CASE WHEN FeedProduct = 'Conv Unlead' THEN (drawoff*recipepercent/100) END as "TRANS5",
				CASE WHEN FeedProduct = 'Pemex Premium' THEN (drawoff*recipepercent/100) END as "TRANS6",
				CASE WHEN FeedProduct = 'Pemex Unleaded' THEN (drawoff*recipepercent/100) END as "TRANS7",
				CASE WHEN FeedProduct = 'Tucson Subgrade Unleaded' THEN (drawoff*recipepercent/100) END as "TRANS8",
				CASE WHEN FeedProduct = 'BSU Feed' THEN (drawoff*recipepercent/100) END as "TRANS9",
				CASE WHEN FeedProduct = 'Albuquerque Sub Premium Unleaded' THEN (drawoff*recipepercent/100) END as "TRANS10",
				CASE WHEN FeedProduct = 'Tucson Sub Premium Unleaded' THEN (drawoff*recipepercent/100) END as "TRANS11",
				CASE WHEN FeedProduct = 'Light Straight Run' THEN (drawoff*recipepercent/100) END as "TRANS12"
				From

					/* Following SQL finds and includes all reblends */			

					(SELECT ref_prod_location,tankid, min(blendid) as "BlendId",
						CASE WHEN substring(Blendnum from character_length(Blendnum) for character_length(Blendnum)) in ('A' ,'B','C')
							THEN substring(Blendnum from 1 for character_length(Blendnum)-1)
							ELSE BlendNum
						END AS BlendNumAdj,
						BlendNumAdj || 'A' as BlendNumA, BlendNumAdj || 'B' as BlendNumB,BlendNumAdj || 'C' as BlendNumC,
						min(cast(OpenGaugeDate as TimeStamp(6))+((OpenGaugeTime - time '00:00:00') hour to second(6)))  as MinDate,
						max(cast(CloseGaugeDate as TimeStamp(6))+((CloseGaugeTime - time '00:00:00') hour to second(6)))  as MaxDate
					FROM prod_edw_base_views.Blend
					GROUP BY blendnumadj, BlendnumA,BlendnumB, BlendnumC,tankid, ref_prod_location) as tmpBlendDate
				Left Outer Join prod_edw_base_views.movement
				ON movement.ref_prod_location = tmpBlendDate.ref_prod_location
					AND movement.source_id = tmpBlendDate.tankid
					AND movement.movement_start_dttm between minDate and MaxDate

					/* Omit any movements to tank 607 */
					AND movement.destination_ID not in (607)
					
					/* Omit any movements that are not transfers where ticket number is not null */
					AND movement.ticket_number is null
					
				LEFT OUTER JOIN prod_edw_base_views.BlendRecipe
				ON tmpBlendDate.BlendId = BlendRecipe.BlendId
					AND tmpBlendDate.ref_prod_location = BlendRecipe.ref_prod_location
				LEFT OUTER JOIN prod_edw_base_views.ref_product
				ON BlendRecipe.ref_prod_location = ref_product.ref_prod_location
					AND BlendRecipe.productid = ref_product.product_id
				GROUP BY tmpBlendDate.ref_prod_location, tmpBlendDate.tankid, blendnumadj, product_desc, recipepercent) as tmpDrawOff1
		GROUP by 1,2,3) as tmpDrawOff2
	) as tmpDrawoff
ON tmpTotalAgg.ref_prod_location = tmpDrawoff.ref_prod_location
	AND tmpTotalAgg.BlendNumAdj = tmpDrawoff.blendnumadj

/*Calculate volumes direct from PPL for compare to lab calculate volumes*/

INNER JOIN
	(SELECT
	tmpTotalAgg.ref_prod_location,
	tmpTotalAgg.BlendNumAdj as BlendNum,
	(zeroifnull(sum(tmpTotalAgg.Volume))-zeroifnull(max(drawoff))) as Volume
	FROM
		(SELECT 
			tmpTotal.ref_prod_location,tmpTotal.BlendNum,
			CASE WHEN substring(tmpTotal.Blendnum from character_length(tmpTotal.Blendnum) for character_length(tmpTotal.Blendnum)) in ('A' ,'B','C')
				THEN substring(tmpTotal.Blendnum from 1 for character_length(tmpTotal.Blendnum)-1)
				ELSE tmpTotal.BlendNum
				END AS BlendNumAdj,
			max(tmpTotal.ActualVolume) as Volume
			FROM 
				(SELECT Ref_Product.Ref_prod_location, BlendNum, sum(actualvolume) as ActualVolume
				FROM    prod_edw_base_views.BLEND
				INNER JOIN prod_edw_base_views.ref_product
					ON Ref_Product.Product_ID = Blend.ProductID
						AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
				LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
					ON Blend.blendid = blendrecipe.blendid
						AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
				GROUP BY ref_product.ref_prod_location, BlendNum, blend.ProductID, product_desc) as tmpTotal
			GROUP BY tmpTotal.Ref_Prod_Location,tmpTotal.Blendnum) as tmpTotalAgg
		LEFT OUTER JOIN
			(Select tmpBlendDate.ref_prod_location, tmpBlendDate.tankid, blendnumadj, sum(volume_estimated) as Drawoff
			From
				(SELECT ref_prod_location,tankid, 
					CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
						THEN substr(Blendnum,1, character_length(Blendnum)-1)
						ELSE BlendNum
						END AS BlendNumAdj,
						BlendNumAdj || 'A' as BlendNumA, BlendNumAdj || 'B' as BlendNumB,BlendNumAdj || 'C' as BlendNumC,
						min(cast(OpenGaugeDate as TimeStamp(6))+((OpenGaugeTime - time '00:00:00') hour to second(6)))  as MinDate,
						max(cast(CloseGaugeDate as TimeStamp(6))+((CloseGaugeTime - time '00:00:00') hour to second(6)))  as MaxDate
					FROM prod_edw_base_views.Blend
					GROUP BY blendnumadj, BlendnumA,BlendnumB, BlendnumC,tankid, ref_prod_location) as tmpBlendDate
			Left Outer Join prod_edw_base_views.movement
			ON movement.ref_prod_location = tmpBlendDate.ref_prod_location
			AND movement.source_id = tmpBlendDate.tankid
			AND movement.movement_start_dttm between minDate and MaxDate
			AND movement.destination_ID not in (607)
			AND movement.ticket_number is null
			Group by tmpBlendDate.ref_prod_location, tmpBlendDate.tankid, blendnumadj) as tmpDrawoff
		ON tmpTotalAgg.ref_prod_location = tmpDrawoff.ref_prod_location
			AND tmpTotalAgg.BlendNumAdj = tmpDrawoff.blendnumadj
		GROUP BY 	tmpTotalAgg.ref_prod_location,tmpTotalAgg.BlendNumAdj) as tmpPPLVOL
	ON tmpTotalAgg.BlendNumAdj = tmpPPLVol.BlendNum
		AND tmpTotalAgg.ref_prod_location = tmpPPLVol.ref_prod_location

	/* Join to Blend_Octane_Diff table to calculate Octane differential*/

LEFT OUTER JOIN prod_edw_base_views.Blend_Octane_Diff
	ON tmpTotalAgg.Ref_Prod_Location = Blend_Octane_Diff.Ref_Prod_Location
		AND tmpTotalAgg.Product_Desc = Blend_Octane_Diff.Blend_Desc

	/* Join to Blend_CAA table to calculate RVP*/

LEFT OUTER JOIN prod_edw_base_views.Blend_CAA
	ON tmpTotalAgg.Product = Blend_CAA.CAA_Code

	/* Join to The below select to retrieve prices*/

INNER JOIN
	(SELECT	Cur_Date,
		max(case when pricing_code = 'AARQU00' then price end) as "AARQU00" ,
		max(case when pricing_code = 'AARQURV' then price end) as "AARQURV" ,
		max(case when pricing_code = 'PMAAI00' then price end) as "PMAAI00" 
	FROM	prod_edw_base_views.COMBINED_PRICING
	INNER JOIN
		(SELECT cur_date, max(price_eff_date) as PriceDate
		FROM	prod_edw_base_views.Cur_Date
		INNER JOIN prod_edw_base_views.combined_pricing
			ON cur_date.cur_date >= combined_pricing.price_eff_date
				AND combined_pricing.pricing_code in ('AARQU00','PMAAI00','AARQURV')
				AND combined_pricing.price_type in ('Close','Unspecified')
		GROUP BY cur_date) as tmpPriceDate
		ON combined_pricing.price_eff_date = tmpPriceDate.PriceDate
			AND combined_pricing.pricing_code in ('AARQU00','PMAAI00','AARQURV')
			AND combined_pricing.price_type in ('Close','Unspecified')
	GROUP BY Cur_Date) as tmpPrice
	ON tmpTotalAgg.Blend_Date = tmpPrice.Cur_Date
		
GROUP BY 	tmpTotalAgg.ref_prod_location,tmpTotalAgg.product_desc,tmpTotalAgg.BlendNumAdj
WHERE 

	tmptotalagg.blend_date between :Begin_Date and :End_Date
	AND tmptotalagg.ref_prod_location = :Ref_Prod_Location

ORDER BY BlendDate desc

;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Blend_PumpDown (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(
SELECT tmpFinalClose.ref_prod_location, tmpFinalClose.product_desc, tmpFinalClose.BlendDate, tmpFinalClose.BlendNumAdj, tmpFinalClose.Tank_ID, 
CurrentCloseVol, FutureOpenVol, (CurrentCloseVol - FutureOpenVol) as ShipVolume
FROM
	(SELECT tmpCloseVol.ref_prod_location, tmpCloseVol.product_desc, tmpCloseVol.BlendDate, tmpCloseVol.BlendNumAdj, tmpCloseVol.Tank_ID, 
	max(tmpCloseVol.CurrentCloseVol) as CurrentCloseVol,
	min(tmpForwardDate.BlendDate) as OpenDate
	FROM
		(SELECT  Blend.Ref_Prod_Location, Product_Desc, Blend.BlendDate, tmpBlendNumAdj.BlendNumAdj,
		 'TK' || substr(master_Code,3,3) as Tank_ID,
			cast(tmpPIClose.Tag_Value as integer) as CurrentCloseVol
		FROM    prod_edw_base_views.Master
		INNER JOIN prod_edw_base_views.Blend
			ON BLEND.TANKID = MASTER.MASTER_ID
			AND BLEND.Ref_Prod_Location = Master.Ref_Prod_Location
		INNER JOIN prod_edw_base_views.Ref_Product
			ON BLEND.ProductID = Ref_Product.product_ID
			AND BLEND.Ref_Prod_Location = Ref_Product.Ref_Prod_Location
		INNER JOIN
			(SELECT ref_prod_location, max(BlendNum) as Blendnum, 
				CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
				THEN substr(Blendnum,1, character_length(Blendnum)-1)
				ELSE BlendNum
				END AS BlendNumAdj
			FROM prod_edw_base_views.blend
			Group by ref_prod_location, BlendNumAdj) as tmpBlendNumAdj
			ON blend.ref_prod_location = tmpBlendNumAdj.ref_prod_location
				AND blend.blendnum = tmpBlendNumAdj.BlendNum
		INNER JOIN
			(SELECT  Ref_Prod_Location, max(Blend.BlendDate) as MaxBlendDate,
			CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
					THEN substr(Blendnum,1, character_length(Blendnum)-1)
					ELSE BlendNum
					END AS BlendNumAdj
			FROM prod_edw_base_views.Blend
			Group by ref_prod_location, BlendNumAdj) as tmpBlendMaxDate
			ON tmpBlendNumAdj.ref_prod_location = tmpBlendMaxDate.ref_prod_location
				AND tmpBlendNumAdj.BlendNumAdj = tmpBlendMaxDate.BlendNumAdj
				AND Blend.BlendDate = tmpBlendMaxDate.MaxBlendDate
		LEFT OUTER JOIN 
				(SELECT ref_prod_location, tag_id, trans_date, trans_hour, trans_min, tag_value From prod_edw_base_views.PI) as tmpPIClose
				ON tmpPIClose.tag_id = 'TK' || substr(master.master_Code,3,3) || '.VOL'
			AND tmpPIClose.Ref_Prod_Location = Master.Ref_Prod_Location
			AND tmpPIClose.Trans_Date = Blend.CloseGaugeDate
			AND tmpPIClose.Trans_Hour = cast(substr(cast(closegaugetime as varchar(8)),1,2) as integer)
			AND tmpPIClose.Trans_Min = cast(substr(cast(closegaugetime as varchar(8)),4,2) as integer)) as tmpCloseVol
	LEFT OUTER JOIN
		(SELECT  Blend.Ref_Prod_Location, Blend.BlendDate, 
			 'TK' || substr(master_Code,3,3) as Tank_ID
		FROM    prod_edw_base_views.Master
		INNER JOIN prod_edw_base_views.Blend
			ON BLEND.TANKID = MASTER.MASTER_ID
			AND BLEND.Ref_Prod_Location = Master.Ref_Prod_Location
		INNER JOIN prod_edw_base_views.Ref_Product
			ON BLEND.ProductID = Ref_Product.product_ID
			AND BLEND.Ref_Prod_Location = Ref_Product.Ref_Prod_Location) as tmpForwardDate
		ON tmpCloseVol.Ref_Prod_Location = tmpForwardDate.Ref_Prod_Location
			AND tmpCloseVol.Tank_ID = tmpForwardDate.Tank_ID
			AND tmpCloseVol.BlendDate < tmpForwardDate.BlendDate
	GROUP BY tmpCloseVol.ref_prod_location, tmpCloseVol.product_desc, tmpCloseVol.BlendDate, tmpCloseVol.BlendNumAdj, tmpCloseVol.Tank_ID, tmpCloseVol.CurrentCloseVol) as tmpFinalClose
LEFT OUTER JOIN
	(SELECT  Blend.Ref_Prod_Location, Blend.BlendDate, 
		 'TK' || substr(master_Code,3,3) as Tank_ID,
			cast(tmpPIOpen.Tag_Value as integer) as FutureOpenVol
		FROM    prod_edw_base_views.Master
		INNER JOIN prod_edw_base_views.Blend
			ON BLEND.TANKID = MASTER.MASTER_ID
			AND BLEND.Ref_Prod_Location = Master.Ref_Prod_Location
		INNER JOIN prod_edw_base_views.Ref_Product
			ON BLEND.ProductID = Ref_Product.product_ID
			AND BLEND.Ref_Prod_Location = Ref_Product.Ref_Prod_Location
		INNER JOIN
			(SELECT ref_prod_location, min(BlendNum) as BlendNum, 
				CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
				THEN substr(Blendnum,1, character_length(Blendnum)-1)
				ELSE BlendNum
				END AS BlendNumAdj
			FROM prod_edw_base_views.blend
			GROUP BY ref_prod_location, BlendNumAdj) as tmpBlendNumAdj
			ON blend.ref_prod_location = tmpBlendNumAdj.ref_prod_location
				AND blend.blendnum = tmpBlendNumAdj.BlendNum
		INNER JOIN
			(SELECT  Ref_Prod_Location, min(Blend.BlendDate) as MaxBlendDate,
			CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
					THEN substr(Blendnum,1, character_length(Blendnum)-1)
					ELSE BlendNum
					END AS BlendNumAdj
			FROM prod_edw_base_views.Blend
			Group by ref_prod_location, BlendNumAdj) as tmpBlendMaxDate
			ON tmpBlendNumAdj.ref_prod_location = tmpBlendMaxDate.ref_prod_location
				AND tmpBlendNumAdj.BlendNumAdj = tmpBlendMaxDate.BlendNumAdj
				AND Blend.BlendDate = tmpBlendMaxDate.MaxBlendDate
		LEFT OUTER JOIN 
				(SELECT ref_prod_location, tag_id, trans_date, trans_hour, trans_min, tag_value From prod_edw_base_views.PI) as tmpPIOpen
				ON tmpPIOpen.tag_id = 'TK' || substr(master.master_Code,3,3) || '.VOL'
			AND tmpPIOpen.Ref_Prod_Location = Master.Ref_Prod_Location
			AND tmpPIOpen.Trans_Date = Blend.OpenGaugeDate
			AND tmpPIOpen.Trans_Hour = cast(substr(cast(opengaugetime as varchar(8)),1,2) as integer)
			AND tmpPIOpen.Trans_Min = cast(substr(cast(opengaugetime as varchar(8)),4,2) as integer)) as tmpFinalOpen
	ON tmpFinalClose.ref_prod_location = tmpFinalOpen.ref_prod_location
		AND tmpFinalClose.Tank_ID = tmpFinalOpen.Tank_ID
		AND tmpFinalClose.OpenDate = tmpFinalOpen.BlendDate
WHERE tmpFinalClose.BlendDate between :Begin_Date and :End_Date
AND tmpFinalClose.Ref_Prod_Location = :Ref_Prod_Location
ORDER BY tmpFinalClose.tank_id, tmpFinalClose.blenddate DESC
	
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Blend_PumpUp (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(
SELECT tmpFinalClose.ref_prod_location, tmpFinalClose.product_desc, tmpFinalClose.BlendDate, tmpFinalClose.BlendNumAdj, tmpFinalClose.Tank_ID, 
CurrentCloseVol, FutureOpenVol, (CurrentCloseVol - FutureOpenVol) as ShipVolume
FROM
	(SELECT tmpCloseVol.ref_prod_location, tmpCloseVol.product_desc, tmpCloseVol.BlendDate, tmpCloseVol.BlendNumAdj, tmpCloseVol.Tank_ID, 
	max(tmpCloseVol.CurrentCloseVol) as CurrentCloseVol,
	min(tmpForwardDate.BlendDate) as OpenDate
	FROM
		(SELECT  Blend.Ref_Prod_Location, Product_Desc, Blend.BlendDate, tmpBlendNumAdj.BlendNumAdj,
		 'TK' || substr(master_Code,3,3) as Tank_ID,
			cast(tmpPIClose.Tag_Value as integer) as CurrentCloseVol
		FROM    prod_edw_base_views.Master
		INNER JOIN prod_edw_base_views.Blend
			ON BLEND.TANKID = MASTER.MASTER_ID
			AND BLEND.Ref_Prod_Location = Master.Ref_Prod_Location
		INNER JOIN prod_edw_base_views.Ref_Product
			ON BLEND.ProductID = Ref_Product.product_ID
			AND BLEND.Ref_Prod_Location = Ref_Product.Ref_Prod_Location
		INNER JOIN
			(SELECT ref_prod_location, max(BlendNum) as Blendnum, 
				CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
				THEN substr(Blendnum,1, character_length(Blendnum)-1)
				ELSE BlendNum
				END AS BlendNumAdj
			FROM prod_edw_base_views.blend
			Group by ref_prod_location, BlendNumAdj) as tmpBlendNumAdj
			ON blend.ref_prod_location = tmpBlendNumAdj.ref_prod_location
				AND blend.blendnum = tmpBlendNumAdj.BlendNum
		INNER JOIN
			(SELECT  Ref_Prod_Location, max(Blend.BlendDate) as MaxBlendDate,
			CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
					THEN substr(Blendnum,1, character_length(Blendnum)-1)
					ELSE BlendNum
					END AS BlendNumAdj
			FROM prod_edw_base_views.Blend
			Group by ref_prod_location, BlendNumAdj) as tmpBlendMaxDate
			ON tmpBlendNumAdj.ref_prod_location = tmpBlendMaxDate.ref_prod_location
				AND tmpBlendNumAdj.BlendNumAdj = tmpBlendMaxDate.BlendNumAdj
				AND Blend.BlendDate = tmpBlendMaxDate.MaxBlendDate
		LEFT OUTER JOIN 
				(SELECT ref_prod_location, tag_id, trans_date, trans_hour, trans_min, tag_value From prod_edw_base_views.PI) as tmpPIClose
				ON tmpPIClose.tag_id = 'TK' || substr(master.master_Code,3,3) || '.VOL'
			AND tmpPIClose.Ref_Prod_Location = Master.Ref_Prod_Location
			AND tmpPIClose.Trans_Date = Blend.CloseGaugeDate
			AND tmpPIClose.Trans_Hour = cast(substr(cast(closegaugetime as varchar(8)),1,2) as integer)
			AND tmpPIClose.Trans_Min = cast(substr(cast(closegaugetime as varchar(8)),4,2) as integer)) as tmpCloseVol
	LEFT OUTER JOIN
		(SELECT  Blend.Ref_Prod_Location, Blend.BlendDate, 
			 'TK' || substr(master_Code,3,3) as Tank_ID
		FROM    prod_edw_base_views.Master
		INNER JOIN prod_edw_base_views.Blend
			ON BLEND.TANKID = MASTER.MASTER_ID
			AND BLEND.Ref_Prod_Location = Master.Ref_Prod_Location
		INNER JOIN prod_edw_base_views.Ref_Product
			ON BLEND.ProductID = Ref_Product.product_ID
			AND BLEND.Ref_Prod_Location = Ref_Product.Ref_Prod_Location) as tmpForwardDate
		ON tmpCloseVol.Ref_Prod_Location = tmpForwardDate.Ref_Prod_Location
			AND tmpCloseVol.Tank_ID = tmpForwardDate.Tank_ID
			AND tmpCloseVol.BlendDate < tmpForwardDate.BlendDate
	GROUP BY tmpCloseVol.ref_prod_location, tmpCloseVol.product_desc, tmpCloseVol.BlendDate, tmpCloseVol.BlendNumAdj, tmpCloseVol.Tank_ID, tmpCloseVol.CurrentCloseVol) as tmpFinalClose
LEFT OUTER JOIN
	(SELECT  Blend.Ref_Prod_Location, Blend.BlendDate, 
		 'TK' || substr(master_Code,3,3) as Tank_ID,
			cast(tmpPIOpen.Tag_Value as integer) as FutureOpenVol
		FROM    prod_edw_base_views.Master
		INNER JOIN prod_edw_base_views.Blend
			ON BLEND.TANKID = MASTER.MASTER_ID
			AND BLEND.Ref_Prod_Location = Master.Ref_Prod_Location
		INNER JOIN prod_edw_base_views.Ref_Product
			ON BLEND.ProductID = Ref_Product.product_ID
			AND BLEND.Ref_Prod_Location = Ref_Product.Ref_Prod_Location
		INNER JOIN
			(SELECT ref_prod_location, min(BlendNum) as BlendNum, 
				CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
				THEN substr(Blendnum,1, character_length(Blendnum)-1)
				ELSE BlendNum
				END AS BlendNumAdj
			FROM prod_edw_base_views.blend
			GROUP BY ref_prod_location, BlendNumAdj) as tmpBlendNumAdj
			ON blend.ref_prod_location = tmpBlendNumAdj.ref_prod_location
				AND blend.blendnum = tmpBlendNumAdj.BlendNum
		INNER JOIN
			(SELECT  Ref_Prod_Location, min(Blend.BlendDate) as MaxBlendDate,
			CASE WHEN substr(Blendnum,character_length(Blendnum), character_length(Blendnum)) in ('A' ,'B','C')
					THEN substr(Blendnum,1, character_length(Blendnum)-1)
					ELSE BlendNum
					END AS BlendNumAdj
			FROM prod_edw_base_views.Blend
			Group by ref_prod_location, BlendNumAdj) as tmpBlendMaxDate
			ON tmpBlendNumAdj.ref_prod_location = tmpBlendMaxDate.ref_prod_location
				AND tmpBlendNumAdj.BlendNumAdj = tmpBlendMaxDate.BlendNumAdj
				AND Blend.BlendDate = tmpBlendMaxDate.MaxBlendDate
		LEFT OUTER JOIN 
				(SELECT ref_prod_location, tag_id, trans_date, trans_hour, trans_min, tag_value From prod_edw_base_views.PI) as tmpPIOpen
				ON tmpPIOpen.tag_id = 'TK' || substr(master.master_Code,3,3) || '.VOL'
			AND tmpPIOpen.Ref_Prod_Location = Master.Ref_Prod_Location
			AND tmpPIOpen.Trans_Date = Blend.OpenGaugeDate
			AND tmpPIOpen.Trans_Hour = cast(substr(cast(opengaugetime as varchar(8)),1,2) as integer)
			AND tmpPIOpen.Trans_Min = cast(substr(cast(opengaugetime as varchar(8)),4,2) as integer)) as tmpFinalOpen
	ON tmpFinalClose.ref_prod_location = tmpFinalOpen.ref_prod_location
		AND tmpFinalClose.Tank_ID = tmpFinalOpen.Tank_ID
		AND tmpFinalClose.OpenDate = tmpFinalOpen.BlendDate
WHERE tmpFinalClose.BlendDate between :Begin_Date and :End_Date
AND tmpFinalClose.Ref_Prod_Location = :Ref_Prod_Location
ORDER BY tmpFinalClose.tank_id, tmpFinalClose.blenddate DESC

	
	
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Blend_TankAudit (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(

/* This query will query the Blend table and the PI table for Open and Close volumes to use for audit */

SELECT  Blend.Ref_Prod_Location, Product_Desc, BlendNum, BlendDate, 'TK' || substr(master_Code,3,3) as Tank_ID,
                OpenTOV as BlendOpen, tmpPIOpen.Tag_Value as PIOpen,
                CloseTOV as BlendClose, tmpPIClose.Tag_Value as PIClose,
                (BlendClose - BlendOpen) as BlendVol, (PIClose - PIOpen) as PIVol,
               ABS((nullifzero(BlendVol)-nullifzero(PIVol))/nullifzero(BlendVol)) as PercentVolVariance
FROM    prod_edw_base_views.Master

INNER JOIN Prod_Edw_Base_Views.Blend
                ON BLEND.TANKID = MASTER.MASTER_ID
                AND BLEND.Ref_Prod_Location = Master.Ref_Prod_Location
INNER JOIN Prod_Edw_Base_Views.Ref_Product
                ON BLEND.ProductID = Ref_Product.product_ID
                AND BLEND.Ref_Prod_Location = Ref_Product.Ref_Prod_Location

/* Query the tank open gauge volume based on the Opening Date and Time found in the Blend Table */

LEFT OUTER JOIN 
                                (SELECT ref_prod_location, tag_id, trans_date, trans_hour, trans_min, tag_value From prod_edw_base_views.PI) as tmpPIOpen
                                ON tmpPIOpen.tag_id = 'TK' || substr(master.master_Code,3,3) || '.VOL'
                AND tmpPIOpen.Ref_Prod_Location = Master.Ref_Prod_Location
                AND tmpPIOpen.Trans_Date = Blend.OpenGaugeDate
                AND tmpPIOpen.Trans_Hour = cast(substr(cast(opengaugetime as varchar(8)),1,2) as integer)
                AND tmpPIOpen.Trans_Min = cast(substr(cast(opengaugetime as varchar(8)),4,2) as integer)

/* Query the tank close gauge volume based on the Closing Date and Time found in the Blend Table */

LEFT OUTER JOIN 
                                (SELECT ref_prod_location, tag_id, trans_date, trans_hour, trans_min, tag_value From prod_edw_base_views.PI) as tmpPIClose
                                ON tmpPIClose.tag_id = 'TK' || substr(master.master_Code,3,3) || '.VOL'
                AND tmpPIClose.Ref_Prod_Location = Master.Ref_Prod_Location
                AND tmpPIClose.Trans_Date = Blend.CloseGaugeDate
                AND tmpPIClose.Trans_Hour = cast(substr(cast(closegaugetime as varchar(8)),1,2) as integer)
                AND tmpPIClose.Trans_Min = cast(substr(cast(closegaugetime as varchar(8)),4,2) as integer)
WHERE BlendDate between :Begin_Date and :End_Date
AND Blend.Ref_Prod_Location = :Ref_Prod_Location
ORDER BY blenddate DESC, blendnum
	
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Blend_Volumes (Blend1 varchar(20), Blend2 varchar(20), Blend3 varchar(20), 
Blend4 varchar(20), Ref_Prod_Location varchar(20)) as
	(

SELECT 
Blend.BlendNum, 
BlendDate, 
BlendTank, 
FeedTank, 
Feedproduct, 
sum(actualvolume) as Volume
		FROM    prod_edw_base_views.BLEND
	INNER JOIN prod_edw_base_views.ref_product
		ON Ref_Product.Product_ID = Blend.ProductID
			AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
	LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
		ON Blend.blendid = blendrecipe.blendid
			AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
	LEFT OUTER JOIN 
			(Select ref_prod_location, master_id, master_code as BlendTank
				From prod_edw_base_views.Master) as tmpBlendTank
		ON BLEND.TANKID = tmpBlendTank.MASTER_ID
			AND BLEND.Ref_Prod_Location = tmpBlendTank.Ref_Prod_Location
	LEFT OUTER JOIN 
			(Select ref_prod_location, master_id, master_code as FeedTank
				From prod_edw_base_views.Master) as tmpFeedTank
		ON Blendrecipe.TANKID = tmpFeedTank.MASTER_ID
			AND Blendrecipe.Ref_Prod_Location = tmpFeedTank.Ref_Prod_Location
	LEFT OUTER JOIN 
			(Select ref_prod_location, product_id, product_desc as FeedProduct
				From prod_edw_base_views.ref_product) as tmpFeedProduct
		ON Blendrecipe.productid = tmpFeedProduct.product_id
			AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
WHERE Blend.Ref_prod_location = :Ref_Prod_Location
AND blendnum in  (:Blend1,:Blend2,:Blend3,:Blend4)
GROUP BY 1,2,3,4,5
UNION ALL
SELECT 'Drawoff' AS Blendnum, 
	movement_start AS BlendDate,
	Master_Code AS BlendTank,
	'' AS FeedTank,
	Product_Desc AS FeedProduct, 
	sum(volume_estimated*recipepercent/100*(-1)) as Volume
FROM prod_edw_base_views.Blend
INNER JOIN MASTER
	ON Master.Master_Id=Blend.TankId
	AND Master.Ref_Prod_Location=Blend.Ref_Prod_Location
INNER JOIN

	(	SELECT movement_start, volume_estimated
	FROM prod_edw_base_views.Movement
	INNER JOIN	
		(SELECT ref_prod_location, tankid, 
			min(cast(OpenGaugeDate as TimeStamp(6))+((OPenGaugeTime - time '00:00:00') hour to second(6)))  as MinDate,
			max(cast(CloseGaugeDate as TimeStamp(6))+((CloseGaugeTime - time '00:00:00') hour to second(6)))  as MaxDate
		FROM prod_edw_base_views.Blend
		WHERE Ref_Prod_Location = :Ref_Prod_Location
		AND Blendnum IN (:Blend1,:Blend2,:Blend3,:Blend4)
		Group by ref_prod_location, tankid) AS tmpBlendDate
	ON movement.source_id=tmpBlendDate.tankid
	AND movement.ref_prod_location=tmpBlendDate.ref_prod_location
	AND movement.movement_start_dttm BETWEEN tmpBlendDate.MinDate AND tmpBlendDate.MaxDate
	AND movement.destination_ID not in (607)
	AND movement.ticket_number is null) AS tmpDrawOffVolume
ON Blend.Blendnum = Blend.Blendnum
INNER JOIN BlendRecipe
	ON Blend.BlendId=Blendrecipe.BlendID
	AND Blend.Ref_Prod_Location=BlendRecipe.Ref_Prod_Location
INNER JOIN Ref_Product
	ON Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
	AND BlendRecipe.ProductID=Ref_Product.Product_ID
WHERE Blend.Ref_Prod_Location = :Ref_Prod_Location
AND Blendnum = :Blend1
GROUP BY 1,2,3,4,5
ORDER BY 1,2,5

;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Butane_Detail (Begin_Date date, End_Date date) as
(
SELECT Eff_Date, Product, 
	zeroifnull(GallupTank)+zeroifnull(GallupRail)+zeroifnull(ElPasoTank)+zeroifnull(ElPasoRail)+zeroifnull(Artesia)+zeroifnull(JAL) AS SWTotal,
	max(CASE WHEN (Location = 'Gallup Refinery' and Vessel = 'Tank') THEN Net_Quantity END) AS GallupTank,
	max(CASE WHEN (Location = 'Gallup Refinery' and Vessel = 'Railcar') THEN Net_Quantity END) AS GallupRail,
	max(CASE WHEN Location = 'El Paso Refinery' and Vessel = 'Tank' THEN Net_Quantity END) AS ElPasoTank,
	max(CASE WHEN Location = 'El Paso Refinery' and Vessel = 'Railcar' THEN Net_Quantity END) AS ElPasoRail,
	max(CASE WHEN Location = 'Artesia' THEN Net_Quantity END) AS Artesia,
	max(CASE WHEN Location = 'JAL & Loco Hills' THEN Net_Quantity END) AS JAL
FROM
	(
	SELECT	Eff_Date, 
		Location_Category as Location, 
		Prod_Group_SubCat4 as Product, 
		CAST('Tank' as Varchar(20)) as Vessel,
		CAST(sum(Net_Quantity) as integer) as Net_Quantity
	FROM	prod_edw_base_views.PROD_UNION
	WHERE location_category IN ('Gallup Refinery', 'JAL & Loco Hills','El Paso Refinery','Artesia')
	AND prod_group_subcat4 IN ('N/M Butanes','Iso Butane')
	AND eff_date BETWEEN :Begin_Date AND :End_Date
	AND report_desc = 'Inventory'
	GROUP BY Location_Category, eff_date, prod_group_subcat4
	UNION ALL
	SELECT Eff_date, Location, Product, Vessel, Sum(Net_Quantity) AS Net_Quantity
	FROM
		(SELECT 
			Eff_date, 
			CASE WHEN LastReportedDestCity IN ('Gallup','Ciniza') THEN 'Gallup Refinery' 
				ELSE 'El Paso Refinery' END AS Location,
			CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
				ELSE 'Iso Butane' END AS Product,
				'Railcar' AS Vessel,
				Volume_BBL AS Net_Quantity
		FROM prod_edw_base_views.railcar
		WHERE L_E = 'loaded'
			AND StatusName='Layover'
			AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
			AND ProdCode in ('IBUT','NBUT','Normal Butane','MBUT','Mixed Butane','Isobutane')
			AND eff_date BETWEEN :Begin_Date AND :End_Date
		) AS a
	GROUP BY Eff_date, Location, Product, Vessel
	) AS tmpInventory
GROUP BY Eff_Date, Product
ORDER BY 2, 1 DESC 
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Butane_Detail_Exc (Begin_Date date, End_Date date) as
	(
SELECT DISTINCT unitid,eff_date,
	LastReportedDestCity,
	CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
		WHEN ProdCode IN ('LPG') THEN 'Liquid Petroleum Gas'
		ELSE 'Iso Butane' END AS Product,
	prodcode,
	Volume_BBL AS Net_Quantity
FROM prod_edw_base_views.railcar
WHERE L_E = 'loaded'
	AND StatusName='Layover'
	AND ProdCode in ('LPG')	
	AND eff_date between  :Begin_Date and :End_Date
	AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
UNION	
SELECT DISTINCT unitid, eff_date,
	LastReportedDestCity,
	CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
		WHEN ProdCode IN ('LPG') THEN 'Liquid Petroleum Gas'
		ELSE 'Iso Butane' END AS Product,
	prodcode,
	Volume_BBL AS Net_Quantity
FROM prod_edw_base_views.railcar
WHERE L_E = 'loaded'
	AND StatusName='Layover'
	AND ProdCode in ('Isobutane','Normal Butane','Mixed Butane','NBUT','IBUT','MBUT')	
	AND eff_date between  :Begin_Date and :End_Date
	AND LastReportedDestCity IN ('(non')
UNION	
SELECT DISTINCT unitid, eff_date,
	LastReportedDestCity,
	CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
		WHEN ProdCode IN ('LPG') THEN 'Liquid Petroleum Gas'
		ELSE 'Iso Butane' END AS Product,
	prodcode,
	Volume_BBL AS Net_Quantity
FROM prod_edw_base_views.railcar
WHERE L_E = 'loaded'
	AND StatusName='Layover'
	AND ProdCode in ('Isobutane','Normal Butane','Mixed Butane','NBUT','IBUT','MBUT','LPG')	
	AND eff_date between :Begin_Date and :End_Date
	AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
	AND (Net_Quantity is null OR Net_Quantity=0)
ORDER BY 1,2
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Butane_NoofRC (Begin_Date date, End_Date date) as
(
SELECT 
			Eff_date, 
			CASE WHEN LastReportedDestCity IN ('Gallup','Ciniza') THEN 'Gallup Refinery' 
				ELSE 'El Paso Refinery' END AS Location,
			CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
				ELSE 'Iso Butane' END AS Product,
				'Railcar' AS Vessel,
				count(distinct UnitID) as no_of_railcars
		FROM prod_edw_base_views.railcar
		WHERE L_E = 'loaded'
			AND StatusName='Layover'
			AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
			AND ProdCode in ('IBUT','NBUT','Normal Butane','MBUT','Mixed Butane','Isobutane')
			AND eff_date BETWEEN :Begin_Date AND :End_Date
			group by Eff_date,	CASE WHEN LastReportedDestCity IN ('Gallup','Ciniza') THEN 'Gallup Refinery' 	ELSE 'El Paso Refinery' END, CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes' ELSE 'Iso Butane' END;
)
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Butane_Prototype (Begin_Date date, End_Date date) as
(
SELECT Eff_Date, Product, 
	zeroifnull(GallupTank)+zeroifnull(GallupRail)+zeroifnull(ElPasoTank)+zeroifnull(ElPasoRail)+zeroifnull(Artesia)+zeroifnull(JAL) AS SWTotal,
	max(CASE WHEN (Location = 'Gallup Refinery' and Vessel = 'Tank') THEN Net_Quantity END) AS GallupTank,
	max(CASE WHEN (Location = 'Gallup Refinery' and Vessel = 'Railcar') THEN Net_Quantity END) AS GallupRail,
	max(CASE WHEN Location = 'El Paso Refinery' and Vessel = 'Tank' THEN Net_Quantity END) AS ElPasoTank,
	max(CASE WHEN Location = 'El Paso Refinery' and Vessel = 'Railcar' THEN Net_Quantity END) AS ElPasoRail,
	max(CASE WHEN Location = 'Artesia' THEN Net_Quantity END) AS Artesia,
	max(CASE WHEN Location = 'JAL & Loco Hills' THEN Net_Quantity END) AS JAL
FROM
	(
	SELECT	Eff_Date, 
		Location_Category as Location, 
		Prod_Group_SubCat4 as Product, 
		CAST('Tank' as Varchar(20)) as Vessel,
		CAST(sum(Net_Quantity) as integer) as Net_Quantity
	FROM	prod_edw_base_views.PROD_UNION
	WHERE location_category IN ('Gallup Refinery', 'JAL & Loco Hills','El Paso Refinery','Artesia')
	AND prod_group_subcat4 IN ('N/M Butanes','Iso Butane')
	AND eff_date BETWEEN :Begin_Date AND :End_Date
	AND report_desc = 'Inventory'
	GROUP BY Location_Category, eff_date, prod_group_subcat4
	UNION ALL
	SELECT Eff_date, Location, Product, Vessel, Sum(Net_Quantity) AS Net_Quantity
	FROM
		(SELECT 
			Eff_date, 
			CASE WHEN LastReportedDestCity IN ('Gallup','Ciniza') THEN 'Gallup Refinery' 
				ELSE 'El Paso Refinery' END AS Location,
			CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
				ELSE 'Iso Butane' END AS Product,
				'Railcar' AS Vessel,
				Volume_BBL AS Net_Quantity
		FROM prod_edw_base_views.railcar
		WHERE L_E = 'loaded'
			AND StatusName='Layover'
			AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
			AND ProdCode in ('IBUT','NBUT','Normal Butane','MBUT','Mixed Butane','Isobutane')
			AND eff_date BETWEEN :Begin_Date AND :End_Date
		) AS a
	GROUP BY Eff_date, Location, Product, Vessel
	) AS tmpInventory
GROUP BY Eff_Date, Product
ORDER BY 2, 1 DESC 
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Butane_Prototype_Det (Begin_Date date, End_Date date) as
	(
	SELECT UnitId, TripId,  Eff_date, Location, Product, Net_Quantity
	FROM
		(SELECT 
			UnitId, TripId, Eff_date, 
			CASE WHEN LastReportedDestCity IN ('Gallup','Ciniza') THEN 'Gallup Refinery' 
				ELSE 'El Paso Refinery' END AS Location,
			CASE WHEN ProdCode IN ('NBUT','Normal Butane') THEN 'N/M Butanes'
				ELSE 'Iso Butane' END AS Product,
				'Railcar' AS Vessel,
				Volume_BBL AS Net_Quantity
		FROM prod_edw_base_views.railcar
		WHERE L_E = 'loaded'
			AND StatusName='Layover'
			AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
			AND ProdCode in ('IBUT','NBUT','Normal Butane','MBUT','Isobutane','Mixed Butane')
			AND eff_date BETWEEN :Begin_Date and :End_Date
	) AS tmpRailcarExceptions
	ORDER by UnitId, TripId, eff_date desc
	;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Butane_Prototype_Exc (Begin_Date date, End_Date date) as
	(
SELECT DISTINCT unitid,eff_date,
	LastReportedDestCity,
	CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
		WHEN ProdCode IN ('LPG') THEN 'Liquid Petroleum Gas'
		ELSE 'Iso Butane' END AS Product,
	prodcode,
	Volume_BBL AS Net_Quantity
FROM prod_edw_base_views.railcar
WHERE L_E = 'loaded'
	AND StatusName='Layover'
	AND ProdCode in ('LPG')	
	AND eff_date between  :Begin_Date and :End_Date
	AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
UNION	
SELECT DISTINCT unitid, eff_date,
	LastReportedDestCity,
	CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
		WHEN ProdCode IN ('LPG') THEN 'Liquid Petroleum Gas'
		ELSE 'Iso Butane' END AS Product,
	prodcode,
	Volume_BBL AS Net_Quantity
FROM prod_edw_base_views.railcar
WHERE L_E = 'loaded'
	AND StatusName='Layover'
	AND ProdCode in ('Isobutane','Normal Butane','Mixed Butane','NBUT','IBUT','MBUT')	
	AND eff_date between  :Begin_Date and :End_Date
	AND LastReportedDestCity IN ('(non')
UNION	
SELECT DISTINCT unitid, eff_date,
	LastReportedDestCity,
	CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
		WHEN ProdCode IN ('LPG') THEN 'Liquid Petroleum Gas'
		ELSE 'Iso Butane' END AS Product,
	prodcode,
	Volume_BBL AS Net_Quantity
FROM prod_edw_base_views.railcar
WHERE L_E = 'loaded'
	AND StatusName='Layover'
	AND ProdCode in ('Isobutane','Normal Butane','Mixed Butane','NBUT','IBUT','MBUT','LPG')	
	AND eff_date between :Begin_Date and :End_Date
	AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
	AND (Net_Quantity is null OR Net_Quantity=0)
ORDER BY 1,2
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Butane_Railcar_Det (Begin_Date date, End_Date date) as
	(
	SELECT UnitId, TripId,  Eff_date, Location, Product, Net_Quantity
	FROM
		(SELECT 
			UnitId, TripId, Eff_date, 
			CASE WHEN LastReportedDestCity IN ('Gallup','Ciniza') THEN 'Gallup Refinery' 
				ELSE 'El Paso Refinery' END AS Location,
			CASE WHEN ProdCode IN ('NBUT','Normal Butane') THEN 'N/M Butanes'
				ELSE 'Iso Butane' END AS Product,
				'Railcar' AS Vessel,
				Volume_BBL AS Net_Quantity
		FROM prod_edw_base_views.railcar
		WHERE L_E = 'loaded'
			AND StatusName='Layover'
			AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
			AND ProdCode in ('IBUT','NBUT','Normal Butane','MBUT','Isobutane','Mixed Butane')
			AND eff_date BETWEEN :Begin_Date and :End_Date
	) AS tmpRailcarExceptions
	ORDER by UnitId, TripId, eff_date desc
	;);
--------------------------------------------------------------------------------

Replace Macro PROD_EDW_BASE_VIEWS.M_CEMS_Calib (In_Test_Date date)
AS
(
select 		SPAN_TOP_RANK_W_MX_TIME.Ref_Prod_Location,
				SPAN_TOP_RANK_W_MX_TIME.Analyzer_Name, 
				SPAN_TOP_RANK_W_MX_TIME.Test_Name, 
				SPAN_TOP_RANK_W_MX_TIME.Analyzer_Desc,
				SPAN_TOP_RANK_W_MX_TIME.Test_Desc,
				cast( 'Span Assessment' as varchar(50)) as Assessment_Type, 
				SPAN_TOP_RANK_W_MX_TIME.Tag_ID as PI_Tag_ID, 
				SPAN_TOP_RANK_W_MX_TIME.Trans_Date as Test_Date, 
				SPAN_TOP_RANK_W_MX_TIME.MIN_SPAN_TR_HR_Min_Comb as MinCombHrMinDecimal, 
				SPAN_TOP_RANK_W_MX_TIME.Span_Max_Calib_Drift_Pct as Max_Drift_Allowed_Pct, 
				SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn as Gas_Concn, 
				SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value as Established_Value, 
				SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value as Calib_Response, 
				((SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value-SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn)/SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value)*100 as Calib_Drift_Pct, 
				case 
						when (SPAN_TOP_RANK_W_MX_TIME.Span_Max_Calib_Drift_Pct-abs(((SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value-SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn)/SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value)*100))  >= 0 then cast('pass' as varchar(10))
						when (SPAN_TOP_RANK_W_MX_TIME.Span_Max_Calib_Drift_Pct-abs(((SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value-SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn)/SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value)*100))   < 0  then cast('fail' as varchar(10))
				end as pass_fail
from		
				(
				select		SPAN_TOP_RANK_W_TIME.Ref_Prod_Location,
								SPAN_TOP_RANK_W_TIME.Analyzer_Name,
								SPAN_TOP_RANK_W_TIME.Test_Name,
								SPAN_TOP_RANK_W_TIME.Tag_ID,
								SPAN_TOP_RANK_W_TIME.Trans_Date,
								SPAN_TOP_RANK_W_TIME.Max_Tag_Value,
								TM_RANK_W_TIME.Analyzer_Desc,
								TM_RANK_W_TIME.Test_Desc,
								TM_RANK_W_TIME.Span_Gas_Concn,
								TM_RANK_W_TIME.Span_Established_Value,
								TM_RANK_W_TIME.Span_Max_Calib_Drift_Pct,
								min(SPAN_TOP_RANK_W_TIME.SPAN_TR_HR_Min_Comb) as MIN_SPAN_TR_HR_Min_Comb
				from
								(				
								select 		SPAN_TOP_RANK.Ref_Prod_Location,
												SPAN_TOP_RANK.Analyzer_Name,
												SPAN_TOP_RANK.Test_Name,
												SPAN_TOP_RANK.Tag_ID,
												SPAN_TOP_RANK.Trans_Date,
												SPAN_TOP_RANK.Max_Tag_Value,
												case 
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min >= 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min < 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min < 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min >= 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
												end SPAN_TR_HR_Min_Comb
								from	
												(
														select		PI_HHMMSS.Ref_Prod_Location,
																		PI_HHMMSS.Analyzer_Name,
																		PI_HHMMSS.Test_Name,
																		PI_HHMMSS.Tag_ID,
																		PI_HHMMSS.Trans_Date,
																		max(PI_HHMMSS.Tag_Value) as Max_Tag_Value
														from		(
																		select 		PI.Ref_Prod_Location,
																						TM.Analyzer_Name, 
																						TM.Test_Name, 
																						PI.Tag_ID,
																						TM.Eff_Start_Date, 
																						TM.Eff_End_Date,
																						PI.Trans_Date,
																						PI.Trans_Hour,
																						PI.Trans_Min,
																						case 
																									when PI.Trans_Hour >= 10 and PI.Trans_Min >= 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour < 10 and PI.Trans_Min < 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour >= 10 and PI.Trans_Min < 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																									when PI.Trans_Hour < 10 and PI.Trans_Min >= 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																						end HR_Min_Comb,
																						PI.Tag_Value
																		from 		PROD_EDW_BASE.PI PI,
																		 				PROD_EDW_BASE.CEMS_TAG_MASTER TM
																		where 	PI.Trans_Date=:In_Test_Date  and
																						PI.Ref_Prod_Location=TM.Ref_Prod_Location and 
																						PI.Tag_ID=TM.PI_Tag_ID and
																						PI.Trans_Date between TM.Eff_Start_Date  and TM.Eff_End_Date 
																		) PI_HHMMSS,
																		PROD_EDW_BASE.CEMS_TAG_MASTER OTM
														where		PI_HHMMSS.Ref_Prod_Location = OTM.Ref_Prod_Location and
																		PI_HHMMSS.Analyzer_Name = OTM.Analyzer_Name and
																		PI_HHMMSS.Test_Name = OTM.Test_Name and
																		PI_HHMMSS.Tag_ID = OTM.PI_Tag_ID and
																		PI_HHMMSS.Eff_Start_Date = OTM.Eff_Start_Date and 
																		PI_HHMMSS.Eff_End_Date = OTM.Eff_End_Date and
																		PI_HHMMSS.HR_Min_Comb between OTM.Span_Value_Start_HHMM and OTM.Span_Value_End_HHMM
														group by	PI_HHMMSS.Ref_Prod_Location, PI_HHMMSS.Analyzer_Name, PI_HHMMSS.Test_Name, PI_HHMMSS.Tag_ID, PI_HHMMSS.Trans_Date
												) SPAN_TOP_RANK,
												PROD_EDW_BASE.PI PI_O
								where		SPAN_TOP_RANK.Ref_Prod_Location =	PI_O.Ref_Prod_Location and
												SPAN_TOP_RANK.Trans_Date =	PI_O.Trans_Date and	
												SPAN_TOP_RANK.Tag_ID =	 PI_O.Tag_ID 	and
												SPAN_TOP_RANK.Max_Tag_Value=PI_O.Tag_Value
								)SPAN_TOP_RANK_W_TIME,
								PROD_EDW_BASE.CEMS_TAG_MASTER TM_RANK_W_TIME
				where		SPAN_TOP_RANK_W_TIME.Ref_Prod_Location	=	TM_RANK_W_TIME.Ref_Prod_Location and					 				
								SPAN_TOP_RANK_W_TIME.Analyzer_Name		=	TM_RANK_W_TIME.Analyzer_Name and
								SPAN_TOP_RANK_W_TIME.Test_Name				=	TM_RANK_W_TIME.Test_Name and
								SPAN_TOP_RANK_W_TIME.Tag_ID				=	TM_RANK_W_TIME.PI_Tag_ID and
								SPAN_TOP_RANK_W_TIME.Trans_Date 			between TM_RANK_W_TIME.Eff_Start_Date and TM_RANK_W_TIME.Eff_End_Date and
								SPAN_TOP_RANK_W_TIME.SPAN_TR_HR_Min_Comb 	between TM_RANK_W_TIME.Span_Value_Start_HHMM and TM_RANK_W_TIME.Span_Value_End_HHMM			
				group by	SPAN_TOP_RANK_W_TIME.Ref_Prod_Location, SPAN_TOP_RANK_W_TIME.Analyzer_Name, SPAN_TOP_RANK_W_TIME.Test_Name, 	SPAN_TOP_RANK_W_TIME.Tag_ID, SPAN_TOP_RANK_W_TIME.Trans_Date,   SPAN_TOP_RANK_W_TIME.Max_Tag_Value, TM_RANK_W_TIME.Analyzer_Desc, TM_RANK_W_TIME.Test_Desc, TM_RANK_W_TIME.Span_Gas_Concn, TM_RANK_W_TIME.Span_Established_Value, TM_RANK_W_TIME.Span_Max_Calib_Drift_Pct
				) SPAN_TOP_RANK_W_MX_TIME
union
select 		ZERO_TOP_RANK_W_MX_TIME.Ref_Prod_Location,
				ZERO_TOP_RANK_W_MX_TIME.Analyzer_Name, 
				ZERO_TOP_RANK_W_MX_TIME.Test_Name, 
				ZERO_TOP_RANK_W_MX_TIME.Analyzer_Desc,
				ZERO_TOP_RANK_W_MX_TIME.Test_Desc,
				cast( 'Zero Assessment' as varchar(50)) as Assessment_Type, 
				ZERO_TOP_RANK_W_MX_TIME.Tag_ID as PI_Tag_ID, 
				ZERO_TOP_RANK_W_MX_TIME.Trans_Date as Test_Date, 
				ZERO_TOP_RANK_W_MX_TIME.MIN_ZERO_TR_HR_Min_Comb as MinCombHrMinDecimal, 
				ZERO_TOP_RANK_W_MX_TIME.ZERO_Max_Calib_Drift_Pct as Max_Drift_Allowed_Pct, 
				ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn as Gas_Concn, 
				ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value as Established_Value, 
				ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value as Calib_Response, 
				((ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value-ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn)/ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value)*100 as Calib_Drift_Pct, 
				case 
						when (ZERO_TOP_RANK_W_MX_TIME.ZERO_Max_Calib_Drift_Pct-abs(((ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value-ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn)/ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value)*100))  >= 0 then cast('pass' as varchar(10))
						when (ZERO_TOP_RANK_W_MX_TIME.ZERO_Max_Calib_Drift_Pct-abs(((ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value-ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn)/ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value)*100))   < 0  then cast('fail' as varchar(10))
				end as pass_fail
from		
				(
				select		ZERO_TOP_RANK_W_TIME.Ref_Prod_Location,
								ZERO_TOP_RANK_W_TIME.Analyzer_Name,
								ZERO_TOP_RANK_W_TIME.Test_Name,
								ZERO_TOP_RANK_W_TIME.Tag_ID,
								ZERO_TOP_RANK_W_TIME.Trans_Date,
								ZERO_TOP_RANK_W_TIME.Min_Tag_Value,
								TM_RANK_W_TIME.Analyzer_Desc,
								TM_RANK_W_TIME.Test_Desc,
								TM_RANK_W_TIME.ZERO_Gas_Concn,
								TM_RANK_W_TIME.ZERO_Established_Value,
								TM_RANK_W_TIME.ZERO_Max_Calib_Drift_Pct,
								min(ZERO_TOP_RANK_W_TIME.ZERO_TR_HR_Min_Comb) as MIN_ZERO_TR_HR_Min_Comb
				from
								(				
								select 		ZERO_TOP_RANK.Ref_Prod_Location,
												ZERO_TOP_RANK.Analyzer_Name,
												ZERO_TOP_RANK.Test_Name,
												ZERO_TOP_RANK.Tag_ID,
												ZERO_TOP_RANK.Trans_Date,
												ZERO_TOP_RANK.Min_Tag_Value,
												case 
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min >= 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min < 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min < 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min >= 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
												end ZERO_TR_HR_Min_Comb
								from	
												(
														select		PI_HHMMSS.Ref_Prod_Location,
																		PI_HHMMSS.Analyzer_Name,
																		PI_HHMMSS.Test_Name,
																		PI_HHMMSS.Tag_ID,
																		PI_HHMMSS.Trans_Date,
																		Min(PI_HHMMSS.Tag_Value) as Min_Tag_Value
														from		(
																		select 		PI.Ref_Prod_Location,
																						TM.Analyzer_Name, 
																						TM.Test_Name, 
																						PI.Tag_ID,
																						TM.Eff_Start_Date, 
																						TM.Eff_End_Date,
																						PI.Trans_Date,
																						PI.Trans_Hour,
																						PI.Trans_Min,
																						case 
																									when PI.Trans_Hour >= 10 and PI.Trans_Min >= 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour < 10 and PI.Trans_Min < 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour >= 10 and PI.Trans_Min < 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																									when PI.Trans_Hour < 10 and PI.Trans_Min >= 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																						end HR_Min_Comb,
																						PI.Tag_Value
																		from 		PROD_EDW_BASE.PI PI,
																		 				PROD_EDW_BASE.CEMS_TAG_MASTER TM
																		where 	PI.Trans_Date=:In_Test_Date  and
																						PI.Ref_Prod_Location=TM.Ref_Prod_Location and 
																						PI.Tag_ID=TM.PI_Tag_ID and
																						PI.Trans_Date between TM.Eff_Start_Date  and TM.Eff_End_Date 
																		) PI_HHMMSS,
																		PROD_EDW_BASE.CEMS_TAG_MASTER OTM
														where		PI_HHMMSS.Ref_Prod_Location = OTM.Ref_Prod_Location and
																		PI_HHMMSS.Analyzer_Name = OTM.Analyzer_Name and
																		PI_HHMMSS.Test_Name = OTM.Test_Name and
																		PI_HHMMSS.Tag_ID = OTM.PI_Tag_ID and
																		PI_HHMMSS.Eff_Start_Date = OTM.Eff_Start_Date and 
																		PI_HHMMSS.Eff_End_Date = OTM.Eff_End_Date and
																		PI_HHMMSS.HR_Min_Comb between OTM.ZERO_Value_Start_HHMM and OTM.ZERO_Value_End_HHMM
														group by	PI_HHMMSS.Ref_Prod_Location, PI_HHMMSS.Analyzer_Name, PI_HHMMSS.Test_Name, PI_HHMMSS.Tag_ID, PI_HHMMSS.Trans_Date
												) ZERO_TOP_RANK,
												PROD_EDW_BASE.PI PI_O
								where		ZERO_TOP_RANK.Ref_Prod_Location =	PI_O.Ref_Prod_Location and
												ZERO_TOP_RANK.Trans_Date =	PI_O.Trans_Date and	
												ZERO_TOP_RANK.Tag_ID =	 PI_O.Tag_ID 	and
												ZERO_TOP_RANK.Min_Tag_Value=PI_O.Tag_Value
								)ZERO_TOP_RANK_W_TIME,
								PROD_EDW_BASE.CEMS_TAG_MASTER TM_RANK_W_TIME
				where		ZERO_TOP_RANK_W_TIME.Ref_Prod_Location	=	TM_RANK_W_TIME.Ref_Prod_Location and					 				
								ZERO_TOP_RANK_W_TIME.Analyzer_Name		=	TM_RANK_W_TIME.Analyzer_Name and
								ZERO_TOP_RANK_W_TIME.Test_Name				=	TM_RANK_W_TIME.Test_Name and
								ZERO_TOP_RANK_W_TIME.Tag_ID				=	TM_RANK_W_TIME.PI_Tag_ID and
								ZERO_TOP_RANK_W_TIME.Trans_Date 			between TM_RANK_W_TIME.Eff_Start_Date and TM_RANK_W_TIME.Eff_End_Date and
								ZERO_TOP_RANK_W_TIME.ZERO_TR_HR_Min_Comb 	between TM_RANK_W_TIME.ZERO_Value_Start_HHMM and TM_RANK_W_TIME.ZERO_Value_End_HHMM			
				group by	ZERO_TOP_RANK_W_TIME.Ref_Prod_Location, ZERO_TOP_RANK_W_TIME.Analyzer_Name, ZERO_TOP_RANK_W_TIME.Test_Name, 	ZERO_TOP_RANK_W_TIME.Tag_ID, ZERO_TOP_RANK_W_TIME.Trans_Date,   ZERO_TOP_RANK_W_TIME.Min_Tag_Value, TM_RANK_W_TIME.Analyzer_Desc, TM_RANK_W_TIME.Test_Desc, TM_RANK_W_TIME.ZERO_Gas_Concn, TM_RANK_W_TIME.ZERO_Established_Value, TM_RANK_W_TIME.ZERO_Max_Calib_Drift_Pct
				) ZERO_TOP_RANK_W_MX_TIME;
)
--------------------------------------------------------------------------------

Replace Macro PROD_EDW_BASE_VIEWS.M_CEMS_Calib_Det (In_Test_Date date, In_Analyzer_Name VARCHAR(100))
AS
(
select 		SPAN_TOP_RANK_W_MX_TIME.Ref_Prod_Location,
				SPAN_TOP_RANK_W_MX_TIME.Analyzer_Name, 
				SPAN_TOP_RANK_W_MX_TIME.Test_Name, 
				SPAN_TOP_RANK_W_MX_TIME.Analyzer_Desc,
				SPAN_TOP_RANK_W_MX_TIME.Make,
				SPAN_TOP_RANK_W_MX_TIME.Model,
				SPAN_TOP_RANK_W_MX_TIME.Serial_No,
				SPAN_TOP_RANK_W_MX_TIME.Test_Desc,
				cast( 'Span Assessment' as varchar(50)) as Assessment_Type, 
				SPAN_TOP_RANK_W_MX_TIME.Tag_ID as PI_Tag_ID, 
				SPAN_TOP_RANK_W_MX_TIME.Trans_Date as Test_Date, 
				SPAN_TOP_RANK_W_MX_TIME.MIN_SPAN_TR_HR_Min_Comb as MinCombHrMinDecimal, 
				SPAN_TOP_RANK_W_MX_TIME.Span_Max_Calib_Drift_Pct as Max_Drift_Allowed_Pct, 
				SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn as Gas_Concn, 
				SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value as Established_Value, 
				SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value as Calib_Response, 
				((SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value-SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn)/SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value)*100 as Calib_Drift_Pct, 
				case 
						when (SPAN_TOP_RANK_W_MX_TIME.Span_Max_Calib_Drift_Pct-abs(((SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value-SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn)/SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value)*100))  >= 0 then cast('pass' as varchar(10))
						when (SPAN_TOP_RANK_W_MX_TIME.Span_Max_Calib_Drift_Pct-abs(((SPAN_TOP_RANK_W_MX_TIME.Max_Tag_Value-SPAN_TOP_RANK_W_MX_TIME.Span_Gas_Concn)/SPAN_TOP_RANK_W_MX_TIME.Span_Established_Value)*100))   < 0  then cast('fail' as varchar(10))
				end as pass_fail
from		
				(
				select		SPAN_TOP_RANK_W_TIME.Ref_Prod_Location,
								SPAN_TOP_RANK_W_TIME.Analyzer_Name,
								SPAN_TOP_RANK_W_TIME.Test_Name,
								SPAN_TOP_RANK_W_TIME.Tag_ID,
								SPAN_TOP_RANK_W_TIME.Trans_Date,
								SPAN_TOP_RANK_W_TIME.Max_Tag_Value,
								TM_RANK_W_TIME.Analyzer_Desc,
								TM_RANK_W_TIME.Make,
								TM_RANK_W_TIME.Model,
								TM_RANK_W_TIME.Serial_No,
								TM_RANK_W_TIME.Test_Desc,
								TM_RANK_W_TIME.Span_Gas_Concn,
								TM_RANK_W_TIME.Span_Established_Value,
								TM_RANK_W_TIME.Span_Max_Calib_Drift_Pct,
								min(SPAN_TOP_RANK_W_TIME.SPAN_TR_HR_Min_Comb) as MIN_SPAN_TR_HR_Min_Comb
				from
								(				
								select 		SPAN_TOP_RANK.Ref_Prod_Location,
												SPAN_TOP_RANK.Analyzer_Name,
												SPAN_TOP_RANK.Test_Name,
												SPAN_TOP_RANK.Tag_ID,
												SPAN_TOP_RANK.Trans_Date,
												SPAN_TOP_RANK.Max_Tag_Value,
												case 
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min >= 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min < 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min < 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min >= 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
												end SPAN_TR_HR_Min_Comb
								from	
												(
														select		PI_HHMMSS.Ref_Prod_Location,
																		PI_HHMMSS.Analyzer_Name,
																		PI_HHMMSS.Test_Name,
																		PI_HHMMSS.Tag_ID,
																		PI_HHMMSS.Trans_Date,
																		max(PI_HHMMSS.Tag_Value) as Max_Tag_Value
														from		(
																		select 		PI.Ref_Prod_Location,
																						TM.Analyzer_Name, 
																						TM.Test_Name, 
																						PI.Tag_ID,
																						TM.Eff_Start_Date, 
																						TM.Eff_End_Date,
																						PI.Trans_Date,
																						PI.Trans_Hour,
																						PI.Trans_Min,
																						case 
																									when PI.Trans_Hour >= 10 and PI.Trans_Min >= 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour < 10 and PI.Trans_Min < 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour >= 10 and PI.Trans_Min < 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																									when PI.Trans_Hour < 10 and PI.Trans_Min >= 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																						end HR_Min_Comb,
																						PI.Tag_Value
																		from 		PROD_EDW_BASE.PI PI,
																		 				PROD_EDW_BASE.CEMS_TAG_MASTER TM
																		where 	PI.Trans_Date=:In_Test_Date  and
																						PI.Ref_Prod_Location=TM.Ref_Prod_Location and 
																						PI.Tag_ID=TM.PI_Tag_ID and
																						PI.Trans_Date between TM.Eff_Start_Date  and TM.Eff_End_Date and
																						TM.Analyzer_Name =  :In_Analyzer_Name
																		) PI_HHMMSS,
																		PROD_EDW_BASE.CEMS_TAG_MASTER OTM
														where		PI_HHMMSS.Ref_Prod_Location = OTM.Ref_Prod_Location and
																		PI_HHMMSS.Analyzer_Name = OTM.Analyzer_Name and
																		PI_HHMMSS.Test_Name = OTM.Test_Name and
																		PI_HHMMSS.Tag_ID = OTM.PI_Tag_ID and
																		PI_HHMMSS.Eff_Start_Date = OTM.Eff_Start_Date and 
																		PI_HHMMSS.Eff_End_Date = OTM.Eff_End_Date and
																		PI_HHMMSS.HR_Min_Comb between OTM.Span_Value_Start_HHMM and OTM.Span_Value_End_HHMM
														group by	PI_HHMMSS.Ref_Prod_Location, PI_HHMMSS.Analyzer_Name, PI_HHMMSS.Test_Name, PI_HHMMSS.Tag_ID, PI_HHMMSS.Trans_Date
												) SPAN_TOP_RANK,
												PROD_EDW_BASE.PI PI_O
								where		SPAN_TOP_RANK.Ref_Prod_Location =	PI_O.Ref_Prod_Location and
												SPAN_TOP_RANK.Trans_Date =	PI_O.Trans_Date and	
												SPAN_TOP_RANK.Tag_ID =	 PI_O.Tag_ID 	and
												SPAN_TOP_RANK.Max_Tag_Value=PI_O.Tag_Value
								)SPAN_TOP_RANK_W_TIME,
								PROD_EDW_BASE.CEMS_TAG_MASTER TM_RANK_W_TIME
				where		SPAN_TOP_RANK_W_TIME.Ref_Prod_Location	=	TM_RANK_W_TIME.Ref_Prod_Location and					 				
								SPAN_TOP_RANK_W_TIME.Analyzer_Name		=	TM_RANK_W_TIME.Analyzer_Name and
								SPAN_TOP_RANK_W_TIME.Test_Name				=	TM_RANK_W_TIME.Test_Name and
								SPAN_TOP_RANK_W_TIME.Tag_ID				=	TM_RANK_W_TIME.PI_Tag_ID and
								SPAN_TOP_RANK_W_TIME.Trans_Date 			between TM_RANK_W_TIME.Eff_Start_Date and TM_RANK_W_TIME.Eff_End_Date and
								SPAN_TOP_RANK_W_TIME.SPAN_TR_HR_Min_Comb 	between TM_RANK_W_TIME.Span_Value_Start_HHMM and TM_RANK_W_TIME.Span_Value_End_HHMM			
				group by	SPAN_TOP_RANK_W_TIME.Ref_Prod_Location, SPAN_TOP_RANK_W_TIME.Analyzer_Name, SPAN_TOP_RANK_W_TIME.Test_Name, 	SPAN_TOP_RANK_W_TIME.Tag_ID, SPAN_TOP_RANK_W_TIME.Trans_Date,   SPAN_TOP_RANK_W_TIME.Max_Tag_Value, TM_RANK_W_TIME.Analyzer_Desc, TM_RANK_W_TIME.Make, TM_RANK_W_TIME.Model, TM_RANK_W_TIME.Serial_No, TM_RANK_W_TIME.Test_Desc, TM_RANK_W_TIME.Span_Gas_Concn, TM_RANK_W_TIME.Span_Established_Value, TM_RANK_W_TIME.Span_Max_Calib_Drift_Pct
				) SPAN_TOP_RANK_W_MX_TIME
union
select 		ZERO_TOP_RANK_W_MX_TIME.Ref_Prod_Location,
				ZERO_TOP_RANK_W_MX_TIME.Analyzer_Name, 
				ZERO_TOP_RANK_W_MX_TIME.Test_Name, 
				ZERO_TOP_RANK_W_MX_TIME.Analyzer_Desc,
				ZERO_TOP_RANK_W_MX_TIME.Make,
				ZERO_TOP_RANK_W_MX_TIME.Model,
				ZERO_TOP_RANK_W_MX_TIME.Serial_No,
				ZERO_TOP_RANK_W_MX_TIME.Test_Desc,
				cast( 'Zero Assessment' as varchar(50)) as Assessment_Type, 
				ZERO_TOP_RANK_W_MX_TIME.Tag_ID as PI_Tag_ID, 
				ZERO_TOP_RANK_W_MX_TIME.Trans_Date as Test_Date, 
				ZERO_TOP_RANK_W_MX_TIME.MIN_ZERO_TR_HR_Min_Comb as MinCombHrMinDecimal, 
				ZERO_TOP_RANK_W_MX_TIME.ZERO_Max_Calib_Drift_Pct as Max_Drift_Allowed_Pct, 
				ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn as Gas_Concn, 
				ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value as Established_Value, 
				ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value as Calib_Response, 
				((ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value-ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn)/ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value)*100 as Calib_Drift_Pct, 
				case 
						when (ZERO_TOP_RANK_W_MX_TIME.ZERO_Max_Calib_Drift_Pct-abs(((ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value-ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn)/ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value)*100))  >= 0 then cast('pass' as varchar(10))
						when (ZERO_TOP_RANK_W_MX_TIME.ZERO_Max_Calib_Drift_Pct-abs(((ZERO_TOP_RANK_W_MX_TIME.Min_Tag_Value-ZERO_TOP_RANK_W_MX_TIME.ZERO_Gas_Concn)/ZERO_TOP_RANK_W_MX_TIME.ZERO_Established_Value)*100))   < 0  then cast('fail' as varchar(10))
				end as pass_fail
from		
				(
				select		ZERO_TOP_RANK_W_TIME.Ref_Prod_Location,
								ZERO_TOP_RANK_W_TIME.Analyzer_Name,
								ZERO_TOP_RANK_W_TIME.Test_Name,
								ZERO_TOP_RANK_W_TIME.Tag_ID,
								ZERO_TOP_RANK_W_TIME.Trans_Date,
								ZERO_TOP_RANK_W_TIME.Min_Tag_Value,
								TM_RANK_W_TIME.Analyzer_Desc,
								TM_RANK_W_TIME.Make,
								TM_RANK_W_TIME.Model,
								TM_RANK_W_TIME.Serial_No,
								TM_RANK_W_TIME.Test_Desc,
								TM_RANK_W_TIME.ZERO_Gas_Concn,
								TM_RANK_W_TIME.ZERO_Established_Value,
								TM_RANK_W_TIME.ZERO_Max_Calib_Drift_Pct,
								min(ZERO_TOP_RANK_W_TIME.ZERO_TR_HR_Min_Comb) as MIN_ZERO_TR_HR_Min_Comb
				from
								(				
								select 		ZERO_TOP_RANK.Ref_Prod_Location,
												ZERO_TOP_RANK.Analyzer_Name,
												ZERO_TOP_RANK.Test_Name,
												ZERO_TOP_RANK.Tag_ID,
												ZERO_TOP_RANK.Trans_Date,
												ZERO_TOP_RANK.Min_Tag_Value,
												case 
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min >= 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min < 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
														when PI_O.Trans_Hour >= 10 and PI_O.Trans_Min < 10 then cast(cast(PI_O.Trans_Hour as varchar(2))||':'||'0'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
														when PI_O.Trans_Hour < 10 and PI_O.Trans_Min >= 10 then cast('0'||cast(PI_O.Trans_Hour as varchar(2))||':'||cast(PI_O.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
												end ZERO_TR_HR_Min_Comb
								from	
												(
														select		PI_HHMMSS.Ref_Prod_Location,
																		PI_HHMMSS.Analyzer_Name,
																		PI_HHMMSS.Test_Name,
																		PI_HHMMSS.Tag_ID,
																		PI_HHMMSS.Trans_Date,
																		Min(PI_HHMMSS.Tag_Value) as Min_Tag_Value
														from		(
																		select 		PI.Ref_Prod_Location,
																						TM.Analyzer_Name, 
																						TM.Test_Name, 
																						PI.Tag_ID,
																						TM.Eff_Start_Date, 
																						TM.Eff_End_Date,
																						PI.Trans_Date,
																						PI.Trans_Hour,
																						PI.Trans_Min,
																						case 
																									when PI.Trans_Hour >= 10 and PI.Trans_Min >= 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2)) ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour < 10 and PI.Trans_Min < 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS')  
																									when PI.Trans_Hour >= 10 and PI.Trans_Min < 10 then cast(cast(PI.Trans_Hour as varchar(2))||':'||'0'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																									when PI.Trans_Hour < 10 and PI.Trans_Min >= 10 then cast('0'||cast(PI.Trans_Hour as varchar(2))||':'||cast(PI.Trans_Min as varchar(2))  ||':00' as time Format  'HH:MI:SS') 
																						end HR_Min_Comb,
																						PI.Tag_Value
																		from 		PROD_EDW_BASE.PI PI,
																		 				PROD_EDW_BASE.CEMS_TAG_MASTER TM
																		where 	PI.Trans_Date=:In_Test_Date  and
																						PI.Ref_Prod_Location=TM.Ref_Prod_Location and 
																						PI.Tag_ID=TM.PI_Tag_ID and
																						PI.Trans_Date between TM.Eff_Start_Date  and TM.Eff_End_Date and
																						TM.Analyzer_Name =  :In_Analyzer_Name
																		) PI_HHMMSS,
																		PROD_EDW_BASE.CEMS_TAG_MASTER OTM
														where		PI_HHMMSS.Ref_Prod_Location = OTM.Ref_Prod_Location and
																		PI_HHMMSS.Analyzer_Name = OTM.Analyzer_Name and
																		PI_HHMMSS.Test_Name = OTM.Test_Name and
																		PI_HHMMSS.Tag_ID = OTM.PI_Tag_ID and
																		PI_HHMMSS.Eff_Start_Date = OTM.Eff_Start_Date and 
																		PI_HHMMSS.Eff_End_Date = OTM.Eff_End_Date and
																		PI_HHMMSS.HR_Min_Comb between OTM.ZERO_Value_Start_HHMM and OTM.ZERO_Value_End_HHMM
														group by	PI_HHMMSS.Ref_Prod_Location, PI_HHMMSS.Analyzer_Name, PI_HHMMSS.Test_Name, PI_HHMMSS.Tag_ID, PI_HHMMSS.Trans_Date
												) ZERO_TOP_RANK,
												PROD_EDW_BASE.PI PI_O
								where		ZERO_TOP_RANK.Ref_Prod_Location =	PI_O.Ref_Prod_Location and
												ZERO_TOP_RANK.Trans_Date =	PI_O.Trans_Date and	
												ZERO_TOP_RANK.Tag_ID =	 PI_O.Tag_ID 	and
												ZERO_TOP_RANK.Min_Tag_Value=PI_O.Tag_Value
								)ZERO_TOP_RANK_W_TIME,
								PROD_EDW_BASE.CEMS_TAG_MASTER TM_RANK_W_TIME
				where		ZERO_TOP_RANK_W_TIME.Ref_Prod_Location	=	TM_RANK_W_TIME.Ref_Prod_Location and					 				
								ZERO_TOP_RANK_W_TIME.Analyzer_Name		=	TM_RANK_W_TIME.Analyzer_Name and
								ZERO_TOP_RANK_W_TIME.Test_Name				=	TM_RANK_W_TIME.Test_Name and
								ZERO_TOP_RANK_W_TIME.Tag_ID				=	TM_RANK_W_TIME.PI_Tag_ID and
								ZERO_TOP_RANK_W_TIME.Trans_Date 			between TM_RANK_W_TIME.Eff_Start_Date and TM_RANK_W_TIME.Eff_End_Date and
								ZERO_TOP_RANK_W_TIME.ZERO_TR_HR_Min_Comb 	between TM_RANK_W_TIME.ZERO_Value_Start_HHMM and TM_RANK_W_TIME.ZERO_Value_End_HHMM			
				group by	ZERO_TOP_RANK_W_TIME.Ref_Prod_Location, ZERO_TOP_RANK_W_TIME.Analyzer_Name, ZERO_TOP_RANK_W_TIME.Test_Name, 	ZERO_TOP_RANK_W_TIME.Tag_ID, ZERO_TOP_RANK_W_TIME.Trans_Date,   ZERO_TOP_RANK_W_TIME.Min_Tag_Value, TM_RANK_W_TIME.Analyzer_Desc, TM_RANK_W_TIME.Make, TM_RANK_W_TIME.Model, TM_RANK_W_TIME.Serial_No, TM_RANK_W_TIME.Test_Desc, TM_RANK_W_TIME.ZERO_Gas_Concn, TM_RANK_W_TIME.ZERO_Established_Value, TM_RANK_W_TIME.ZERO_Max_Calib_Drift_Pct
				) ZERO_TOP_RANK_W_MX_TIME;
)
--------------------------------------------------------------------------------

Create Macro prod_edw_base_views.M_Comm_Butane (Begin_Date date, End_Date date) as
(
SELECT Eff_Date, Product, 
	zeroifnull(GallupTank)+zeroifnull(GallupRail)+zeroifnull(ElPasoTank)+zeroifnull(ElPasoRail)+zeroifnull(Artesia)+zeroifnull(JAL) AS SWTotal,
	max(CASE WHEN (Location = 'Gallup Refinery' and Vessel = 'Tank') THEN Net_Quantity END) AS GallupTank,
	max(CASE WHEN (Location = 'Gallup Refinery' and Vessel = 'Railcar') THEN Net_Quantity END) AS GallupRail,
	max(CASE WHEN Location = 'El Paso Refinery' and Vessel = 'Tank' THEN Net_Quantity END) AS ElPasoTank,
	max(CASE WHEN Location = 'El Paso Refinery' and Vessel = 'Railcar' THEN Net_Quantity END) AS ElPasoRail,
	max(CASE WHEN Location = 'Artesia' THEN Net_Quantity END) AS Artesia,
	max(CASE WHEN Location = 'JAL & Loco Hills' THEN Net_Quantity END) AS JAL
FROM
	(
	SELECT	Eff_Date, 
		Location_Category as Location, 
		Prod_Group_SubCat4 as Product, 
		CAST('Tank' as Varchar(20)) as Vessel,
		CAST(sum(Net_Quantity) as integer) as Net_Quantity
	FROM	prod_edw_base_views.PROD_UNION
	WHERE location_category IN ('Gallup Refinery', 'JAL & Loco Hills','El Paso Refinery','Artesia')
	AND prod_group_subcat4 IN ('N/M Butanes','Iso Butane')
	AND eff_date BETWEEN :Begin_Date AND :End_Date
	AND report_desc = 'Inventory'
	GROUP BY Location_Category, eff_date, prod_group_subcat4
	UNION ALL
	SELECT Eff_date, Location, Product, Vessel, Sum(Net_Quantity) AS Net_Quantity
	FROM
		(SELECT 
			Eff_date, 
			CASE WHEN LastReportedDestCity IN ('Gallup','Ciniza') THEN 'Gallup Refinery' 
				ELSE 'El Paso Refinery' END AS Location,
			CASE WHEN ProdCode IN ('NBUT','Normal Butane','Mixed Butane','MBUT') THEN 'N/M Butanes'
				ELSE 'Iso Butane' END AS Product,
				'Railcar' AS Vessel,
				Volume_BBL AS Net_Quantity
		FROM prod_edw_base_views.railcar
		WHERE L_E = 'loaded'
			AND StatusName='Layover'
			AND LastReportedDestCity IN ('GALLUP','CINIZA','EL PASO','ALFALFA','ASHTON')
			AND ProdCode in ('IBUT','NBUT','Normal Butane','MBUT','Mixed Butane','Isobutane')
			AND eff_date BETWEEN :Begin_Date AND :End_Date
		) AS a
	GROUP BY Eff_date, Location, Product, Vessel
	) AS tmpInventory
GROUP BY Eff_Date, Product
ORDER BY 2, 1 DESC 
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Contract_Pricing_Comp_P1 as
(
select		COMP24964.Cur_Date,
				cast(COMP24964.AD_Price as decimal(14,4)) as COMP24964,
				cast(COMP24970.AD_Price as decimal(14,4)) as COMP24970,
				cast(COMP24976.AD_Price as decimal(14,4)) as COMP24976,
				cast(COMP24966.AD_Price as decimal(14,4)) as COMP24966,
				cast(COMP24978.AD_Price as decimal(14,4)) as COMP24978,
				cast(COMP25060.AD_Price as decimal(14,4)) as COMP25060,
				cast(COMP24979.AD_Price as decimal(14,4)) as COMP24979,
				cast(COMP25061.AD_Price as decimal(14,4)) as COMP25061,
				cast(COMP35250.AD_Price as decimal(14,4)) as COMP35250,
				cast(COMP18688.AD_Price as decimal(14,4)) as COMP18688,
				cast(COMP03624.AD_Price as decimal(14,4)) as COMP03624,
				cast(COMP03626.AD_Price as decimal(14,4)) as COMP03626,
				cast(COMP03598.AD_Price as decimal(14,4)) as COMP03598,
				cast(COMP03610.AD_Price as decimal(14,4)) as COMP03610,
				cast(COMP03622.AD_Price as decimal(14,4)) as COMP03622,
				cast(COMP03602.AD_Price as decimal(14,4)) as COMP03602,
				cast(COMP06382.AD_Price as decimal(14,4)) as COMP06382,
				cast(COMP06394.AD_Price as decimal(14,4)) as COMP06394,
				cast(COMP06406.AD_Price as decimal(14,4)) as COMP06406,
				cast(COMP06386.AD_Price as decimal(14,4)) as COMP06386,
				cast(COMP06624.AD_Price as decimal(14,4)) as COMP06624,
				cast(COMP06636.AD_Price as decimal(14,4)) as COMP06636,
				cast(COMP06648.AD_Price as decimal(14,4)) as COMP06648,
				cast(COMP06628.AD_Price as decimal(14,4)) as COMP06628,
				cast(COMP06868.AD_Price as decimal(14,4)) as COMP06868,
				cast(COMP06880.AD_Price as decimal(14,4)) as COMP06880,
				cast(COMP06892.AD_Price as decimal(14,4)) as COMP06892,
				cast(COMP06872.AD_Price as decimal(14,4)) as COMP06872,
				cast(COMP26946.AD_Price as decimal(14,4)) as COMP26946,
				cast(COMP26952.AD_Price as decimal(14,4)) as COMP26952,
				cast(COMP26958.AD_Price as decimal(14,4)) as COMP26958,
				cast(COMP26948.AD_Price as decimal(14,4)) as COMP26948,
				cast(COMP35264.AD_Price as decimal(14,4)) as COMP35264,
				cast(COMP26960.AD_Price as decimal(14,4)) as COMP26960,
				cast(COMP26962.AD_Price as decimal(14,4)) as COMP26962
from		(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24964' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24964,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24970' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24970,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24976' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24976,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24966' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24966,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24978' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24978,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP25060' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP25060,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24979' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24979,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP25061' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP25061,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP35250' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP35250,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP18688' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP18688,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03624' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03624,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03626' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03626,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03598' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03598,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03610' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03610,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03622' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03622,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03602' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03602,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06382' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06382,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06394' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06394,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06406' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06406,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06386' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06386,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06624' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06624,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06636' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06636,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06648' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06648,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06628' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06628,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06868' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06868,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06880' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06880,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06892' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06892,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06872' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06872,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26946' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26946,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26952' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26952,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26958' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26958,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26948' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26948,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP35264' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP35264,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26960' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26960,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26962' and 
												price_type='UNBRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26962
where		COMP24964.Cur_Date=COMP24970.Cur_Date and
				COMP24964.Cur_Date=COMP24976.Cur_Date and
				COMP24964.Cur_Date=COMP24966.Cur_Date and
				COMP24964.Cur_Date=COMP24978.Cur_Date and
				COMP24964.Cur_Date=COMP25060.Cur_Date and
				COMP24964.Cur_Date=COMP24979.Cur_Date and
				COMP24964.Cur_Date=COMP25061.Cur_Date and
				COMP24964.Cur_Date=COMP35250.Cur_Date and
				COMP24964.Cur_Date=COMP18688.Cur_Date and
				COMP24964.Cur_Date=COMP03624.Cur_Date and
				COMP24964.Cur_Date=COMP03626.Cur_Date and
				COMP24964.Cur_Date=COMP03598.Cur_Date and
				COMP24964.Cur_Date=COMP03610.Cur_Date and
				COMP24964.Cur_Date=COMP03622.Cur_Date and
				COMP24964.Cur_Date=COMP03602.Cur_Date and
				COMP24964.Cur_Date=COMP06382.Cur_Date and
				COMP24964.Cur_Date=COMP06394.Cur_Date and
				COMP24964.Cur_Date=COMP06406.Cur_Date and
				COMP24964.Cur_Date=COMP06386.Cur_Date and
				COMP24964.Cur_Date=COMP06624.Cur_Date and
				COMP24964.Cur_Date=COMP06636.Cur_Date and
				COMP24964.Cur_Date=COMP06648.Cur_Date and
				COMP24964.Cur_Date=COMP06628.Cur_Date and
				COMP24964.Cur_Date=COMP06868.Cur_Date and
				COMP24964.Cur_Date=COMP06880.Cur_Date and
				COMP24964.Cur_Date=COMP06892.Cur_Date and
				COMP24964.Cur_Date=COMP06872.Cur_Date and
				COMP24964.Cur_Date=COMP26946.Cur_Date and
				COMP24964.Cur_Date=COMP26952.Cur_Date and
				COMP24964.Cur_Date=COMP26958.Cur_Date and
				COMP24964.Cur_Date=COMP26948.Cur_Date and
				COMP24964.Cur_Date=COMP35264.Cur_Date and
				COMP24964.Cur_Date=COMP26960.Cur_Date and
				COMP24964.Cur_Date=COMP26962.Cur_Date 
order by	COMP24964.Cur_Date;
);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Contract_Pricing_Comp_P2 as
(
select		COMP12496.Cur_Date,
				cast(COMP12496.AD_Price as decimal(14,4)) as COMP12496,
				cast(COMP12526.AD_Price as decimal(14,4)) as COMP12526,
				cast(COMP12530.AD_Price as decimal(14,4)) as COMP12530,
				cast(COMP12508.AD_Price as decimal(14,4)) as COMP12508,
				cast(COMP12520.AD_Price as decimal(14,4)) as COMP12520,
				cast(COMP12500.AD_Price as decimal(14,4)) as COMP12500,
				cast(COMP18814.AD_Price as decimal(14,4)) as COMP18814,
				cast(COMP27186.AD_Price as decimal(14,4)) as COMP27186,
				cast(COMP27192.AD_Price as decimal(14,4)) as COMP27192,
				cast(COMP27290.AD_Price as decimal(14,4)) as COMP27290,
				cast(COMP27188.AD_Price as decimal(14,4)) as COMP27188,
				cast(COMP13176.AD_Price as decimal(14,4)) as COMP13176,
				cast(COMP13188.AD_Price as decimal(14,4)) as COMP13188,
				cast(COMP13200.AD_Price as decimal(14,4)) as COMP13200,
				cast(COMP13180.AD_Price as decimal(14,4)) as COMP13180,
				cast(COMP13466.AD_Price as decimal(14,4)) as COMP13466,
				cast(COMP13478.AD_Price as decimal(14,4)) as COMP13478,
				cast(COMP13490.AD_Price as decimal(14,4)) as COMP13490,
				cast(COMP13470.AD_Price as decimal(14,4)) as COMP13470,
				cast(COMP26764.AD_Price as decimal(14,4)) as COMP26764,
				cast(COMP26776.AD_Price as decimal(14,4)) as COMP26776,
				cast(COMP26920.AD_Price as decimal(14,4)) as COMP26920,
				cast(COMP26768.AD_Price as decimal(14,4)) as COMP26768,
				cast(COMP26792.AD_Price as decimal(14,4)) as COMP26792,
				cast(COMP27684.AD_Price as decimal(14,4)) as COMP27684,
				cast(COMP14612.AD_Price as decimal(14,4)) as COMP14612,
				cast(COMP14624.AD_Price as decimal(14,4)) as COMP14624,
				cast(COMP14636.AD_Price as decimal(14,4)) as COMP14636,
				cast(COMP14616.AD_Price as decimal(14,4)) as COMP14616,
				cast(COMP27172.AD_Price as decimal(14,4)) as COMP27172
from		(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP12496' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP12496,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP12526' and 
												price_type='BRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP12526,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP12530' and 
												price_type='UNBRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP12530,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP12508' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP12508,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP12520' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP12520,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP12500' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP12500,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP18814' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP18814,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27186' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27186,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27192' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27192,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27290' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27290,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27188' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27188,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13176' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13176,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13188' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13188,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13200' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13200,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13180' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13180,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13466' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13466,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13478' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13478,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13490' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13490,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13470' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13470,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26764' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26764,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26776' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26776,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26920' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26920,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26768' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26768,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26792' and 
												price_type='UNBRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26792,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27684' and 
												price_type='UNBRD LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27684,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14612' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14612,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14624' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14624,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14636' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14636,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14616' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14616,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27172' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27172
where		COMP12496.Cur_Date=COMP12526.Cur_Date and
				COMP12496.Cur_Date=COMP12530.Cur_Date and
				COMP12496.Cur_Date=COMP12508.Cur_Date and
				COMP12496.Cur_Date=COMP12520.Cur_Date and
				COMP12496.Cur_Date=COMP12500.Cur_Date and
				COMP12496.Cur_Date=COMP18814.Cur_Date and
				COMP12496.Cur_Date=COMP27186.Cur_Date and
				COMP12496.Cur_Date=COMP27192.Cur_Date and
				COMP12496.Cur_Date=COMP27290.Cur_Date and
				COMP12496.Cur_Date=COMP27188.Cur_Date and
				COMP12496.Cur_Date=COMP13176.Cur_Date and
				COMP12496.Cur_Date=COMP13188.Cur_Date and
				COMP12496.Cur_Date=COMP13200.Cur_Date and
				COMP12496.Cur_Date=COMP13180.Cur_Date and
				COMP12496.Cur_Date=COMP13466.Cur_Date and
				COMP12496.Cur_Date=COMP13478.Cur_Date and
				COMP12496.Cur_Date=COMP13490.Cur_Date and
				COMP12496.Cur_Date=COMP13470.Cur_Date and
				COMP12496.Cur_Date=COMP26764.Cur_Date and
				COMP12496.Cur_Date=COMP26776.Cur_Date and
				COMP12496.Cur_Date=COMP26920.Cur_Date and
				COMP12496.Cur_Date=COMP26768.Cur_Date and
				COMP12496.Cur_Date=COMP26792.Cur_Date and
				COMP12496.Cur_Date=COMP27684.Cur_Date and
				COMP12496.Cur_Date=COMP14612.Cur_Date and
				COMP12496.Cur_Date=COMP14624.Cur_Date and
				COMP12496.Cur_Date=COMP14636.Cur_Date and
				COMP12496.Cur_Date=COMP14616.Cur_Date and
				COMP12496.Cur_Date=COMP27172.Cur_Date 
order by	COMP12496.Cur_Date;
);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Contract_Pricing_Comp_P3 as
(
select		COMP27178.Cur_Date,
				cast(COMP27178.AD_Price as decimal(14,4)) as COMP27178,
				cast(COMP27194.AD_Price as decimal(14,4)) as COMP27194,
				cast(COMP27168.AD_Price as decimal(14,4)) as COMP27168,
				cast(COMP27169.AD_Price as decimal(14,4)) as COMP27169,
				cast(COMP27173.AD_Price as decimal(14,4)) as COMP27173,
				cast(COMP27179.AD_Price as decimal(14,4)) as COMP27179,
				cast(COMP27195.AD_Price as decimal(14,4)) as COMP27195,
				cast(COMP27193.AD_Price as decimal(14,4)) as COMP27193,
				cast(COMP13480.AD_Price as decimal(14,4)) as COMP13480,
				cast(COMP13428.AD_Price as decimal(14,4)) as COMP13428,
				cast(COMP13390.AD_Price as decimal(14,4)) as COMP13390,
				cast(COMP13482.AD_Price as decimal(14,4)) as COMP13482,
				cast(null as decimal(14,4)) as Col_CA,
				cast(COMP13430.AD_Price as decimal(14,4)) as COMP13430,
				cast(COMP13392.AD_Price as decimal(14,4)) as COMP13392,
				cast(COMP13484.AD_Price as decimal(14,4)) as COMP13484,
				cast(null as decimal(14,4)) as Col_CE,
				cast(COMP26732.AD_Price as decimal(14,4)) as COMP26732,
				cast(COMP26780.AD_Price as decimal(14,4)) as COMP26780,
				cast(COMP26740.AD_Price as decimal(14,4)) as COMP26740,
				cast(COMP26734_P2.AD_Price as decimal(14,4)) as COMP26734_P2,
				cast(COMP26782.AD_Price as decimal(14,4)) as COMP26782,
				cast(COMP26742_P2.AD_Price as decimal(14,4)) as COMP26742_P2,
				cast(COMP26778.AD_Price as decimal(14,4)) as COMP26778,
				cast(COMP14626.AD_Price as decimal(14,4)) as COMP14626,
				cast(COMP14556.AD_Price as decimal(14,4)) as COMP14556,
				cast(COMP14628.AD_Price as decimal(14,4)) as COMP14628,
				cast(COMP14558.AD_Price as decimal(14,4)) as COMP14558,
				cast(COMP14630.AD_Price as decimal(14,4)) as COMP14630,
				cast(COMP11742.AD_Price as decimal(14,4)) as COMP11742
from		(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27178' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27178,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27194' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27194,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27168' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27168,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27169' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27169,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27173' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27173,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27179' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27179,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27195' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27195,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP27193' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP27193,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13480' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13480,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13428' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13428,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13390' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13390,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13482' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13482,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13430' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13430,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13392' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13392,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP13484' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP13484,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26732' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26732,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26780' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26780,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26740' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26740,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26734' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26734_P2,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26782' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26782,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26742' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26742_P2,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26778' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26778,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14626' and 
												price_type='AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14626,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14556' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14556,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14628' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14628,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14558' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14558,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP14630' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP14630,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11742' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11742
where		COMP27178.Cur_Date=COMP27194.Cur_Date and
				COMP27178.Cur_Date=COMP27168.Cur_Date and
				COMP27178.Cur_Date=COMP27169.Cur_Date and
				COMP27178.Cur_Date=COMP27173.Cur_Date and
				COMP27178.Cur_Date=COMP27179.Cur_Date and
				COMP27178.Cur_Date=COMP27195.Cur_Date and
				COMP27178.Cur_Date=COMP27193.Cur_Date and
				COMP27178.Cur_Date=COMP13480.Cur_Date and
				COMP27178.Cur_Date=COMP13428.Cur_Date and
				COMP27178.Cur_Date=COMP13390.Cur_Date and
				COMP27178.Cur_Date=COMP13482.Cur_Date and
				COMP27178.Cur_Date=COMP13430.Cur_Date and
				COMP27178.Cur_Date=COMP13392.Cur_Date and
				COMP27178.Cur_Date=COMP13484.Cur_Date and
				COMP27178.Cur_Date=COMP26732.Cur_Date and
				COMP27178.Cur_Date=COMP26780.Cur_Date and
				COMP27178.Cur_Date=COMP26740.Cur_Date and
				COMP27178.Cur_Date=COMP26734_P2.Cur_Date and
				COMP27178.Cur_Date=COMP26782.Cur_Date and
				COMP27178.Cur_Date=COMP26742_P2.Cur_Date and
				COMP27178.Cur_Date=COMP26778.Cur_Date and
				COMP27178.Cur_Date=COMP14626.Cur_Date and
				COMP27178.Cur_Date=COMP14556.Cur_Date and
				COMP27178.Cur_Date=COMP14628.Cur_Date and
				COMP27178.Cur_Date=COMP14558.Cur_Date and
				COMP27178.Cur_Date=COMP14630.Cur_Date and
				COMP27178.Cur_Date=COMP11742.Cur_Date 
order by	COMP27178.Cur_Date;
);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Contract_Pricing_Comp_P4 as
(
select		COMP11740.Cur_Date,
				cast(COMP11740.AD_Price as decimal(14,4)) as COMP11740,
				cast(COMP11752.AD_Price as decimal(14,4)) as COMP11752,
				cast(COMP11964.AD_Price as decimal(14,4)) as COMP11964,
				cast(COMP11962.AD_Price as decimal(14,4)) as COMP11962,
				cast(COMP11974.AD_Price as decimal(14,4)) as COMP11974,
				cast(COMP11950.AD_Price as decimal(14,4)) as COMP11950,
				cast(COMP11852.AD_Price as decimal(14,4)) as COMP11852,
				cast(COMP24973.AD_Price as decimal(14,4)) as COMP24973,
				cast(COMP24939.AD_Price as decimal(14,4)) as COMP24939,
				cast(COMP24947.AD_Price as decimal(14,4)) as COMP24947,
				cast(COMP03616.AD_Price as decimal(14,4)) as COMP03616,
				cast(COMP03526.AD_Price as decimal(14,4)) as COMP03526,
				cast(COMP06400.AD_Price as decimal(14,4)) as COMP06400,
				cast(COMP06326.AD_Price as decimal(14,4)) as COMP06326,
				cast(COMP06342.AD_Price as decimal(14,4)) as COMP06342,
				cast(COMP06886.AD_Price as decimal(14,4)) as COMP06886,
				cast(COMP06792.AD_Price as decimal(14,4)) as COMP06792,
				cast(COMP05436.AD_Price as decimal(14,4)) as COMP05436,
				cast(COMP24958.AD_Price as decimal(14,4)) as COMP24958,
				cast(COMP25160.AD_Price as decimal(14,4)) as COMP25160,
				cast(COMP28954.AD_Price as decimal(14,4)) as COMP28954,
				cast(COMP24298.AD_Price as decimal(14,4)) as COMP24298,
				cast(COMP26460.AD_Price as decimal(14,4)) as COMP26460,
				cast(COMP26446.AD_Price as decimal(14,4)) as COMP26446,
				cast(COMP24416.AD_Price as decimal(14,4)) as COMP24416,
				cast(COMP24414.AD_Price as decimal(14,4)) as COMP24414,
				cast(COMP25068.AD_Price as decimal(14,4)) as COMP25068,
				cast(COMP25066.AD_Price as decimal(14,4)) as COMP25066,
				cast(COMP24946.AD_Price as decimal(14,4)) as COMP24946,
				cast(COMP26932.AD_Price as decimal(14,4)) as COMP26932
from		(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11740' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11740,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11752' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11752,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11964' and 
												price_type='LOW' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11964,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11962' and 
												price_type='2 LOW AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11962,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11974' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11974,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11950' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11950,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP11852' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP11852,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24973' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24973,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24939' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24939,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24947' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24947,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03616' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03616,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP03526' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP03526,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06400' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06400,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06326' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06326,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06342' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06342,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06886' and 
												price_type='BRD AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06886,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP06792' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP06792,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP05436' and 
												price_type='CONT AVG' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP05436,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24958' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24958,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP25160' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP25160,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP28954' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP28954,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24298' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24298,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26460' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26460,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26446' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26446,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24416' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24416,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24414' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24414,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP25068' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP25068,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP25066' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP25066,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP24946' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP24946,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP26932' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP26932
where		COMP11740.Cur_Date=COMP11752.Cur_Date and
				COMP11740.Cur_Date=COMP11964.Cur_Date and
				COMP11740.Cur_Date=COMP11962.Cur_Date and
				COMP11740.Cur_Date=COMP11974.Cur_Date and
				COMP11740.Cur_Date=COMP11950.Cur_Date and
				COMP11740.Cur_Date=COMP11852.Cur_Date and
				COMP11740.Cur_Date=COMP24973.Cur_Date and
				COMP11740.Cur_Date=COMP24939.Cur_Date and
				COMP11740.Cur_Date=COMP24947.Cur_Date and 
				COMP11740.Cur_Date=COMP03616.Cur_Date and
				COMP11740.Cur_Date=COMP03526.Cur_Date and
				COMP11740.Cur_Date=COMP06400.Cur_Date and
				COMP11740.Cur_Date=COMP06326.Cur_Date and
				COMP11740.Cur_Date=COMP06342.Cur_Date and
				COMP11740.Cur_Date=COMP06886.Cur_Date and
				COMP11740.Cur_Date=COMP06792.Cur_Date and
				COMP11740.Cur_Date=COMP05436.Cur_Date and
				COMP11740.Cur_Date=COMP24958.Cur_Date and
				COMP11740.Cur_Date=COMP25160.Cur_Date and
				COMP11740.Cur_Date=COMP28954.Cur_Date and
				COMP11740.Cur_Date=COMP24298.Cur_Date and
				COMP11740.Cur_Date=COMP26460.Cur_Date and
				COMP11740.Cur_Date=COMP26446.Cur_Date and
				COMP11740.Cur_Date=COMP24416.Cur_Date and 
				COMP11740.Cur_Date=COMP24414.Cur_Date and
				COMP11740.Cur_Date=COMP25068.Cur_Date and
				COMP11740.Cur_Date=COMP25066.Cur_Date and
				COMP11740.Cur_Date=COMP24946.Cur_Date and
				COMP11740.Cur_Date=COMP26932.Cur_Date
order by	COMP11740.Cur_Date;
);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Contract_Pricing_Spots as
(
select		OPSPT00885.Cur_Date,
				cast((OPSPT00885.AD_Price/100) as decimal(14,4)) as OPSPT00885,
				cast((OPSPT00732.AD_Price/100) as decimal(14,4)) as OPSPT00732,
				cast((OPSPT00668.AD_Price/100) as decimal(14,4)) as OPSPT00668,
				cast((OPSPT00837.AD_Price/100) as decimal(14,4)) as OPSPT00837,
				cast((OPSPT00656.AD_Price/100) as decimal(14,4)) as OPSPT00656,
				cast((OPSPT00660.AD_Price/100) as decimal(14,4)) as OPSPT00660,
				cast((OPSPT00676.AD_Price/100) as decimal(14,4)) as OPSPT00676,
				cast((OPSPT00689.AD_Price/100) as decimal(14,4)) as OPSPT00689,
				cast((OPSPT00685.AD_Price/100) as decimal(14,4)) as OPSPT00685,
				cast((OPSPT00683.AD_Price/100) as decimal(14,4)) as OPSPT00683,
				cast((OPSPT00673.AD_Price/100) as decimal(14,4)) as OPSPT00673,
				cast((OPSPT00653.AD_Price/100) as decimal(14,4)) as OPSPT00653,
				cast((OPSPT00674.AD_Price/100) as decimal(14,4)) as OPSPT00674,
				cast((OPSPT00799.AD_Price/100) as decimal(14,4)) as OPSPT00799,
				cast((OPSPT00800.AD_Price/100) as decimal(14,4)) as OPSPT00800,
				cast((OPSPT00792.AD_Price/100) as decimal(14,4)) as OPSPT00792,
				cast((OPSPT00797.AD_Price/100) as decimal(14,4)) as OPSPT00797,
				cast((OPSPT01004.AD_Price/100) as decimal(14,4)) as OPSPT01004,
				cast((PA0003948.AD_Price/100) as decimal(14,4)) as PA0003948,
				cast((PA0002760.AD_Price/100) as decimal(14,4)) as PA0002760,
				cast((OPSPT01004_P2.AD_Price/100) as decimal(14,4)) as OPSPT01004_P2,
				cast((OPSPT00749.AD_Price/100) as decimal(14,4)) as OPSPT00749,
				cast((X03UTTR201G.AD_Price) as decimal(14,4)) as X03UTTR201G,
				cast((X04UTTR201G.AD_Price) as decimal(14,4)) as X04UTTR201G,
				cast((X03UTTR250G.AD_Price) as decimal(14,4)) as X03UTTR250G,
				cast((COMP25162.AD_Price) as decimal(14,4)) as COMP25162,
				cast((COMP05392.AD_Price) as decimal(14,4)) as COMP05392,
				cast((COMP25070.AD_Price) as decimal(14,4)) as COMP25070,
				cast((COMP04864.AD_Price) as decimal(14,4)) as COMP04864
from		(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00885' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00885,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00732' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00732,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00668' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00668,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00837' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00837,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00656' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00656,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00660' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00660,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00676' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00676,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00689' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00689,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00685' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00685,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00683' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00683,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00673' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00673,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00653' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00653,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00674' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00674,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00799' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00799,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00800' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00800,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00792' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00792,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00797' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00797,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT01004' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT01004,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, avg(Price) as Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='PA0003948' and 
												price_type in ('value high','value low') and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								group by Price_Eff_Date				
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) PA0003948,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, avg(Price) as Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='PA0002760' and 
												price_type in ('value high','value low') and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								group by Price_Eff_Date												
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) PA0002760,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT01004' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT01004_P2,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='OPSPT00749' and 
												price_type='Average' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) OPSPT00749,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03UTTR201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03UTTR201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='04UTTR201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X04UTTR201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03UTTR250G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03UTTR250G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP25162' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP25162,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP05392' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP05392,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP25070' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP25070,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='COMP04864' and 
												price_type='RACK' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) COMP04864
where		OPSPT00885.Cur_Date=OPSPT00732.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00668.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00837.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00656.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00660.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00676.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00689.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00685.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00683.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00673.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00653.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00674.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00799.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00800.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00792.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00797.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT01004.Cur_Date and
				OPSPT00885.Cur_Date=PA0003948.Cur_Date and
				OPSPT00885.Cur_Date=PA0002760.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT01004_P2.Cur_Date and
				OPSPT00885.Cur_Date=OPSPT00749.Cur_Date and
				OPSPT00885.Cur_Date=X03UTTR201G.Cur_Date and
				OPSPT00885.Cur_Date=X04UTTR201G.Cur_Date and
				OPSPT00885.Cur_Date=X03UTTR250G.Cur_Date and
				OPSPT00885.Cur_Date=COMP25162.Cur_Date and
				OPSPT00885.Cur_Date=COMP05392.Cur_Date and
				OPSPT00885.Cur_Date=COMP25070.Cur_Date and
				OPSPT00885.Cur_Date=COMP04864.Cur_Date
order by	OPSPT00885.Cur_Date;
);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Contract_Pricing_WRW as
(
select		X18UWRW201G.Cur_Date,
				cast(X18UWRW201G.AD_Price as decimal(14,4)) as X18UWRW201G,
				cast(X06UWRW201G.AD_Price as decimal(14,4)) as X06UWRW201G,
				cast(X02UWRW201G.AD_Price as decimal(14,4)) as X02UWRW201G,
				cast(X09UWRW201G.AD_Price as decimal(14,4)) as X09UWRW201G,
				cast(X03UWRW201G.AD_Price as decimal(14,4)) as X03UWRW201G,
				cast(X04UWRW201G.AD_Price as decimal(14,4)) as X04UWRW201G,
				cast(X18UWRW486G.AD_Price as decimal(14,4)) as X18UWRW486G,
				cast(X06UWRW486G.AD_Price as decimal(14,4)) as X06UWRW486G,
				cast(X06UWRW7486G.AD_Price as decimal(14,4)) as X06UWRW7486G,
				cast(X03UWRW701G.AD_Price as decimal(14,4)) as X03UWRW701G,
				cast(X09UWRW486G.AD_Price as decimal(14,4)) as X09UWRW486G,
				cast(X03UWRW487G.AD_Price as decimal(14,4)) as X03UWRW487G,
				cast(X04UWRW487G.AD_Price as decimal(14,4)) as X04UWRW487G,
				cast(X03BG76487G.AD_Price as decimal(14,4)) as X03BG76487G,
				cast(X04BG76487G.AD_Price as decimal(14,4)) as X04BG76487G,
				cast(X03BCON487G.AD_Price as decimal(14,4)) as X03BCON487G,
				cast(X03BSHL487G.AD_Price as decimal(14,4)) as X03BSHL487G,
				cast(X18BCON486G.AD_Price as decimal(14,4)) as X18BCON486G,
				cast(X02BSHL486G.AD_Price as decimal(14,4)) as X02BSHL486G,
				cast(X02BCON486G.AD_Price as decimal(14,4)) as X02BCON486G,
				cast(X02BG76186G.AD_Price as decimal(14,4)) as X02BG76186G,
				cast(X01BSHL486G.AD_Price as decimal(14,4)) as X01BSHL486G,
				cast(X18BSHL486G.AD_Price as decimal(14,4)) as X18BSHL486G,
				cast(X18BCON486G_P2.AD_Price as decimal(14,4)) as X18BCON486G_P2,
				cast(X01BCON486G.AD_Price as decimal(14,4)) as X01BCON486G				
from		(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='18UWRW201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X18UWRW201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='06UWRW201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X06UWRW201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='02UWRW201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X02UWRW201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='09UWRW201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X09UWRW201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03UWRW201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03UWRW201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='04UWRW201G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X04UWRW201G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='18UWRW486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X18UWRW486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='06UWRW486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X06UWRW486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='06UWRW7486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X06UWRW7486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03UWRW701G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03UWRW701G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='09UWRW486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X09UWRW486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03UWRW487G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03UWRW487G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='04UWRW487G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X04UWRW487G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03BG76487G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03BG76487G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='04BG76487G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X04BG76487G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03BCON487G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03BCON487G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='03BSHL487G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X03BSHL487G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='18BCON486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X18BCON486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='02BSHL486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X02BSHL486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='02BCON486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X02BCON486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='02BG76186G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X02BG76186G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='01BSHL486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X01BSHL486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='18BSHL486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X18BSHL486G,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='18BCON486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X18BCON486G_P2,
				(
				select 		All_Days.Cur_Date, 
								Price_Days.Price,
								max(Price_Days.Price) over (ORDER BY All_Days.Cur_Date RESET WHEN Price_Days.Price IS NOT NULL) as AD_Price
				from		(
								select 		CDT.Cur_Date 
								from 		prod_edw_base_views.Cur_Date CDT
								where 	CDT.Cur_Date between '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) All_Days left outer join
								(
								select 		Price_Eff_Date, Price
								from 		prod_edw_base_views.Combined_Pricing 
								where 	pricing_code='01BCON486G' and 
												price_type='Western Giant Rack' and
												Price_Eff_Time='18:00:00' and
												Price_Eff_Date between  '2015-01-01' and (CURRENT_DATE-extract(day from (CURRENT_DATE)))
								) Price_Days on All_Days.Cur_Date=Price_Days.Price_Eff_Date
				) X01BCON486G
where		X18UWRW201G.Cur_Date=X06UWRW201G.Cur_Date and
				X18UWRW201G.Cur_Date=X02UWRW201G.Cur_Date and
				X18UWRW201G.Cur_Date=X09UWRW201G.Cur_Date and
				X18UWRW201G.Cur_Date=X03UWRW201G.Cur_Date and
				X18UWRW201G.Cur_Date=X04UWRW201G.Cur_Date and
				X18UWRW201G.Cur_Date=X18UWRW486G.Cur_Date and
				X18UWRW201G.Cur_Date=X06UWRW486G.Cur_Date and
				X18UWRW201G.Cur_Date=X06UWRW7486G.Cur_Date and
				X18UWRW201G.Cur_Date=X03UWRW701G.Cur_Date and
				X18UWRW201G.Cur_Date=X09UWRW486G.Cur_Date and
				X18UWRW201G.Cur_Date=X03UWRW487G.Cur_Date and
				X18UWRW201G.Cur_Date=X04UWRW487G.Cur_Date and
				X18UWRW201G.Cur_Date=X03BG76487G.Cur_Date and
				X18UWRW201G.Cur_Date=X04BG76487G.Cur_Date and
				X18UWRW201G.Cur_Date=X03BCON487G.Cur_Date and
				X18UWRW201G.Cur_Date=X03BSHL487G.Cur_Date and
				X18UWRW201G.Cur_Date=X18BCON486G.Cur_Date and
				X18UWRW201G.Cur_Date=X02BSHL486G.Cur_Date and
				X18UWRW201G.Cur_Date=X02BCON486G.Cur_Date and
				X18UWRW201G.Cur_Date=X02BG76186G.Cur_Date and
				X18UWRW201G.Cur_Date=X01BSHL486G.Cur_Date and
				X18UWRW201G.Cur_Date=X18BSHL486G.Cur_Date and
				X18UWRW201G.Cur_Date=X18BCON486G_P2.Cur_Date and
				X18UWRW201G.Cur_Date =X01BCON486G.Cur_Date
order by	X18UWRW201G.Cur_Date;
);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_CRUDE_CHARGE (Begin_Date DATE, End_Date DATE) AS
(
SELECT CAST(tmpInventory.crude_type AS VARCHAR(4))
	,CASE WHEN CAST(SUM(Inv_Open)/1000 AS DECIMAL(10,1)) < 0 THEN 0 ELSE CAST(SUM(Inv_Open)/1000 AS DECIMAL(10,1)) END AS Inv_Open_Final
	,CASE WHEN CAST(SUM(Inv_close)/1000 AS DECIMAL(10,1)) <0 THEN 0 ELSE CAST(SUM(Inv_close)/1000 AS DECIMAL(10,1)) END  AS Inv_Close_Final
	,CASE WHEN MAX(Receipts) <0 THEN 0 ELSE MAX(Receipts) END AS Receipts_Final
	,MAX(H2O_Cut/1000) AS H2O_Cut_Final
	,CASE WHEN (Inv_Open_Final-Inv_Close_Final+Receipts_Final-H2O_Cut_Final) < 0 
		THEN 0 
		ELSE (Inv_Open_Final-Inv_Close_Final+Receipts_Final-H2O_Cut_Final) 
	END AS CrudeCharge
FROM
	(	
	SELECT	
		CASE 
			WHEN tag_value_dcs IN ('SWT CRD') THEN 'WTI'
			WHEN tag_value_dcs = ('WTSY') THEN 'YTS'
			WHEN tag_value_dcs = ('WTSW') THEN 'WTS'
		END AS Crude_Type
		,CASE WHEN pi.trans_date = :Begin_Date THEN Tag_Value END AS Inv_Open
		,CASE WHEN pi.trans_date = :End_Date THEN Tag_Value END AS Inv_Close
	FROM prod_edw_base_views.PI
	INNER JOIN prod_edw_base_views.pi_material
	ON pi_material.ref_prod_location = pi.ref_prod_location
		AND pi_material.trans_date = :Begin_Date
		AND pi_material.tag_id = SUBSTR(pi.tag_id,1,5)||'.PV'
	WHERE pi.tag_id IN ('TK137.NET_PPL','TK190.NET_PPL','TK192.NET_PPL','TK210.NET_PPL','TK191.NET_PPL','TK211.NET_PPL')
		AND pi.trans_date BETWEEN :Begin_Date AND :End_Date
		AND trans_hour = 3
		AND trans_min = 0
	) AS tmpInventory
LEFT OUTER JOIN
	(
	SELECT 
		CASE 
			WHEN tag_value_dcs IN ('SWT CRD') THEN 'WTI'
			WHEN tag_value_dcs = ('WTSY') THEN 'YTS'
			WHEN tag_value_dcs = ('WTSW') THEN 'WTS'
		END AS Crude_Type
		,SUM((CASE WHEN Vol_Final_Raw = -1 THEN StrapVolat1Foot*Lvl_Final ELSE Vol_Final_Raw END)
			- (CASE WHEN Vol_Initial_Raw = -1 THEN StrapVolat1Foot*Lvl_Initial ELSE Vol_Initial_Raw	END)) AS H2O_Cut
	FROM
		(
		SELECT PI.Ref_Prod_Location,
			SUBSTRING(tag_id FROM 1 FOR 1)||'0'||SUBSTRING(tag_id FROM 3 FOR 3) AS Tank_Id
			,MAX(CASE WHEN trans_date = :Begin_Date AND SUBSTRING(tag_id FROM 11 FOR 3)='LVL' THEN Tag_Value END) AS Lvl_Initial
			,MAX(CASE WHEN trans_date = :Begin_Date AND SUBSTRING(tag_id FROM 11 FOR 3)='VOL' THEN Tag_Value END) AS Vol_Initial_Raw
			,MAX(CASE WHEN trans_date = :End_Date AND SUBSTRING(tag_id FROM 11 FOR 3)='LVL' THEN Tag_Value END) AS Lvl_Final
			,MAX(CASE WHEN trans_date = :End_Date AND SUBSTRING(tag_id FROM 11 FOR 3)='VOL' THEN Tag_Value END) AS Vol_Final_Raw
			,MAX(Product_Quantity) AS StrapVolAt1Foot
		FROM prod_edw_base_views.PI
		INNER JOIN
			(
			SELECT	Tank_Number, Ref_Prod_Location, Product_Quantity
			FROM prod_edw_base_views.STRAPPING
			WHERE product_height = 1
				AND ref_prod_location = 'El Paso Refinery'
				AND tank_number IN ('T0137','T0210','T0211','T0190','T0191','T0192')
			) AS tmpStrapping
		ON PI.Ref_Prod_Location = tmpStrapping.Ref_Prod_Location
			AND SUBSTRING(PI.tag_id FROM 1 FOR 1)||'0'||SUBSTRING(PI.tag_id FROM 3 FOR 3) = tmpStrapping.Tank_Number
		WHERE tag_id IN ('tk137.h2o_lvl','tk210.h2o_lvl','tk211.h2o_lvl','tk190.h2o_lvl','tk191.h2o_lvl','tk192.h2o_lvl'
		,'tk137.h2o_vol','tk210.h2o_vol','tk211.h2o_vol','tk190.h2o_vol','tk191.h2o_vol','tk192.h2o_vol')
		AND trans_date BETWEEN :Begin_Date AND :End_Date
		AND trans_hour =3
		AND trans_min = 0
		AND PI.ref_prod_location = 'El Paso Refinery'
		GROUP BY PI.Ref_Prod_location, Tank_Id
		) AS tmpH2OCut2
	INNER JOIN prod_edw_base_views.pi_material
	ON pi_material.ref_prod_location = tmpH2OCut2.Ref_Prod_Location
		AND pi_material.trans_date = :Begin_Date
		AND pi_material.tag_id = 'TK'||SUBSTR(tmpH2OCut2.Tank_ID,3,3)||'.PV'
	GROUP BY crude_type
	) AS tmpH2OCut
ON tmpInventory.Crude_Type =  tmpH2OCut.Crude_Type
	
LEFT OUTER JOIN
	(
	SELECT Omni_Crude_Type AS Crude_Type, CAST(SUM(Volume_Corr)/1000 AS DECIMAL(10,1)) AS Receipts
	FROM
		(
	SELECT *
	FROM
		(
		SELECT trans_date, trans_hour, trans_min, batch_marker
			,CASE
				WHEN trans_date=:Begin_Date AND trans_hour=0 AND trans_min=0 AND Omni_CrudeType=1 THEN 'WTS'
				WHEN trans_date=:Begin_Date AND trans_hour=0 AND trans_min=0 AND Omni_CrudeType=2 THEN 'WTI'
				WHEN trans_date=:Begin_Date AND trans_hour=0 AND trans_min=0 AND Omni_CrudeType=3 THEN 'YTS'
				WHEN trans_date=:End_Date AND trans_hour=0 AND trans_min=0 AND Omni_CrudeType=1 THEN 'WTS'
				WHEN trans_date=:End_Date AND trans_hour=0 AND trans_min=0 AND Omni_CrudeType=2 THEN 'WTI'
				WHEN trans_date=:End_Date AND trans_hour=0 AND trans_min=0 AND Omni_CrudeType=3 THEN 'YTS'
				WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=1 THEN 'WTS'
				WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=2 THEN 'WTI'
				WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=3 THEN 'YTS'
				WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=1 THEN 'WTS'
				WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=2 THEN 'WTI'
				WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=3 THEN 'YTS'
			END AS Omni_Crude_Type
			,CASE 
				WHEN trans_date = :Begin_Date AND trans_hour = 0 AND trans_min = 0 AND batch_marker = 1 THEN 0
				WHEN trans_date = :Begin_Date AND trans_hour = 0 AND trans_min = 0 AND batch_marker = 0 
					AND SUM(Batch_Marker) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) = 0 THEN 0
				WHEN trans_date = :End_Date AND trans_hour = 0 AND trans_min = 0 AND batch_marker = 0 THEN Volume_Corr
				WHEN trans_date = :End_Date AND trans_hour = 0 AND trans_min = 0 AND batch_marker = 1 
					AND SUM(Batch_Marker) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) = 1 THEN 0
				WHEN Batch_Marker = 0 THEN Volume_Corr*-1
				WHEN Batch_Marker = 1 THEN Volume_Corr
			END AS Volume_Corr 
		FROM
			(
			SELECT pi.trans_date, pi.trans_hour, pi.trans_min, tag_value AS Volume_Omni, batch_marker
				,Volume_Omni - SUM(Volume_Omni) OVER (ORDER BY pi.trans_date, pi.trans_hour, pi.trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS Flow_Rate
			,	CAST(CASE 
					WHEN Batch_Marker = 1 THEN Volume_Omni + Flow_Rate
					ELSE Volume_Omni
				END AS INTEGER) AS Volume_Corr
				,Omni_CrudeType
			FROM prod_edw_base_views.pi
			LEFT OUTER JOIN
				(
				SELECT  trans_date, trans_hour, trans_min, Batch_Marker
				FROM
					(
					SELECT trans_date, trans_hour, trans_min
						,CAST(tag_value AS INTEGER) AS Batch_Volume_Raw
						-- *** Set START and END markers if flow rate changes by more than 500
						,CASE 
							WHEN trans_date = :Begin_Date AND trans_hour = 0 AND trans_min = 0 THEN 0
							WHEN trans_date = :End_Date AND trans_hour = 0 AND trans_min = 0 THEN 1
							WHEN Batch_Volume_Raw - SUM(Batch_Volume_Raw) OVER (ORDER BY trans_date,trans_hour, trans_min
								ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) < -500 THEN 0 
							WHEN Batch_Volume_Raw - SUM(Batch_Volume_Raw) OVER (ORDER BY trans_date,trans_hour, trans_min
								ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) > 500 THEN 1 
						END AS Batch_Marker
					FROM prod_edw_base_views.PI
					WHERE tag_id = '61ci901'
						AND ref_prod_location = 'El Paso Refinery'
						AND trans_date BETWEEN :Begin_Date-4 AND :End_Date
					) AS tmpBatchDefine
				WHERE Batch_Marker IS NOT NULL
				) AS tmpBatchDefine
			ON pi.trans_date = tmpBatchDefine.trans_date
				AND pi.trans_hour = tmpBatchDefine.trans_hour
				AND pi.trans_min = tmpBatchDefine.trans_min
			LEFT OUTER JOIN
				(
				SELECT trans_date, trans_hour, trans_min
					,CAST(MAX(CASE WHEN tag_id = '61AM700' THEN tag_value end) AS BIGINT) AS Volume_Accumulator
					,CAST(MAX(CASE WHEN tag_id = '61RP500' THEN tag_value end) AS INTEGER) AS Omni_CrudeType
					,CAST(MAX(CASE WHEN tag_id = '61CI901' THEN tag_value end) AS INTEGER) AS Volume_Omni
				FROM prod_edw_base_views.pi
				WHERE tag_id IN ('61AM700','61RP500','61CI901')
				AND ref_prod_location = 'El Paso Refinery'
				GROUP BY trans_date, trans_hour, trans_min
				) AS tmpAccumulator
			ON pi.trans_date = tmpAccumulator.trans_date
				AND pi.trans_hour = tmpAccumulator.trans_hour
				AND pi.trans_min = tmpAccumulator.trans_min
			WHERE pi.trans_date BETWEEN :Begin_Date-2 AND :End_Date
				AND tag_id = '61ci901'
				AND ref_prod_location = 'El Paso Refinery'
			) AS tmpSubFinal2
		) AS tmpSubFinal
	WHERE 
		batch_marker IS NOT NULL
		AND 
		CAST(CAST(trans_date AS VARCHAR(10)) || ' ' || 
			CASE WHEN trans_hour < 10 THEN '0'||CAST(trans_hour AS VARCHAR(2)) ELSE CAST(trans_hour AS VARCHAR(2)) END
			|| ':' || 
			CASE WHEN trans_min < 10 THEN '0'||CAST(trans_min AS VARCHAR(2)) ELSE CAST(trans_min AS VARCHAR(2)) END 
			|| ':00' AS TIMESTAMP(0)) 
			BETWEEN CAST(CAST(:Begin_Date AS DATE FORMAT 'YYYY-MM-DD')||' 00:00:00' AS TIMESTAMP) AND CAST(CAST(:End_Date AS DATE FORMAT 'YYYY-MM-DD')||' 00:00:00' AS TIMESTAMP)
	UNION ALL
		SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'WTI' AS Omni_Crude_Type, 0 AS Volume_Corr
		FROM prod_edw_base_views.pi
		WHERE trans_date = :Begin_Date
			AND trans_hour = 0
			AND trans_min = 0
			AND tag_id = '61ci901'
	UNION ALL
		SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'WTS' AS Omni_Crude_Type, 0 AS Volume_Corr
		FROM prod_edw_base_views.pi
		WHERE trans_date = :Begin_Date
			AND trans_hour = 0
			AND trans_min = 0
			AND tag_id = '61ci901'
	UNION ALL
		SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'YTS' AS Omni_Crude_Type, 0 AS Volume_Corr
		FROM prod_edw_base_views.pi
		WHERE trans_date = :Begin_Date
			AND trans_hour = 0
			AND trans_min = 0
			AND tag_id = '61ci901'
		--ORDER BY 1,2,3
		) AS tmpReceipts
	GROUP BY Omni_Crude_Type	
	) AS tmpReceipts
ON tmpInventory.crude_type = tmpReceipts.Crude_Type	
	
GROUP BY tmpInventory.Crude_Type

UNION ALL

SELECT 'SLOP' AS Crude_Type
	,CAST(SUM(tag_value)/1440000 AS DECIMAL(10,1)) AS Inv_Open_Final
	,0 AS Inv_Close_Final
	,0 AS Receipts_Final
	,0 AS H2O_Cut
	,CAST(SUM(tag_value)/1440000 AS DECIMAL(10,1)) AS Crude_Charge
FROM prod_edw_base_views.pi
WHERE trans_date BETWEEN :Begin_Date AND  :End_Date-1
	AND tag_id IN ('16FC203.PV','01FC005.PV')

ORDER BY 1
;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_CRUDE_ELPKM_FEEDS (Begin_Date DATE, End_Date DATE) AS
	(
	SELECT product_code
		,CASE WHEN SUM(NSV)>0 THEN SUM(NSV)
			ELSE 0
		END AS NSV
	FROM
		(
			SELECT tmpTank_Vol.eff_date, tmpTank_Vol.tank_numb
				,CASE 
					WHEN tag_value_dcs = 'SWT CRD' THEN 'Sweet' 
					WHEN tag_value_dcs = 'SOUR CRD' THEN 'Wasson Sour' 
					WHEN tag_value_dcs = 'WTSW' THEN 'Wasson Sour' 
					WHEN tag_value_dcs = 'WTSY' THEN 'Yates Sour' 
				END AS product_code
				,CAST('START' AS VARCHAR(10)) AS Vol_Type
				,CAST(MAX(Temp_Factor)*MAX(Tank_Vol) AS INTEGER) AS NSV
			FROM
				(
				SELECT	trans_date AS eff_date, Ref_Prod_Location
						,'T0'||SUBSTR(tag_id,3,3) AS Tank_Numb
						,CAST(NULL AS DECIMAL(10,1)) AS Tank_Temp
						,CAST(NULL AS DECIMAL(15,4)) AS Temp_Factor
						,Tag_Value AS Tank_Vol
				FROM prod_edw_base_views.PI
				WHERE trans_date = :Begin_Date
				AND trans_hour = 6
				AND trans_min = 0
				AND tag_id IN ('tk137.vol','tk190.vol','tk191.vol','tk192.vol','tk210.vol','tk211.vol')
				UNION ALL
				SELECT	trans_date, Ref_Prod_Location
						,'T0'||SUBSTR(tag_id,3,3) AS Tank_Numb
						,Tag_Value AS Tank_Temp
						,Temp_Factor
						,NULL AS Tank_Vol
				FROM prod_edw_base_views.PI
				INNER JOIN prod_edw_base_views.Tank_Temp_Correct
					ON PI.Tag_Value BETWEEN Tank_Temp_Correct.Temp_Low AND Tank_Temp_Correct.Temp_High
				WHERE trans_date = :Begin_Date
				AND trans_hour = 6
				AND trans_min = 0
				AND tag_id IN ('tk137.temp','tk190.temp','tk191.temp','tk192.temp','tk210.temp','tk211.temp')
				) AS tmpTank_Vol
			INNER JOIN
				(
				SELECT	master.Ref_Prod_Location, Master_Code AS Tank_Numb, max_op_qty
				FROM prod_edw_base_views.Master
				INNER JOIN tank_info
				ON master.ref_prod_location = tank_info.ref_prod_location
					AND master.master_id = tank_info.tank_id
				WHERE master_code LIKE 'T%'
					and master_code <> 'T0190'
				) AS tmpTank
			ON tmpTank.Ref_Prod_Location = tmpTank_Vol.Ref_Prod_Location
				AND tmpTank.Tank_Numb = tmpTank_Vol.Tank_Numb
			INNER JOIN prod_edw_base_views.pi_material
			ON tmpTank_Vol.eff_date = pi_material.trans_date
				AND 'tk'||SUBSTR(tmpTank.tank_numb,3,3)||'.pv' = pi_material.tag_id
			GROUP BY  tmpTank_Vol.ref_prod_location, tmpTank_Vol.eff_date, tmpTank_Vol.tank_numb, product_code
		
		UNION ALL
		
		SELECT tmpTank_Vol.eff_date, tmpTank_Vol.tank_numb
			,CASE 
				WHEN tag_value_dcs = 'SWT CRD' THEN 'Sweet' 
				WHEN tag_value_dcs = 'SOUR CRD' THEN 'Wasson Sour' 
				WHEN tag_value_dcs = 'WTSW' THEN 'Wasson Sour' 
				WHEN tag_value_dcs = 'WTSY' THEN 'Yates Sour' 
			END AS product_code
			,'END' AS Vol_Type
			,CAST(MAX(Temp_Factor)*MAX(Tank_Vol*-1) AS INTEGER) AS NSV
			FROM
				(
				SELECT	trans_date AS eff_date, Ref_Prod_Location
						,'T0'||SUBSTR(tag_id,3,3) AS Tank_Numb
						,CAST(NULL AS DECIMAL(10,1)) AS Tank_Temp
						,CAST(NULL AS DECIMAL(15,4)) AS Temp_Factor
						,Tag_Value AS Tank_Vol
				FROM prod_edw_base_views.PI
				WHERE trans_date = :End_Date
				AND trans_hour = 6
				AND trans_min = 0
				AND tag_id IN ('tk137.vol','tk190.vol','tk191.vol','tk192.vol','tk210.vol','tk211.vol')
				UNION ALL
				SELECT	trans_date, Ref_Prod_Location
						,'T0'||SUBSTR(tag_id,3,3) AS Tank_Numb
						,Tag_Value AS Tank_Temp
						,Temp_Factor
						,NULL AS Tank_Vol
				FROM prod_edw_base_views.PI
				INNER JOIN prod_edw_base_views.Tank_Temp_Correct
					ON PI.Tag_Value BETWEEN Tank_Temp_Correct.Temp_Low AND Tank_Temp_Correct.Temp_High
				WHERE trans_date = :End_Date
				AND trans_hour = 6
				AND trans_min = 0
				AND tag_id IN ('tk137.temp','tk190.temp','tk191.temp','tk192.temp','tk210.temp','tk211.temp')
				) AS tmpTank_Vol
			INNER JOIN
				(
				SELECT	master.Ref_Prod_Location, Master_Code AS Tank_Numb, max_op_qty
				FROM prod_edw_base_views.Master
				INNER JOIN tank_info
				ON master.ref_prod_location = tank_info.ref_prod_location
					AND master.master_id = tank_info.tank_id
				WHERE master_code LIKE 'T%'
					and master_code <> 'T0190'
				) AS tmpTank
			ON tmpTank.Ref_Prod_Location = tmpTank_Vol.Ref_Prod_Location
				AND tmpTank.Tank_Numb = tmpTank_Vol.Tank_Numb
			INNER JOIN prod_edw_base_views.pi_material
			ON tmpTank_Vol.eff_date = pi_material.trans_date
				AND 'tk'||SUBSTR(tmpTank.tank_numb,3,3)||'.pv' = pi_material.tag_id
			GROUP BY  tmpTank_Vol.ref_prod_location, tmpTank_Vol.eff_date, tmpTank_Vol.tank_numb, product_code

		UNION ALL
			
			SELECT CAST(:End_Date AS DATE) AS eff_date, 'XXX' AS Tank_Numb, Omni_Crude_Type AS Product_Code, 'RECEIPT' AS Vol_Type
			,Volume_Corr AS NSV
			FROM
				(
				SELECT *
				FROM
					(
					SELECT trans_date, trans_hour, trans_min, batch_marker
						,CASE
							WHEN trans_date=:Begin_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=1 THEN 'Wasson Sour'
							WHEN trans_date=:Begin_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=2 THEN 'Sweet'
							WHEN trans_date=:Begin_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=3 THEN 'Yates Sour'
							WHEN trans_date=:End_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=1 THEN 'Wasson Sour'
							WHEN trans_date=:End_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=2 THEN 'Sweet'
							WHEN trans_date=:End_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=3 THEN 'Yates Sour'
							WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=1 THEN 'Wasson Sour'
							WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=2 THEN 'Sweet'
							WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=3 THEN 'Yates Sour'
							WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=1 THEN 'Wasson Sour'
							WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=2 THEN 'Sweet'
							WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=3 THEN 'Yates Sour'
						END AS Omni_Crude_Type
						,CASE 
							WHEN trans_date = :Begin_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 1 THEN 0
							WHEN trans_date = :Begin_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 0 
								AND SUM(Batch_Marker) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) = 0 THEN 0
							WHEN trans_date = :End_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 0 THEN Volume_Corr
							WHEN trans_date = :End_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 1 
								AND SUM(Batch_Marker) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) = 1 THEN 0
							WHEN Batch_Marker = 0 THEN Volume_Corr*-1
							WHEN Batch_Marker = 1 THEN Volume_Corr
						END AS Volume_Corr 
					FROM
						(
						SELECT pi.trans_date, pi.trans_hour, pi.trans_min, tag_value AS Volume_Omni, batch_marker
							,Volume_Omni - SUM(Volume_Omni) OVER (ORDER BY pi.trans_date, pi.trans_hour, pi.trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS Flow_Rate
						,	CAST(CASE 
								WHEN Batch_Marker = 1 THEN Volume_Omni + Flow_Rate
								ELSE Volume_Omni
							END AS INTEGER) AS Volume_Corr
							,Omni_CrudeType
						FROM prod_edw_base_views.pi
						LEFT OUTER JOIN
							(
							SELECT  trans_date, trans_hour, trans_min, Batch_Marker
							FROM
								(
								SELECT trans_date, trans_hour, trans_min
									,CAST(tag_value AS INTEGER) AS Batch_Volume_Raw
									-- *** Set START and END markers if flow rate changes by more than 500
									,CASE 
										WHEN trans_date = :Begin_Date AND trans_hour = 6 AND trans_min = 0 THEN 0
										WHEN trans_date = :End_Date AND trans_hour = 6 AND trans_min = 0 THEN 1
										WHEN Batch_Volume_Raw - SUM(Batch_Volume_Raw) OVER (ORDER BY trans_date,trans_hour, trans_min
											ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) < -500 THEN 0 
										WHEN Batch_Volume_Raw - SUM(Batch_Volume_Raw) OVER (ORDER BY trans_date,trans_hour, trans_min
											ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) > 500 THEN 1 
									END AS Batch_Marker
								FROM prod_edw_base_views.PI
								WHERE tag_id = '61ci901'
									AND ref_prod_location = 'El Paso Refinery'
									AND trans_date BETWEEN :Begin_Date-4 AND :End_Date
								) AS tmpBatchDefine
							WHERE Batch_Marker IS NOT NULL
							) AS tmpBatchDefine
						ON pi.trans_date = tmpBatchDefine.trans_date
							AND pi.trans_hour = tmpBatchDefine.trans_hour
							AND pi.trans_min = tmpBatchDefine.trans_min
						LEFT OUTER JOIN
							(
							SELECT trans_date, trans_hour, trans_min
								,CAST(MAX(CASE WHEN tag_id = '61AM700' THEN tag_value end) AS BIGINT) AS Volume_Accumulator
								,CAST(MAX(CASE WHEN tag_id = '61RP500' THEN tag_value end) AS INTEGER) AS Omni_CrudeType
								,CAST(MAX(CASE WHEN tag_id = '61CI901' THEN tag_value end) AS INTEGER) AS Volume_Omni
							FROM prod_edw_base_views.pi
							WHERE tag_id IN ('61AM700','61RP500','61CI901')
							AND ref_prod_location = 'El Paso Refinery'
							GROUP BY trans_date, trans_hour, trans_min
							) AS tmpAccumulator
						ON pi.trans_date = tmpAccumulator.trans_date
							AND pi.trans_hour = tmpAccumulator.trans_hour
							AND pi.trans_min = tmpAccumulator.trans_min
						WHERE pi.trans_date BETWEEN :Begin_Date-2 AND :End_Date
							AND tag_id = '61ci901'
							AND ref_prod_location = 'El Paso Refinery'
						) AS tmpSubFinal2
					) AS tmpSubFinal
				WHERE 
					batch_marker IS NOT NULL
					AND 
					CAST(CAST(trans_date AS VARCHAR(10)) || ' ' || 
						CASE WHEN trans_hour < 10 THEN '0'||CAST(trans_hour AS VARCHAR(2)) ELSE CAST(trans_hour AS VARCHAR(2)) END
						|| ':' || 
						CASE WHEN trans_min < 10 THEN '0'||CAST(trans_min AS VARCHAR(2)) ELSE CAST(trans_min AS VARCHAR(2)) END 
						|| ':00' AS TIMESTAMP(0)) 
						BETWEEN CAST(CAST(:Begin_Date AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP) AND CAST(CAST(:End_Date AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP)
				UNION ALL
					SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'Sweet' AS Omni_Crude_Type, 0 AS Volume_Corr
					FROM prod_edw_base_views.pi
					WHERE trans_date = :Begin_Date
						AND trans_hour = 0
						AND trans_min = 0
						AND tag_id = '61ci901'
				UNION ALL
					SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'Wasson Sour' AS Omni_Crude_Type, 0 AS Volume_Corr
					FROM prod_edw_base_views.pi
					WHERE trans_date = :Begin_Date
						AND trans_hour = 0
						AND trans_min = 0
						AND tag_id = '61ci901'
				UNION ALL
					SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'Yates Sour' AS Omni_Crude_Type, 0 AS Volume_Corr
					FROM prod_edw_base_views.pi
					WHERE trans_date = :Begin_Date
						AND trans_hour = 0
						AND trans_min = 0
						AND tag_id = '61ci901'
				) AS tmpFinal

			UNION ALL
			
			SELECT MAX(trans_date) AS eff_date, 'Slop' AS tank_numb
				,'Wasson Sour' AS product_code
				,'FEED' AS Vol_Type
				,CAST(SUM(tag_value)/1440 AS DECIMAL(10,0)) AS NSV
			FROM prod_edw_base_views.pi
			WHERE trans_date BETWEEN :End_Date-1 AND :End_Date
				AND tag_id IN ('16FC203.PV','01FC005.PV')
				AND  CAST(CAST(trans_date AS VARCHAR(10)) || ' ' || 
					CASE WHEN trans_hour < 10 THEN '0'||CAST(trans_hour AS VARCHAR(2)) ELSE CAST(trans_hour AS VARCHAR(2)) END
					|| ':' || 
					CASE WHEN trans_min < 10 THEN '0'||CAST(trans_min AS VARCHAR(2)) ELSE CAST(trans_min AS VARCHAR(2)) END 
					|| ':00' AS TIMESTAMP(0)) 
					BETWEEN CAST(CAST(:End_Date-1 AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP) AND CAST(CAST(:End_Date AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP)			
			GROUP BY ref_prod_location

			UNION ALL
			
			SELECT MAX(trans_date) AS eff_date, 'Slop' AS tank_numb
				,'Wasson Sour' AS product_code
				,'FEED' AS Vol_Type
				,CAST((-1)*SUM(tag_value)/1440 AS DECIMAL(10,0)) AS NSV
			FROM prod_edw_base_views.pi
			WHERE trans_date BETWEEN :Begin_Date-1 AND :Begin_Date
				AND tag_id IN ('16FC203.PV','01FC005.PV')
				AND  CAST(CAST(trans_date AS VARCHAR(10)) || ' ' || 
					CASE WHEN trans_hour < 10 THEN '0'||CAST(trans_hour AS VARCHAR(2)) ELSE CAST(trans_hour AS VARCHAR(2)) END
					|| ':' || 
					CASE WHEN trans_min < 10 THEN '0'||CAST(trans_min AS VARCHAR(2)) ELSE CAST(trans_min AS VARCHAR(2)) END 
					|| ':00' AS TIMESTAMP(0)) 
					BETWEEN CAST(CAST(:Begin_Date-1 AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP) AND CAST(CAST(:Begin_Date AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP)			
			GROUP BY ref_prod_location

		) AS tmpFinalFeed
	GROUP BY Product_Code
	ORDER BY product_code
;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_CRUDE_ELPKM_INVENTORY(Run_Date DATE) AS
	(
	SELECT tmpTank_Vol.ref_prod_location, tmpTank_Vol.eff_date, CAST(tmpTank_Vol.tank_numb AS VARCHAR(10)) AS tank_numb
		,CASE 
			WHEN tag_value_dcs = 'SWT CRD' THEN 'Sweet' 
			WHEN tag_value_dcs = 'SOUR CRD' THEN 'Wasson Sour' 
			WHEN tag_value_dcs = 'WTSW' THEN 'Wasson Sour' 
			WHEN tag_value_dcs = 'WTSY' THEN 'Yates Sour' 
		END AS product_code
		,CAST(MAX(Tank_Vol)  AS INTEGER) AS Tank_Vol
		,MAX(Tank_Temp) AS Tank_Temp
		,MAX(Temp_Factor) AS Temp_factor
		,CAST(MAX(Temp_Factor)*MAX(Tank_Vol) AS INTEGER) AS NSV
		,CAST(MAX(max_op_qty) AS INTEGER) AS Tank_Capacity
		,CAST(MAX(Temp_Factor)*MAX(max_op_qty) AS INTEGER) AS Tank_Capacity_Corr
		,Tank_Capacity_Corr - NSV AS Avail_Space_Corr
	FROM
		(
		SELECT	trans_date AS eff_date, Ref_Prod_Location
			,'T0'||SUBSTR(tag_id,3,3) AS Tank_Numb
			,CAST(NULL AS DECIMAL(10,1)) AS Tank_Temp
			,CAST(NULL AS DECIMAL(15,4)) AS Temp_Factor
			,Tag_Value AS Tank_Vol
		FROM prod_edw_base_views.PI
		WHERE trans_date = :Run_Date
		AND trans_hour = 6
		AND trans_min = 0
		AND tag_id IN ('tk137.vol','tk190.vol','tk191.vol','tk192.vol','tk210.vol','tk211.vol')
		UNION ALL
		SELECT	trans_date, Ref_Prod_Location
			,'T0'||SUBSTR(tag_id,3,3) AS Tank_Numb
			,Tag_Value AS Tank_Temp
			,Temp_Factor
			,NULL AS Tank_Vol
		FROM prod_edw_base_views.PI
		INNER JOIN prod_edw_base_views.Tank_Temp_Correct
			ON PI.Tag_Value BETWEEN Tank_Temp_Correct.Temp_Low AND Tank_Temp_Correct.Temp_High
		WHERE trans_date = :Run_Date
		AND trans_hour = 6
		AND trans_min = 0
		AND tag_id IN ('tk137.temp','tk190.temp','tk191.temp','tk192.temp','tk210.temp','tk211.temp')
		) AS tmpTank_Vol
	INNER JOIN
		(
		SELECT	master.Ref_Prod_Location, Master_Code AS Tank_Numb, max_op_qty
		FROM prod_edw_base_views.Master
		INNER JOIN tank_info
		ON master.ref_prod_location = tank_info.ref_prod_location
			AND master.master_id = tank_info.tank_id
		WHERE master_code LIKE 'T%'
			and master_code <> 'T0190'
		) AS tmpTank
	ON tmpTank.Ref_Prod_Location = tmpTank_Vol.Ref_Prod_Location
		AND tmpTank.Tank_Numb = tmpTank_Vol.Tank_Numb
	INNER JOIN prod_edw_base_views.pi_material
	ON tmpTank_Vol.eff_date = pi_material.trans_date
		AND 'tk'||SUBSTR(tmpTank.tank_numb,3,3)||'.pv' = pi_material.tag_id
	GROUP BY  tmpTank_Vol.ref_prod_location, tmpTank_Vol.eff_date, tmpTank_Vol.tank_numb, product_code
 	
	UNION ALL
	
	SELECT ref_prod_location, MAX(trans_date) AS eff_date, 'Slop Feed' AS tank_numb
		,'Wasson Sour' AS product_code
		,SUM(tag_value)/1440 AS Tank_Vol
		,0 AS Tank_Temp
		,1 AS Temp_factor
		,CAST(Tank_Vol AS DECIMAL(10,0)) AS NSV
		,NSV AS Tank_Capacity
		,NSV AS Tank_Capacity_Corr
		,0 AS Avail_Space_Corr
	FROM prod_edw_base_views.pi
	WHERE trans_date BETWEEN :Run_Date-1 AND :Run_Date
		AND tag_id IN ('16FC203.PV','01FC005.PV')
		AND (trans_date(TIMESTAMP(0))) + (trans_hour (INTERVAL HOUR)) + (trans_min (INTERVAL MINUTE)) 
			BETWEEN CAST(CAST(:Run_Date-1 AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP) AND CAST(CAST(:Run_Date AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP)			
	GROUP BY ref_prod_location
	
	ORDER BY  1,2,3
;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_CRUDE_ELPKM_RECEIPTS (Begin_Date DATE, End_Date DATE) AS
	(
SELECT Omni_Crude_Type, SUM(Volume_Corr) AS NSV
FROM
	(
	SELECT *
	FROM
		(
		SELECT trans_date, trans_hour, trans_min, batch_marker
			,CASE
				WHEN trans_date=:Begin_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=1 THEN 'Wasson Sour'
				WHEN trans_date=:Begin_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=2 THEN 'Sweet'
				WHEN trans_date=:Begin_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=3 THEN 'Yates Sour'
				WHEN trans_date=:End_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=1 THEN 'Wasson Sour'
				WHEN trans_date=:End_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=2 THEN 'Sweet'
				WHEN trans_date=:End_Date AND trans_hour=6 AND trans_min=0 AND Omni_CrudeType=3 THEN 'Yates Sour'
				WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=1 THEN 'Wasson Sour'
				WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=2 THEN 'Sweet'
				WHEN batch_marker = 0 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)=3 THEN 'Yates Sour'
				WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=1 THEN 'Wasson Sour'
				WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=2 THEN 'Sweet'
				WHEN batch_marker = 1 AND SUM(Omni_CrudeType) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)=3 THEN 'Yates Sour'
			END AS Omni_Crude_Type
			,CASE 
				WHEN trans_date = :Begin_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 1 THEN 0
				WHEN trans_date = :Begin_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 0 
					AND SUM(Batch_Marker) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) = 0 THEN 0
				WHEN trans_date = :End_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 0 THEN Volume_Corr
				WHEN trans_date = :End_Date AND trans_hour = 6 AND trans_min = 0 AND batch_marker = 1 
					AND SUM(Batch_Marker) OVER (ORDER BY trans_date, trans_hour, trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) = 1 THEN 0
				WHEN Batch_Marker = 0 THEN Volume_Corr*-1
				WHEN Batch_Marker = 1 THEN Volume_Corr
			END AS Volume_Corr 
		FROM
			(
			SELECT pi.trans_date, pi.trans_hour, pi.trans_min, tag_value AS Volume_Omni, batch_marker
				,Volume_Omni - SUM(Volume_Omni) OVER (ORDER BY pi.trans_date, pi.trans_hour, pi.trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS Flow_Rate
			,	CAST(CASE 
					WHEN Batch_Marker = 1 THEN Volume_Omni + Flow_Rate
					ELSE Volume_Omni
				END AS INTEGER) AS Volume_Corr
				,Omni_CrudeType
			FROM prod_edw_base_views.pi
			LEFT OUTER JOIN
				(
				SELECT  trans_date, trans_hour, trans_min, Batch_Marker
				FROM
					(
					SELECT trans_date, trans_hour, trans_min
						,CAST(tag_value AS INTEGER) AS Batch_Volume_Raw
						-- *** Set START and END markers if flow rate changes by more than 500
						,CASE 
							WHEN trans_date = :Begin_Date AND trans_hour = 6 AND trans_min = 0 THEN 0
							WHEN trans_date = :End_Date AND trans_hour = 6 AND trans_min = 0 THEN 1
							WHEN Batch_Volume_Raw - SUM(Batch_Volume_Raw) OVER (ORDER BY trans_date,trans_hour, trans_min
								ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) < -500 THEN 0 
							WHEN Batch_Volume_Raw - SUM(Batch_Volume_Raw) OVER (ORDER BY trans_date,trans_hour, trans_min
								ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) > 500 THEN 1 
						END AS Batch_Marker
					FROM prod_edw_base_views.PI
					WHERE tag_id = '61ci901'
						AND ref_prod_location = 'El Paso Refinery'
						AND trans_date BETWEEN :Begin_Date-4 AND :End_Date
					) AS tmpBatchDefine
				WHERE Batch_Marker IS NOT NULL
				) AS tmpBatchDefine
			ON pi.trans_date = tmpBatchDefine.trans_date
				AND pi.trans_hour = tmpBatchDefine.trans_hour
				AND pi.trans_min = tmpBatchDefine.trans_min
			LEFT OUTER JOIN
				(
				SELECT trans_date, trans_hour, trans_min
					,CAST(MAX(CASE WHEN tag_id = '61AM700' THEN tag_value end) AS BIGINT) AS Volume_Accumulator
					,CAST(MAX(CASE WHEN tag_id = '61RP500' THEN tag_value end) AS INTEGER) AS Omni_CrudeType
					,CAST(MAX(CASE WHEN tag_id = '61CI901' THEN tag_value end) AS INTEGER) AS Volume_Omni
				FROM prod_edw_base_views.pi
				WHERE tag_id IN ('61AM700','61RP500','61ci901')
				AND ref_prod_location = 'El Paso Refinery'
				GROUP BY trans_date, trans_hour, trans_min
				) AS tmpAccumulator
			ON pi.trans_date = tmpAccumulator.trans_date
				AND pi.trans_hour = tmpAccumulator.trans_hour
				AND pi.trans_min = tmpAccumulator.trans_min
			WHERE pi.trans_date BETWEEN :Begin_Date-2 AND :End_Date
				AND tag_id = '61ci901'
				AND ref_prod_location = 'El Paso Refinery'
			) AS tmpSubFinal2
		) AS tmpSubFinal
	WHERE 
		batch_marker IS NOT NULL
		AND 
		CAST(CAST(trans_date AS VARCHAR(10)) || ' ' || 
			CASE WHEN trans_hour < 10 THEN '0'||CAST(trans_hour AS VARCHAR(2)) ELSE CAST(trans_hour AS VARCHAR(2)) END
			|| ':' || 
			CASE WHEN trans_min < 10 THEN '0'||CAST(trans_min AS VARCHAR(2)) ELSE CAST(trans_min AS VARCHAR(2)) END 
			|| ':00' AS TIMESTAMP(0)) 
			BETWEEN CAST(CAST(:Begin_Date AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP) AND CAST(CAST(:End_Date AS DATE FORMAT 'YYYY-MM-DD')||' 06:00:00' AS TIMESTAMP)
	UNION ALL
		SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'Sweet' AS Omni_Crude_Type, 0 AS Volume_Corr
		FROM prod_edw_base_views.pi
		WHERE trans_date = :Begin_Date
			AND trans_hour = 0
			AND trans_min = 0
			AND tag_id = '61ci901'
	UNION ALL
		SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'Wasson Sour' AS Omni_Crude_Type, 0 AS Volume_Corr
		FROM prod_edw_base_views.pi
		WHERE trans_date = :Begin_Date
			AND trans_hour = 0
			AND trans_min = 0
			AND tag_id = '61ci901'
	UNION ALL
		SELECT  trans_date, trans_hour, trans_min, 3 AS batch_marker, 'Yates Sour' AS Omni_Crude_Type, 0 AS Volume_Corr
		FROM prod_edw_base_views.pi
		WHERE trans_date = :Begin_Date
			AND trans_hour = 0
			AND trans_min = 0
			AND tag_id = '61ci901'
--	ORDER BY 1,2,3
	) AS tmpFinal
GROUP BY Omni_Crude_Type
ORDER BY Omni_Crude_Type
;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_DAILY_STREAM (Ref_Prod_Location VARCHAR(20), End_Date DATE ) AS
--Change 2860 
	(
	SELECT	Lab_Results_DS_XREF.Ref_prod_location, Unit, Sample_Name
		,Lab_Results_DS_XREF.Component_Name, Min_Limit, Max_Limit, Units
		,DateTimeSampled_A
			,CASE WHEN TO_NUMBER(CAST(Results_A AS CHAR(128))) IS NULL
				THEN Results_A
				ELSE 
					CASE WHEN SUBSTR(Results_A,1,1) <> 0
						THEN TRIM(CAST(Results_A AS DECIMAL(10,2)))
						ELSE '0' || TRIM(CAST(Results_A AS DECIMAL(10,2)))
					END
			END AS Results_A
		,DateTimeSampled_B
			,CASE WHEN TO_NUMBER(CAST(Results_B AS CHAR(128))) IS NULL
				THEN Results_B
				ELSE 
					CASE WHEN SUBSTR(Results_B,1,1) <> 0
						THEN TRIM(CAST(Results_B AS DECIMAL(10,2)))
						ELSE '0' || TRIM(CAST(Results_B AS DECIMAL(10,2)))
					END
			END AS Results_B
		,DateTimeSampled_C
			,CASE WHEN TO_NUMBER(CAST(Results_C AS CHAR(128))) IS NULL
				THEN Results_C
				ELSE 
					CASE WHEN SUBSTR(Results_C,1,1) <> 0
						THEN TRIM(CAST(Results_C AS DECIMAL(10,2)))
						ELSE '0' || TRIM(CAST(Results_C AS DECIMAL(10,2)))
					END
			END AS Results_C
		,DateTimeSampled_D
			,CASE WHEN TO_NUMBER(CAST(Results_D AS CHAR(128))) IS NULL
				THEN Results_D
				ELSE 
					CASE WHEN SUBSTR(Results_D,1,1) <> 0
						THEN TRIM(CAST(Results_D AS DECIMAL(10,2)))
						ELSE '0' || TRIM(CAST(Results_D AS DECIMAL(10,2)))
					END
			END AS Results_D
		,DateTimeSampled_E
			,CASE WHEN TO_NUMBER(CAST(Results_E AS CHAR(128))) IS NULL
				THEN Results_E
				ELSE 
					CASE WHEN SUBSTR(Results_E,1,1) <> 0
						THEN TRIM(CAST(Results_E AS DECIMAL(10,2)))
						ELSE '0' || TRIM(CAST(Results_E AS DECIMAL(10,2)))
					END
			END AS Results_E
			,ROW_NUMBER() OVER (PARTITION BY Unit, Sample_Name ORDER BY Lab_Results_DS_XREF.Ref_prod_location, Unit, Sample_Name, Lab_Results_DS_XREF.Component_Name) AS BorderIndicator
	FROM prod_edw_base_views.Lab_Results_DS_XREF
	LEFT OUTER JOIN
		(
		SELECT 	Ref_Prod_Location, Location_Id, Sampling_Point, Component_Name, Min_Limit, Max_Limit, Units
			,MAX(DateTime_Sampled_A) AS DateTimeSampled_A, MAX(Results_Text_A) AS Results_A
			,MAX(DateTime_Sampled_B) AS DateTimeSampled_B, MAX(Results_Text_B) AS Results_B
			,MAX(DateTime_Sampled_C) AS DateTimeSampled_C, MAX(Results_Text_C) AS Results_C
			,MAX(DateTime_Sampled_D) AS DateTimeSampled_D, MAX(Results_Text_D) AS Results_D
			,MAX(DateTime_Sampled_E) AS DateTimeSampled_E, MAX(Results_Text_E) AS Results_E
		FROM
			(
			SELECT
				tmp_Lab_Results.Ref_Prod_Location, tmp_Lab_Results.Location_Id, tmp_Lab_Results.Sampling_Point
				,tmp_Lab_Results.Component_Name, Min_Limit, Max_Limit, Units 
				,CASE WHEN shift = 'A' THEN tmp_Lab_Results.DateTime_Sampled END AS DateTime_Sampled_A
				,CASE WHEN shift = 'A' THEN tmp_Lab_Results.Results_Text END AS Results_Text_A
				,CASE WHEN shift = 'B' THEN tmp_Lab_Results.DateTime_Sampled END AS DateTime_Sampled_B
				,CASE WHEN shift = 'B' THEN tmp_Lab_Results.Results_Text END AS Results_Text_B
				,CASE WHEN shift = 'C' THEN tmp_Lab_Results.DateTime_Sampled END AS DateTime_Sampled_C
				,CASE WHEN shift = 'C' THEN tmp_Lab_Results.Results_Text END AS Results_Text_C
				,CASE WHEN shift = 'D' THEN tmp_Lab_Results.DateTime_Sampled END AS DateTime_Sampled_D
				,CASE WHEN shift = 'D' THEN tmp_Lab_Results.Results_Text END AS Results_Text_D
				,CASE WHEN shift = 'E' THEN tmp_Lab_Results.DateTime_Sampled END AS DateTime_Sampled_E
				,CASE WHEN shift = 'E' THEN tmp_Lab_Results.Results_Text END AS Results_Text_E
			FROM
				(
				SELECT Ref_Prod_Location, Location_Id, Sampling_Point, Component_Name, pitag
					,DateTime_Sampled, Results_Text, Units
					,MAX(Target_Min) AS Min_Limit
					,MAX(Target_Max) AS  Max_Limit
				FROM
					(
					SELECT	
						Lab_results.Ref_Prod_Location, Location_Id, Sampling_Point, Component_Name, pitag
						,CAST(Date_Sampled AS TIMESTAMP(0)) + (Time_Sampled - TIME '00:00:00' HOUR TO SECOND) AS DateTime_Sampled
						,Results_Text, Units
						,CASE WHEN Measurement_Type = 'Min' THEN Plan_Value END AS Target_Min
						,CASE WHEN Measurement_Type = 'Max' THEN Plan_Value END AS Target_Max
					FROM prod_edw_base_views.LAB_RESULTS
					LEFT OUTER JOIN prod_edw_base_views.Refops_Plan_Target
					ON Lab_Results.Ref_Prod_Location = Refops_Plan_Target.Ref_Prod_Location
						AND  :End_Date = Refops_Plan_Target.Eff_Date
						AND Lab_Results.PITag = Refops_Plan_Target.PI_Tag
						) AS tmp_Lab_Results2	
					GROUP BY  Ref_Prod_Location, Location_Id, Sampling_Point, Component_Name, pitag
					,DateTime_Sampled, Results_Text, Units
				) AS tmp_Lab_Results
			INNER JOIN
				(
				SELECT	
					Ref_Prod_Location,Location_Id, Sampling_Point, Component_Name
					,MAX(CAST(  Date_Sampled AS TIMESTAMP(0)) + (Time_Sampled - TIME '00:00:00' HOUR TO SECOND)) AS DateTime_Sampled
					,CASE WHEN date_sampled = :End_Date-1 AND time_sampled BETWEEN '00:00:00' AND '05:59:00' THEN 'A'
						WHEN date_sampled = :End_Date-1 AND time_sampled BETWEEN '06:00:00' AND '17:59:00' THEN 'B'
						WHEN date_sampled = :End_Date-1 AND time_sampled BETWEEN '18:00:00' AND '23:59:00' THEN 'C'
						WHEN date_sampled = :End_Date AND time_sampled BETWEEN '00:00:00' AND '05:59:00' THEN 'C'
						WHEN date_sampled = :End_Date AND time_sampled BETWEEN '06:00:00' AND '17:59:00' THEN 'D'
						WHEN date_sampled = :End_Date AND time_sampled BETWEEN '18:00:00' AND '23:59:00' THEN 'E'
					END AS Shift
				FROM prod_edw_base_views.LAB_RESULTS
				WHERE ref_prod_location = :Ref_Prod_Location
					AND date_sampled BETWEEN :End_Date-1 AND :End_Date
				GROUP BY ref_prod_location, location_id, sampling_point,  component_name, Shift
				) AS tmp_Lab_Results_Shift
			ON tmp_Lab_Results.Ref_Prod_Location = tmp_Lab_Results_Shift.Ref_Prod_Location
				AND tmp_Lab_Results.Location_Id = tmp_Lab_Results_Shift.Location_Id
				AND tmp_Lab_Results.Sampling_Point = tmp_Lab_Results_Shift.Sampling_Point
				AND tmp_Lab_Results.Component_Name = tmp_Lab_Results_Shift.Component_Name
				AND tmp_Lab_Results.DateTime_Sampled = tmp_Lab_Results_Shift.DateTime_Sampled
			) AS tmp_Lab_Results2
		GROUP BY Ref_Prod_Location, Location_Id, Sampling_Point, Component_Name, Min_Limit, Max_Limit, Units
		) AS tmp_Lab_Results
	ON Lab_Results_DS_XREF.Ref_Prod_Location = tmp_Lab_Results.Ref_Prod_Location
		AND Lab_Results_DS_XREF.Location_ID = tmp_Lab_Results.Location_ID
		AND Lab_Results_DS_XREF.Sampling_Point = tmp_Lab_Results.Sampling_Point
		AND Lab_Results_DS_XREF.Component_Name = tmp_Lab_Results.Component_Name
	ORDER BY Lab_Results_DS_XREF.Ref_prod_location, Unit, Sample_Name, Lab_Results_DS_XREF.Component_Name

	;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_EII_ELP (Begin_Date DATE, End_Date DATE) AS
(
SELECT	Cur_Date AS Eff_Date

	/*Sensible Heat Standard Energy Consumption*/
	/*SH_SEC = =(44-0.23*CRUDE_UNIT_API)*('TOTAL_CRUDE_PPL+NON_CRUDE_PROCESSED_INPUT)/1000	*/
	/*CRUDE_UNIT_API = ((SouthCrude_VOL*(SouthCrude_VOL/SouthCrude_MASS*49.525)-131.5)+
		(NorthCrude_VOL*(NorthCrude_VOL/NorthCrude_MASS*49.525)-131.5))/
		(SouthCrude_VOL+NorthCrude_VOL)	*/
	
	,CAST((44-0.23*(((("01FC140_Vol"+"01FC041_Vol")*(((("01FC140_Vol"+"01FC041_Vol")/("01FC140_Mass"+"01FC041_Mass"))
		*49.525)-131.5))+
		("16FC202_Vol"*((("16FC202_Vol"/(CASE WHEN "16FC202_Mass"=0 THEN 1 ELSE "16FC202_Mass" END))*49.525)-131.5)))/
		("16FC202_Vol"+"01FC140_Vol"+"01FC041_Vol")))*
		(Total_Crude+Total_Intermediates+Total_Blendstocks)/1000 AS INTEGER) AS SensibleHeat_SEC

	/*Total Vacuum Distillation Standard Energy Consumption	*/
	/*TVD_SEC = (CPS Vacuum Distillation SEC + #6 Vacuum Distillation SEC)/1000	*/
	/*CPSVac_SEC = (15+2.3*CPSVac_API)* CPSVac_Vol	*/
	/*CPSVaC_API = ((CPSVac_VOL*(CPSVac_VOL/CPSVac_MASS*49.525)-131.5)	*/
	/*No6Vac_SEC = (15+2.3*No6Vac_API)* No6Vac_Vol	*/
	/*NO6Vac_API = ((No6Vac_VOL*(No6Vac_VOL/No6Vac_MASS*49.525)-131.5)	*/

	,CAST(((3+(1.23*((("16FC202_Vol"/(CASE WHEN "16FC202_Mass"=0 THEN 1 ELSE "16FC202_Mass" END))*49.525)-131.5)))*
		(Total_Crude*(CPSCrude_Vol/(ZEROIFNULL("16CI202_Vol")+ZEROIFNULL(CPSCrude_Vol))))+(3+(1.23*
		(((("01FC140_Vol"+"01FC041_Vol")/("01FC140_Mass"+"01FC041_Mass"))*49.525)-131.5)
		))*(Total_Crude*("16CI202_Vol"/(ZEROIFNULL("16CI202_Vol")+ZEROIFNULL(CPSCrude_Vol)))))/1000 AS INTEGER) AS TotAtmCrude_SEC

	,CAST((((15+2.3*25)*"02CI020_Vol") + ((15+2.3*((("16CI201_Vol"/(CASE WHEN "16CI201_Mass"=0 THEN 1 ELSE "16CI201_Mass" END))*49.525)-131.5))*"16CI201_Vol"))
		/1000 AS INTEGER) AS TotVacDist_SEC

	/* Utilities, Offsites and Losses Standard Energy Consumption	*/
	/* UOL_SEC =(15+(0.6* Facility_Complex_Factor))*(TotalFeedstocks+TotalBlendstocks+Total_Recovered+Total_IBUT)/1000	*/
	/* FCF = (TotCrude_UEDC+CPSVac_UEDC+No6Vac_UEDC+FCCU_UEDC+Rhen_UEDC+Alk_UEDC+But_UEDC+NHT_UEDC+DHT_UEDC+JHT_UEDC_+
		JetMer_UEDC+Asphalt_UEDC+SFlare_UEDC+Amine_UEDC+NapAplit_UEDC+H2_UEDC+FCC_SHU_UEDC+FCC_Desult_UEDC+BSU_UEDC+
		BenSat_UEDC+Steam_UEDC+CrudePipeRec_UEDC+RailRec_UEDC+TruckRec_UEDC+PipeRec_UEDC+RaiShip_UEDC+TruckOthShiup_UEDC+
		TruckGasShip_UEDC+PipeShip_UEDC)/Total_Crude*/
	/* Unit_UEDC = UnitVolume * UnitCompexityFactor	*/
	,CAST((15+(0.6*
		(((Total_Crude*(CPSTot_CF+No6Tot_CF)/2)+
		("02CI020_Vol"*CPSVac_CF)+("16CI201_Vol"*No6Vac_CF)+
		(("30FC104_Vol"+"60FI402_Vol"+"30FI188_Vol"+"04FC003_Vol")*FCCU_CF)+
		("41FC410_Vol"*Rhen_CF)+
		("81FC342_Vol"* Alk_CF)+
		("70FC124_Vol"* But_CF)+
		("41FC124_Vol"*NHT_CF)+
		(("39FC245_Vol"+"39FC246_Vol")*DHT_CF)+
		("38FC102_Vol"*JHT_CF)+
		("16FC153_Vol"*JetMer_CF)+
		(Total_Asphalt*Asphalt_CF)+
		("85FI109_Vol"*SFlare_CF)+
		((ZEROIFNULL("84FC032_Vol")+ZEROIFNULL("84FC182_Vol"))*Amine_CF)+
		("04FC001_Vol"*NapSplit_CF)+
		("88FI105_Vol"*H2_CF)+
		(("89FC101A_Vol"-"89FC302_Vol")*FCCSHU_CF)+
		("89FI108_Vol"*FCCDesulf_CF)+
		("43FC113_Vol"*BSU_CF)+
		("43FC234_Vol"*BenSat_CF)+
		((ZEROIFNULL("10FI145_Vol")+ZEROIFNULL("10FI141_Vol")+ZEROIFNULL("10FI142_Vol")+ZEROIFNULL("10FI143_Vol")
			+ZEROIFNULL("90FI241_Vol")+ZEROIFNULL("90FI243_Vol"))*Steam_CF)+
		ZEROIFNULL(CrudePipeRec_Vol*CrudePipeRec_CF)+
		ZEROIFNULL(RailRec_Vol*RailRec_CF)+ 
		ZEROIFNULL(TruckRec_Vol*TruckRec_CF)+
		ZEROIFNULL(PipeRec_Vol*PipeRec_CF)+
		ZEROIFNULL(RailShip_Vol*RailShip_CF)+
		ZEROIFNULL(TruckOthShip_Vol*TruckOthShip_CF)+
		ZEROIFNULL(TruckGasShip_Vol*TruckGasShip_CF)+
		ZEROIFNULL(PipeShip_Vol*PipeShip_CF))/Total_Crude)
		))*
		(ZEROIFNULL(Total_Crude)+ZEROIFNULL(Total_BlendStocks)+ZEROIFNULL(Total_Recovered)+
		ZEROIFNULL(Total_IsoButane))/1000 AS INTEGER) AS Utilities_SEC

	/* Catalytic Cracking Standard Energy Consumption	*/
	/* CatCrack_SEC = ((65+(FCCCokeWt%*55))*FCCUVolume)/1000	*/
	,CAST(((65+(("TotalCoke_Mass"/("30FC104_Mass"+"04FI007_Mass"+"60FI402_Mass"+"04FI320_Mass"+
		"30FI188_Mass"+"04FC003_Mass")*100)*55))*
		("30FC104_Vol"+"60FI402_Vol"+"30FI188_Vol"+"04FC003_Vol"))/1000 AS INTEGER) AS CatCrack_SEC
	,CAST((210+(0.37*286))*("41FC410_Vol")/1000 AS INTEGER) AS CatReform_SEC
	
	,CAST(400*("81FC342_Vol")/1000 AS INTEGER) AS Alkylation_SEC
	,CAST(100*("70FC124_Vol")/1000 AS INTEGER) AS C4Isom_SEC
	,CAST(80*("41FC124_Vol")/1000 AS INTEGER) AS NHT_SEC
	,CAST(60*("38FC102_Vol")/1000 AS INTEGER) AS JHT_SEC 
	,CAST(70*("39FC245_Vol"+"39FC246_Vol")/1000 AS INTEGER) AS DHT_SEC
	,CAST((10*"85FI109_Vol"/1000) AS INTEGER) AS SFlare_SEC
	,CAST(10*(ZEROIFNULL("84FC032_Vol")+ZEROIFNULL("84FC182_Vol"))/1000 AS INTEGER) AS Amine_SEC
	,CAST(ZEROIFNULL("41FI234_LER")+ZEROIFNULL("05FI511_LER")+ZEROIFNULL("41FC453_LER") AS INTEGER)/100 AS LER_SEC
	,CAST(20*("88FI105_Vol")/1000 AS INTEGER) AS H2_SEC
	,CAST(75*("89FC101A_Vol"-"89FC302_Vol")/1000 AS INTEGER) AS FCC_CGHT_SEC
	,CAST(70*("89FC101A_Vol"-"89FC302_Vol")/1000 AS INTEGER) AS FCC_SHU_SEC
	,CAST(55*("43FC113_Vol")/1000 AS INTEGER) AS ReformateSplit_SEC
	,CAST(85*"43FC234_Vol"/1000 AS INTEGER) AS BenSat_SEC
	,CAST(200*Total_Asphalt/1000 AS INTEGER) AS Asphalt_SEC

	,(SensibleHeat_SEC+TotAtmCrude_SEC+TotVacDist_SEC+Utilities_SEC+CatCrack_SEC+
	CatReform_SEC+Alkylation_SEC+C4Isom_SEC+NHT_SEC+JHT_SEC+DHT_SEC+
	SFlare_SEC+Amine_SEC+LER_SEC+H2_SEC+FCC_CGHT_SEC+ 
	FCC_SHU_SEC+ReformateSplit_SEC+BenSat_SEC+Asphalt_SEC) AS Total_SEC
	,CAST(MAVG(Total_SEC, 365, Cur_Date) AS INTEGER) AS Total_SEC_MAvg
	
	/* NatGas =  NatGasConsumption  - DupontUtilities	*/	
	/* NatGasConsumption = (NatGas to Ref#1 + NatGas to Flare)  * NetHeating From Lab / 1000 * 0.940	*/	
	/*Case statement exists to use default value when Dupont meter has no reading*/
	,CAST((("90FI075H"+"30FI408")*"88NATGASFD_NH"/1000) - 
		(((CASE WHEN NatGasDupont IS NULL THEN 6600/31 ELSE NatGasDupont END)*1.51305) -(299*1.51305)) AS INTEGER) AS NatGas
	
/*	(CASE WHEN NatGasDupont IS NULL THEN 6600/31 ELSE NatGasDupont END) AS NatGasDupontCorr,
	NatGasDupont,
*/	
	
	/*ProdFuelGas = ConsumersSouth + FCC + ALKY + CGHT + BUTAMER + FGRU + C1909 + C4142 + 
		DHT +BSU + Xs H2 to FG  + H2 Heaters */
		/*	ConsumersSouth = (Deeth Off Gas Flow+Surge Drum Off Gas)  */
			/*	Deeth Off Gas Flow = (04FI510.Comp_PPL*  E.04DEETHOGP.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB)* 0.001 */
			/*	Surge Drum Off Gas = (04FI405.Comp_PPL*  24)* 0.001 */
		/*	FCC = Off Gas to North*/
			/*Off Gas to North = 13FI320.PV * E.30ABSTGAS.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB * 24 / 1000*/
		/*	ALKY = Deprop Reflux F806 Vent*/
			/*Deprop Reflux F806 Vent = 80FI806.Comp_PPL * 683 / 1000*/
		/*CGHT =  F8909 KO VAPOR TO FG + F8911 STAB OVHD TO FG*/
			/*F8909 KO VAPOR TO FG = 89FC124C.PV * E.89CGHRCYG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB*/
			/*F8911 STAB OVHD TO FG = 89FI309.PV * E.89_62OFFGAS.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB / 1000 */
		/*BUTAMER = STAB RCVR F7108 OFF-GAS*/
			/*STAB RCVR F7108 OFF-GAS = 70FI109.COMP_PPL * E.70STABOG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB / 1000*/
		/*FGRU = SWEET FUELGAS TO MIXDRUM*/
			/*SWEET FUELGAS TO MIXDRUM = 85FI109.PV_PPL * E.85SFLARE.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB / 1000000*/
		/*C1909 = C1909 TO FUEL GAS*/
			/*C1909 TO FUEL GAS = 19FI424.PV * E.16C1909G.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB * 24 /1000*/
		/*C4142 = CORR-SWEET GAS TO FG*/
			/*CORR-SWEET GAS TO FG = 41FI205C.PV * E.41C4142OG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB*/
		/*DHT = D3906 OFF GAS TO F/G + RX LOOP PURGE H2 TO F/G*/
			/*D3906 OFF GAS TO F/G = 39FI020.COMP_PPL * E.39FG3901.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB / 1000*/
			/*RX LOOP PURGE H2 TO F/G = 39FC262.COMP_PPL * E.39K3922RCY.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB / 1000*/
		/*BSU = LT STRIP OVHD GAS FLOW + RX COLD SEP OVHD FLOW*/
			/*LT STRIP OVHD GAS FLOW = 43FI437.COMP_PPL * E.43STRIP_VG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB /1000*/
			/*RX COLD SEP OVHD FLOW = 43FI426.COMP_PPL * E.43RX_PURGE.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB / 1000*/
		/*Xs H2 to FG  = H2 VENT TO PROCESS GAS*/    
			/*H2 VENT TO PROCESS GAS = 41FI409.COMP_PPL * E.41RHRCYG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB / 1000*/
		/*H2 Heaters = 281+274*/

	 ,CAST(((("04FI510_VOL" * "04DEETHOGP_NH") + ("04FI405_VOL" * 24)) * 0.001) +
	 	("13FI320_VOL" * "30ABSTGAS_NH" * 24 / 1000) +
		("80FI806_VOL" * 683 / 1000) +
		(("89FC124C_VOL" * "89CGHRCYG_NH") + ("89FI309_VOL" * "89_62OFFGAS_NH" / 1000)) + 
		("70FI109_VOL" * "70STABOG_NH" / 1000) + 
		("85FI109P_VOL" * "85SFLARE_NH" *60 * 24 / 1000000) +
		("19FI424_VOL" * "16C1909G_NH" * 24 /1000) +
		("41FI205C_VOL" * "41C4142OG_NH") +
		((("39FI020_VOL" * "39FG3901_NH") + ("39FC262_VOL" * "39K3922RCY_NH")) / 1000) + 
		((("43FI437_VOL" * "43STRIP_VG_NH") + ("43FI426_VOL" * "43RX_PURGE_NH")) / 1000) + 
		("41FI409_VOL" * "41RHRCYG_NH" / 1000) +
		(281 + 274) AS INTEGER) AS ProdFuelGas

	,CAST(((ZEROIFNULL("04FI592_VG")*2.316)+(ZEROIFNULL("80FI806_VG")*2.316)+
		(ZEROIFNULL("16FI211_VG")*24*2.316)+(ZEROIFNULL("60FI602_VG")*3.48547736)) AS INTEGER) AS VentedGas
		
	,CAST((ZEROIFNULL(CokeShip_Wt)*1000/24*931*500000)/1000000000 AS INTEGER) AS FCCUCokeMBTU
	
	/*ElectricityUsed has placeholder until daily electrical readings are online*/
	,10077 AS ElectricityUsed
	
	,CAST("3FI1241_VOL"*24*1050/1000 AS INTEGER) AS SteamDupont
		
	,CAST((NatGas + ProdFuelGas + FCCUCokeMBTU + ElectricityUsed + SteamDupont + VentedGas) AS INTEGER) AS Total_AEC
	,CAST(MAVG(Total_AEC, 365, Cur_Date) AS INTEGER) AS Total_AEC_MAvg

	,CAST(CAST(Total_AEC AS DECIMAL(10,4))/(CAST(Total_SEC AS DECIMAL(10,4)))*100 AS DECIMAL(10,2)) AS EII
	,MAVG(EII, 365, Cur_Date) AS EII_MAvg
	
FROM	prod_edw_base_views.Cur_Date
LEFT OUTER JOIN
	(SELECT eff_date,
		(WTI_Production+WTS_Production) AS Total_Crude,
		(SCAT_Production+DHTF_Production+FCCF_Production+	HSR_Production+
			IBUT_Production+JHTF_Production+	OLEF_Production+SHSR_Production) AS Total_Intermediates,
		(ETH_Production+BIOD_Production+MBUT_Production+NBUT_Production+
			ADD_Production+TOLU_Production) AS Total_Blendstocks,
		(RNBZ_Production+TMIX_Production+
			RERN_Production) AS Total_Recovered,
		IBUT_Production AS Total_IsoButane,
		ASPH_Production AS Total_Asphalt
	FROM
		(SELECT eff_date, 
			MAX(CASE WHEN product_code = 'WTI' THEN Production END) AS WTI_Production,
			MAX(CASE WHEN product_code = 'WTS' THEN Production END) AS WTS_Production,
			MAX(CASE WHEN product_code = 'SCAT' THEN Production END) AS SCAT_Production,
			MAX(CASE WHEN product_code = 'DHTF' THEN Production END) AS DHTF_Production,
			MAX(CASE WHEN product_code = 'FCCF' THEN Production END) AS FCCF_Production,
			MAX(CASE WHEN product_code = 'HSR' THEN Production END) AS HSR_Production,
			MAX(CASE WHEN product_code = 'IBUT' THEN Production END) AS IBUT_Production,
			MAX(CASE WHEN product_code = 'JHTF' THEN Production END) AS JHTF_Production,
			MAX(CASE WHEN product_code = 'OLEF' THEN Production END) AS OLEF_Production,
			MAX(CASE WHEN product_code = 'SHSR' THEN Production END) AS SHSR_Production,
			MAX(CASE WHEN product_code = 'ETH' THEN Production END) AS ETH_Production,
			MAX(CASE WHEN product_code = 'BIOD' THEN Production END) AS BIOD_Production,
			MAX(CASE WHEN product_code = 'MBUT' THEN Production END) AS MBUT_Production,
			MAX(CASE WHEN product_code = 'NBUT' THEN Production END) AS NBUT_Production,
			MAX(CASE WHEN product_code = 'ADD' THEN Production END) AS ADD_Production,
			MAX(CASE WHEN product_code = 'TOLU' THEN Production END) AS TOLU_Production,
			MAX(CASE WHEN product_code = 'ASPH' THEN Production END) AS ASPH_Production,
			MAX(CASE WHEN product_code = 'RNBZ' THEN Production END) AS RNBZ_Production,
			MAX(CASE WHEN product_code = 'TMIX' THEN Production END) AS TMIX_Production,
			MAX(CASE WHEN product_code = 'RERN' THEN Production END) AS RERN_Production
		FROM
			(SELECT Eff_Date,
				Product_code, production
				FROM	prod_edw_base_views.PRODUCTION
			INNER JOIN ref_product
				ON production.ref_prod_location = ref_product.ref_prod_location
				AND production.product_id = ref_product.product_id
			WHERE production.ref_prod_location = 'el paso refinery'
				AND product_code IN ('WTS','WTI','SCAT','DHTF','FCCF','HSR','IBUT','JHTF','OLEF','SHSR',
					'ETH','BIOD','MBUT','NBUT','ADD','TOLU','ASPH','RNBZ','TMIX','RERN')	) AS tmpProduction3
		GROUP BY eff_date) AS tmpProduction2
	) AS tmpProduction
ON Cur_Date.Cur_Date = tmpProduction.Eff_Date

LEFT OUTER JOIN
	(SELECT
		Trans_Date,
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'cpscrude' THEN AvgTagValue END) AS "CPSCRUDE_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '16ci202.pv' THEN AvgTagValue END) AS "16CI202_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '02CI020.pv' THEN AvgTagValue*1000 END) AS "02CI020_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '16FC153.pv' THEN AvgTagValue END) AS "16FC153_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '84FC032.pv' THEN (AvgTagValue*1000) END) AS "84FC032_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '84FC182.pv' THEN (AvgTagValue*1000) END) AS "84FC182_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '89FI108.pv' THEN (AvgTagValue*1000) END) AS "89FI108_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '10FI145.pv' THEN AvgTagValue END) AS "10FI145_Vol",		
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '10FI141.pv' THEN AvgTagValue END) AS "10FI141_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '10FI142.pv' THEN AvgTagValue END) AS "10FI142_Vol",				
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '10FI143.pv' THEN AvgTagValue END) AS "10FI143_Vol",		
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '90FI241.pv' THEN AvgTagValue END) AS "90FI241_Vol",		
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '90FI243.pv' THEN AvgTagValue END) AS "90FI243_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '85FI109.PV' THEN (AvgTagValue*1.44) END) AS "85FI109_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '88FI105.COMP_PPL' THEN AvgTagValue END) AS "88FI105_Vol",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'e.88natgasfd.gcmole.gross_heat_of_combustion.lab' THEN AvgTagValue END) AS "88NATGASFD_GH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '88FC101.PV' THEN AvgTagValue END) AS "NatGasPerHour",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '84FI100.PV' THEN AvgTagValue END) AS "NatGasDupont",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '30FI408.COMP_PPL' THEN AvgTagValue END) AS "30FI408",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'e.88natgasfd.gcmole.net_heat_of_combustion.lab' THEN AvgTagValue END) AS "88NATGASFD_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '90FI075H.COMP_PPL' THEN AvgTagValue END) AS "90FI075H",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.04DEETHOGP.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "04DEETHOGP_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.41C4142OG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "41C4142OG_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.16C1909G.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "16C1909G_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.41RHRCYG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "41RHRCYG_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.30ABSTGAS.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "30ABSTGAS_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.70STABOG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "70STABOG_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.39K3922RCY.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "39K3922RCY_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.43STRIP_VG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "43STRIP_VG_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.43RX_PURGE.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "43RX_PURGE_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.89CGHRCYG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "89CGHRCYG_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.89_62OFFGAS.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "89_62OFFGAS_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.85SFLARE.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "85SFLARE_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = 'E.39FG3901.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB' THEN AvgTagValue END) AS "39FG3901_NH",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '04FI405.Comp_PPL' THEN AvgTagValue END) AS "04FI405_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '04FI510.Comp_PPL' THEN AvgTagValue END) AS "04FI510_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '13fc800.pv' THEN AvgTagValue END) AS "13FC800_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '13fi320.pv' THEN AvgTagValue END) AS "13FI320_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '19FI424.PV' THEN AvgTagValue END) AS "19FI424_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '39FC262.COMP_PPL' THEN AvgTagValue END) AS "39FC262_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '39FI020.COMP_PPL' THEN AvgTagValue END) AS "39FI020_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '41FI205C.PV' THEN AvgTagValue END) AS "41FI205C_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '41FI409.Comp_PPL' THEN AvgTagValue END) AS "41FI409_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '43FI426.COMP_PPL' THEN AvgTagValue END) AS "43FI426_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '43FI437.COMP_PPL' THEN AvgTagValue END) AS "43FI437_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '70FI109.COMP_PPL' THEN AvgTagValue END) AS "70FI109_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '80FI806.COMP_PPL' THEN AvgTagValue END) AS "80FI806_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '89FC124C.pv_ppl' THEN AvgTagValue END) AS "89FC124C_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '85FI109.PV_PPL' THEN AvgTagValue END) AS "85FI109P_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '89FI309.pv_ppl' THEN AvgTagValue END) AS "89FI309_VOL",
		MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '3FI1241.pv' THEN AvgTagValue END) AS "3FI1241_VOL"
		,MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '04FI592.PV' THEN AvgTagValue END) AS "04FI592_VG"
		,MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '80FI806.PV' THEN AvgTagValue END) AS "80FI806_VG"
		,MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '16FI211.PV' THEN AvgTagValue END) AS "16FI211_VG"
		,MAX(CASE WHEN tmpAvgPITags2.Tag_ID = '60FI602.PV' THEN AvgTagValue END) AS "60FI602_VG"
		,MAX(CASE WHEN tmpAvgPITags2.Tag_ID ='41FI234.COMP_PPL' THEN AvgTagValue END) AS "41FI234_LER"
		,MAX(CASE WHEN tmpAvgPITags2.Tag_ID ='05FI511.COMP_PPL' THEN AvgTagValue END) AS "05FI511_LER"
		,MAX(CASE WHEN tmpAvgPITags2.Tag_ID ='41FC453.COMP_PPL' THEN AvgTagValue END) AS "41FC453_LER"

	FROM
		(SELECT	Trans_Date, Tag_ID, AVG(ZEROIFNULL(Tag_Value)) AS AvgTagValue
		FROM prod_edw_base_views.PI
		WHERE ref_prod_location = 'El Paso Refinery'
			AND tag_id IN 
				( 
				/*JET MEROX*/
				'16FC153.PV',
				/*FCC GASOLINE CGHT*/
				'89FI108.PV',
				/*VACUUM DISTILLATION*/
				'cpscrude','16CI202.PV','02CI020.PV',
				/*AMINE REGEN*/
				'84FC032.PV','84FC182.PV'	,
				/*STEAM*/
				'10FI145.PV','10FI141.PV','10FI142.PV','10FI143.PV','90FI241.PV','90FI243.PV','3FI1241.PV',
				/*S FLARE GAS RECOVERY*/
				'85FI109.pv',
				/*HYDROGEN*/
				'88FI105.COMP_PPL','e.88natgasfd.gcmole.gross_heat_of_combustion.lab','88fc101.pv','84FI100.PV',
				/*NATURAL GAS*/
				'90FI075H.COMP_PPL',
				'e.88natgasfd.gcmole.net_heat_of_combustion.lab','30FI408.COMP_PPL',
				/*PRODUCED FUEL GAS*/
				'E.04DEETHOGP.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB','E.41C4142OG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB',
				'E.16C1909G.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB','E.41RHRCYG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB',
				'E.30ABSTGAS.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB','E.30ABSTGAS.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB',
				'E.70STABOG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB','E.39K3922RCY.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB',
				'E.43STRIP_VG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB','E.43RX_PURGE.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB',
				'E.89CGHRCYG.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB','E.89_62OFFGAS.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB',
				'E.85SFLARE.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB','E.39FG3901.GCMOLE.NET_HEAT_OF_COMBUSTION.LAB',
				'04FI405.Comp_PPL','04FI510.Comp_PPL','13fc800.pv','13fi320.pv','19FI424.PV','39FC262.COMP_PPL','39FI020.Comp_PPL',
				'41FI205C.PV','41FI409.Comp_PPL','43FI426.COMP_PPL','43FI437.COMP_PPL','70FI109.COMP_PPL','80FI806.Comp_PPL',
				'89FC124C.pv_ppl','89FI309.pv_ppl','85FI109.pv_ppl'
				/*VENTED GAS*/
				,'04FI592.PV','80FI806.PV','16FI211.PV','60FI602.PV'
				/*LER*/
				,'41FI234.COMP_PPL','05FI511.COMP_PPL','41FC453.COMP_PPL'
				)
		GROUP BY Trans_Date, Tag_ID) AS tmpAvgPITags2
	GROUP BY Trans_Date) AS tmpAvgPITags
ON Cur_Date.Cur_Date = tmpAvgPITags.trans_date

LEFT OUTER JOIN
	(SELECT Eff_Date,
		MAX(CASE WHEN tmpMeter2.MeterId = 629 THEN Weight END) AS "01FC140_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 629 THEN Volume END) AS "01FC140_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 624 THEN Weight END) AS "01FC041_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 624 THEN Volume END) AS "01FC041_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 679 THEN Weight END) AS "16FC202_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 679 THEN Volume END) AS "16FC202_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 669 THEN Weight END) AS "16CI201_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 669 THEN Volume END) AS "16CI201_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 718 THEN Volume END) AS "41FC410_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 755 THEN Volume END) AS "81FC342_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 739 THEN Volume END) AS "70FC124_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 715 THEN Volume END) AS "41FC124_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 703 THEN Volume END) AS "38FC102_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 2147 THEN Volume END) AS "39FC245_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 2148 THEN Volume END) AS "39FC246_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 2985 THEN Volume END) AS "89FC101A_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 3040 THEN Volume END) AS "89FC302_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 2961 THEN Volume END) AS "43FC113_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 2965 THEN Volume END) AS "43FC234_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 767 THEN Volume END) AS "04FC001_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 787 THEN Weight END) AS "TotalCoke_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 696 THEN Weight END) AS "30FC104_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 696 THEN Volume END) AS "30FC104_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 649 THEN Weight END) AS "04FI007_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 735 THEN Weight END) AS "60FI402_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 735 THEN Volume END) AS "60FI402_Vol",		
		MAX(CASE WHEN tmpMeter2.MeterId = 827 THEN Weight END) AS "04FI320_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 2155 THEN Weight END) AS "30FI188_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 2155 THEN Volume END) AS "30FI188_Vol",
		MAX(CASE WHEN tmpMeter2.MeterId = 2913 THEN Weight END) AS "04FC003_Mass",
		MAX(CASE WHEN tmpMeter2.MeterId = 2913 THEN Volume END) AS "04FC003_Vol"
	FROM
		(SELECT	Ref_Prod_Location, Eff_Date, MeterID, Volume, Weight
		FROM	prod_edw_base_views.Meter
		WHERE ref_prod_location = 'el paso refinery'
			AND meterid IN 
				(/*SensibleHear*/ 629,624,679, /* Vaccum Distillation*/  669, /*CatCracker*/ 787,696,649,735,827,2155,2913,
				/* Reformer*/ 718, /* Alkylation*/ 755, /* Butamer*/ 739, /* NHT*/ 715, /* JHT*/ 703,  /* DHT*/ 2147, 2148,
				/* FCC*/ 2985,3040, /* Reformate*/ 2961, /* BenSat*/ 2965,/* NapSplit*/767)
			) AS tmpMeter2
	GROUP BY Eff_Date) AS tmpMeter
ON Cur_Date.Cur_Date = tmpMeter.Eff_Date

LEFT OUTER JOIN
	(SELECT Eff_Date,
		MAX(CASE WHEN ShipType = 'CrudePipeRec' THEN Volume END) AS CrudePipeRec_Vol,
		MAX(CASE WHEN ShipType = 'RailRec' THEN Volume END) AS RailRec_Vol,
		MAX(CASE WHEN ShipType = 'TruckRec' THEN Volume END) AS TruckRec_Vol,
		MAX(CASE WHEN ShipType = 'PipeRec' THEN Volume END) AS PipeRec_Vol,
		MAX(CASE WHEN ShipType = 'RailShip' THEN Volume END) AS RailShip_Vol,
		MAX(CASE WHEN ShipType = 'TruckOthShip' THEN Volume END) AS TruckOthShip_Vol,
		MAX(CASE WHEN ShipType = 'TruckGasShip' THEN Volume END) AS TruckGasShip_Vol,
		MAX(CASE WHEN ShipType = 'PipeShip' THEN Volume END) AS PipeShip_Vol,
		MAX(CASE WHEN ShipType = 'CokeShip' THEN Weight END) AS CokeShip_Wt
	FROM
		(SELECT	CAST('CrudePipeRec' AS VARCHAR(20)) AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 0
			AND source_id = 521
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'RailRec' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 0
			AND source_id = 523
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'TruckRec' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 0
			AND source_id = 524
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'PipeRec' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 0
			AND source_id  = 525
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'RailShip' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 1
			AND destination_id  = 518
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'TruckOthShip' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 1
			AND destination_id  = 520
			AND product_id IN (90,200,126)
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'TruckGasShip' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 1
			AND destination_id  = 520
			AND product_id NOT IN (90,200,126)
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'PipeShip' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 1
			AND destination_id  = 519
		GROUP BY ShipType, eff_date
		UNION ALL
		SELECT	'CokeShip' AS ShipType, Movement_Start AS Eff_Date,
				SUM(Volume_Estimated) AS Volume, SUM(Weight_Estimated) AS Weight
		FROM	prod_edw_base_views.Movement
		WHERE movement.ref_prod_location = 'el paso refinery'
			AND movement_type = 1
			AND product_id  = 85
		GROUP BY ShipType, eff_date) AS tmpRecShip2
	GROUP BY Eff_date	) AS tmpRecShip
ON Cur_Date.Cur_Date = tmpRecShip.Eff_date

LEFT OUTER JOIN
	(SELECT Eff_date,
		MAX(CASE WHEN Unit = 'CPS% from Tot Envir' THEN Complex_Factor END) AS CPSTot_CF,
		MAX(CASE WHEN Unit = '#6% from Tot Envir' THEN Complex_Factor END) AS No6Tot_CF,
		MAX(CASE WHEN Unit = 'CPS Vacu Distill' THEN Complex_Factor END) AS CPSVac_CF,
		MAX(CASE WHEN Unit = '#6 Vac' THEN Complex_Factor END) AS No6Vac_CF,
		MAX(CASE WHEN Unit = 'FCC Unit' THEN Complex_Factor END) AS FCCU_CF,
		MAX(CASE WHEN Unit = 'Rhenformer Feed' THEN Complex_Factor END) AS Rhen_CF,
		MAX(CASE WHEN Unit = 'Alkylate Production' THEN Complex_Factor END) AS Alk_CF,
		MAX(CASE WHEN Unit = 'Butamer Feed' THEN Complex_Factor END) AS But_CF,
		MAX(CASE WHEN Unit = 'Naphtha Hydrotreater' THEN Complex_Factor END) AS NHT_CF,
		MAX(CASE WHEN Unit = 'DHT Feed' THEN Complex_Factor END) AS DHT_CF,
		MAX(CASE WHEN Unit = 'Jet Hydrotreater' THEN Complex_Factor END) AS JHT_CF,
		MAX(CASE WHEN Unit = 'Jet Merox' THEN Complex_Factor END) AS JetMer_CF,
		MAX(CASE WHEN Unit = 'Asphalt' THEN Complex_Factor END) AS Asphalt_CF,
		MAX(CASE WHEN Unit = 'S Flare Gas Recovery' THEN Complex_Factor END) AS SFlare_CF,
		MAX(CASE WHEN Unit = 'Amine Regen' THEN Complex_Factor END) AS Amine_CF,
		MAX(CASE WHEN Unit = 'Naphtha Splitter' THEN Complex_Factor END) AS NapSplit_CF,
		MAX(CASE WHEN Unit = 'Hydrogen Mfg' THEN Complex_Factor END) AS H2_CF,
		MAX(CASE WHEN Unit = 'FCC CGHT' THEN Complex_Factor END) AS FCCSHU_CF,
		MAX(CASE WHEN Unit = 'FCC CGHT Desulfur' THEN Complex_Factor END) AS FCCDeSulf_CF,
		MAX(CASE WHEN Unit = 'BSU' THEN Complex_Factor END) AS BSU_CF,
		MAX(CASE WHEN Unit = 'BSU Splitter Bypass' THEN Complex_Factor END) AS BenSat_CF,
		MAX(CASE WHEN Unit = 'Total Steam' THEN Complex_Factor END) AS Steam_CF,
		MAX(CASE WHEN Unit = 'Crude Receipts P/L' THEN Complex_Factor END) AS CrudePipeRec_CF,
		MAX(CASE WHEN Unit = 'Railcar Receipts' THEN Complex_Factor END) AS RailRec_CF,
		MAX(CASE WHEN Unit = 'Truck Receipts' THEN Complex_Factor END) AS TruckRec_CF,
		MAX(CASE WHEN Unit = 'Pipeline Receipts' THEN Complex_Factor END) AS PipeRec_CF,
		MAX(CASE WHEN Unit = 'Railcar Shipments' THEN Complex_Factor END) AS RailShip_CF,
		MAX(CASE WHEN Unit = 'Truck Shipments Gas/Dist' THEN Complex_Factor END) AS TruckGasShip_CF,
		MAX(CASE WHEN Unit = 'Truck Shipments Other' THEN Complex_Factor END) AS TruckOthShip_CF,
		MAX(CASE WHEN Unit = 'Pipeline Shipments' THEN Complex_Factor END) AS PipeShip_CF
	FROM
		(SELECT	Eff_date, Unit, AVG(Complex_Factor) AS Complex_Factor
				FROM	prod_edw_base_views.Refops_UEDC
		WHERE Ref_Prod_Location ='El Paso Refinery'
		GROUP BY Eff_Date, Unit) AS tmpComplexFactor2
	GROUP BY Eff_Date) AS tmpComplexFactor
ON Cur_Date.Cur_Date = tmpComplexFactor.Eff_Date

WHERE Cur_Date BETWEEN :Begin_Date and :End_Date
ORDER BY Cur_Date DESC

;);
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_ELP_DAILY_BLEND_DSL_PL (eff_date date) as
(
select  	Ref_prod_location,
				case Pipeline_id 
								when 	'CPL' then cast('Magellan' as varchar(20))
								when 	'KM' 	then cast('KM' as varchar(20)) 
								else		cast('NA' as varchar(20)) end as Pipeline_id,
				Batch_id,
				Customer||'-'||ProductNumber||'-'||BatchCycle as Batch_Number,
				Eff_Date,
				Eff_time,
				cast(Eff_Date as varchar(20)) ||' '|| cast(Eff_time as varchar(8)) as Comb_Ef_Dt_Tm,
				Customer,
				ProductName, 
				ProductNumber,
				BatchCycle,
				Product,
				Tank,
				Side,
				Line,
				Total,
				TankApproved,
				ShipmentFinished,
				Create_dttm,
				Last_update_dttm
from 		PROD_EDW_BASE.PIPELINESCHED 
where 	eff_date between :eff_date and :eff_date+5 and
				ProductName not in ('UNPX', 'UPPX', 'AZRB', 'UPPX', 'TUNL', 'PAZB', 'TUNP', 'AUNL-EAST', 'AUNL-CH', 'AUNP-CH', 'AUNL','AUNP','AUNL CH','AUNP CH','NEP-EAST','SUBXCN02', 'ZUBXCN02', 'SUBTCN16', 'RULPCN08', 'PULPCN08', 'SUBACN08','SUBTPN16','SUBAPN08')
order by Pipeline_ID, eff_date, eff_time;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_ELP_DAILY_BLEND_DSL_TNK (eff_date date) as
(
select			Tnk_Side.*,
					PS.TankApproved
from			
					(
					select 			InvDat.Ref_Prod_Location, 
										InvDat.Eff_Date, 
										TnkMast.Master_Code,
										case 
											when (substr(TnkMast.Master_Code,2,1)='0' and substr(TnkMast.Master_Code,3,1) <> '5') then cast( 'North' as varchar(10))
											when (substr(TnkMast.Master_Code,2,1)='4' and substr(TnkMast.Master_Code,3,1) <> '5') then cast('South' as varchar(10)) 
											when (substr(TnkMast.Master_Code,2,1)='0' and substr(TnkMast.Master_Code,3,1) = '5') then cast( 'Rack' as varchar(10))
											when (substr(TnkMast.Master_Code,2,1)='4' and substr(TnkMast.Master_Code,3,1) = '5') then cast('Rack' as varchar(10)) 
											else cast('N/A' as varchar(10)) end as plant_location,
										PrdMast.Product_Desc, 
										InvDat.Gross_Quantity,
										InvDat.	Net_Quantity,
										TnkDet.Min_Op_Qty,
										InvDat.Gross_Quantity-TnkDet.Min_Op_Qty as Aval_Qty				
					from			PROD_EDW_BASE.TANK InvDat,
										PROD_EDW_BASE.Master TnkMast,
										PROD_EDW_BASE.Tank_Info TnkDet,
										PROD_EDW_BASE.REF_PRODUCT PrdMast
					where			InvDat.Ref_Prod_Location='El Paso Refinery' and
										InvDat.Eff_Date = :eff_date-1 and
										InvDat.Ref_Prod_Location = TnkMast.Ref_Prod_Location and
										InvDat.Tank_ID = TnkMast.Master_ID and
										TnkMast.Master_Code in ('T0097','T0098','T0099','T0517','T0518','T0519','T007','T4008','T4040','T4046','T4050','T4057','T0096','T0100','T0107','T0165','T0183','T0521','T0522','T4602','T4603','T4605') and
										InvDat.Ref_Prod_Location = TnkDet.Ref_Prod_Location and
										InvDat.Tank_ID = TnkDet.Tank_ID and
										InvDat.Ref_Prod_Location = PrdMast.Ref_Prod_Location and
										InvDat.Product_ID = PrdMast.Product_ID and
										PrdMast.Product_Desc <> 'Out of Service'
					) Tnk_Side					
					--T0098, T007 not found,  No TLF_NRL available only TLF_NRLM is available
					left outer join PROD_EDW_BASE.PipelineSched PS on Tnk_Side.Master_Code=PS.Tank and PS.Eff_Date = :eff_date-1;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_ELP_DAILY_BLEND_GAS_TK (eff_date date) as
(
select 			InvDat.Ref_Prod_Location, 
					InvDat.Eff_Date, 
					TnkMast.Master_Code,
					case 
						when (substr(TnkMast.Master_Code,2,1)='0' and substr(TnkMast.Master_Code,3,1) <> '5') then cast( 'North' as varchar(10))
						when (substr(TnkMast.Master_Code,2,1)='4' and substr(TnkMast.Master_Code,3,1) <> '5') then cast('South' as varchar(10)) 
						when (substr(TnkMast.Master_Code,2,1)='0' and substr(TnkMast.Master_Code,3,1) = '5') then cast( 'Rack' as varchar(10))
						when (substr(TnkMast.Master_Code,2,1)='4' and substr(TnkMast.Master_Code,3,1) = '5') then cast('Rack' as varchar(10)) 
						else cast('N/A' as varchar(10)) end as plant_location,
					PrdMast.Product_Desc, 
					InvDat.Gross_Quantity,
					InvDat.	Net_Quantity,
					TnkDet.Min_Op_Qty,
					InvDat.Gross_Quantity-TnkDet.Min_Op_Qty as Aval_Qty				
from			PROD_EDW_BASE.TANK InvDat,
					PROD_EDW_BASE.Master TnkMast,
					PROD_EDW_BASE.Tank_Info TnkDet,
					PROD_EDW_BASE.REF_PRODUCT PrdMast
where			InvDat.Ref_Prod_Location='El Paso Refinery' and
					InvDat.Eff_Date = :eff_date-1 and
					InvDat.Ref_Prod_Location = TnkMast.Ref_Prod_Location and
					InvDat.Tank_ID = TnkMast.Master_ID and
					TnkMast.Master_Code in ('T0125','T0127','T0130','T0142','T4119','T4120','T4121','T4122','T4124','T0181','T0117','T4052','T4125') and
					InvDat.Ref_Prod_Location = TnkDet.Ref_Prod_Location and
					InvDat.Tank_ID = TnkDet.Tank_ID and
					InvDat.Ref_Prod_Location = PrdMast.Ref_Prod_Location and
					InvDat.Product_ID = PrdMast.Product_ID and
					PrdMast.Product_Desc <> 'Out of Service'
order by		PrdMast.Product_Desc;					
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_ELP_DAILY_BLEND_GAS_TK_BLND(eff_date date) as
(
/*
Pending on 8/5/2015 SJ
Investigate why only very less values for the column PS.TankApproved Dustin to help and after that 
add TankApproved column to the SSRS report in the status column
*/
select			distinct BlndMBOStuff.*,
					PS.TankApproved
from			(
					select 			PPL_TnkVol.Ref_Prod_Location,
										PPL_TnkVol.Eff_Date,
										PPL_TnkVol.Master_Code,
										PPL_TnkVol.MBO_TANK_ID,
										PPL_TnkVol.plant_location,
										PPL_TnkVol.Product_Desc,
										PPL_TnkVol.Gross_Quantity,
										PPL_TnkVol.Net_Quantity,
										PPL_TnkVol.Min_Op_Qty,
										PPL_TnkVol.Aval_Qty,
										MBO_Blnd.Event_START,
										MBO_Blnd.STOP,
										MBO_Blnd.Qty
					from			(
										select 			InvDat.Ref_Prod_Location, 
															InvDat.Eff_Date, 
															TnkMast.Master_Code,
															case TnkMast.Master_Code 
																when	'T0114' 	then	'TK114' 
																when	'T0115'		then	'TK115'
																when	'T0116'		then	'TK116'
																when	'T0119'		then	'TK119'
																when	'T0123'		then	'TK123'
																when	'T0124'		then	'TK124'
																when	'T0134'		then	'TK134'
																when	'T0140'		then	'TK140'
																when	'T0141'		then	'TK141'
																when	'T0143'		then	'TK143'
																when	'T0144'		then	'TK144'
																when	'T0145'		then	'TK145'
																when	'T0146'		then	'TK146'
																when	'T0164'		then	'TK164'
																when	'T0166'		then	'TK166'
																when	'T0167'		then	'TK167'
																when	'T0182'		then	'TK182'
																when	'T0508'		then	'TK508'
																when	'T0512'		then	'TK512'
																when	'T0515'		then	'TK515'
																when	'T0516'		then	'TK516'
																when	'T0520'		then	'TK520'
															end as MBO_TANK_ID,
															case 
																when (substr(TnkMast.Master_Code,2,1)='0' and substr(TnkMast.Master_Code,3,1) <> '5') then cast( 'North' as varchar(10))
																when (substr(TnkMast.Master_Code,2,1)='4' and substr(TnkMast.Master_Code,3,1) <> '5') then cast('South' as varchar(10)) 
																when (substr(TnkMast.Master_Code,2,1)='0' and substr(TnkMast.Master_Code,3,1) = '5') then cast( 'Rack' as varchar(10))
																when (substr(TnkMast.Master_Code,2,1)='4' and substr(TnkMast.Master_Code,3,1) = '5') then cast('Rack' as varchar(10)) 
																else cast('N/A' as varchar(10)) 
															end as plant_location,
															PrdMast.Product_Desc, 
															InvDat.Gross_Quantity,
															InvDat.	Net_Quantity,
															TnkDet.Min_Op_Qty,
															InvDat.Gross_Quantity-TnkDet.Min_Op_Qty as Aval_Qty				
										from			PROD_EDW_BASE.TANK InvDat,
															PROD_EDW_BASE.Master TnkMast,
															PROD_EDW_BASE.Tank_Info TnkDet,
															PROD_EDW_BASE.REF_PRODUCT PrdMast
										where			InvDat.Ref_Prod_Location='El Paso Refinery' and
															InvDat.Eff_Date = :eff_date-1 and
															InvDat.Ref_Prod_Location = TnkMast.Ref_Prod_Location and
															InvDat.Tank_ID = TnkMast.Master_ID and
															TnkMast.Master_Code in ('T0114','T0115','T0116','T0119','T0123','T0124','T0134','T0140','T0141','T0143','T0144','T0145','T0146','T0164','T0166','T0167','T0182','T0508','T0512','T0515','T0516','T0520') and
															InvDat.Ref_Prod_Location = TnkDet.Ref_Prod_Location and
															InvDat.Tank_ID = TnkDet.Tank_ID and
															InvDat.Ref_Prod_Location = PrdMast.Ref_Prod_Location and
															InvDat.Product_ID = PrdMast.Product_ID and
															PrdMast.Product_Desc <> 'Out of Service'
										) PPL_TnkVol
										left outer join
										(
										select 			MET.TANK_ID, ME.Event_START, ME.STOP, ME.Qty
										from			PROD_EDW_BASE.MBO_EVENTS ME,
															PROD_EDW_BASE.MBO_EVENT_TANKS MET,
															(
															select			MET_Min.TANK_ID, min(ME_Min.Event_START) as minEvent_START
															from			PROD_EDW_BASE.MBO_EVENTS ME_Min,
																				PROD_EDW_BASE.MBO_EVENT_TANKS MET_Min
															where			cast(ME_Min.Event_START as Date) between  :eff_date-1 and :eff_date+4 and
																				ME_Min.X_SEQ	= MET_Min.Event_XSEQ and
																				MET_Min.ET_TYPE='DESTINATION' and
																				MET_Min.TANK_ID in ('TK114', 'TK115','TK116','TK119','TK123','TK124','TK134','TK140','TK141','TK143','TK144','TK145','TK146','TK164','TK166','TK167','TK182','TK508','TK512','TK515','TK516','TK520','TKTLF_AZRB','TKTLF_PRMC','TKTLF_TSUB','TKTLF_TSUP','TKTLF_UNLC')
															group by 	MET_Min.TANK_ID
															) Min_Tab
										where			cast(ME.Event_START as Date) between  :eff_date-1 and :eff_date+4  and
															ME.X_SEQ	= MET.Event_XSEQ and
															MET.ET_TYPE='DESTINATION' and
															MET.TANK_ID in ('TK114', 'TK115','TK116','TK119','TK123','TK124','TK134','TK140','TK141','TK143','TK144','TK145','TK146','TK164','TK166','TK167','TK182','TK508','TK512,''TK515','TK516','TK520','TKTLF_AZRB','TKTLF_PRMC','TKTLF_TSUB','TKTLF_TSUP','TKTLF_UNLC')  and
															MET.TANK_ID=Min_Tab.TANK_ID and
															ME.Event_START=Min_Tab.minEvent_START
										)	MBO_Blnd on
										PPL_TnkVol.MBO_TANK_ID=MBO_Blnd.TANK_ID	
					)BlndMBOStuff
					left outer join PROD_EDW_BASE.PipelineSched PS on BlndMBOStuff.Master_Code=PS.Tank and cast(BlndMBOStuff.Event_START as date) =  PS.eff_date;
	)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_ELP_DAILY_BLEND_GAS_TK_PL (eff_date date) as
(
/*
work pending as of 7/01/2015 SJ use this macro in the SSRS report
*/
select distinct MBO_PL.X_SEQ, MBO_PL.Event_START, MBO_PL.stop, MBO_PL.RESOURCE_ID, MBO_PL.QTY, MBO_PL.EVNT_COMMENT, MBO_PL.TANK_ID,PPL_Tnk.Product_Desc
from
(
select		distinct INQR.X_SEQ, INQR.Event_START, INQR.stop, INQR.RESOURCE_ID, INQR.QTY, INQR.EVNT_COMMENT, MET.TANK_ID
from		PROD_EDW_BASE.MBO_EVENTS ME 
				inner join PROD_EDW_BASE.MBO_EVENT_TANKS MET on ME.X_SEQ=MET.EVENT_XSEQ	
				inner join 
				(
				select		MEI.X_SEQ, MEI.Event_START, MEI.stop, MERI.RESOURCE_ID, MEI.QTY, MECI.EVNT_COMMENT
				from		PROD_EDW_BASE.MBO_EVENTS MEI 
								inner join PROD_EDW_BASE.MBO_EVENT_RESOURCES MERI on MEI.X_SEQ= MERI.EVENT_XSEQ
								inner join PROD_EDW_BASE.MBO_EVENT_COMMENTS MECI on MEI.X_SEQ=MECI.Event_XSEQ 
				where		MEI.Event_TYPE=15 and
								MERI.RESOURCE_ID in ('KM','JZ','ABQ') 
				) INQR on ME.DESCRIPTION=cast(INQR.X_SEQ as varchar(255))
where		ME.Event_TYPE=14 and
				cast(ME.Event_START as Date) between  :eff_date-1 and :eff_date+4 and
				MET.ET_TYPE='SOURCE'
) MBO_PL 
left outer join 
(
select 			TnkMast.Master_Code,
					case TnkMast.Master_Code 
						when	'T0090'						then	'TK090'
						when	'T0114'						then	'TK114'
						when	'T0115'						then	'TK115'
						when	'T0116'						then	'TK116'
						when	'T0117'						then	'TK117'
						when	'T0119'						then	'TK119'
						when	'T0123'						then	'TK123'
						when	'T0124'						then	'TK124'
						when	'T0134'						then	'TK134'
						when	'T0140'						then	'TK140'
						when	'T0141'						then	'TK141'
						when	'T0143'						then	'TK143'
						when	'T0144'						then	'TK144'
						when	'T0145'						then	'TK145'
						when	'T0146'						then	'TK146'
						when	'T0164'						then	'TK164'
						when	'T0166'						then	'TK166'
						when	'T0167'						then	'TK167'
						when	'T0181'						then	'TK181'
						when	'T0182'						then	'TK182'
						when	'T4052'						then	'TK4052'
						when	'T4119'						then	'TK4119'
						when	'T4121'						then	'TK4121'
						when	'T4122'						then	'TK4122'
						when	'T4124'						then	'TK4124'
						when	'TKABQSUB'			then	'TKABQSUB'
						when	'TKALK'					then	'TKALK'
						when	'TKEPSUB'				then	'TKEPSUB'
						when	'TKHVYREF'			then	'TKHVYREF'
						when	'TKHYDRO'				then	'TKHYDRO'
						when	'TKJZREG'				then	'TKJZREG'
						when	'TKLCCLSR'			then	'TKLCCLSR'
						when	'TKLTREF'				then	'TKLTREF'
						when	'TKPHXSUBCBG'	then	'TKPHXSUBCBG'
						when	'TKREF'					then	'TKREF'
						when	'TKSLOPC4'			then	'TKSLOPC4'
						when	'TKSUREF'				then	'TKSUREF'
						when	'TKSWING'				then	'TKSWING'
						when	'TKTOL'					then	'TKTOL'
						when	'TKTUCSUB'			then	'TKTUCSUB'
					end as MBO_TANK_ID,
					PrdMast.Product_Desc
from			PROD_EDW_BASE.TANK InvDat,
					PROD_EDW_BASE.Master TnkMast,
					PROD_EDW_BASE.Tank_Info TnkDet,
					PROD_EDW_BASE.REF_PRODUCT PrdMast
where			InvDat.Ref_Prod_Location='El Paso Refinery' and
					InvDat.Eff_Date = :eff_date-1 and
					InvDat.Ref_Prod_Location = TnkMast.Ref_Prod_Location and
					InvDat.Tank_ID = TnkMast.Master_ID and
					TnkMast.Master_Code in ('T0090','T0114','T0115','T0116','T0117','T0119','T0123','T0124','T0134','T0140','T0141','T0143','T0144','T0145','T0146','T0164','T0166','T0167','T0181','T0182','T4052','T4119','T4121','T4122','T4124') and
					InvDat.Ref_Prod_Location = TnkDet.Ref_Prod_Location and
					InvDat.Tank_ID = TnkDet.Tank_ID and
					InvDat.Ref_Prod_Location = PrdMast.Ref_Prod_Location and
					InvDat.Product_ID = PrdMast.Product_ID and
					PrdMast.Product_Desc <> 'Out of Service'
) PPL_Tnk on MBO_PL.TANK_ID=PPL_Tnk.MBO_TANK_ID
order by	MBO_PL.stop desc;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_elp_rack_CBOB (eff_date date) as 
(
select 			price_eff_date, 
					cast(null as varchar(50)) as Col2,
					cast(1 as integer) as sort_ord,
					(price/100) as Price
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00668' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Average' as varchar(50)) as Col2,
					cast(2 as integer) as sort_ord,
					(avg(price)/100) as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00668' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Plus' as varchar(50)) as Col2,
					cast(3 as integer) as sort_ord,
					cast(0.0600 as decimal(15,5)) as price
from				PROD_EDW_BASE_VIEWS.Cur_Date
where			Cur_Date=current_date			 
union all
select 			cast(null as date) as price_eff_date, 
					cast('Unit Price' as varchar(50)) as Col2,
					cast(4 as integer) as sort_ord,
					((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
					(
						select 	cast(4 as integer) as sort_ord_MC
						from 	PROD_EDW_BASE_VIEWS.Cur_Date 
						where	cur_date = (:eff_date-3) and
									TD_DAY_OF_WEEK(cur_date)=6
					) Mon_Chk 
where 			CP.price_source='OPIS SPOT' and 
					CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					CP.pricing_code='OPSPT00668' and 
					CP.price_type='Average' and
					sort_ord=Mon_Chk.sort_ord_MC
order by		3,1;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_elp_rack_CBOB_RVP (eff_date date) as 
(
select 			price_eff_date, 
					cast(null as varchar(50)) as Col2,
					cast(1 as integer) as sort_ord,
					(price/100) as Price
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00837' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Average' as varchar(50)) as Col2,
					cast(2 as integer) as sort_ord,
					(avg(price)/100) as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00837' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Plus' as varchar(50)) as Col2,
					cast(3 as integer) as sort_ord,
					cast(0.0600 as decimal(15,5)) as price
from				PROD_EDW_BASE_VIEWS.Cur_Date
where			Cur_Date=current_date			 
union all
select 			cast(null as date) as price_eff_date, 
					cast('Unit Price' as varchar(50)) as Col2,
					cast(4 as integer) as sort_ord,
					((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
					(
						select 	cast(4 as integer) as sort_ord_MC
						from 	PROD_EDW_BASE_VIEWS.Cur_Date 
						where	cur_date = (:eff_date-3) and
									TD_DAY_OF_WEEK(cur_date)=6
					) Mon_Chk 
where 			CP.price_source='OPIS SPOT' and 
					CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					CP.pricing_code='OPSPT00837' and 
					CP.price_type='Average' and
					sort_ord=Mon_Chk.sort_ord_MC
order by		3,1;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_elp_rack_Comb (eff_date date) as 
(
select			cast('Unlead 86' as varchar(50)) as Product,		
					cast(1 as integer) as sort_ord,
					((CBOB_Qry.Price*.9)+(ETHN_Qry.Price*.1)) as Price,
					cast('90% CBOB + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00668' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord
union all
select			cast('Unlead 86 RVP' as varchar(50)) as Product,		
					cast(2 as integer) as sort_ord,
					((CBOB_Qry.Price*.9)+(ETHN_Qry.Price*.1)) as Price,
					cast('90% CBOB RVP + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00837' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord
union all
select			cast('Unlead 87' as varchar(50)) as Product,		
					cast(3 as integer) as sort_ord,
					((CBOB_Qry.Price*.85)+(ETHN_Qry.Price*.1)+(PREM_Qry.Price*.05)) as Price,
					cast('85% CBOB + 5% Premium + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00668' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord and
					CBOB_Qry.sort_ord=PREM_Qry.sort_ord
union all
select			cast('Unlead 87 RVP' as varchar(50)) as Product,		
					cast(4 as integer) as sort_ord,
					((CBOB_Qry.Price*.85)+(ETHN_Qry.Price*.1)+(PREM_Qry.Price*.05)) as Price,
					cast('85% CBOB RVP + 5% Premium RVP + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00837' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord and
					CBOB_Qry.sort_ord=PREM_Qry.sort_ord
union all
select			cast('Midgrade 88' as varchar(50)) as Product,		
					cast(5 as integer) as sort_ord,
					((CBOB_Qry.Price*.63)+(ETHN_Qry.Price*.1)+(PREM_Qry.Price*.27)) as Price,
					cast('63% CBOB + 27% Premium + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00668' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord and
					CBOB_Qry.sort_ord=PREM_Qry.sort_ord
union all
select			cast('Midgrade 88 RVP' as varchar(50)) as Product,		
					cast(6 as integer) as sort_ord,
					((CBOB_Qry.Price*.63)+(ETHN_Qry.Price*.1)+(PREM_Qry.Price*.27)) as Price,
					cast('63% CBOB RVP + 27% Premium RVP + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00837' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord and
					CBOB_Qry.sort_ord=PREM_Qry.sort_ord
union all
select			cast('Midgrade 89' as varchar(50)) as Product,		
					cast(7 as integer) as sort_ord,
					((CBOB_Qry.Price*.45)+(ETHN_Qry.Price*.1)+(PREM_Qry.Price*.45)) as Price,
					cast('45% CBOB + 45% Premium + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00668' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord and
					CBOB_Qry.sort_ord=PREM_Qry.sort_ord
union all
select			cast('Midgrade 89 RVP' as varchar(50)) as Product,		
					cast(8 as integer) as sort_ord,
					((CBOB_Qry.Price*.45)+(ETHN_Qry.Price*.1)+(PREM_Qry.Price*.45)) as Price,
					cast('45% CBOB RVP + 45% Premium RVP + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00837' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) CBOB_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			CBOB_Qry.sort_ord=ETHN_Qry.sort_ord and
					CBOB_Qry.sort_ord=PREM_Qry.sort_ord
union all
select			cast('Premium 91' as varchar(50)) as Product,		
					cast(9 as integer) as sort_ord,
					((ETHN_Qry.Price*.1)+(PREM_Qry.Price*.9)) as Price,
					cast('90% Premium + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			ETHN_Qry.sort_ord=PREM_Qry.sort_ord
union all
select			cast('Premium 91 RVP' as varchar(50)) as Product,		
					cast(10 as integer) as sort_ord,
					((ETHN_Qry.Price*.1)+(PREM_Qry.Price*.9)) as Price,
					cast('90% Premium RVP + 10% Ethanol' as varchar(50)) as Form_Col
from				(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT01004' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					)	ETHN_Qry,
					(
					select 			cast(null as date) as price_eff_date, 
										cast('Unit Price' as varchar(50)) as Col2,
										cast(4 as integer) as sort_ord,
										((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
					from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
										(
										select 	cast(4 as integer) as sort_ord_MC
										from 	PROD_EDW_BASE_VIEWS.Cur_Date 
										where	cur_date = (:eff_date-3) and
													TD_DAY_OF_WEEK(cur_date)=6
										) Mon_Chk 
					where 			CP.price_source='OPIS SPOT' and 
										CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
										CP.pricing_code='OPSPT00652' and 
										CP.price_type='Average' and
										sort_ord=Mon_Chk.sort_ord_MC
					) PREM_Qry
where			ETHN_Qry.sort_ord=PREM_Qry.sort_ord
order by		2;
);
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_elp_rack_ETHN (eff_date date) as 
(
select 			price_eff_date, 
					cast(null as varchar(50)) as Col2,
					cast(1 as integer) as sort_ord,
					(price/100) as Price
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT01004' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Average' as varchar(50)) as Col2,
					cast(2 as integer) as sort_ord,
					(avg(price)/100) as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT01004' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Less' as varchar(50)) as Col2,
					cast(3 as integer) as sort_ord,
					cast(0.0350 as decimal(15,5)) as price
from				PROD_EDW_BASE_VIEWS.Cur_Date
where			Cur_Date=current_date			 
union all
select 			cast(null as date) as price_eff_date, 
					cast('Unit Price' as varchar(50)) as Col2,
					cast(4 as integer) as sort_ord,
					((avg(CP.price)/100) - cast(0.0350 as decimal(15,5)))as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
					(
						select 	cast(4 as integer) as sort_ord_MC
						from 	PROD_EDW_BASE_VIEWS.Cur_Date 
						where	cur_date = (:eff_date-3) and
									TD_DAY_OF_WEEK(cur_date)=6
					) Mon_Chk 
where 			CP.price_source='OPIS SPOT' and 
					CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					CP.pricing_code='OPSPT01004' and 
					CP.price_type='Average' and
					sort_ord=Mon_Chk.sort_ord_MC
order by		3,1;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_elp_rack_PREM (eff_date date) as 
(
select 			price_eff_date, 
					cast(null as varchar(50)) as Col2,
					cast(1 as integer) as sort_ord,
					(price/100) as Price
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00652' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Average' as varchar(50)) as Col2,
					cast(2 as integer) as sort_ord,
					(avg(price)/100) as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00652' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Plus' as varchar(50)) as Col2,
					cast(3 as integer) as sort_ord,
					cast(0.0600 as decimal(15,5)) as price
from				PROD_EDW_BASE_VIEWS.Cur_Date
where			Cur_Date=current_date			 
union all
select 			cast(null as date) as price_eff_date, 
					cast('Unit Price' as varchar(50)) as Col2,
					cast(4 as integer) as sort_ord,
					((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
					(
						select 	cast(4 as integer) as sort_ord_MC
						from 	PROD_EDW_BASE_VIEWS.Cur_Date 
						where	cur_date = (:eff_date-3) and
									TD_DAY_OF_WEEK(cur_date)=6
					) Mon_Chk 
where 			CP.price_source='OPIS SPOT' and 
					CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					CP.pricing_code='OPSPT00652' and 
					CP.price_type='Average' and
					sort_ord=Mon_Chk.sort_ord_MC
order by		3,1;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_elp_rack_PREM_RVP (eff_date date) as 
(
select 			price_eff_date, 
					cast(null as varchar(50)) as Col2,
					cast(1 as integer) as sort_ord,
					(price/100) as Price
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 		price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00652' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Average' as varchar(50)) as Col2,
					cast(2 as integer) as sort_ord,
					(avg(price)/100) as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 		price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00652' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Plus' as varchar(50)) as Col2,
					cast(3 as integer) as sort_ord,
					cast(0.0600 as decimal(15,5)) as price
from				PROD_EDW_BASE_VIEWS.Cur_Date
where			Cur_Date=current_date			 
union all
select 			cast(null as date) as price_eff_date, 
					cast('Unit Price' as varchar(50)) as Col2,
					cast(4 as integer) as sort_ord,
					((avg(CP.price)/100) + cast(0.0600 as decimal(15,5)))as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
					(
						select 	cast(4 as integer) as sort_ord_MC
						from 	PROD_EDW_BASE_VIEWS.Cur_Date 
						where	cur_date = (:eff_date-3) and
									TD_DAY_OF_WEEK(cur_date)=6
					) Mon_Chk 
where 			CP.price_source='OPIS SPOT' and 
					CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					CP.pricing_code='OPSPT00652' and 
					CP.price_type='Average' and
					sort_ord=Mon_Chk.sort_ord_MC
order by		3,1;
);
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_elp_rack_ULSD (eff_date date) as 
(
select 			price_eff_date, 
					cast(null as varchar(50)) as Col2,
					cast(1 as integer) as sort_ord,
					(price/100) as Price
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00660' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Average' as varchar(50)) as Col2,
					cast(2 as integer) as sort_ord,
					(avg(price)/100) as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing 
where 			price_source='OPIS SPOT' and 
					price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					pricing_code='OPSPT00660' and 
					price_type='Average'
union all
select 			cast(null as date) as price_eff_date, 
					cast('Plus' as varchar(50)) as Col2,
					cast(3 as integer) as sort_ord,
					cast(0.0500 as decimal(15,5)) as price
from				PROD_EDW_BASE_VIEWS.Cur_Date
where			Cur_Date=current_date			 
union all
select 			cast(null as date) as price_eff_date, 
					cast('Unit Price' as varchar(50)) as Col2,
					cast(4 as integer) as sort_ord,
					((avg(CP.price)/100) + cast(0.0500 as decimal(15,5)))as price 
from 			PROD_EDW_BASE_VIEWS.combined_pricing CP,
					(
						select 	cast(4 as integer) as sort_ord_MC
						from 	PROD_EDW_BASE_VIEWS.Cur_Date 
						where	cur_date = (:eff_date-3) and
									TD_DAY_OF_WEEK(cur_date)=6
					) Mon_Chk
where 			CP.price_source='OPIS SPOT' and 
					CP.price_eff_date between (:eff_date-7)  and (:eff_date-3)  and 
					CP.pricing_code='OPSPT00660' and 
					CP.price_type='Average' and
					sort_ord=Mon_Chk.sort_ord_MC
order by		3,1;
)
--------------------------------------------------------------------------------

--**********************

REPLACE MACRO prod_edw_base_views.M_Emissions (Begin_Date DATE, End_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
	(

	SELECT Unit, ANALYSIS, Tag_ID, Tag_Desc, Tag_Units
		,SUM(exc_1Min) AS Exc_1Min,SUM(exc_1Min_Ops) AS Exc_1Min_Ops
		,SUM(exc_6Mins) AS Exc_6Mins,SUM(exc_6Mins_Ops) AS Exc_6Min_Ops
		,SUM(exc_15Mins) AS Exc_15Mins,SUM(exc_15Mins_Ops) AS Exc_15Min_Ops
		,SUM(exc_1Hour) AS Exc_1Hour,SUM(exc_1Hour_Ops) AS Exc_1Hour_Ops
		,SUM(Exc_3Hours) AS Exc_3Hours,SUM(Exc_3Hours_Ops) AS Exc_3Hours_Ops
		,SUM(Exc_6Hours) AS Exc_6Hours,SUM(Exc_6Hours_Ops) AS Exc_6Hours_Ops
		,SUM(Exc_12Hours) AS Exc_12Hours,SUM(Exc_12Hours_Ops) AS Exc_12Hours_Ops
		,SUM(Exc_24Hours) AS Exc_24Hours,SUM(Exc_24Hours_Ops) AS Exc_24Hours_Ops
		,SUM(Exc_8HourShift) AS Exc_8HourShift,SUM(Exc_8HourShift_Ops) AS Exc_8HourShift_Ops
		,SUM(Exc_1Day) AS Exc_1Day,SUM(Exc_1Day_Ops) AS Exc_1Day_Ops
		,SUM(Exc_1DaySum) AS Exc_1DaySum
		,SUM(Exc_7Days) AS Exc_7Days,SUM(Exc_7Days_Ops) AS Exc_7Days_Ops
		,SUM(Exc_30Days) AS Exc_30Days,SUM(Exc_30Days_Ops) AS Exc_30Days_Ops
		,SUM(Exc_365Days) AS Exc_365Days,SUM(Exc_365Days_Ops) AS Exc_365Days_Ops
		,SUM(Exc_365DaySum) AS Exc_365DaySum,SUM(Exc_365DaySum_Ops) AS Exc_365DaySum_Ops
	
	FROM
		(
		SELECT	pi_corrected.Ref_Prod_Location, pi_corrected.Trans_Date, pi_corrected.Trans_Hour, pi_corrected.Trans_Min,
			Unit, ANALYSIS, pi_corrected.Tag_ID, Tag_Units, Tag_Desc
	
			,CAST(Tag_Value AS DECIMAL(12,4)) AS Instant_1Min
			,CASE WHEN Limit_Instant_Sign = '<' THEN
				CASE 
			    	WHEN Instant_1Min < Limit_Instant_Value THEN 0
			        WHEN Instant_1Min >= Limit_Instant_Value THEN 1
				END  
			WHEN Limit_Instant_Sign = '>' THEN
				CASE 
			    	WHEN Instant_1Min > Limit_Instant_Value THEN 0
			        WHEN Instant_1Min <= Limit_Instant_Value THEN 1
				END  
			END AS Exc_1Min
			,CASE WHEN Limit_Instant_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Instant_1Min < Limit_Instant_Value_Ops THEN 0
			        WHEN Instant_1Min >= Limit_Instant_Value_Ops THEN 1
				END  
			WHEN Limit_Instant_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Instant_1Min > Limit_Instant_Value_Ops THEN 0
			        WHEN Instant_1Min <= Limit_Instant_Value_Ops THEN 1
				END  
			END AS Exc_1Min_Ops
	
			,MAvg_6Mins
			,CASE WHEN Limit_6Min_Sign = '<' THEN
				CASE 
			    	WHEN Mavg_6Mins < Limit_6Min_Value THEN 0
			        WHEN Mavg_6Mins >= Limit_6Min_Value THEN 1
				END  
			WHEN Limit_6Min_Sign = '>' THEN
				CASE 
			    	WHEN Mavg_6Mins > Limit_6Min_Value THEN 0
			        WHEN Mavg_6Mins <= Limit_6Min_Value THEN 1
				END  
			END AS Exc_6Mins
			,CASE WHEN Limit_6Min_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Mavg_6Mins < Limit_6Min_Value_Ops THEN 0
			        WHEN Mavg_6Mins >= Limit_6Min_Value_Ops THEN 1
				END  
			WHEN Limit_6Min_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Mavg_6Mins > Limit_6Min_Value_Ops THEN 0
			        WHEN Mavg_6Mins <= Limit_6Min_Value_Ops THEN 1
				END  
			END AS Exc_6Mins_Ops

			,MAvg_15Mins
			,CASE WHEN Limit_15Min_Sign = '<' THEN
				CASE 
			    	WHEN Mavg_15Mins < Limit_15Min_Value THEN 0
			        WHEN Mavg_15Mins >= Limit_15Min_Value THEN 1
				END  
			WHEN Limit_15Min_Sign = '>' THEN
				CASE 
			    	WHEN Mavg_15Mins > Limit_15Min_Value THEN 0
			        WHEN Mavg_15Mins <= Limit_15Min_Value THEN 1
				END  
			END AS Exc_15Mins
			,CASE WHEN Limit_15Min_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Mavg_15Mins < Limit_15Min_Value_Ops THEN 0
			        WHEN Mavg_15Mins >= Limit_15Min_Value_Ops THEN 1
				END  
			WHEN Limit_15Min_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Mavg_15Mins > Limit_15Min_Value_Ops THEN 0
			        WHEN Mavg_15Mins <= Limit_15Min_Value_Ops THEN 1
				END  
			END AS Exc_15Mins_Ops
			
			,HourlyTagAvg AS Avg_1Hour
			,CASE WHEN Limit_1Hour_Sign = '<' THEN
				CASE 
			    	WHEN avg_1hour < Limit_1Hour_Value THEN 0
			        WHEN avg_1hour >= Limit_1Hour_Value THEN 1
				END  
			WHEN Limit_1Hour_Sign = '>' THEN
				CASE 
			    	WHEN avg_1hour > Limit_1Hour_Value THEN 0
			        WHEN avg_1hour <= Limit_1Hour_Value THEN 1
				END  
			END AS Exc_1Hour
			,CASE WHEN Limit_1Hour_Sign_Ops = '<' THEN
				CASE 
			    	WHEN avg_1hour < Limit_1Hour_Value_Ops THEN 0
			        WHEN avg_1hour >= Limit_1Hour_Value_Ops THEN 1
				END  
			WHEN Limit_1Hour_Sign_Ops= '>' THEN
				CASE 
			    	WHEN avg_1hour > Limit_1Hour_Value_Ops THEN 0
			        WHEN avg_1hour <= Limit_1Hour_Value_Ops THEN 1
				END  
			END AS Exc_1Hour_Ops
		
			,Mavg_3Hours
			,CASE WHEN Limit_3Hour_Sign = '<' THEN
				CASE 
			    	WHEN Mavg_3hours < Limit_3Hour_Value THEN 0
			        WHEN Mavg_3hours >= Limit_3Hour_Value THEN 1
				END  
			WHEN Limit_3Hour_Sign = '>' THEN
				CASE 
			    	WHEN Mavg_3hours > Limit_3Hour_Value THEN 0
			        WHEN Mavg_3hours <= Limit_3Hour_Value THEN 1
				END  
			END AS Exc_3Hours
			,CASE WHEN Limit_3Hour_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Mavg_3hours < Limit_3Hour_Value_Ops THEN 0
			        WHEN Mavg_3hours >= Limit_3Hour_Value_Ops THEN 1
				END  
			WHEN Limit_3Hour_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Mavg_3hours > Limit_3Hour_Value_Ops THEN 0
			        WHEN Mavg_3hours <= Limit_3Hour_Value_Ops THEN 1
				END  
			END AS Exc_3Hours_Ops
			
			,MAvg_6Hours
			,CASE WHEN Limit_6Hour_Sign = '<' THEN
				CASE 
			    	WHEN Mavg_6hours < Limit_6Hour_Value THEN 0
			        WHEN Mavg_6hours >= Limit_6Hour_Value THEN 1
				END  
			WHEN Limit_6Hour_Sign = '>' THEN
				CASE 
			    	WHEN Mavg_6hours > Limit_6Hour_Value THEN 0
			        WHEN Mavg_6hours <= Limit_6Hour_Value THEN 1
				END  
			END AS Exc_6Hours
			,CASE WHEN Limit_6Hour_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Mavg_6hours < Limit_6Hour_Value_Ops THEN 0
			        WHEN Mavg_6hours >= Limit_6Hour_Value_Ops THEN 1
				END  
			WHEN Limit_6Hour_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Mavg_6hours > Limit_6Hour_Value_Ops THEN 0
			        WHEN Mavg_6hours <= Limit_6Hour_Value_Ops THEN 1
				END  
			END AS Exc_6Hours_Ops
		
			,MAvg_12Hours
			,CASE WHEN Limit_12Hour_Sign = '<' THEN
				CASE 
			    	WHEN Mavg_12hours < Limit_12Hour_Value THEN 0
			        WHEN Mavg_12hours >= Limit_12Hour_Value THEN 1
				END  
			WHEN Limit_12Hour_Sign = '>' THEN
				CASE 
			    	WHEN Mavg_12hours > Limit_12Hour_Value THEN 0
			        WHEN Mavg_12hours <= Limit_12Hour_Value THEN 1
				END  
			END AS Exc_12Hours
			,CASE WHEN Limit_12Hour_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Mavg_12hours < Limit_12Hour_Value_Ops THEN 0
			        WHEN Mavg_12hours >= Limit_12Hour_Value_Ops THEN 1
				END  
			WHEN Limit_12Hour_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Mavg_12hours > Limit_12Hour_Value_Ops THEN 0
			        WHEN Mavg_12hours <= Limit_12Hour_Value_Ops THEN 1
				END  
			END AS Exc_12Hours_Ops

			,MAvg_24Hours
			,CASE WHEN Limit_24HourMAvg_Sign = '<' THEN
				CASE 
			    	WHEN Mavg_24hours < Limit_24HourMAvg_Value THEN 0
			        WHEN Mavg_24hours >= Limit_24HourMAvg_Value THEN 1
				END  
			WHEN Limit_24HourMAvg_Sign = '>' THEN
				CASE 
			    	WHEN Mavg_24hours > Limit_24HourMAvg_Value THEN 0
			        WHEN Mavg_24hours <= Limit_24HourMAvg_Value THEN 1
				END  
			END AS Exc_24Hours
			,CASE WHEN Limit_24HourMAvg_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Mavg_24hours < Limit_24HourMAvg_Value_Ops THEN 0
			        WHEN Mavg_24hours >= Limit_24HourMAvg_Value_Ops THEN 1
				END  
			WHEN Limit_24HourMAvg_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Mavg_24hours > Limit_24HourMAvg_Value_Ops THEN 0
			        WHEN Mavg_24hours <= Limit_24HourMAvg_Value_Ops THEN 1
				END  
			END AS Exc_24Hours_Ops
		
			,Avg_8HourShift
			,CASE WHEN Limit_8Hour_Sign = '<' THEN
				CASE 
			    	WHEN Avg_8HourShift < Limit_8Hour_Value THEN 0
			        WHEN Avg_8HourShift >= Limit_8Hour_Value THEN 1
				END  
			WHEN Limit_8Hour_Sign = '>' THEN
				CASE 
			    	WHEN Avg_8hourShift > Limit_8Hour_Value THEN 0
			        WHEN Avg_8hourShift <= Limit_8Hour_Value THEN 1
				END  
			END AS Exc_8HourShift
			,CASE WHEN Limit_8Hour_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Avg_8HourShift < Limit_8Hour_Value_Ops THEN 0
			        WHEN Avg_8HourShift >= Limit_8Hour_Value_Ops THEN 1
				END  
			WHEN Limit_8Hour_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Avg_8hourShift > Limit_8Hour_Value_Ops THEN 0
			        WHEN Avg_8hourShift <= Limit_8Hour_Value_Ops THEN 1
				END  
			END AS Exc_8HourShift_Ops
			
			,DayTagAvg AS Avg_1Day
			,CASE WHEN Limit_1Day_Sign = '<' THEN
				CASE 
			    	WHEN Avg_1Day < Limit_1Day_Value THEN 0
			        WHEN Avg_1Day >= Limit_1Day_Value THEN 1
				END  
			WHEN Limit_1Day_Sign = '>' THEN
				CASE 
			    	WHEN Avg_1Day > Limit_1Day_Value THEN 0
			        WHEN Avg_1Day <= Limit_1Day_Value THEN 1
				END  
			END AS Exc_1Day
			,CASE WHEN Limit_1Day_Sign_Ops = '<' THEN
				CASE 
			    	WHEN Avg_1Day < Limit_1Day_Value_Ops THEN 0
			        WHEN Avg_1Day >= Limit_1Day_Value_Ops THEN 1
				END  
			WHEN Limit_1Day_Sign_Ops = '>' THEN
				CASE 
			    	WHEN Avg_1Day > Limit_1Day_Value_Ops THEN 0
			        WHEN Avg_1Day <= Limit_1Day_Value_Ops THEN 1
				END  
			END AS Exc_1Day_Ops
			
			,CAST(Tag_Value AS DECIMAL(12,4)) AS Sum_1Day
			,CASE WHEN Limit_1DaySum_Sign = '<' THEN
				CASE 
			    	WHEN Sum_1Day < Limit_1DaySum_Value THEN 0
			        WHEN Sum_1Day >= Limit_1DaySum_Value THEN 1
				END  
			WHEN Limit_1DaySum_Sign = '>' THEN
				CASE 
			    	WHEN Sum_1Day > Limit_1DaySum_Value THEN 0
			        WHEN Sum_1Day <= Limit_1DaySum_Value THEN 1
				END  
			END AS Exc_1DaySum

			,Mavg_7Days
			,CASE WHEN Limit_7Day_Sign = '<' THEN
				CASE 
			    	WHEN MAvg_7Days < Limit_7Day_Value THEN 0
			        WHEN MAvg_7Days >= Limit_7Day_Value THEN 1
				END  
			WHEN Limit_7Day_Sign = '>' THEN
				CASE 
			    	WHEN MAvg_7Days > Limit_7Day_Value THEN 0
			        WHEN MAvg_7Days <= Limit_7Day_Value THEN 1
				END  
			END AS Exc_7Days
			,CASE WHEN Limit_7Day_Sign_Ops = '<' THEN
				CASE 
			    	WHEN MAvg_7Days < Limit_7Day_Value_Ops THEN 0
			        WHEN MAvg_7Days >= Limit_7Day_Value_Ops THEN 1
				END  
			WHEN Limit_7Day_Sign_Ops = '>' THEN
				CASE 
			    	WHEN MAvg_7Days > Limit_7Day_Value_Ops THEN 0
			        WHEN MAvg_7Days <= Limit_7Day_Value_Ops THEN 1
				END  
			END AS Exc_7Days_Ops
		
			,Mavg_30Days
			,CASE WHEN Limit_30Day_Sign = '<' THEN
				CASE 
			    	WHEN MAvg_30Days < Limit_30Day_Value THEN 0
			        WHEN MAvg_30Days >= Limit_30Day_Value THEN 1
				END  
			WHEN Limit_30Day_Sign = '>' THEN
				CASE 
			    	WHEN MAvg_30Days > Limit_30Day_Value THEN 0
			        WHEN MAvg_30Days <= Limit_30Day_Value THEN 1
				END  
			END AS Exc_30Days
			,CASE WHEN Limit_30Day_Sign_Ops = '<' THEN
				CASE 
			    	WHEN MAvg_30Days < Limit_30Day_Value_Ops THEN 0
			        WHEN MAvg_30Days >= Limit_30Day_Value_Ops THEN 1
				END  
			WHEN Limit_30Day_Sign_Ops = '>' THEN
				CASE 
			    	WHEN MAvg_30Days > Limit_30Day_Value_Ops THEN 0
			        WHEN MAvg_30Days <= Limit_30Day_Value_Ops THEN 1
				END  
			END AS Exc_30Days_Ops
			
			,Mavg_365Days
			,CASE WHEN Limit_365Day_Sign = '<' THEN
				CASE 
			    	WHEN MAvg_365Days < Limit_365Day_Value THEN 0
			        WHEN MAvg_365Days >= Limit_365Day_Value THEN 1
				END  
			WHEN Limit_365Day_Sign = '>' THEN
				CASE 
			    	WHEN MAvg_365Days > Limit_365Day_Value THEN 0
			        WHEN MAvg_365Days <= Limit_365Day_Value THEN 1
				END  
			END AS Exc_365Days
			,CASE WHEN Limit_365Day_Sign_Ops = '<' THEN
				CASE 
			    	WHEN MAvg_365Days < Limit_365Day_Value_Ops THEN 0
			        WHEN MAvg_365Days >= Limit_365Day_Value_Ops THEN 1
				END  
			WHEN Limit_365Day_Sign_Ops = '>' THEN
				CASE 
			    	WHEN MAvg_365Days > Limit_365Day_Value_Ops THEN 0
			        WHEN MAvg_365Days <= Limit_365Day_Value_Ops THEN 1
				END  
			END AS Exc_365Days_Ops
	
			,NULL AS Exc_365DaySum
			,NULL AS Exc_365DaySum_Ops
	
		FROM prod_edw_base_views.pi_corrected
		
		/* Join to the environmenta_hier table to determine the tags to evaluate and their limits */
		INNER JOIN prod_edw_base_views.environmental_hier
			ON pi_corrected.tag_id = environmental_hier.tag_id
			AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
			AND pi_corrected.trans_date = environmental_hier.eff_date
		
		LEFT OUTER JOIN 
				/* Calculate the moving minute average for the previous 6 minutes */
				(
				SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id, MAvg_6Mins
				FROM
					(
					SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id
						,AVG(Tag_Value) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour, trans_min ROWS 5 PRECEDING) AS MAvg_6Mins
					FROM prod_edw_base_views.pi_corrected
					WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
						AND ref_prod_location = :Ref_Prod_Location
					) AS tmpPI6MinAvg		
				WHERE trans_min IN (0,6,12,18,24,30,36,42,48,54)
				) AS PI_CalcData_6Min
			ON pi_corrected.ref_prod_location = pi_calcdata_6Min.ref_prod_location
				AND pi_corrected.tag_id = pi_calcdata_6Min.tag_id
				AND pi_corrected.trans_date = pi_calcdata_6Min.trans_date
				AND pi_corrected.trans_hour = pi_calcdata_6Min.trans_hour
				AND pi_corrected.trans_min = pi_calcdata_6Min.trans_min

		LEFT OUTER JOIN 
				/* Calculate the moving minute average for the previous 15 minutes */
				(
				SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id, MAvg_15Mins
				FROM
					(
					SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id
						,AVG(Tag_Value) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour, trans_min ROWS 14 PRECEDING) AS MAvg_15Mins
					FROM prod_edw_base_views.pi_corrected
					WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
						AND ref_prod_location = :Ref_Prod_Location
					) AS tmpPI15MinAvg		
				WHERE trans_min IN (0,15,30,45)
				) AS PI_CalcData_15Min
			ON pi_corrected.ref_prod_location = pi_calcdata_15Min.ref_prod_location
				AND pi_corrected.tag_id = pi_calcdata_15Min.tag_id
				AND pi_corrected.trans_date = pi_calcdata_15Min.trans_date
				AND pi_corrected.trans_hour = pi_calcdata_15Min.trans_hour
				AND pi_corrected.trans_min = pi_calcdata_15Min.trans_min
		
		LEFT OUTER JOIN 
				/* Calculate the moving hourly average for the previous 3, 6 and 12 hours */
				(SELECT	Ref_Prod_location, Trans_Date, Trans_Hour, 0 AS Trans_Min, Tag_ID, HourlyTagAvg
					,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 2 PRECEDING) AS MAvg_3Hours
					,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 5 PRECEDING) AS MAvg_6Hours		
					,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 11 PRECEDING) AS MAvg_12Hours
					,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 23 PRECEDING) AS MAvg_24Hours
					FROM	
						(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
						FROM prod_edw_base_views.pi_corrected
						WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
							AND ref_prod_location = :Ref_Prod_Location
						GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
				) AS PI_CalcData_Hour
				ON pi_corrected.ref_prod_location = pi_calcdata_hour.ref_prod_location
				AND pi_corrected.tag_id = pi_calcdata_hour.tag_id
				AND pi_corrected.trans_date = pi_calcdata_hour.trans_date
				AND pi_corrected.trans_hour = pi_calcdata_hour.trans_hour
				AND pi_corrected.trans_min = pi_calcdata_hour.trans_min
		
		LEFT OUTER JOIN
			(
				/* Calculate the moving daily average for the previous 7, 30 and 365 days */
				/* Since there is a 365 day moving average, the subquery must look through 365 days of PI data */
				SELECT	Ref_Prod_Location, Trans_Date, Tag_ID, 23 AS trans_hour, 0 AS Trans_Min, DayTagAvg
				,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 6 PRECEDING) AS MAvg_7Days	
				,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 29 PRECEDING) AS MAvg_30Days	
				,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 364 PRECEDING) AS MAvg_365Days	
			FROM	
				(SELECT ref_prod_location, trans_date, tag_id, AVG(tag_value) AS DayTagAvg
				FROM prod_edw_base_views.pi_corrected
				WHERE trans_date BETWEEN :Begin_Date-365 AND :End_Date
					AND ref_prod_location = :Ref_Prod_Location
				GROUP BY ref_prod_location, trans_date, tag_id) AS tmpPIDayAvg
			) AS PI_CalcData_Day
			ON pi_calcdata_hour.ref_prod_location = pi_calcdata_day.ref_prod_location
			AND pi_corrected.trans_date = pi_calcdata_day.trans_date
			AND pi_corrected.trans_hour = pi_calcdata_day.trans_hour
			AND pi_corrected.trans_min = pi_calcdata_day.trans_min
			AND pi_corrected.tag_id = pi_calcdata_day.tag_id
		
		LEFT OUTER JOIN
			(
			/* Calculate the moving shift averages for all three shifts */		
			SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 7 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
				FROM	
					(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
					FROM prod_edw_base_views.pi_corrected
					WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
						AND ref_prod_location = :Ref_Prod_Location
						AND trans_hour BETWEEN 0 AND 7
					GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
			GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
			UNION ALL
			SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 15 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
				FROM	
					(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
					FROM prod_edw_base_views.pi_corrected
					WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
						AND ref_prod_location = :Ref_Prod_Location
						AND trans_hour BETWEEN 8 AND 15
					GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
			GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
			UNION ALL
			SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 23 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
				FROM	
					(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
					FROM prod_edw_base_views.pi_corrected
					WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
						AND ref_prod_location = :Ref_Prod_Location
						AND trans_hour BETWEEN 16 AND 23
					GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
			GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
			) AS PI_CalcData_Shift
			ON pi_calcdata_hour.ref_prod_location = pi_calcdata_shift.ref_prod_location
			AND pi_corrected.trans_date = pi_calcdata_shift.trans_date
			AND pi_corrected.trans_hour = pi_calcdata_shift.trans_hour
			AND pi_corrected.trans_min = pi_calcdata_shift.trans_min
			AND pi_corrected.tag_id = pi_calcdata_shift.tag_id

		/* Join to the pi_desc_units table to get the description and units for all tags */
		LEFT OUTER JOIN prod_edw_base_views.pi_desc_units
			ON pi_corrected.ref_prod_location = pi_desc_units.tref_prod_location
			AND pi_corrected.tag_id = pi_desc_units.tag_id
	
		WHERE pi_corrected.trans_date BETWEEN :Begin_Date AND :End_Date
			AND pi_corrected.ref_prod_location = :Ref_Prod_Location
			AND environmental_hier.analysis_type = 'Daily_Environmental'
			AND environmental_hier.unit IS NOT NULL
	
		) AS Emissions_Summary
		
	GROUP BY Unit, ANALYSIS, Tag_ID, Tag_Desc, Tag_Units
	ORDER BY Unit, ANALYSIS, Tag_ID
		
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_EmissionsDQ (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(
	SELECT Unit, analysis, tag_id, tag_desc, tag_units, max(cur_date) as cur_date
		,count(VarValue) AS VarValue_Exc
		,count(NullValue) AS NullValue_Exc
		,count(BoundLowValue) AS BoundLowValue_Exc
		,count(BoundHighValue) AS BoundHighValue_Exc
		,count(UnitDownValue) AS UnitDownValue_Exc
		,count(QHourValue)/60 AS QHourValue_Exc
		,count(Mitigated) AS Mitigated
	FROM
		(
		SELECT environmental_hier.Unit, environmental_hier.analysis, pi_desc_units.tag_id, tag_desc, tag_units, cur_date.cur_date
			,pi_corrected.trans_hour, pi_corrected.trans_min,pi_corrected.tag_value
		
				,tmpVarValues.Var_Tag_Value AS VarValue
				,tmpNullValues.Tag_Value AS NullValue
				,tmpBoundValues.Bound_Low_Value AS BoundLowValue
				,tmpBoundValues.Bound_High_Value AS BoundHighValue
				,tmpUnitDownValues.UnitDown_Value AS UnitDownValue
				,tmpQHourValues.QHour_Value AS QHourValue
				
				/* Determine if any exceptions exist for a given unit */
				,CASE WHEN VarValue IS NOT NULL
					OR NullValue IS NOT NULL
					OR BoundLowValue IS NOT NULL
					OR BoundHighValue IS NOT NULL		
					OR UnitDownValue IS NOT NULL		
					OR QHourValue IS NOT NULL
				THEN 'Exception'
				END as DQException
				
				/* Determine if any corrected values exist */
				,CASE WHEN pi_corrected.audit_date IS NOT NULL
					THEN 'Yes' END as Mitigated
				
		/* Primary join is to date table.  All other data steps are subqueries */
		FROM prod_edw_base_views.cur_date
		CROSS JOIN prod_edw_base_views.pi_desc_units
		INNER JOIN prod_edw_base_views.environmental_hier
			ON pi_desc_units.tref_prod_location = environmental_hier.ref_prod_location
				AND cur_date.cur_date = environmental_hier.eff_date
				AND pi_desc_units.tag_id = environmental_hier.tag_id
		INNER JOIN prod_edw_base_views.pi_corrected
			ON pi_corrected.trans_date = cur_date.cur_date
				AND pi_corrected.tag_id = environmental_hier.tag_id
			
		LEFT OUTER JOIN
			(
			/* Relatively complex select whose purpose is to look back 120 points and determine if all values in that span are the same */
			/* If there is a 120 point run, flag a variance exception all the wya back to the beginning of the run */
			/* Do this by assigning row numbers to the values in the select and joing back to the same select at Rownum-20 for the compare */

			SELECT Ref_Prod_Location, tmpVar_Values2.Tag_ID, Trans_Date, Trans_Hour, Trans_Min, Tag_Value AS Var_Tag_Value
			FROM
				(
				SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
					,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
														ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
					,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
					,RowNumb_Base-120 AS RowNumb_Neg120
				FROM	prod_edw_base_views.PI_CORRECTED
				INNER JOIN prod_edw_base_views.environmental_hier
					ON pi_corrected.trans_date = environmental_hier.eff_date
					AND pi_corrected.tag_id = environmental_hier.tag_id
					AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
				WHERE Trans_Date between :Begin_Date-1 and :End_Date+1
				AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
				AND Analysis_Type = 'Daily_Environmental'
				) AS tmpVar_Values2
			
			INNER JOIN
				(
				SELECT Tag_Id, Lag AS Row_Start, RowNumb_Base AS Row_End
				FROM
					(
					SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
						,RowNumb_Base, RowNumb_Neg120
						,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
						,MAX(RowNumb_Neg120) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS tmpLag
						,CASE WHEN tmpLag IS NULL THEN RowNumb_Neg120 ELSE tmpLag END AS Lag
						,CASE WHEN ROW_NUMBER() OVER(ORDER BY ref_prod_location, tag_id, trans_date, trans_hour, trans_min) MOD 2 = 0 THEN 'Even' ELSE 'Odd' END OddEven
					FROM
						(
						SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
							,RowNumb_Base
							,RowNumb_Neg120
							,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
							,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS Lag
						 	,RowNumb_Base - Lead AS LeadDiff
						 	,RowNumb_Neg120 - Lag AS LagDiff
						FROM
							(
							SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
								,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
																	ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
								,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
								,RowNumb_Base-120 AS RowNumb_Neg120
							FROM	prod_edw_base_views.PI_CORRECTED
							INNER JOIN prod_edw_base_views.environmental_hier
								ON pi_corrected.trans_date = environmental_hier.eff_date
								AND pi_corrected.tag_id = environmental_hier.tag_id
								AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
							WHERE Trans_Date between :Begin_Date-1 and :End_date+1
							AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
							AND Analysis_Type = 'Daily_Environmental'
							) AS tmpRow_Numb4
						WHERE Var_Tag_Value = 0
						AND  RowNumb_Base > 1320
						) AS tmpRow_Numb3
					WHERE LeadDiff <> -1
						OR LeadDiff IS NULL
						OR LagDiff <> -119
						OR LagDiff IS NULL
					) AS tmpRow_Numb2
				WHERE OddEven = 'Even'
				) AS tmpRow_Numb
				ON tmpVar_Values2.tag_id = tmpRow_Numb.tag_id
				AND tmpVar_Values2.RowNumb_Base Between tmpRow_Numb.Row_Start and tmpRow_Numb.Row_End
			WHERE trans_date BETWEEN :Begin_Date and :End_Date

			) as tmpVarValues
		ON pi_corrected.ref_prod_location = tmpVarValues.ref_prod_location
			AND pi_corrected.trans_date = tmpVarValues.trans_date
			AND pi_corrected.tag_id = tmpVarValues.tag_id
			AND pi_corrected.trans_hour = tmpVarValues.trans_hour
			AND pi_corrected.trans_min = tmpvarValues.trans_min
			
		/* Look for null variances */
		LEFT OUTER JOIN
			(
			SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min, 'NULL' AS Tag_Value
			FROM	prod_edw_base_views.pi_corrected
			WHERE tag_value IS NULL
			AND trans_date between :Begin_Date and :End_Date
			AND ref_prod_location =:Ref_Prod_Location
			) as tmpNullValues
			ON pi_desc_units.tref_prod_location = tmpNullValues.ref_prod_location
				AND cur_date.cur_date = tmpNullValues.trans_date
				AND pi_desc_units.tag_id = tmpNullValues.tag_id
				AND pi_corrected.trans_hour = tmpNullValues.trans_hour
				AND pi_corrected.trans_min = tmpNullValues.trans_min

		/* Look for boundary variances */			
		LEFT OUTER JOIN
			(
			SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min
				, CASE WHEN bound_low_value > tag_value THEN bound_low_value
					ELSE NULL
				END AS bound_low_value
				, CASE WHEN bound_high_value < tag_value THEN bound_high_value
					ELSE NULL
				END AS bound_high_value
			FROM	prod_edw_base_views.pi_corrected
			INNER JOIN prod_edw_base_views.environmental_hier
				ON pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
					AND pi_corrected.tag_id = environmental_hier.tag_id
					AND pi_corrected.trans_date = environmental_hier.eff_date
			WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
				AND pi_corrected.ref_prod_location =:Ref_Prod_Location 
				AND (tag_value < Bound_Low_Value 
				OR tag_value > Bound_High_Value)
			) as tmpBoundValues
			ON pi_desc_units.tref_prod_location = tmpBoundValues.ref_prod_location
				AND cur_date.cur_date = tmpBoundValues.trans_date
				AND pi_desc_units.tag_id = tmpBoundValues.tag_id
				AND pi_corrected.trans_hour = tmpBoundValues.trans_hour
				AND pi_corrected.trans_min = tmpBoundValues.trans_min
			
		/* Look for unit down variances */
		LEFT OUTER JOIN
			(
			SELECT Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min, 'DOWN' AS UnitDown_Value
			FROM
				(
				SELECT	pi_corrected.Ref_Prod_location, Analysis_Type, Unit, Trans_Date, trans_hour, trans_min,
					CASE WHEN tag_value < 1 THEN 0
					ELSE 1
					END AS DownMark
				FROM	prod_edw_base_views.pi_corrected
				INNER JOIN prod_edw_base_views.environmental_downtime
					ON pi_corrected.ref_prod_location = environmental_downtime.ref_prod_location
						AND pi_corrected.tag_id = environmental_downtime.tag_id
				WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
					AND pi_corrected.ref_prod_location =:Ref_Prod_Location 
				) AS tmpUnitDown
			HAVING Sum(DownMark) = 0
			GROUP BY  Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min
			) as tmpUnitDownValues
			ON pi_desc_units.tref_prod_location = tmpUnitDownValues.ref_prod_location
				AND cur_date.cur_date = tmpUnitDownValues.trans_date
				AND environmental_hier.unit = tmpUnitDownValues.unit
				AND pi_corrected.trans_hour = tmpUnitDownValues.trans_hour
				AND pi_corrected.trans_min = tmpunitDownValues.trans_min
				AND environmental_hier.analysis_type = tmpUnitDownValues.Analysis_type
			
		/* Look for 1 data point in each quarter hour variances */			
		LEFT OUTER JOIN
			(
			SELECT ref_prod_location, tag_id, cur_date, trans_hour, 'Exception' AS QHour_Value
			FROM
				(
				SELECT ref_prod_location, tag_id, cur_date, trans_hour, quarterhour, sum(quarterhourcount) AS QHourCount
				FROM
					(
					SELECT pi_corrected.ref_prod_location, environmental_hier.Unit, environmental_hier.analysis, pi_desc_units.tag_id, tag_units, cur_date, pi_corrected.trans_hour, pi_corrected.trans_min,pi_corrected.tag_value
						,tmpVarValues.Var_Tag_Value AS VarValue
						,tmpNullValues.Tag_Value AS NullValue
						,tmpBoundValues.Bound_Low_Value AS BoundLowValue
						,tmpBoundValues.Bound_High_Value AS BoundHighValue
						,tmpUnitDownValues.UnitDown_Value AS UnitDownValue
						,CASE WHEN VarValue IS NOT NULL
							OR NullValue IS NOT NULL
							OR BoundLowValue IS NOT NULL
							OR BoundHighValue IS NOT NULL		
							OR UnitDownValue IS NOT NULL		
						THEN 'Exception'
						END as DQException
						,NULL as Mitigated
					
						,CASE WHEN pi_corrected.trans_min between 0 and 14 THEN 'Q1'
							WHEN pi_corrected.trans_min between 15 and 29 THEN 'Q2' 
							WHEN pi_corrected.trans_min between 30 and 44 THEN 'Q3' 
							WHEN pi_corrected.trans_min between 45 and 59 THEN 'Q4' 
						END AS QuarterHour
		
						,CASE WHEN DQException = 'Exception' THEN 0
							ELSE 1 END AS QuarterHourCount
				
						FROM prod_edw_base_views.cur_date
						CROSS JOIN prod_edw_base_views.pi_desc_units
						INNER JOIN prod_edw_base_views.environmental_hier
							ON pi_desc_units.tref_prod_location = environmental_hier.ref_prod_location
								AND cur_date.cur_date = environmental_hier.eff_date
								AND pi_desc_units.tag_id = environmental_hier.tag_id
						INNER JOIN prod_edw_base_views.pi_corrected
							ON pi_corrected.trans_date = cur_date.cur_date
								AND pi_corrected.tag_id = environmental_hier.tag_id
					
					/* Must reexecute the entire select in order to determine whether a given point must be thrown out in the quarter hour */
					LEFT OUTER JOIN
						(

						SELECT Ref_Prod_Location, tmpVar_Values2.Tag_ID, Trans_Date, Trans_Hour, Trans_Min, Tag_Value AS Var_Tag_Value
						FROM
							(
							SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
								,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
																	ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
								,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
								,RowNumb_Base-120 AS RowNumb_Neg120
							FROM	prod_edw_base_views.PI_CORRECTED
							INNER JOIN prod_edw_base_views.environmental_hier
								ON pi_corrected.trans_date = environmental_hier.eff_date
								AND pi_corrected.tag_id = environmental_hier.tag_id
								AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
							WHERE Trans_Date between :Begin_Date-1 and :End_Date+1
							AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
							AND Analysis_Type = 'Daily_Environmental'
							) AS tmpVar_Values2
						
						INNER JOIN
							(
							SELECT Tag_Id, Lag AS Row_Start, RowNumb_Base AS Row_End
							FROM
								(
								SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
									,RowNumb_Base, RowNumb_Neg120
									,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
									,MAX(RowNumb_Neg120) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS tmpLag
									,CASE WHEN tmpLag IS NULL THEN RowNumb_Neg120 ELSE tmpLag END AS Lag
									,CASE WHEN ROW_NUMBER() OVER(ORDER BY ref_prod_location, tag_id, trans_date, trans_hour, trans_min) MOD 2 = 0 THEN 'Even' ELSE 'Odd' END OddEven
								FROM
									(
									SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
										,RowNumb_Base
										,RowNumb_Neg120
										,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
										,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS Lag
									 	,RowNumb_Base - Lead AS LeadDiff
									 	,RowNumb_Neg120 - Lag AS LagDiff
									FROM
										(
										SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
											,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
																				ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
											,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
											,RowNumb_Base-120 AS RowNumb_Neg120
										FROM	prod_edw_base_views.PI_CORRECTED
										INNER JOIN prod_edw_base_views.environmental_hier
											ON pi_corrected.trans_date = environmental_hier.eff_date
											AND pi_corrected.tag_id = environmental_hier.tag_id
											AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
										WHERE Trans_Date between :Begin_Date-1 and :End_date+1
										AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
										AND Analysis_Type = 'Daily_Environmental'
										) AS tmpRow_Numb4
									WHERE Var_Tag_Value = 0
									AND  RowNumb_Base > 1320
									) AS tmpRow_Numb3
								WHERE LeadDiff <> -1
									OR LeadDiff IS NULL
									OR LagDiff <> -119
									OR LagDiff IS NULL
								) AS tmpRow_Numb2
							WHERE OddEven = 'Even'
							) AS tmpRow_Numb
							ON tmpVar_Values2.tag_id = tmpRow_Numb.tag_id
							AND tmpVar_Values2.RowNumb_Base Between tmpRow_Numb.Row_Start and tmpRow_Numb.Row_End
						WHERE trans_date BETWEEN :Begin_Date and :End_Date
						) as tmpVarValues
					ON pi_desc_units.tref_prod_location = tmpVarValues.ref_prod_location
						AND pi_corrected.trans_date = tmpVarValues.trans_date
						AND pi_desc_units.tag_id = tmpVarValues.tag_id
						AND pi_corrected.trans_hour = tmpVarValues.trans_hour
						AND pi_corrected.trans_min = tmpvarValues.trans_min
				
					LEFT OUTER JOIN
						(
						SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min, 'NULL' AS Tag_Value
						FROM	prod_edw_base_views.pi_corrected
						WHERE trans_date between :Begin_Date and :End_Date
							AND ref_prod_location =:Ref_Prod_Location 
							AND tag_value IS NULL
						) as tmpNullValues
					ON pi_desc_units.tref_prod_location = tmpNullValues.ref_prod_location
						AND cur_date.cur_date = tmpNullValues.trans_date
						AND pi_desc_units.tag_id = tmpNullValues.tag_id
						AND pi_corrected.trans_hour = tmpNullValues.trans_hour
						AND pi_corrected.trans_min = tmpNullValues.trans_min
				
					LEFT OUTER JOIN
						(
						SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min
							, CASE WHEN bound_low_value > tag_value THEN bound_low_value
								ELSE NULL
							END AS bound_low_value
							, CASE WHEN bound_high_value < tag_value THEN bound_high_value
								ELSE NULL
							END AS bound_high_value
						FROM	prod_edw_base_views.pi_corrected
						INNER JOIN prod_edw_base_views.environmental_hier
							ON pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
								AND pi_corrected.tag_id = environmental_hier.tag_id
								AND pi_corrected.trans_date = environmental_hier.eff_date
						WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
							AND pi_corrected.ref_prod_location =:Ref_Prod_Location
							AND (tag_value < Bound_Low_Value 
							OR tag_value > Bound_High_Value)
						) as tmpBoundValues
					ON pi_desc_units.tref_prod_location = tmpBoundValues.ref_prod_location
						AND cur_date.cur_date = tmpBoundValues.trans_date
						AND pi_desc_units.tag_id = tmpBoundValues.tag_id
						AND pi_corrected.trans_hour = tmpBoundValues.trans_hour
						AND pi_corrected.trans_min = tmpBoundValues.trans_min
				
					LEFT OUTER JOIN
						(
						SELECT Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min, 'DOWN' AS UnitDown_Value
						FROM
							(
							SELECT	pi_corrected.Ref_Prod_location, Analysis_Type, Unit, Trans_Date, trans_hour, trans_min,
								CASE WHEN tag_value < 1 THEN 0
								ELSE 1
								END AS DownMark
							FROM	prod_edw_base_views.pi_corrected
							INNER JOIN prod_edw_base_views.environmental_downtime
								ON pi_corrected.ref_prod_location = environmental_downtime.ref_prod_location
									AND pi_corrected.tag_id = environmental_downtime.tag_id
							WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
								AND pi_corrected.ref_prod_location =:Ref_Prod_Location 
							) AS tmpUnitDown
						HAVING Sum(DownMark) = 0
						GROUP BY  Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min
						) as tmpUnitDownValues
					ON pi_desc_units.tref_prod_location = tmpUnitDownValues.ref_prod_location
						AND cur_date.cur_date = tmpUnitDownValues.trans_date
						AND environmental_hier.unit = tmpUnitDownValues.unit
						AND pi_corrected.trans_hour = tmpUnitDownValues.trans_hour
						AND pi_corrected.trans_min = tmpunitDownValues.trans_min
						AND environmental_hier.analysis_type = tmpUnitDownValues.Analysis_type
				) AS tmpQHourValues_Int2
			HAVING QHourCount = 0
			GROUP BY ref_prod_location, tag_id, cur_date, trans_hour, quarterhour
			) AS tmpQHourValues_int1
		GROUP BY ref_prod_location, tag_id, cur_date, trans_hour
		)	AS tmpQHourValues
		ON cur_date.cur_date = tmpQHourValues.cur_date
			AND pi_corrected.tag_id = tmpQHourValues.tag_id
			AND pi_corrected.trans_hour = tmpQHourValues.trans_hour
			AND pi_corrected.ref_prod_location = tmpQHourValues.ref_prod_location
		WHERE cur_date.cur_date BETWEEN :Begin_Date and :End_Date
			AND tref_prod_location =:Ref_Prod_Location
			AND environmental_hier.Analysis_Type = 'Daily_Environmental'
		) AS tmpTotal
	GROUP BY Unit, analysis, tag_id, tag_desc, tag_units
	ORDER BY Unit, analysis, tag_id

;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_EmissionsDQ_Detail (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20), Tag_ID varchar(100)) as
	(
		SELECT environmental_hier.Unit, environmental_hier.analysis, pi_desc_units.tag_id, tag_desc, tag_units, cur_date.cur_date
			,pi_corrected.trans_hour, pi_corrected.trans_min,pi_corrected.tag_value
		
				,tmpVarValues.Var_Tag_Value AS VarValue
				,tmpNullValues.Tag_Value AS NullValue
				,tmpBoundValues.Bound_Low_Value AS BoundLowValue
				,tmpBoundValues.Bound_High_Value AS BoundHighValue
				,tmpUnitDownValues.UnitDown_Value AS UnitDownValue
				,tmpQHourValues.QHour_Value AS QHourValue
				
				/* Determine if any exceptions exist for a given unit */
				,CASE WHEN VarValue IS NOT NULL
					OR NullValue IS NOT NULL
					OR BoundLowValue IS NOT NULL
					OR BoundHighValue IS NOT NULL		
					OR UnitDownValue IS NOT NULL		
					OR QHourValue IS NOT NULL
				THEN 'Exception'
				END as DQException
				
				/* Determine if any corrected values exist */
				,CASE WHEN pi_corrected.audit_date IS NOT NULL
					THEN 'Yes' END as Mitigated
				
		/* Primary join is to date table.  All other data steps are subqueries */
		FROM prod_edw_base_views.cur_date
		CROSS JOIN prod_edw_base_views.pi_desc_units
		INNER JOIN prod_edw_base_views.environmental_hier
			ON pi_desc_units.tref_prod_location = environmental_hier.ref_prod_location
				AND cur_date.cur_date = environmental_hier.eff_date
				AND pi_desc_units.tag_id = environmental_hier.tag_id
		INNER JOIN prod_edw_base_views.pi_corrected
			ON pi_corrected.trans_date = cur_date.cur_date
				AND pi_corrected.tag_id = environmental_hier.tag_id
			
		LEFT OUTER JOIN
			(
			/* Relatively complex select whose purpose is to look back 120 points and determine if all values in that span are the same */
			/* If there is a 120 point run, flag a variance exception all the wya back to the beginning of the run */
			/* Do this by assigning row numbers to the values in the select and joing back to the same select at Rownum-20 for the compare */

			SELECT Ref_Prod_Location, tmpVar_Values2.Tag_ID, Trans_Date, Trans_Hour, Trans_Min, Tag_Value AS Var_Tag_Value
			FROM
				(
				SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
					,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
														ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
					,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
					,RowNumb_Base-120 AS RowNumb_Neg120
				FROM	prod_edw_base_views.PI_CORRECTED
				INNER JOIN prod_edw_base_views.environmental_hier
					ON pi_corrected.trans_date = environmental_hier.eff_date
					AND pi_corrected.tag_id = environmental_hier.tag_id
					AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
				WHERE Trans_Date between :Begin_Date-1 and :End_Date+1
				AND PI_Corrected.Tag_ID = :Tag_Id
				AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
				AND Analysis_Type = 'Daily_Environmental'
				) AS tmpVar_Values2
			
			INNER JOIN
				(
				SELECT Tag_Id, Lag AS Row_Start, RowNumb_Base AS Row_End
				FROM
					(
					SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
						,RowNumb_Base, RowNumb_Neg120
						,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
						,MAX(RowNumb_Neg120) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS tmpLag
						,CASE WHEN tmpLag IS NULL THEN RowNumb_Neg120 ELSE tmpLag END AS Lag
						,CASE WHEN ROW_NUMBER() OVER(ORDER BY ref_prod_location, tag_id, trans_date, trans_hour, trans_min) MOD 2 = 0 THEN 'Even' ELSE 'Odd' END OddEven
					FROM
						(
						SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
							,RowNumb_Base
							,RowNumb_Neg120
							,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
							,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS Lag
						 	,RowNumb_Base - Lead AS LeadDiff
						 	,RowNumb_Neg120 - Lag AS LagDiff
						FROM
							(
							SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
								,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
																	ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
								,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
								,RowNumb_Base-120 AS RowNumb_Neg120
							FROM	prod_edw_base_views.PI_CORRECTED
							INNER JOIN prod_edw_base_views.environmental_hier
								ON pi_corrected.trans_date = environmental_hier.eff_date
								AND pi_corrected.tag_id = environmental_hier.tag_id
								AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
							WHERE Trans_Date between :Begin_Date-1 and :End_date+1
							AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
							AND Analysis_Type = 'Daily_Environmental'
							AND PI_Corrected.Tag_ID = :Tag_Id
							) AS tmpRow_Numb4
						WHERE Var_Tag_Value = 0
						AND  RowNumb_Base > 1320
						) AS tmpRow_Numb3
					WHERE LeadDiff <> -1
						OR LeadDiff IS NULL
						OR LagDiff <> -119
						OR LagDiff IS NULL
					) AS tmpRow_Numb2
				WHERE OddEven = 'Even'
				) AS tmpRow_Numb
				ON tmpVar_Values2.tag_id = tmpRow_Numb.tag_id
				AND tmpVar_Values2.RowNumb_Base Between tmpRow_Numb.Row_Start and tmpRow_Numb.Row_End
			WHERE trans_date BETWEEN :Begin_Date and :End_Date

			) as tmpVarValues
		ON pi_corrected.ref_prod_location = tmpVarValues.ref_prod_location
			AND pi_corrected.trans_date = tmpVarValues.trans_date
			AND pi_corrected.tag_id = tmpVarValues.tag_id
			AND pi_corrected.trans_hour = tmpVarValues.trans_hour
			AND pi_corrected.trans_min = tmpvarValues.trans_min
			
		/* Look for null variances */
		LEFT OUTER JOIN
			(
			SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min, 'NULL' AS Tag_Value
			FROM	prod_edw_base_views.pi_corrected
			WHERE tag_value IS NULL
			AND trans_date between :Begin_Date and :End_Date
			AND ref_prod_location =:Ref_Prod_Location
			AND Tag_ID = :Tag_Id
			) as tmpNullValues
			ON pi_desc_units.tref_prod_location = tmpNullValues.ref_prod_location
				AND cur_date.cur_date = tmpNullValues.trans_date
				AND pi_desc_units.tag_id = tmpNullValues.tag_id
				AND pi_corrected.trans_hour = tmpNullValues.trans_hour
				AND pi_corrected.trans_min = tmpNullValues.trans_min

		/* Look for boundary variances */			
		LEFT OUTER JOIN
			(
			SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min
				, CASE WHEN bound_low_value > tag_value THEN bound_low_value
					ELSE NULL
				END AS bound_low_value
				, CASE WHEN bound_high_value < tag_value THEN bound_high_value
					ELSE NULL
				END AS bound_high_value
			FROM	prod_edw_base_views.pi_corrected
			INNER JOIN prod_edw_base_views.environmental_hier
				ON pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
					AND pi_corrected.tag_id = environmental_hier.tag_id
					AND pi_corrected.trans_date = environmental_hier.eff_date
			WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
				AND PI_Corrected.Tag_ID = :Tag_Id
				AND pi_corrected.ref_prod_location =:Ref_Prod_Location 
				AND (tag_value < Bound_Low_Value 
				OR tag_value > Bound_High_Value)
			) as tmpBoundValues
			ON pi_desc_units.tref_prod_location = tmpBoundValues.ref_prod_location
				AND cur_date.cur_date = tmpBoundValues.trans_date
				AND pi_desc_units.tag_id = tmpBoundValues.tag_id
				AND pi_corrected.trans_hour = tmpBoundValues.trans_hour
				AND pi_corrected.trans_min = tmpBoundValues.trans_min
			
		/* Look for unit down variances */
		LEFT OUTER JOIN
			(
			SELECT Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min, 'DOWN' AS UnitDown_Value
			FROM
				(
				SELECT	pi_corrected.Ref_Prod_location, Analysis_Type, Unit, Trans_Date, trans_hour, trans_min,
					CASE WHEN tag_value < 1 THEN 0
					ELSE 1
					END AS DownMark
				FROM	prod_edw_base_views.pi_corrected
				INNER JOIN prod_edw_base_views.environmental_downtime
					ON pi_corrected.ref_prod_location = environmental_downtime.ref_prod_location
						AND pi_corrected.tag_id = environmental_downtime.tag_id
				WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
					AND pi_corrected.ref_prod_location =:Ref_Prod_Location 
					AND PI_Corrected.Tag_ID = :Tag_Id
				) AS tmpUnitDown
			HAVING Sum(DownMark) = 0
			GROUP BY  Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min
			) as tmpUnitDownValues
			ON pi_desc_units.tref_prod_location = tmpUnitDownValues.ref_prod_location
				AND cur_date.cur_date = tmpUnitDownValues.trans_date
				AND environmental_hier.unit = tmpUnitDownValues.unit
				AND pi_corrected.trans_hour = tmpUnitDownValues.trans_hour
				AND pi_corrected.trans_min = tmpunitDownValues.trans_min
				AND environmental_hier.analysis_type = tmpUnitDownValues.Analysis_type
			
		/* Look for 1 data point in each quarter hour variances */			
		LEFT OUTER JOIN
			(
			SELECT ref_prod_location, tag_id, cur_date, trans_hour, 'Exception' AS QHour_Value
			FROM
				(
				SELECT ref_prod_location, tag_id, cur_date, trans_hour, quarterhour, sum(quarterhourcount) AS QHourCount
				FROM
					(
					SELECT pi_corrected.ref_prod_location, environmental_hier.Unit, environmental_hier.analysis, pi_desc_units.tag_id, tag_units, cur_date, pi_corrected.trans_hour, pi_corrected.trans_min,pi_corrected.tag_value
						,tmpVarValues.Var_Tag_Value AS VarValue
						,tmpNullValues.Tag_Value AS NullValue
						,tmpBoundValues.Bound_Low_Value AS BoundLowValue
						,tmpBoundValues.Bound_High_Value AS BoundHighValue
						,tmpUnitDownValues.UnitDown_Value AS UnitDownValue
						,CASE WHEN VarValue IS NOT NULL
							OR NullValue IS NOT NULL
							OR BoundLowValue IS NOT NULL
							OR BoundHighValue IS NOT NULL		
							OR UnitDownValue IS NOT NULL		
						THEN 'Exception'
						END as DQException
						,NULL as Mitigated
					
						,CASE WHEN pi_corrected.trans_min between 0 and 14 THEN 'Q1'
							WHEN pi_corrected.trans_min between 15 and 29 THEN 'Q2' 
							WHEN pi_corrected.trans_min between 30 and 44 THEN 'Q3' 
							WHEN pi_corrected.trans_min between 45 and 59 THEN 'Q4' 
						END AS QuarterHour
		
						,CASE WHEN DQException = 'Exception' THEN 0
							ELSE 1 END AS QuarterHourCount
				
						FROM prod_edw_base_views.cur_date
						CROSS JOIN prod_edw_base_views.pi_desc_units
						INNER JOIN prod_edw_base_views.environmental_hier
							ON pi_desc_units.tref_prod_location = environmental_hier.ref_prod_location
								AND cur_date.cur_date = environmental_hier.eff_date
								AND pi_desc_units.tag_id = environmental_hier.tag_id
						INNER JOIN prod_edw_base_views.pi_corrected
							ON pi_corrected.trans_date = cur_date.cur_date
								AND pi_corrected.tag_id = environmental_hier.tag_id
					
					/* Must reexecute the entire select in order to determine whether a given point must be thrown out in the quarter hour */
					LEFT OUTER JOIN
						(

						SELECT Ref_Prod_Location, tmpVar_Values2.Tag_ID, Trans_Date, Trans_Hour, Trans_Min, Tag_Value AS Var_Tag_Value
						FROM
							(
							SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
								,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
																	ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
								,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
								,RowNumb_Base-120 AS RowNumb_Neg120
							FROM	prod_edw_base_views.PI_CORRECTED
							INNER JOIN prod_edw_base_views.environmental_hier
								ON pi_corrected.trans_date = environmental_hier.eff_date
								AND pi_corrected.tag_id = environmental_hier.tag_id
								AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
							WHERE Trans_Date between :Begin_Date-1 and :End_Date+1
							AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
							AND Analysis_Type = 'Daily_Environmental'
							AND PI_Corrected.Tag_ID = :Tag_Id
							) AS tmpVar_Values2
						
						INNER JOIN
							(
							SELECT Tag_Id, Lag AS Row_Start, RowNumb_Base AS Row_End
							FROM
								(
								SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
									,RowNumb_Base, RowNumb_Neg120
									,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
									,MAX(RowNumb_Neg120) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS tmpLag
									,CASE WHEN tmpLag IS NULL THEN RowNumb_Neg120 ELSE tmpLag END AS Lag
									,CASE WHEN ROW_NUMBER() OVER(ORDER BY ref_prod_location, tag_id, trans_date, trans_hour, trans_min) MOD 2 = 0 THEN 'Even' ELSE 'Odd' END OddEven
								FROM
									(
									SELECT Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value
										,RowNumb_Base
										,RowNumb_Neg120
										,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 following and 1 following) AS Lead
										,MAX(RowNumb_Base) OVER (Partition by Ref_Prod_Location, Tag_Id ORDER BY Trans_Date, Trans_Hour, Trans_Min rows between 1 preceding and 1 preceding) AS Lag
									 	,RowNumb_Base - Lead AS LeadDiff
									 	,RowNumb_Neg120 - Lag AS LagDiff
									FROM
										(
										SELECT	PI_Corrected.Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, PI_Corrected.Tag_ID,Tag_Value
											,CAST(var_pop(tag_value) OVER (PARTITION BY pi_corrected.tag_id 
																				ORDER BY pi_corrected.tag_id, trans_date, trans_hour, trans_min rows 120 preceding) AS decimal(24,10)) AS Var_Tag_Value
											,ROW_NUMBER() OVER (PARTITION BY pi_corrected.tag_id ORDER BY pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min) AS RowNumb_Base
											,RowNumb_Base-120 AS RowNumb_Neg120
										FROM	prod_edw_base_views.PI_CORRECTED
										INNER JOIN prod_edw_base_views.environmental_hier
											ON pi_corrected.trans_date = environmental_hier.eff_date
											AND pi_corrected.tag_id = environmental_hier.tag_id
											AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
										WHERE Trans_Date between :Begin_Date-1 and :End_date+1
										AND Pi_Corrected.Ref_Prod_Location = :Ref_Prod_Location
										AND Analysis_Type = 'Daily_Environmental'
										AND PI_Corrected.Tag_ID = :Tag_Id
										) AS tmpRow_Numb4
									WHERE Var_Tag_Value = 0
									AND  RowNumb_Base > 1320
									) AS tmpRow_Numb3
								WHERE LeadDiff <> -1
									OR LeadDiff IS NULL
									OR LagDiff <> -119
									OR LagDiff IS NULL
								) AS tmpRow_Numb2
							WHERE OddEven = 'Even'
							) AS tmpRow_Numb
							ON tmpVar_Values2.tag_id = tmpRow_Numb.tag_id
							AND tmpVar_Values2.RowNumb_Base Between tmpRow_Numb.Row_Start and tmpRow_Numb.Row_End
						WHERE trans_date BETWEEN :Begin_Date and :End_Date
						) as tmpVarValues
					ON pi_desc_units.tref_prod_location = tmpVarValues.ref_prod_location
						AND pi_corrected.trans_date = tmpVarValues.trans_date
						AND pi_desc_units.tag_id = tmpVarValues.tag_id
						AND pi_corrected.trans_hour = tmpVarValues.trans_hour
						AND pi_corrected.trans_min = tmpvarValues.trans_min
				
					LEFT OUTER JOIN
						(
						SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min, 'NULL' AS Tag_Value
						FROM	prod_edw_base_views.pi_corrected
						WHERE trans_date between :Begin_Date and :End_Date
							AND ref_prod_location =:Ref_Prod_Location 
							AND PI_Corrected.Tag_ID = :Tag_Id
							AND tag_value IS NULL
						) as tmpNullValues
					ON pi_desc_units.tref_prod_location = tmpNullValues.ref_prod_location
						AND cur_date.cur_date = tmpNullValues.trans_date
						AND pi_desc_units.tag_id = tmpNullValues.tag_id
						AND pi_corrected.trans_hour = tmpNullValues.trans_hour
						AND pi_corrected.trans_min = tmpNullValues.trans_min
				
					LEFT OUTER JOIN
						(
						SELECT	pi_corrected.Ref_Prod_location, pi_corrected.tag_id, Trans_Date, trans_hour, trans_min
							, CASE WHEN bound_low_value > tag_value THEN bound_low_value
								ELSE NULL
							END AS bound_low_value
							, CASE WHEN bound_high_value < tag_value THEN bound_high_value
								ELSE NULL
							END AS bound_high_value
						FROM	prod_edw_base_views.pi_corrected
						INNER JOIN prod_edw_base_views.environmental_hier
							ON pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
								AND pi_corrected.tag_id = environmental_hier.tag_id
								AND pi_corrected.trans_date = environmental_hier.eff_date
						WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
							AND pi_corrected.ref_prod_location =:Ref_Prod_Location
							AND PI_Corrected.Tag_ID = :Tag_Id
							AND (tag_value < Bound_Low_Value 
							OR tag_value > Bound_High_Value)
						) as tmpBoundValues
					ON pi_desc_units.tref_prod_location = tmpBoundValues.ref_prod_location
						AND cur_date.cur_date = tmpBoundValues.trans_date
						AND pi_desc_units.tag_id = tmpBoundValues.tag_id
						AND pi_corrected.trans_hour = tmpBoundValues.trans_hour
						AND pi_corrected.trans_min = tmpBoundValues.trans_min
				
					LEFT OUTER JOIN
						(
						SELECT Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min, 'DOWN' AS UnitDown_Value
						FROM
							(
							SELECT	pi_corrected.Ref_Prod_location, Analysis_Type, Unit, Trans_Date, trans_hour, trans_min,
								CASE WHEN tag_value < 1 THEN 0
								ELSE 1
								END AS DownMark
							FROM	prod_edw_base_views.pi_corrected
							INNER JOIN prod_edw_base_views.environmental_downtime
								ON pi_corrected.ref_prod_location = environmental_downtime.ref_prod_location
									AND pi_corrected.tag_id = environmental_downtime.tag_id
							WHERE pi_corrected.trans_date between :Begin_Date and :End_Date
								AND pi_corrected.ref_prod_location =:Ref_Prod_Location 
								AND PI_Corrected.Tag_ID = :Tag_Id
							) AS tmpUnitDown
						HAVING Sum(DownMark) = 0
						GROUP BY  Ref_Prod_Location, Analysis_Type, Unit, Trans_Date, Trans_Hour, Trans_Min
						) as tmpUnitDownValues
					ON pi_desc_units.tref_prod_location = tmpUnitDownValues.ref_prod_location
						AND cur_date.cur_date = tmpUnitDownValues.trans_date
						AND environmental_hier.unit = tmpUnitDownValues.unit
						AND pi_corrected.trans_hour = tmpUnitDownValues.trans_hour
						AND pi_corrected.trans_min = tmpunitDownValues.trans_min
						AND environmental_hier.analysis_type = tmpUnitDownValues.Analysis_type
				) AS tmpQHourValues_Int2
			HAVING QHourCount = 0
			GROUP BY ref_prod_location, tag_id, cur_date, trans_hour, quarterhour
			) AS tmpQHourValues_int1
		GROUP BY ref_prod_location, tag_id, cur_date, trans_hour
		)	AS tmpQHourValues
		ON cur_date.cur_date = tmpQHourValues.cur_date
			AND pi_corrected.tag_id = tmpQHourValues.tag_id
			AND pi_corrected.trans_hour = tmpQHourValues.trans_hour
			AND pi_corrected.ref_prod_location = tmpQHourValues.ref_prod_location
			
		WHERE cur_date.cur_date BETWEEN :Begin_Date and :End_Date
			AND tref_prod_location =:Ref_Prod_Location
			AND environmental_hier.Analysis_Type = 'Daily_Environmental'
			AND environmental_hier.tag_id = :Tag_Id

		ORDER BY cur_date.cur_date, pi_corrected.trans_hour, pi_corrected.trans_min, environmental_hier.Unit, 
		environmental_hier.analysis, environmental_hier.tag_id

;);
--------------------------------------------------------------------------------

--************************************

REPLACE MACRO prod_edw_base_views.M_Emissions_Detail (Begin_Date DATE, End_Date DATE, Ref_Prod_Location VARCHAR(20), Tag_Id VARCHAR(100)) AS
	(
	SELECT	pi_Corrected.Ref_Prod_Location, pi_Corrected.Trans_Date, pi_Corrected.Trans_Hour, pi_Corrected.Trans_Min,
		Unit, ANALYSIS, pi_Corrected.Tag_ID, Tag_Units
		
		,CAST(Tag_Value AS DECIMAL(12,4)) AS Instant_1Min
			,CASE WHEN Limit_Instant_Value >= 1 THEN
				Limit_Instant_Sign||TRIM(Limit_Instant_Value)
			ELSE 
				Limit_Instant_Sign||'0'||TRIM(Limit_Instant_Value) 
			END AS Lim_1Min
			,CASE WHEN Limit_Instant_Value_Ops >= 1 THEN
				Limit_Instant_Sign_Ops||TRIM(Limit_Instant_Value_Ops)
			ELSE 
				Limit_Instant_Sign_Ops||'0'||TRIM(Limit_Instant_Value_Ops) 
			END AS Lim_1Min_Ops
		
		,CAST(MAvg_6Mins AS DECIMAL(12,4)) AS Avg_6Min
			,CASE WHEN Limit_6Min_Value >= 1 THEN
				Limit_6Min_Sign||TRIM(Limit_6Min_Value)
			ELSE 
				Limit_6Min_Sign||'0'||TRIM(Limit_6Min_Value) 
			END AS Lim_6Min
			,CASE WHEN Limit_6Min_Value_Ops >= 1 THEN
				Limit_6Min_Sign_Ops||TRIM(Limit_6Min_Value_Ops)
			ELSE 
				Limit_6Min_Sign_Ops||'0'||TRIM(Limit_6Min_Value_Ops) 
			END AS Lim_6Min_Ops

		,CAST(MAvg_15Mins AS DECIMAL(12,4)) AS Avg_15Min
			,CASE WHEN Limit_15Min_Value >= 1 THEN
				Limit_15Min_Sign||TRIM(Limit_15Min_Value)
			ELSE 
				Limit_15Min_Sign||'0'||TRIM(Limit_15Min_Value) 
			END AS Lim_15Min
			,CASE WHEN Limit_15Min_Value_Ops >= 1 THEN
				Limit_15Min_Sign_Ops||TRIM(Limit_15Min_Value_Ops)
			ELSE 
				Limit_15Min_Sign_Ops||'0'||TRIM(Limit_15Min_Value_Ops) 
			END AS Lim_15Min_Ops
	
		,CAST(HourlyTagAvg AS DECIMAL(12,4)) AS Avg_1Hour
			,CASE WHEN Limit_1Hour_Value >= 1 THEN
				Limit_1Hour_Sign||TRIM(Limit_1Hour_Value)
			ELSE 
				Limit_1Hour_Sign||'0'||TRIM(Limit_1Hour_Value) 
			END AS Lim_1Hour
			,CASE WHEN Limit_1Hour_Value_Ops >= 1 THEN
				Limit_1Hour_Sign_Ops||TRIM(Limit_1Hour_Value_Ops)
			ELSE 
				Limit_1Hour_Sign_Ops||'0'||TRIM(Limit_1Hour_Value_Ops) 
			END AS Lim_1Hour_Ops
		
		,CAST(Mavg_3Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_3Hour_Value >=1 THEN
				Limit_3Hour_Sign||TRIM(Limit_3Hour_Value) 
			ELSE
				Limit_3Hour_Sign||'0'||TRIM(Limit_3Hour_Value) 
			END AS Lim_3Hour
			,CASE WHEN Limit_3Hour_Value_Ops >=1 THEN
				Limit_3Hour_Sign_Ops||TRIM(Limit_3Hour_Value_Ops) 
			ELSE
				Limit_3Hour_Sign_Ops||'0'||TRIM(Limit_3Hour_Value_Ops) 
			END AS Lim_3Hour_Ops
	
		,CAST(MAvg_6Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_6Hour_Value >=1 THEN
				Limit_6Hour_Sign||TRIM(Limit_6Hour_Value) 
			ELSE
				Limit_6Hour_Sign||'0'||TRIM(Limit_6Hour_Value) 
			END AS Lim_6Hour
			,CASE WHEN Limit_6Hour_Value_Ops >=1 THEN
				Limit_6Hour_Sign_Ops||TRIM(Limit_6Hour_Value_Ops) 
			ELSE
				Limit_6Hour_Sign_Ops||'0'||TRIM(Limit_6Hour_Value_Ops) 
			END AS Lim_6Hour_Ops
	
		,CAST(MAvg_12Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_12Hour_Value >=1 THEN
				Limit_12Hour_Sign||TRIM(Limit_12Hour_Value) 
			ELSE
				Limit_12Hour_Sign||'0'||TRIM(Limit_12Hour_Value) 
			END AS Lim_12Hour
			,CASE WHEN Limit_12Hour_Value_Ops >=1 THEN
				Limit_12Hour_Sign_Ops||TRIM(Limit_12Hour_Value_Ops) 
			ELSE
				Limit_12Hour_Sign_Ops||'0'||TRIM(Limit_12Hour_Value_Ops) 
			END AS Lim_12Hour_Ops

		,CAST(MAvg_24Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_24HourMAvg_Value >=1 THEN
				Limit_24HourMAvg_Sign||TRIM(Limit_24HourMAvg_Value) 
			ELSE
				Limit_24HourMAvg_Sign||'0'||TRIM(Limit_24HourMAvg_Value) 
			END AS Lim_24HourMAvg
			,CASE WHEN Limit_24HourMAvg_Value_Ops >=1 THEN
				Limit_24HourMAvg_Sign_Ops||TRIM(Limit_24HourMAvg_Value_Ops) 
			ELSE
				Limit_24HourMAvg_Sign_Ops||'0'||TRIM(Limit_24HourMAvg_Value_Ops) 
			END AS Lim_24HourMAvg_Ops

		,CAST(Avg_8HourShift AS DECIMAL(12,4))
			,CASE WHEN Limit_8Hour_Value >=1 THEN
				Limit_8Hour_Sign||TRIM(Limit_8Hour_Value) 
			ELSE
				Limit_8Hour_Sign||'0'||TRIM(Limit_8Hour_Value) 
			END AS Lim_8Hour
			,CASE WHEN Limit_8Hour_Value_Ops >=1 THEN
				Limit_8Hour_Sign_Ops||TRIM(Limit_8Hour_Value_Ops) 
			ELSE
				Limit_8Hour_Sign_Ops||'0'||TRIM(Limit_8Hour_Value_Ops) 
			END AS Lim_8Hour_Ops
			
	
		,CAST(DayTagAvg AS DECIMAL(12,4)) AS Avg_1Day
			,CASE WHEN Limit_1Day_Value >=1 THEN
				Limit_1Day_Sign||TRIM(Limit_1Day_Value) 
			ELSE
				Limit_1Day_Sign||'0'||TRIM(Limit_1Day_Value) 
			END AS Lim_1Day
			,CASE WHEN Limit_1Day_Value_Ops >=1 THEN
				Limit_1Day_Sign_Ops||TRIM(Limit_1Day_Value_Ops) 
			ELSE
				Limit_1Day_Sign_Ops||'0'||TRIM(Limit_1Day_Value_Ops) 
			END AS Lim_1Day_Ops
	
		,CAST(Tag_Value AS DECIMAL(12,4)) AS Sum_1Day
			,CASE WHEN Limit_1DaySum_Value >=1 THEN
				Limit_1DaySum_Sign||TRIM(Limit_1DaySum_Value) 
			ELSE
				Limit_1DaySum_Sign||'0'||TRIM(Limit_1DaySum_Value) 
			END AS Lim_1DaySum
	
		,CAST(MAvg_7Days AS DECIMAL(12,4))
			,CASE WHEN Limit_7Day_Value >=1 THEN
				Limit_7Day_Sign||TRIM(Limit_7Day_Value) 
			ELSE
				Limit_7Day_Sign||'0'||TRIM(Limit_7Day_Value) 
			END AS Lim_7Day
			,CASE WHEN Limit_7Day_Value_Ops >=1 THEN
				Limit_7Day_Sign_Ops||TRIM(Limit_7Day_Value_Ops) 
			ELSE
				Limit_7Day_Sign_Ops||'0'||TRIM(Limit_7Day_Value_Ops) 
			END AS Lim_7Day_Ops
	
		,CAST(MAvg_30Days AS DECIMAL(12,4))
			,CASE WHEN Limit_30Day_Value >=1 THEN
				Limit_30Day_Sign||TRIM(Limit_30Day_Value) 
			ELSE
				Limit_30Day_Sign||'0'||TRIM(Limit_30Day_Value) 
			END AS Lim_30Day
			,CASE WHEN Limit_30Day_Value_Ops >=1 THEN
				Limit_30Day_Sign_Ops||TRIM(Limit_30Day_Value_Ops) 
			ELSE
				Limit_30Day_Sign_Ops||'0'||TRIM(Limit_30Day_Value_Ops) 
			END AS Lim_30Day_Ops
	
		,CAST(MAvg_365Days AS DECIMAL(12,4))
			,CASE WHEN Limit_365Day_Value >=1 THEN
				Limit_365Day_Sign||TRIM(Limit_365Day_Value) 
			ELSE
				Limit_365Day_Sign||'0'||TRIM(Limit_365Day_Value) 
			END AS Lim_365Day
			,CASE WHEN Limit_365Day_Value_Ops >=1 THEN
				Limit_365Day_Sign_Ops||TRIM(Limit_365Day_Value_Ops) 
			ELSE
				Limit_365Day_Sign_Ops||'0'||TRIM(Limit_365Day_Value_Ops) 
			END AS Lim_365Day_Ops
	
		,CAST(NULL AS DECIMAL(12,4)) AS Sum_365Day
			,CASE WHEN Limit_365DaySum_Value >=1 THEN
				Limit_365DaySum_Sign||TRIM(Limit_365DaySum_Value) 
			ELSE
				Limit_365DaySum_Sign||'0'||TRIM(Limit_365DaySum_Value) 
			END AS Lim_365DaySum
	
	FROM prod_edw_base_views.pi_Corrected
	
	/* Join to the environmenta_hier table to determine the tags to evaluate and their limits */
	INNER JOIN prod_edw_base_views.environmental_hier
		ON pi_corrected.tag_id = environmental_hier.tag_id
		AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
		AND pi_corrected.trans_date = environmental_hier.eff_date
		
	LEFT OUTER JOIN 
		/* Calculate the moving minute average for the previous 6 minutes */
		(
		SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id, MAvg_6Mins
		FROM
			(
			SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id
				,AVG(Tag_Value) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour, trans_min ROWS 5 PRECEDING) AS MAvg_6Mins
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND tag_id = :Tag_ID
			) AS tmpPI6MinAvg		
		WHERE trans_min IN (0,6,12,18,24,30,36,42,48,54)
		) AS PI_CalcData_6Min
	ON pi_corrected.ref_prod_location = pi_calcdata_6Min.ref_prod_location
		AND pi_corrected.tag_id = pi_calcdata_6Min.tag_id
		AND pi_corrected.trans_date = pi_calcdata_6Min.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_6Min.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_6Min.trans_min

	LEFT OUTER JOIN 
		/* Calculate the moving minute average for the previous 15 minutes */
		(
		SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id, MAvg_15Mins
		FROM
			(
			SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id
				,AVG(Tag_Value) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour, trans_min ROWS 14 PRECEDING) AS MAvg_15Mins
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND tag_id = :Tag_ID
			) AS tmpPI15MinAvg		
		WHERE trans_min IN (0,15,30,45)
		) AS PI_CalcData_15Min
	ON pi_corrected.ref_prod_location = pi_calcdata_15Min.ref_prod_location
		AND pi_corrected.tag_id = pi_calcdata_15Min.tag_id
		AND pi_corrected.trans_date = pi_calcdata_15Min.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_15Min.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_15Min.trans_min
	
	LEFT OUTER JOIN 
			/* Calculate the moving hourly average for the previous 3, 6 and 12 hours */
			(SELECT	Ref_Prod_location, Trans_Date, Trans_Hour, 0 AS Trans_Min, Tag_ID, HourlyTagAvg
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 2 PRECEDING) AS MAvg_3Hours
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 5 PRECEDING) AS MAvg_6Hours		
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 11 PRECEDING) AS MAvg_12Hours
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 23 PRECEDING) AS MAvg_24Hours
					FROM	
						(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
						FROM prod_edw_base_views.pi_corrected
						WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
							AND ref_prod_location = :Ref_Prod_Location
							AND tag_id = :Tag_Id
						GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
			) AS PI_CalcData_Hour
			ON pi_corrected.ref_prod_location = pi_calcdata_hour.ref_prod_location
			AND pi_corrected.tag_id = pi_calcdata_hour.tag_id
			AND pi_corrected.trans_date = pi_calcdata_hour.trans_date
			AND pi_corrected.trans_hour = pi_calcdata_hour.trans_hour
			AND pi_corrected.trans_min = pi_calcdata_hour.trans_min
	
	LEFT OUTER JOIN
		(
			/* Calculate the moving daily average for the previous 7, 30 and 365 days */
			/* Since there is a 365 day moving average, the subquery must look through 365 days of PI data */
			SELECT	Ref_Prod_Location, Trans_Date, Tag_ID, 23 AS trans_hour, 0 AS Trans_Min, DayTagAvg
			,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 6 PRECEDING) AS MAvg_7Days	
			,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 29 PRECEDING) AS MAvg_30Days	
			,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 364 PRECEDING) AS MAvg_365Days	
			FROM	
				(SELECT ref_prod_location, trans_date, tag_id, AVG(tag_value) AS DayTagAvg
				FROM prod_edw_base_views.pi_corrected
				WHERE trans_date BETWEEN :Begin_Date-365 AND :End_Date
					AND ref_prod_location = :Ref_Prod_Location
					AND tag_id = :Tag_Id
				GROUP BY ref_prod_location, trans_date, tag_id) AS tmpPIDayAvg
		) AS PI_CalcData_Day
		ON pi_calcdata_hour.ref_prod_location = pi_calcdata_day.ref_prod_location
		AND pi_corrected.trans_date = pi_calcdata_day.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_day.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_day.trans_min
		AND pi_corrected.tag_id = pi_calcdata_day.tag_id
	
	LEFT OUTER JOIN
		(
		/* Calculate the moving shift averages for all three shifts */		
		SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 7 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
		FROM	
			(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND trans_hour BETWEEN 0 AND 7
				AND tag_id = :Tag_Id
			GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
		GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
		UNION ALL
		SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 15 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
		FROM	
			(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND trans_hour BETWEEN 8 AND 15
				AND tag_id = :Tag_Id
			GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
		GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
		UNION ALL
		SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 23 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
		FROM	
			(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND trans_hour BETWEEN 16 AND 23
				AND tag_id = :Tag_Id
			GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
		GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
		) AS PI_CalcData_Shift
		ON pi_calcdata_hour.ref_prod_location = pi_calcdata_shift.ref_prod_location
		AND pi_corrected.trans_date = pi_calcdata_shift.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_shift.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_shift.trans_min
		AND pi_corrected.tag_id = pi_calcdata_shift.tag_id
		
	/* Join to the pi_desc_units table to get the descriiption and units for all tags */
	LEFT OUTER JOIN prod_edw_base_views.pi_desc_units
		ON pi_corrected.ref_prod_location = pi_desc_units.tref_prod_location
		AND pi_corrected.tag_id = pi_desc_units.tag_id
		
	WHERE pi_corrected.trans_date BETWEEN :Begin_Date AND :End_Date
		AND pi_corrected.ref_prod_location = :Ref_Prod_Location
		AND pi_corrected.tag_id = :Tag_Id
		AND environmental_hier.analysis_type = 'Daily_Environmental'
		AND environmental_hier.unit IS NOT NULL
	
	ORDER BY pi_corrected.tag_id, pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min
	
;);
--------------------------------------------------------------------------------

--**************************

REPLACE MACRO prod_edw_base_views.M_Emissions_ExcDetail (Begin_Date DATE, End_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
	(
	SELECT	pi_corrected.Ref_Prod_Location, pi_corrected.Trans_Date, pi_corrected.Trans_Hour, pi_corrected.Trans_Min,
		Unit, ANALYSIS, pi_corrected.Tag_ID, Tag_Units
		
		,CAST(Tag_Value AS DECIMAL(12,4)) AS Instant_1Min
			,CASE WHEN Limit_Instant_Value >= 1 THEN
				Limit_Instant_Sign||TRIM(Limit_Instant_Value)
			ELSE 
				Limit_Instant_Sign||'0'||TRIM(Limit_Instant_Value) 
			END AS Lim_1Min
			,CASE WHEN Limit_Instant_Value_Ops >= 1 THEN
				Limit_Instant_Sign_Ops||TRIM(Limit_Instant_Value_Ops)
			ELSE 
				Limit_Instant_Sign_Ops||'0'||TRIM(Limit_Instant_Value_Ops) 
			END AS Lim_1Min_Ops
		
		,CAST(MAvg_6Mins AS DECIMAL(12,4)) AS Avg_6Min
			,CASE WHEN Limit_6Min_Value >= 1 THEN
				Limit_6Min_Sign||TRIM(Limit_6Min_Value)
			ELSE 
				Limit_6Min_Sign||'0'||TRIM(Limit_6Min_Value) 
			END AS Lim_6Min
			,CASE WHEN Limit_6Min_Value_Ops >= 1 THEN
				Limit_6Min_Sign_Ops||TRIM(Limit_6Min_Value_Ops)
			ELSE 
				Limit_6Min_Sign_Ops||'0'||TRIM(Limit_6Min_Value_Ops) 
			END AS Lim_6Min_Ops

		,CAST(MAvg_15Mins AS DECIMAL(12,4)) AS Avg_15Min
			,CASE WHEN Limit_15Min_Value >= 1 THEN
				Limit_15Min_Sign||TRIM(Limit_15Min_Value)
			ELSE 
				Limit_15Min_Sign||'0'||TRIM(Limit_15Min_Value) 
			END AS Lim_15Min
			,CASE WHEN Limit_15Min_Value_Ops >= 1 THEN
				Limit_15Min_Sign_Ops||TRIM(Limit_15Min_Value_Ops)
			ELSE 
				Limit_15Min_Sign_Ops||'0'||TRIM(Limit_15Min_Value_Ops) 
			END AS Lim_15Min_Ops
	
		,CAST(HourlyTagAvg AS DECIMAL(12,4)) AS Avg_1Hour
			,CASE WHEN Limit_1Hour_Value >= 1 THEN
				Limit_1Hour_Sign||TRIM(Limit_1Hour_Value)
			ELSE 
				Limit_1Hour_Sign||'0'||TRIM(Limit_1Hour_Value) 
			END AS Lim_1Hour
			,CASE WHEN Limit_1Hour_Value_Ops >= 1 THEN
				Limit_1Hour_Sign_Ops||TRIM(Limit_1Hour_Value_Ops)
			ELSE 
				Limit_1Hour_Sign_Ops||'0'||TRIM(Limit_1Hour_Value_Ops) 
			END AS Lim_1Hour_Ops
		
		,CAST(Mavg_3Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_3Hour_Value >=1 THEN
				Limit_3Hour_Sign||TRIM(Limit_3Hour_Value) 
			ELSE
				Limit_3Hour_Sign||'0'||TRIM(Limit_3Hour_Value) 
			END AS Lim_3Hour
			,CASE WHEN Limit_3Hour_Value_Ops >=1 THEN
				Limit_3Hour_Sign_Ops||TRIM(Limit_3Hour_Value_Ops) 
			ELSE
				Limit_3Hour_Sign_Ops||'0'||TRIM(Limit_3Hour_Value_Ops) 
			END AS Lim_3Hour_Ops
	
		,CAST(MAvg_6Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_6Hour_Value >=1 THEN
				Limit_6Hour_Sign||TRIM(Limit_6Hour_Value) 
			ELSE
				Limit_6Hour_Sign||'0'||TRIM(Limit_6Hour_Value) 
			END AS Lim_6Hour
			,CASE WHEN Limit_6Hour_Value_Ops >=1 THEN
				Limit_6Hour_Sign_Ops||TRIM(Limit_6Hour_Value_Ops) 
			ELSE
				Limit_6Hour_Sign_Ops||'0'||TRIM(Limit_6Hour_Value_Ops) 
			END AS Lim_6Hour_Ops
	
		,CAST(MAvg_12Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_12Hour_Value >=1 THEN
				Limit_12Hour_Sign||TRIM(Limit_12Hour_Value) 
			ELSE
				Limit_12Hour_Sign||'0'||TRIM(Limit_12Hour_Value) 
			END AS Lim_12Hour
			,CASE WHEN Limit_12Hour_Value_Ops >=1 THEN
				Limit_12Hour_Sign_Ops||TRIM(Limit_12Hour_Value_Ops) 
			ELSE
				Limit_12Hour_Sign_Ops||'0'||TRIM(Limit_12Hour_Value_Ops) 
			END AS Lim_12Hour_Ops
	
		,CAST(MAvg_24Hours AS DECIMAL(12,4))
			,CASE WHEN Limit_24HourMAvg_Value >=1 THEN
				Limit_24HourMAvg_Sign||TRIM(Limit_24HourMAvg_Value) 
			ELSE
				Limit_24HourMAvg_Sign||'0'||TRIM(Limit_24HourMAvg_Value) 
			END AS Lim_24HourMAvg
			,CASE WHEN Limit_24HourMAvg_Value_Ops >=1 THEN
				Limit_24HourMAvg_Sign_Ops||TRIM(Limit_24HourMAvg_Value_Ops) 
			ELSE
				Limit_24HourMAvg_Sign_Ops||'0'||TRIM(Limit_24HourMAvg_Value_Ops) 
			END AS Lim_24HourMAvg_Ops
	
		,CAST(Avg_8HourShift AS DECIMAL(12,4))
			,CASE WHEN Limit_8Hour_Value >=1 THEN
				Limit_8Hour_Sign||TRIM(Limit_8Hour_Value) 
			ELSE
				Limit_8Hour_Sign||'0'||TRIM(Limit_8Hour_Value) 
			END AS Lim_8Hour
			,CASE WHEN Limit_8Hour_Value_Ops >=1 THEN
				Limit_8Hour_Sign_Ops||TRIM(Limit_8Hour_Value_Ops) 
			ELSE
				Limit_8Hour_Sign_Ops||'0'||TRIM(Limit_8Hour_Value_Ops) 
			END AS Lim_8Hour_Ops
	
		,CAST(DayTagAvg AS DECIMAL(12,4)) AS Avg_1Day
			,CASE WHEN Limit_1Day_Value >=1 THEN
				Limit_1Day_Sign||TRIM(Limit_1Day_Value) 
			ELSE
				Limit_1Day_Sign||'0'||TRIM(Limit_1Day_Value) 
			END AS Lim_1Day
			,CASE WHEN Limit_1Day_Value_Ops >=1 THEN
				Limit_1Day_Sign_Ops||TRIM(Limit_1Day_Value_Ops) 
			ELSE
				Limit_1Day_Sign_Ops||'0'||TRIM(Limit_1Day_Value_Ops) 
			END AS Lim_1Day_Ops

		,CAST(Tag_Value AS DECIMAL(12,4)) AS Sum_1Day
			,CASE WHEN Limit_1DaySum_Value >=1 THEN
				Limit_1DaySum_Sign||TRIM(Limit_1DaySum_Value) 
			ELSE
				Limit_1DaySum_Sign||'0'||TRIM(Limit_1DaySum_Value) 
			END AS Lim_1DaySum
	
		,CAST(MAvg_7Days AS DECIMAL(12,4))
			,CASE WHEN Limit_7Day_Value >=1 THEN
				Limit_7Day_Sign||TRIM(Limit_7Day_Value) 
			ELSE
				Limit_7Day_Sign||'0'||TRIM(Limit_7Day_Value) 
			END AS Lim_7Day
			,CASE WHEN Limit_7Day_Value_Ops >=1 THEN
				Limit_7Day_Sign_Ops||TRIM(Limit_7Day_Value_Ops) 
			ELSE
				Limit_7Day_Sign_Ops||'0'||TRIM(Limit_7Day_Value_Ops) 
			END AS Lim_7Day_Ops
	
		,CAST(MAvg_30Days AS DECIMAL(12,4))
			,CASE WHEN Limit_30Day_Value >=1 THEN
				Limit_30Day_Sign||TRIM(Limit_30Day_Value) 
			ELSE
				Limit_30Day_Sign||'0'||TRIM(Limit_30Day_Value) 
			END AS Lim_30Day
			,CASE WHEN Limit_30Day_Value_Ops >=1 THEN
				Limit_30Day_Sign_Ops||TRIM(Limit_30Day_Value_Ops) 
			ELSE
				Limit_30Day_Sign_Ops||'0'||TRIM(Limit_30Day_Value_Ops) 
			END AS Lim_30Day_Ops
	
		,CAST(MAvg_365Days AS DECIMAL(12,4))
			,CASE WHEN Limit_365Day_Value >=1 THEN
				Limit_365Day_Sign||TRIM(Limit_365Day_Value) 
			ELSE
				Limit_365Day_Sign||'0'||TRIM(Limit_365Day_Value) 
			END AS Lim_365Day
			,CASE WHEN Limit_365Day_Value_Ops >=1 THEN
				Limit_365Day_Sign_Ops||TRIM(Limit_365Day_Value_Ops) 
			ELSE
				Limit_365Day_Sign_Ops||'0'||TRIM(Limit_365Day_Value_Ops) 
			END AS Lim_365Day_Ops
	
		,CAST(NULL AS DECIMAL(12,4)) AS Sum_365Day
			,CASE WHEN Limit_365DaySum_Value >=1 THEN
				Limit_365DaySum_Sign||TRIM(Limit_365DaySum_Value) 
			ELSE
				Limit_365DaySum_Sign||'0'||TRIM(Limit_365DaySum_Value) 
			END AS Lim_365DaySum
		
		,(CASE WHEN Limit_Instant_Value IS NOT NULL THEN
				CASE WHEN Limit_Instant_Sign='<' THEN
					CASE WHEN Limit_Instant_Value < Instant_1Min THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_Instant_Value > Instant_1Min THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_Instant_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_Instant_Sign_Ops='<' THEN
					CASE WHEN Limit_Instant_Value_Ops < Instant_1Min THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_Instant_Value_Ops > Instant_1Min THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_6Min_Value IS NOT NULL THEN
				CASE WHEN Limit_6Min_Sign='<' THEN
					CASE WHEN Limit_6Min_Value < MAvg_6Mins THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_6Min_Value > MAvg_6Mins THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
				+
			CASE WHEN Limit_6Min_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_6Min_Sign_Ops='<' THEN
					CASE WHEN Limit_6Min_Value_Ops < MAvg_6Mins THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_6Min_Value_Ops > MAvg_6Mins THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_15Min_Value IS NOT NULL THEN
				CASE WHEN Limit_15Min_Sign='<' THEN
					CASE WHEN Limit_15Min_Value < MAvg_15Mins THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_15Min_Value > MAvg_15Mins THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
				+
			CASE WHEN Limit_15Min_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_15Min_Sign_Ops='<' THEN
					CASE WHEN Limit_15Min_Value_Ops < MAvg_15Mins THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_15Min_Value_Ops > MAvg_15Mins THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_1Hour_Value IS NOT NULL THEN
				CASE WHEN Limit_1Hour_Sign='<' THEN
					CASE WHEN Limit_1Hour_Value < Avg_1Hour THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_1Hour_Value > Avg_1Hour THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_1Hour_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_1Hour_Sign_Ops='<' THEN
					CASE WHEN Limit_1Hour_Value_Ops < Avg_1Hour THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_1Hour_Value_Ops > Avg_1Hour THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_3Hour_Value IS NOT NULL THEN
				CASE WHEN Limit_3Hour_Sign='<' THEN
					CASE WHEN Limit_3Hour_Value < MAvg_3Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_3Hour_Value > MAvg_3Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_3Hour_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_3Hour_Sign_Ops='<' THEN
					CASE WHEN Limit_3Hour_Value_Ops < MAvg_3Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_3Hour_Value_Ops > MAvg_3Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_6Hour_Value IS NOT NULL THEN
				CASE WHEN Limit_6Hour_Sign='<' THEN
					CASE WHEN Limit_6Hour_Value < MAvg_6Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_6Hour_Value > MAvg_6Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_6Hour_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_6Hour_Sign_Ops='<' THEN
					CASE WHEN Limit_6Hour_Value_Ops < MAvg_6Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_6Hour_Value_Ops > MAvg_6Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_12Hour_Value IS NOT NULL THEN
				CASE WHEN Limit_12Hour_Sign='<' THEN
					CASE WHEN Limit_12Hour_Value < MAvg_12Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_12Hour_Value > MAvg_12Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_12Hour_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_12Hour_Sign_Ops='<' THEN
					CASE WHEN Limit_12Hour_Value_Ops < MAvg_12Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_12Hour_Value_Ops > MAvg_12Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
		+
			CASE WHEN Limit_24HourMAvg_Value IS NOT NULL THEN
				CASE WHEN Limit_24HourMAvg_Sign='<' THEN
					CASE WHEN Limit_24HourMAvg_Value < MAvg_24Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_24HourMAvg_Value > MAvg_24Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_24HourMAvg_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_24HourMAvg_Sign_Ops='<' THEN
					CASE WHEN Limit_24HourMAvg_Value_Ops < MAvg_24Hours THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_24HourMAvg_Value_Ops > MAvg_24Hours THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_8Hour_Value IS NOT NULL THEN
				CASE WHEN Limit_8Hour_Sign='<' THEN
					CASE WHEN Limit_8Hour_Value < Avg_8HourShift THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_8Hour_Value > Avg_8HourShift THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_8Hour_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_8Hour_Sign_Ops='<' THEN
					CASE WHEN Limit_8Hour_Value_Ops < Avg_8HourShift THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_8Hour_Value_Ops > Avg_8HourShift THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_1Day_Value IS NOT NULL THEN
				CASE WHEN Limit_1Day_Sign='<' THEN
					CASE WHEN Limit_1Day_Value < Avg_1Day THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_1Day_Value > Avg_1Day THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_1Day_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_1Day_Sign_Ops='<' THEN
					CASE WHEN Limit_1Day_Value_Ops < Avg_1Day THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_1Day_Value_Ops > Avg_1Day THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_1DaySum_Value IS NOT NULL THEN
				CASE WHEN Limit_1DaySum_Sign='<' THEN
					CASE WHEN Limit_1DaySum_Value < Sum_1Day THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_1DaySum_Value > Sum_1Day THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_7Day_Value IS NOT NULL THEN
				CASE WHEN Limit_7Day_Sign='<' THEN
					CASE WHEN Limit_7Day_Value < MAvg_7Days THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_7Day_Value > MAvg_7Days THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_7Day_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_7Day_Sign_Ops='<' THEN
					CASE WHEN Limit_7Day_Value_Ops < MAvg_7Days THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_7Day_Value_Ops > MAvg_7Days THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_30Day_Value IS NOT NULL THEN
				CASE WHEN Limit_30Day_Sign='<' THEN
					CASE WHEN Limit_30Day_Value < MAvg_30Days THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_30Day_Value > MAvg_30Days THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_30Day_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_30Day_Sign_Ops='<' THEN
					CASE WHEN Limit_30Day_Value_Ops < MAvg_30Days THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_30Day_Value_Ops > MAvg_30Days THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END			
			+
			CASE WHEN Limit_365Day_Value IS NOT NULL THEN
				CASE WHEN Limit_365Day_Sign='<' THEN
					CASE WHEN Limit_365Day_Value < MAvg_365Days THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_365Day_Value > MAvg_365Days THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END
			+
			CASE WHEN Limit_365Day_Value_Ops IS NOT NULL THEN
				CASE WHEN Limit_365Day_Sign_Ops='<' THEN
					CASE WHEN Limit_365Day_Value_Ops < MAvg_365Days THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_365Day_Value_Ops > MAvg_365Days THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END			
/*			+
			CASE WHEN Limit_365DaySum_Value IS NOT NULL THEN
				CASE WHEN Limit_365DaySum_Sign='<' THEN
					CASE WHEN Limit_365DaySum_Value < Sum_365Day THEN
						1 ELSE 0
					END
				ELSE
					CASE WHEN Limit_365DaySum_Value > Sum_365Day THEN
						1 ELSE 0
					END
				END
			ELSE 0	
			END			*/
		) AS Exception_Total
	
	FROM prod_edw_base_views.pi_corrected
	
	/* Join to the environmenta_hier table to determine the tags to evaluate and their limits */
	INNER JOIN prod_edw_base_views.environmental_hier
		ON pi_corrected.tag_id = environmental_hier.tag_id
		AND pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
		AND pi_corrected.trans_date = environmental_hier.eff_date
	
	LEFT OUTER JOIN 
	/* Calculate the moving minute average for the previous 6 minutes */
		(
		SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id, MAvg_6Mins
		FROM
			(
			SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id
				,AVG(Tag_Value) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour, trans_min ROWS 5 PRECEDING) AS MAvg_6Mins
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
			) AS tmpPI6MinAvg		
		WHERE trans_min IN (0,6,12,18,24,30,36,42,48,54)
		) AS PI_CalcData_6Min
	ON pi_corrected.ref_prod_location = pi_calcdata_6Min.ref_prod_location
		AND pi_corrected.tag_id = pi_calcdata_6Min.tag_id
		AND pi_corrected.trans_date = pi_calcdata_6Min.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_6Min.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_6Min.trans_min

	LEFT OUTER JOIN 
	/* Calculate the moving minute average for the previous 15 minutes */
		(
		SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id, MAvg_15Mins
		FROM
			(
			SELECT ref_prod_location, trans_date, trans_hour, trans_min, tag_id
				,AVG(Tag_Value) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour, trans_min ROWS 14 PRECEDING) AS MAvg_15Mins
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
			) AS tmpPI15MinAvg		
		WHERE trans_min IN (0,15,30,45)
		) AS PI_CalcData_15Min
	ON pi_corrected.ref_prod_location = pi_calcdata_15Min.ref_prod_location
		AND pi_corrected.tag_id = pi_calcdata_15Min.tag_id
		AND pi_corrected.trans_date = pi_calcdata_15Min.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_15Min.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_15Min.trans_min
	
	LEFT OUTER JOIN 
			/* Calculate the moving hourly average for the previous 3, 6 and 12 hours */
			(SELECT	Ref_Prod_location, Trans_Date, Trans_Hour, 0 AS Trans_Min, Tag_ID, HourlyTagAvg
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 2 PRECEDING) AS MAvg_3Hours
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 5 PRECEDING) AS MAvg_6Hours		
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 11 PRECEDING) AS MAvg_12Hours
				,AVG(HourlyTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date, trans_hour ROWS 23 PRECEDING) AS MAvg_24Hours
			FROM	
				(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
				FROM prod_edw_base_views.pi_corrected
				WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
					AND ref_prod_location = :Ref_Prod_Location
				GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
			) AS PI_CalcData_Hour
			ON pi_corrected.ref_prod_location = pi_calcdata_hour.ref_prod_location
			AND pi_corrected.tag_id = pi_calcdata_hour.tag_id
			AND pi_corrected.trans_date = pi_calcdata_hour.trans_date
			AND pi_corrected.trans_hour = pi_calcdata_hour.trans_hour
			AND pi_corrected.trans_min = pi_calcdata_hour.trans_min
	
	LEFT OUTER JOIN
		(
			/* Calculate the moving daily average for the previous 7, 30 and 365 days */
			/* Since there is a 365 day moving average, the subquery must look through 365 days of PI data */
			SELECT	Ref_Prod_Location, Trans_Date, Tag_ID, 23 AS trans_hour, 0 AS Trans_Min, DayTagAvg
			,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 6 PRECEDING) AS MAvg_7Days	
			,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 29 PRECEDING) AS MAvg_30Days	
			,AVG(DayTagAvg) OVER (PARTITION BY tag_id ORDER BY trans_date ROWS 364 PRECEDING) AS MAvg_365Days	
			FROM	
				(SELECT ref_prod_location, trans_date, tag_id, AVG(tag_value) AS DayTagAvg
				FROM prod_edw_base_views.pi_corrected
				WHERE trans_date BETWEEN :Begin_Date-365 AND :End_Date
					AND ref_prod_location = :Ref_Prod_Location
				GROUP BY ref_prod_location, trans_date, tag_id) AS tmpPIDayAvg
		) AS PI_CalcData_Day
		ON pi_calcdata_hour.ref_prod_location = pi_calcdata_day.ref_prod_location
		AND pi_corrected.trans_date = pi_calcdata_day.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_day.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_day.trans_min
		AND pi_corrected.tag_id = pi_calcdata_day.tag_id
	
	LEFT OUTER JOIN
		(
		/* Calculate the moving shift averages for all three shifts */		
		SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 7 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
		FROM	
			(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND trans_hour BETWEEN 0 AND 7
			GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
		GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
		UNION ALL
		SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 15 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
		FROM	
			(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND trans_hour BETWEEN 8 AND 15
			GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
		GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
		UNION ALL
		SELECT	Ref_Prod_location, Trans_Date, Tag_ID, 23 AS trans_hour, 0 AS trans_min, AVG(HourlyTagAvg) AS Avg_8HourShift
		FROM	
			(SELECT ref_prod_location, trans_date, trans_hour, tag_id, AVG(tag_value) AS HourlyTagAvg
			FROM prod_edw_base_views.pi_corrected
			WHERE trans_date BETWEEN :Begin_Date-1 AND :End_Date
				AND ref_prod_location = :Ref_Prod_Location
				AND trans_hour BETWEEN 16 AND 23
			GROUP BY ref_prod_location, trans_date, trans_hour, tag_id) AS tmpPIHourAvg
		GROUP BY Ref_Prod_location, Trans_Date, Tag_ID
		) AS PI_CalcData_Shift
		ON pi_calcdata_hour.ref_prod_location = pi_calcdata_shift.ref_prod_location
		AND pi_corrected.trans_date = pi_calcdata_shift.trans_date
		AND pi_corrected.trans_hour = pi_calcdata_shift.trans_hour
		AND pi_corrected.trans_min = pi_calcdata_shift.trans_min
		AND pi_corrected.tag_id = pi_calcdata_shift.tag_id
		
	/* Join to the pi_desc_units table to get the descriiption and units for all tags */
	LEFT OUTER JOIN prod_edw_base_views.pi_desc_units
		ON pi_corrected.ref_prod_location = pi_desc_units.tref_prod_location
		AND pi_corrected.tag_id = pi_desc_units.tag_id
		
	WHERE pi_corrected.trans_date BETWEEN :Begin_Date AND :End_Date
		AND pi_corrected.ref_prod_location =:Ref_Prod_Location
		AND environmental_hier.analysis_type = 'Daily_Environmental'
		AND environmental_hier.unit IS NOT NULL
		AND exception_total > 0
	
	ORDER BY pi_corrected.tag_id, pi_corrected.trans_date, pi_corrected.trans_hour, pi_corrected.trans_min

;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_FLARE_N(begin_date date, end_date date)
as (

/*
-- Maint Limits
VOC_UN SUM 485.89
NOX_UN SUM 3.87
CO_UN SUM 209.09
SO2_UN SUM 21.36
H2S_UN SUM 0.05

North Limits	
VOC	9.86
NOX	18.48
CO	46.2
SO2	72.9
H2S	0.77

*/
Select 
	trans_date
	,trans_hour
	,"VOCSumproduct SUM"
	,"Hydrogen_Sulfide_(H2S) SUM"
	,"northflare.volume SUM" as "Flare_Volume_Sum"
	,"Net_Heat_of_Combustion SUM"
	,"SO2_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "SO2_UN SUM" > 72.9 THEN 1 ELSE 0 END as "SO2_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "SO2_UN SUM" >  21.36 THEN 1 ELSE 0 END as "SO2_UN Maint Exception"
 	,"H2S_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "H2S_UN SUM" > 0.77 THEN 1 ELSE 0 END as "H2S_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "H2S_UN SUM" >  0.05 THEN 1 ELSE 0 END as "H2S_UN Maint Exception"
 	,"NOX_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "NOX_UN SUM" > 18.48 THEN 1 ELSE 0 END as "NOX_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "NOX_UN SUM" >  3.87 THEN 1 ELSE 0 END as "NOX_UN  Maint Exception"
	,"CO_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "CO_UN SUM" > 46.2 THEN 1 ELSE 0 END as "CO_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "CO_UN SUM" >  209.09 THEN 1 ELSE 0 END as "CO_UN  Maint Exception"
	, "VOC_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "VOC_UN SUM" > 9.86 THEN 1 ELSE 0 END as "VOC_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "VOC_UN SUM" >  485.89 THEN 1 ELSE 0 END as "VOC_UN  Maint Exception"
	,Maint_Event
FROM
	(SELECT  trans_date
		,trans_hour
		,AVG(VOCSumproduct) as "VOCSumproduct SUM"
		,AVG("Hydrogen_Sulfide_(H2S)") as "Hydrogen_Sulfide_(H2S) SUM"
		,SUM("northflare.volume") as "northflare.volume SUM"
		,AVG("Net_Heat_of_Combustion") as "Net_Heat_of_Combustion SUM"
		,SUM("SO2_UN") as "SO2_UN SUM"
		,SUM("H2S_UN") as "H2S_UN SUM"
		,SUM("NOX_UN") as "NOX_UN SUM"
		,SUM("CO_UN") as "CO_UN SUM"
		,SUM("VOC_UN") as "VOC_UN SUM"
		,Maint_Event
	FROM
		(select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event,
			CASE 	WHEN con.Maint_Event in ('A', 'B')
					THEN "Hydrogen_Sulfide_(H2S)" ELSE "M.Hydrogen_Sulfide_(H2S)" END as "Hydrogen_Sulfide_(H2S)"
			,"northflare.volume"
			,CASE	WHEN con.Maint_Event in ('A', 'B')
					THEN "Net_Heat_of_Combustion" ELSE "M.Net_Heat_of_Combustion" END as "Net_Heat_of_Combustion"
			,CASE	WHEN con.Maint_Event in ('A', 'B')
			THEN	((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
					(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
					(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
					(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081)) 
			ELSE 
					((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
					(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
					(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
					(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081)) 
			END as VOCSumproduct
	
			,CASE 	WHEN con.Maint_Event in ('A', 'B')
					THEN ("northflare.volume"*1000/379/100*"Hydrogen_Sulfide_(H2S)"*64.06) 
					ELSE ("northflare.volume"*1000/379/100*"M.Hydrogen_Sulfide_(H2S)"*64.06) END as "SO2_UN"
			,CASE 	WHEN con.Maint_Event in ('A', 'B')
					THEN (("northflare.volume"*1000/379/100*"Hydrogen_Sulfide_(H2S)"*64.06)/64.06*34.08*(100-98)/100) 
					ELSE (("northflare.volume"*1000/379/100*"M.Hydrogen_Sulfide_(H2S)"*64.06)/64.06*34.08*(100-98)/100) END as "H2S_UN"			
			,CASE	WHEN con.Maint_Event in ('A', 'B')
					THEN	CASE WHEN "Net_Heat_of_Combustion">1000
								THEN (0.0485*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
								ELSE (0.068*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
						END
					ELSE 
						CASE WHEN "M.Net_Heat_of_Combustion">1000
							THEN (0.0485*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
							ELSE (0.068*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
						END
			END as "NOX_UN"			
			,CASE	WHEN con.Maint_Event in ('A', 'B')
					THEN	CASE WHEN "Net_Heat_of_Combustion">1000
								THEN (0.3503*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
								ELSE (0.3465*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
							END 
						ELSE
						CASE WHEN "M.Net_Heat_of_Combustion">1000
							THEN (0.3503*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
							ELSE (0.3465*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
						END 
			END as "CO_UN"				
			,CASE	WHEN con.Maint_Event in ('A', 'B')
				THEN	((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
						(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
						(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
						(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
						(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081)) * "northflare.volume" *1000/379/100/100 		
				ELSE
						((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
						(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
						(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
						(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
						(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081)) * "northflare.volume" *1000/379/100/100
			END as "VOC_UN"
		 FROM 
			(SELECT	fl.Trans_Date, fl.Trans_Hour,
						fl.Trans_Min,
						max(case when fl.tag_id = 'northflare.exception' then fl.tag_value end) as "northflare.exception",
						max(case when fl.tag_id = 'northflare.volume' then fl.tag_value/60 end) as "northflare.volume"									
				FROM	prod_edw_base_views.EPA_ELP_FLARE fl
			group by fl.trans_date,fl.trans_hour, fl.trans_min
			) as fl
		INNER JOIN
			PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
		ON 
			con.trans_date = fl.trans_date
			and con.trans_hour = fl.trans_hour
			and con.trans_min = fl.trans_min
		INNER JOIN
			( Select date_sampled, time_sampled,
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "Ethylene_(C2=)",
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "Propane_(C3)",			
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "C-2-Butene_(CC4=2)",									
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "Isobutylene_(IC4=1)",									
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "Isobutane_(IC4)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "Isopentane_(IC5)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "3MEC4=1",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "N-Butane_(NC4)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "N-Pentane_(NC5)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "T-2-Butene_(TC4=2)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "Propylene_(C3=)",	
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "M.Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "M.Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "M.2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "M.Ethylene_(C2=)",
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "M.Propane_(C3)",			
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "M.1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "M.Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "M.C-2-Butene_(CC4=2)",									
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "M.Isobutylene_(IC4=1)",									
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "M.Isobutane_(IC4)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "M.Isopentane_(IC5)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "M.3MEC4=1",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "M.N-Butane_(NC4)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "M.N-Pentane_(NC5)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "M.T-2-Butene_(TC4=2)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "M.Propylene_(C3=)"	
				FROM prod_edw_base_views.lab_results lr
				group by date_sampled, time_sampled
			) lr
		ON
			con.date_scheduled = lr.date_sampled
			--and con.time_scheduled = lr.time_sampled
			and substr(cast(lr.time_sampled as varchar(15)), 1, 8) = substr(cast(con.time_scheduled as varchar(15)), 1, 8) 
		WHERE
			con.unit = 'North'
			and "northflare.exception" = 1
			and con.trans_date between :begin_date and :end_date
		) tmpCalc_UN
	
	
	GROUP BY trans_Date, trans_hour, Maint_Event
	) caseTable
ORDER BY trans_date desc, trans_hour desc	
	;
	)
	
--Exec  M_FLARE_N('2013/10/01' , '2013/10/30')
--------------------------------------------------------------------------------

replace  macro prod_edw_base_views.M_FLARE_R(begin_date date, end_date date)
as 
(
	/*
Non-Maint
VOC 	0.01
NOX		18.24
CO		46.35
SO2		0.01
H2S		0.77

Maint
VOC 	92.90
NOX		41.24
CO		164.24
SO2		587.61
H2S		6.24
*/
Select 
	trans_date
	,trans_hour
	,VOC_SUM as "VOCSumproduct SUM"
	,H2S_SUM as "Hydrogen_Sulfide_(H2S) SUM"
	,"FlareGasVolFlowHigh SUM" as "Flare_Volume_Sum"
	,"Net_Heat_Of_Combustion.LAB SUM" as "Net_Heat_of_Combustion SUM"
	,SO2_SUM as "SO2_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and SO2_SUM > 0.01 THEN 1 ELSE 0 END as "SO2_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and SO2_SUM > 587.61 THEN 1 ELSE 0 END as "SO2_UN Maint Exception"
	,H2S_SUM as "H2S_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and H2S_SUM > 0.77 THEN 1 ELSE 0 END as "H2S SUM Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and H2S_SUM > 6.24 THEN 1 ELSE 0 END as "H2S_SUM Maint Exception"
	,NOX_SUM as "NOX_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and NOX_SUM > 18.24 THEN 1 ELSE 0 END as "NOX_SUM Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and NOX_SUM > 41.24 THEN 1 ELSE 0 END as "NOX_SUM  Maint_Exception"
	,CO_SUM as "CO_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and CO_SUM > 46.35 THEN 1 ELSE 0 END as "CO_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and CO_SUM > 164.24 THEN 1 ELSE 0 END as "CO_UN  Maint Exception"
	,VOC_SUM as "VOC_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and VOC_SUM > 0.01 THEN 1 ELSE 0 END as "VOC_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and VOC_SUM > 92.90 THEN 1 ELSE 0 END as "VOC_UN  Maint Exception"
	,Maint_event
FROM
	(select
		trans_date, trans_hour, 0 as trans_min, MAX(Maint_Event) as Maint_Event,
		AVG("Net_Heat_Of_Combustion.LAB") as  "Net_Heat_Of_Combustion.LAB SUM",
		sum(FlareGasVolFlowHigh) as "FlareGasVolFlowHigh SUM",
		sum(FlareGasVolFlowHigh*1000/24/379*RhenFlareH2S*64.06/1000000) as SO2_Sum, 
		SO2_Sum/64.06*34.08*(100-98)/100 as H2S_Sum,	
		sum(case when "Net_Heat_Of_Combustion.LAB">1000
			then (0.0485*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
			else (0.068*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
		end) as NOX_Sum,
		sum(case when "Net_Heat_Of_Combustion.LAB">1000
			then (0.3503*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
			else (0.3465*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
		end) as CO_Sum,		
		AVG(VOCSumproduct/100*FlareGasVolFlowHigh*1000/24/379*("29FI291B.PV"/"29FI291C.PV"*379/100)) as VOC_Sum

	from
		(select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event,
		cast("29DI2910.PV" as decimal(10,3)) as "29DI2910.PV",
		cast("29FI291B.PV" as decimal(10,3)) as "29FI291B.PV",
		cast("29FI291C.PV" as decimal(10,3)) as "29FI291C.PV",	
		cast("88PC109.op" as decimal(10,3)) as "88PC109.op",	
		cast("88PC117.op" as decimal(10,3)) as "88PC117.op",	
		cast("88PC116B.op" as decimal(10,3)) as "88PC116B.op",	
		cast("30PC308.op" as decimal(10,3)) as "30PC308.op",	
		cast("41PI261.pv" as decimal(10,3)) as "41PI261.pv",	
		cast("41FI412.pv" as decimal(10,3)) as "41FI412.pv",	
		cast("Net_Heat_of_Combustion.LAB" as decimal(9,2)) as "Net_Heat_of_Combustion.LAB",
		cast(zeroifnull(case when "29AI108.PV" < 300 then "29AI108.PV" else "29AI105.PV" end) as decimal(10,3)) as RhenFlareH2S,
		cast(zeroifnull("29FI291C.PV"/"29FI291B.PV"*"29FI291A.PV")/60 as decimal(9,2)) as FlareGasVolFlowHigh,
		cast(((zeroifnull("2-Methyl-1-Butene.LAB")*140.256)+
		(zeroifnull("Ethylene_(C2=).LAB")*28.054)+
		(zeroifnull("Propane_(C3).LAB")*44.097)+
		(zeroifnull("1-Butene_(C4=1).LAB")*112.216)+
		(zeroifnull("Hexanes_Plus_(C6+).LAB")*172.354)+
		(zeroifnull("C-2-Butene_(CC4=2).LAB")*112.216)+
		(zeroifnull("Isobutylene_(IC4=1).LAB")*112.216)+
		(zeroifnull("Isobutane_(IC4).LAB")*116.246)+
		(zeroifnull("Isopentane_(IC5).LAB")*144.3)+
		(zeroifnull("3MEC4=1.LAB")*140.268)+
		(zeroifnull("N-Butane_(NC4).LAB")*116.246)+
		(zeroifnull("N-Pentane_(NC5).LAB")*144.288)+
		(zeroifnull("T-2-Butene_(TC4=2).LAB")*112.216)+
		(zeroifnull("Propylene_(C3=).LAB")*42.081)+
		(zeroifnull("Hydrogen_(H2).LAB")*0)+
		(zeroifnull("Methane_(C1).LAB")*0)+
		(zeroifnull("Ethane_(C2).LAB")*0)	) as decimal(10,3)) as VOCSumproduct
		From
			(SELECT	Trans_Date, Trans_Hour,
					Trans_Min,
					max(case when tag_id = '29FI291A.PV' then Tag_Value end) as "29FI291A.PV",
					max(case when tag_id = '29FI291B.PV' then Tag_Value end) as "29FI291B.PV",
					max(case when tag_id = '29FI291C.PV' then Tag_Value end) as "29FI291C.PV",
					max(case when tag_id = '29AI108.PV' then Tag_Value end) as "29AI108.PV",
					max(case when tag_id = '29AI105.PV' then Tag_Value end) as "29AI105.PV",
					max(case when tag_id = '29DI2910.PV' then Tag_Value end) as "29DI2910.PV",
					max(case when tag_id = '88PC109.op' then Tag_Value end) as "88PC109.op",
					max(case when tag_id = '88PC117.op' then Tag_Value end) as "88PC117.op",
					max(case when tag_id = '88PC116B.op' then Tag_Value end) as "88PC116B.op",
					max(case when tag_id = '30PC308.op' then Tag_Value end) as "30PC308.op",
					max(case when tag_id = '41PI261.pv' then Tag_Value end) as "41PI261.pv",
					max(case when tag_id = '41FI412.pv' then Tag_Value end) as "41FI412.pv"
			FROM	prod_edw_base_views.EPA_ELP_FLARE
			group by trans_date,trans_hour, trans_min) as fl
		INNER JOIN
			PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
		ON 
			con.trans_date = fl.trans_date
			and con.trans_hour = fl.trans_hour
			-- Don't use trans_min join, Rheniformer is done on hourly basis
		INNER JOIN 
			(Select Date_Sampled, Time_Sampled,
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Net_Heat_of_Combustion.LAB' then results_value end) as "Net_Heat_of_Combustion.LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).LAB' then results_value end) as "2-Methyl-1-Butene.LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Ethylene_(C2=).LAB' then results_value end) as "Ethylene_(C2=).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Propane_(C3).lab' then results_value end) as "Propane_(C3).lab",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.1-Butene_(C4=1).LAB' then results_value end) as "1-Butene_(C4=1).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.HEXANES_PLUS_(C6+).LAB' then results_value end) as "HEXANES_PLUS_(C6+).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.C-2-Butene_(CC4=2).LAB' then results_value end) as "C-2-Butene_(CC4=2).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isobutylene_(IC4=1).LAB' then results_value end) as "Isobutylene_(IC4=1).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isobutane_(IC4).LAB' then results_value end) as "Isobutane_(IC4).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isopentane_(IC5).LAB' then results_value end) as "Isopentane_(IC5).LAB",
					max(case when pitag = 'e.MSSRHENFLARE.GCMOLE.3MEC4=1.lab' then results_value end) as "3MEC4=1.lab",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.N-Butane_(NC4).LAB' then results_value end) as "N-Butane_(NC4).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.N-Pentane_(NC5).LAB' then results_value end) as "N-Pentane_(NC5).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.T-2-Butene_(TC4=2).LAB' then results_value end) as "T-2-Butene_(TC4=2).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Propylene_(C3=).LAB' then results_value end) as "Propylene_(C3=).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Hydrogen_(H2).LAB' then results_value end) as "Hydrogen_(H2).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Methane_(C1).LAB' then results_value end) as "Methane_(C1).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Ethane_(C2).LAB' then results_value end) as "Ethane_(C2).LAB"
			FROM prod_edw_base_views.lab_results
			GROUP BY Date_Sampled, Time_Sampled ) lr
		ON
			con.date_scheduled = lr.date_sampled
			and con.time_scheduled = lr.time_sampled
			and con.Unit = 'Rheniformer'
		where "29FI291B.PV" > 0
		and "29FI291C.PV" > 0
		AND
		(
			"88PC109.op" > -4
			OR "88PC117.op" > -4
			OR "88PC116B.op" > -4
			OR "30PC308.op" > -4
			OR "41PI261.pv" > -0
			OR "41FI412.pv" > -0
		)
		and fl.trans_date between :begin_date and :end_date) as tmptblFlareGroup
	group by trans_date, trans_hour, Maint_event
	) caseTable
order by trans_date desc, trans_hour desc;
)
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_FLARE_S(begin_date date, end_date date)
as (
/*
Non-Maint
VOC	0.01
NOX	0.02
CO	0.11
SO2	0.01

Maint
VOC 227.54
NOX 48.38
CO 192.70
SO2 1471.87
H2S 15.64
*/

Select
	trans_date
	,trans_hour
	,"VOCSumproduct SUM"
	,"Hydrogen_Sulfide_(H2S) SUM"
	,"southflare.flow SUM" as "Flare_Volume_Sum"
	,"Net_Heat_of_Combustion SUM"
	,"SO2_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "SO2_UN SUM" > 0.01 THEN 1 ELSE 0 END as "SO2_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "SO2_UN SUM" >  1471.87 THEN 1 ELSE 0 END as "SO2_UN Maint Exception"
 	,"H2S_UN SUM"
	,0 as "H2S_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "H2S_UN SUM" > 15.64 THEN 1 ELSE 0 END as "H2S_UN Maint Exception"
 	,"NOX_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "NOX_UN SUM" > 0.02 THEN 1 ELSE 0 END as "NOX_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "NOX_UN SUM" >  48.38 THEN 1 ELSE 0 END as "NOX_UN  Maint Exception"
	,"CO_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and   "CO_UN SUM" > 0.11 THEN 1 ELSE 0 END as "CO_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "CO_UN SUM" >  192.70 THEN 1 ELSE 0 END as "CO_UN  Maint Exception"
	, "VOC_UN SUM"
	,CASE WHEN Maint_Event in ('A', 'C') and  "VOC_UN SUM" > 0.01 THEN 1 ELSE 0 END as "VOC_UN Exception"
	,CASE WHEN Maint_Event in ('B', 'D') and  "VOC_UN SUM" >  227.54 THEN 1 ELSE 0 END as "VOC_UN  Maint Exception"
	,Maint_Event
FROM 
	(Select trans_date
		,trans_hour
		,AVG("Hydrogen_Sulfide_(H2S)") as "Hydrogen_Sulfide_(H2S) SUM"
		,SUM("southflare.flow") as "southflare.flow SUM"
		,AVG("Net_Heat_of_Combustion") as "Net_Heat_of_Combustion SUM"
		,AVG("VOCSumproduct") as "VOCSumproduct SUM"
		,SUM("SO2_UN") as "SO2_UN SUM"
		,SUM("H2S_UN") as "H2S_UN SUM"
		,SUM("NOX_UN") as "NOX_UN SUM"
		,SUM("CO_UN") as "CO_UN SUM"
		,SUM("VOC_UN") as "VOC_UN SUM"
		,Maint_Event
	FROM
	(
		select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event
				,CASE WHEN con.Maint_Event in ('A', 'B') THEN "Hydrogen_Sulfide_(H2S)" ELSE "M.Hydrogen_Sulfide_(H2S)" END as "Hydrogen_Sulfide_(H2S)"
				,"southflare.flow"
				,CASE WHEN con.Maint_Event in ('A', 'B') THEN "Net_Heat_of_Combustion" ELSE "M.Net_Heat_of_Combustion" END as "Net_Heat_of_Combustion"
				,CASE WHEN con.Maint_Event in ('A', 'B')
				THEN
					((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
					(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
					(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
					(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081))
				ELSE
					((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
					(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
					(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
					(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081))
				END as VOCSumproduct
				,CASE WHEN con.Maint_Event in ('A', 'B')
						THEN ("southflare.flow"	* 1000/379/100* "Hydrogen_Sulfide_(H2S)" * 64.06) 
						ELSE ("southflare.flow"	* 1000/379/100* "M.Hydrogen_Sulfide_(H2S)" * 64.06)
				END as "SO2_UN"
				,CASE WHEN con.Maint_Event in ('A', 'B')
					THEN (("southflare.flow" * 1000/379/100* "Hydrogen_Sulfide_(H2S)" * 64.06)/64.06*34.08 * (100 - 98)/100)
					ELSE (("southflare.flow" * 1000/379/100* "M.Hydrogen_Sulfide_(H2S)" * 64.06)/64.06*34.08 * (100 - 98)/100)
				END as "H2S_UN" 
		,CASE WHEN con.Maint_Event in ('A', 'B') THEN
				CASE
					WHEN "Net_Heat_of_Combustion" > 1000
					THEN (0.0485*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.068*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END 
		ELSE 
				CASE 
					WHEN "M.Net_Heat_of_Combustion" > 1000
					THEN (0.0485*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.068*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END
		END as "NOX_UN"
		,CASE WHEN con.Maint_Event in ('A', 'B') THEN
				CASE
					WHEN "Net_Heat_of_Combustion" > 1000
					THEN (0.3503*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.3465*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END
		ELSE
				CASE
					WHEN "M.Net_Heat_of_Combustion" > 1000
					THEN (0.3503*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.3465*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END
		END as "CO_UN"
		, ("VOCSumproduct"*"southflare.flow"*1000/379/100/100) as "VOC_UN"
		From
			(SELECT	fl.Trans_Date, fl.Trans_Hour,
					fl.Trans_Min,
					max(case when fl.tag_id = 'southflare.exception' then fl.tag_value end) as "southflare.exception",
					max(case when fl.tag_id = 'southflare.flow' then fl.tag_value/60 end) as "southflare.flow"									
			FROM	prod_edw_base_views.EPA_ELP_FLARE fl
			group by fl.trans_date,fl.trans_hour, fl.trans_min
			) as fl
			INNER JOIN
				PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
			ON
				con.trans_date = fl.trans_date
				and con.trans_hour = fl.trans_hour
				and con.trans_min = fl.trans_min
			INNER JOIN 
			( Select date_sampled, time_sampled,
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "Ethylene_(C2=)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "Propane_(C3)",			
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "C-2-Butene_(CC4=2)",									
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "Isobutylene_(IC4=1)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "Isobutane_(IC4)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "Isopentane_(IC5)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "3MEC4=1",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "N-Butane_(NC4)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "N-Pentane_(NC5)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "T-2-Butene_(TC4=2)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "Propylene_(C3=)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "M.Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "M.Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "M.2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "M.Ethylene_(C2=)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "M.Propane_(C3)",			
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "M.1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "M.Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "M.C-2-Butene_(CC4=2)",								
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "M.Isobutylene_(IC4=1)",	
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "M.Isobutane_(IC4)",									
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "M.Isopentane_(IC5)",									
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "M.3MEC4=1",
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "M.N-Butane_(NC4)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "M.N-Pentane_(NC5)",
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "M.T-2-Butene_(TC4=2)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "M.Propylene_(C3=)"					
				FROM prod_edw_base_views.lab_results lr
				group by date_sampled, time_sampled
				) lr
			ON
				con.date_Scheduled = lr.date_sampled
				--and con.time_Scheduled = lr.time_sampled
				and substr(cast(lr.time_sampled as varchar(15)), 1, 8) = substr(cast(con.time_scheduled as varchar(15)), 1, 8) 
			where "southflare.exception" = 1
			and con.Unit = 'South'
			and con.trans_date between :begin_date and :end_date
		) tmpCalc_UN
	GROUP BY trans_Date, trans_hour, Maint_Event
)caseTable 
order by trans_date desc, trans_hour desc
		

;
)
--------------------------------------------------------------------------------

replace  macro prod_edw_base_views.M_Flare_Summary(report_date date)
as 
(
/* Start South */
Select cast('South' as varchar(11)) as Unit
		,trans_date
		,COUNT(trans_min) as CNT_Trans_Min
		,SUM("SO2_UN") as SO2
		,SUM("H2S_UN") as "H2S_UN SUM"
		,SUM("NOX_UN") as "NOX_UN SUM"
		,SUM("CO_UN") as "CO_UN SUM"
		,SUM("VOC_UN") as "VOC_UN SUM"
	FROM
	(
		select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event
				,CASE WHEN con.Maint_Event in ('A', 'B') THEN "Hydrogen_Sulfide_(H2S)" ELSE "M.Hydrogen_Sulfide_(H2S)" END as "Hydrogen_Sulfide_(H2S)"
				,"southflare.flow"
				,CASE WHEN con.Maint_Event in ('A', 'B') THEN "Net_Heat_of_Combustion" ELSE "M.Net_Heat_of_Combustion" END as "Net_Heat_of_Combustion"
				,CASE WHEN con.Maint_Event in ('A', 'B')
				THEN
					((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
					(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
					(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
					(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081))
				ELSE
					((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
					(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
					(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
					(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081))
				END as VOCSumproduct
				,CASE WHEN con.Maint_Event in ('A', 'B')
						THEN ("southflare.flow"	* 1000/379/100* "Hydrogen_Sulfide_(H2S)" * 64.06) 
						ELSE ("southflare.flow"	* 1000/379/100* "M.Hydrogen_Sulfide_(H2S)" * 64.06)
				END as "SO2_UN"
				,CASE WHEN con.Maint_Event in ('A', 'B')
					THEN (("southflare.flow" * 1000/379/100* "Hydrogen_Sulfide_(H2S)" * 64.06)/64.06*34.08 * (100 - 98)/100)
					ELSE (("southflare.flow" * 1000/379/100* "M.Hydrogen_Sulfide_(H2S)" * 64.06)/64.06*34.08 * (100 - 98)/100)
				END as "H2S_UN" 
		,CASE WHEN con.Maint_Event in ('A', 'B') THEN
				CASE
					WHEN "Net_Heat_of_Combustion" > 1000
					THEN (0.0485*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.068*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END 
		ELSE 
				CASE 
					WHEN "M.Net_Heat_of_Combustion" > 1000
					THEN (0.0485*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.068*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END
		END as "NOX_UN"
		,CASE WHEN con.Maint_Event in ('A', 'B') THEN
				CASE
					WHEN "Net_Heat_of_Combustion" > 1000
					THEN (0.3503*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.3465*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END
		ELSE
				CASE
					WHEN "M.Net_Heat_of_Combustion" > 1000
					THEN (0.3503*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					ELSE (0.3465*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
				END
		END as "CO_UN"
		, ("VOCSumproduct"*"southflare.flow"*1000/379/100/100) as "VOC_UN"
		From
			(SELECT	fl.Trans_Date, fl.Trans_Hour,
					fl.Trans_Min,
					max(case when fl.tag_id = 'southflare.exception' then fl.tag_value end) as "southflare.exception",
					max(case when fl.tag_id = 'southflare.flow' then fl.tag_value/60 end) as "southflare.flow"									
			FROM	prod_edw_base_views.EPA_ELP_FLARE fl
			group by fl.trans_date,fl.trans_hour, fl.trans_min
			) as fl
			INNER JOIN
				PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
			ON
				con.trans_date = fl.trans_date
				and con.trans_hour = fl.trans_hour
				and con.trans_min = fl.trans_min
			INNER JOIN 
			( Select date_sampled, time_sampled,
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "Ethylene_(C2=)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "Propane_(C3)",			
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "C-2-Butene_(CC4=2)",									
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "Isobutylene_(IC4=1)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "Isobutane_(IC4)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "Isopentane_(IC5)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "3MEC4=1",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "N-Butane_(NC4)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "N-Pentane_(NC5)",
					max(case when lr.pitag = 'e.85SFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "T-2-Butene_(TC4=2)",
					max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "Propylene_(C3=)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "M.Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "M.Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "M.2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "M.Ethylene_(C2=)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "M.Propane_(C3)",			
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "M.1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "M.Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "M.C-2-Butene_(CC4=2)",								
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "M.Isobutylene_(IC4=1)",	
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "M.Isobutane_(IC4)",									
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "M.Isopentane_(IC5)",									
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "M.3MEC4=1",
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "M.N-Butane_(NC4)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "M.N-Pentane_(NC5)",
					max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "M.T-2-Butene_(TC4=2)",
					max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "M.Propylene_(C3=)"					
				FROM prod_edw_base_views.lab_results lr
				group by date_sampled, time_sampled
				) lr
			ON
				con.date_Scheduled = lr.date_sampled
				and con.time_Scheduled = lr.time_sampled
			where "southflare.exception" = 1
			and con.Unit = 'South'
			and con.trans_date = :report_date
		) tmpCalc_UN
	GROUP BY trans_Date

/* End South */

UNION 

/* Start North */
SELECT cast('North' as varchar(11)) as Unit
	,trans_date
	,COUNT(Trans_min) as CNT_Trans_Min
	,SUM("SO2_UN") as "SO2_UN SUM"
	,SUM("H2S_UN") as "H2S_UN SUM"
	,SUM("NOX_UN") as "NOX_UN SUM"
	,SUM("CO_UN") as "CO_UN SUM"
	,SUM("VOC_UN") as "VOC_UN SUM"
FROM
	(select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event,
		CASE 	WHEN con.Maint_Event in ('A', 'B')
				THEN "Hydrogen_Sulfide_(H2S)" ELSE "M.Hydrogen_Sulfide_(H2S)" END as "Hydrogen_Sulfide_(H2S)"
		,"northflare.volume"
		,CASE	WHEN con.Maint_Event in ('A', 'B')
				THEN "Net_Heat_of_Combustion" ELSE "M.Net_Heat_of_Combustion" END as "Net_Heat_of_Combustion"
		,CASE	WHEN con.Maint_Event in ('A', 'B')
		THEN	((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
				(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
				(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
				(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
				(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081)) 
		ELSE 
				((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
				(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
				(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
				(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
				(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081)) 
		END as VOCSumproduct

		,CASE 	WHEN con.Maint_Event in ('A', 'B')
				THEN ("northflare.volume"*1000/379/100*"Hydrogen_Sulfide_(H2S)"*64.06) 
				ELSE ("northflare.volume"*1000/379/100*"M.Hydrogen_Sulfide_(H2S)"*64.06) END as "SO2_UN"
		,CASE 	WHEN con.Maint_Event in ('A', 'B')
				THEN (("northflare.volume"*1000/379/100*"Hydrogen_Sulfide_(H2S)"*64.06)/64.06*34.08*(100-98)/100) 
				ELSE (("northflare.volume"*1000/379/100*"M.Hydrogen_Sulfide_(H2S)"*64.06)/64.06*34.08*(100-98)/100) END as "H2S_UN"			
		,CASE	WHEN con.Maint_Event in ('A', 'B')
				THEN	CASE WHEN "Net_Heat_of_Combustion">1000
							THEN (0.0485*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
							ELSE (0.068*"Net_Heat_of_Combustion"/1000000*"Net_Heat_of_Combustion"*1000)
					END
				ELSE 
					CASE WHEN "M.Net_Heat_of_Combustion">1000
						THEN (0.0485*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
						ELSE (0.068*"M.Net_Heat_of_Combustion"/1000000*"M.Net_Heat_of_Combustion"*1000)
					END
		END as "NOX_UN"			
		,CASE	WHEN con.Maint_Event in ('A', 'B')
				THEN	CASE WHEN "Net_Heat_of_Combustion">1000
							THEN (0.3503*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
							ELSE (0.3465*"Net_Heat_of_Combustion"/1000000*"Net_Heat_of_Combustion"*1000)
						END 
					ELSE
					CASE WHEN "M.Net_Heat_of_Combustion">1000
						THEN (0.3503*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
						ELSE (0.3465*"M.Net_Heat_of_Combustion"/1000000*"M.Net_Heat_of_Combustion"*1000)
					END 
		END as "CO_UN"				
		,CASE	WHEN con.Maint_Event in ('A', 'B')
			THEN	((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
					(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
					(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
					(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081)) * "northflare.volume" *1000/379/100/100 		
			ELSE
					((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
					(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
					(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
					(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081)) * "northflare.volume" *1000/379/100/100
		END as "VOC_UN"
	 FROM 
		(SELECT	fl.Trans_Date, fl.Trans_Hour,
					fl.Trans_Min,
					max(case when fl.tag_id = 'northflare.exception' then fl.tag_value end) as "northflare.exception",
					max(case when fl.tag_id = 'northflare.volume' then fl.tag_value/60 end) as "northflare.volume"									
			FROM	prod_edw_base_views.EPA_ELP_FLARE fl
		group by fl.trans_date,fl.trans_hour, fl.trans_min
		) as fl
	INNER JOIN
		PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
	ON 
		con.trans_date = fl.trans_date
		and con.trans_hour = fl.trans_hour
		and con.trans_min = fl.trans_min
	INNER JOIN
		( Select date_sampled, time_sampled,
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "Hydrogen_Sulfide_(H2S)",
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "Net_Heat_of_Combustion",
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "2-Methyl-1-Butene_(2MEC4=1)",			
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "Ethylene_(C2=)",
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "Propane_(C3)",			
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "1-Butene_(C4=1)",						
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "Hexanes_Plus_(C6+)",						
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "C-2-Butene_(CC4=2)",									
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "Isobutylene_(IC4=1)",									
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "Isobutane_(IC4)",															
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "Isopentane_(IC5)",															
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "3MEC4=1",															
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "N-Butane_(NC4)",															
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "N-Pentane_(NC5)",															
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "T-2-Butene_(TC4=2)",															
				max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "Propylene_(C3=)",	
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "M.Hydrogen_Sulfide_(H2S)",
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "M.Net_Heat_of_Combustion",
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "M.2-Methyl-1-Butene_(2MEC4=1)",			
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "M.Ethylene_(C2=)",
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "M.Propane_(C3)",			
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "M.1-Butene_(C4=1)",						
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "M.Hexanes_Plus_(C6+)",						
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "M.C-2-Butene_(CC4=2)",									
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "M.Isobutylene_(IC4=1)",									
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "M.Isobutane_(IC4)",															
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "M.Isopentane_(IC5)",															
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "M.3MEC4=1",															
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "M.N-Butane_(NC4)",															
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "M.N-Pentane_(NC5)",															
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "M.T-2-Butene_(TC4=2)",															
				max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "M.Propylene_(C3=)"	
			FROM prod_edw_base_views.lab_results lr
			group by date_sampled, time_sampled
		) lr
	ON
		con.date_scheduled = lr.date_sampled
		and con.time_scheduled = lr.time_sampled
	WHERE
		con.unit = 'North'
		and "northflare.exception" = 1
		and con.trans_date = :report_date
	) tmpCalc_UN
GROUP BY trans_Date
/* End North */
UNION
/* Start Rheniformer */
select	'Rheniformer' as Unit
		,trans_date
		,COUNT(Trans_Min) as CNT_Trans_Min
		,sum(FlareGasVolFlowHigh*1000/24/379*RhenFlareH2S*64.06/1000000) as SO2_Sum, 
		SO2_Sum/64.06*34.08*(100-98)/100 as H2S_Sum,	
		sum(case when "Net_Heat_Of_Combustion.LAB">1000
			then (0.0485*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
			else (0.068*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
		end) as NOX_Sum,
		sum(case when "Net_Heat_Of_Combustion.LAB">1000
			then (0.3503*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
			else (0.3465*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
		end) as CO_Sum,		
		sum(VOCSumproduct/100*FlareGasVolFlowHigh*1000/24/379*("29FI291B.PV"/"29FI291C.PV"*379/100)) as VOC_Sum

	from
		(select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event,
		cast("29DI2910.PV" as decimal(10,3)) as "29DI2910.PV",
		cast("29FI291B.PV" as decimal(10,3)) as "29FI291B.PV",
		cast("29FI291C.PV" as decimal(10,3)) as "29FI291C.PV",	
		cast("88PC109.op" as decimal(10,3)) as "88PC109.op",	
		cast("88PC117.op" as decimal(10,3)) as "88PC117.op",	
		cast("88PC116B.op" as decimal(10,3)) as "88PC116B.op",	
		cast("30PC308.op" as decimal(10,3)) as "30PC308.op",	
		cast("41PI261.pv" as decimal(10,3)) as "41PI261.pv",	
		cast("41FI412.pv" as decimal(10,3)) as "41FI412.pv",	
		cast("Net_Heat_of_Combustion.LAB" as decimal(9,2)) as "Net_Heat_of_Combustion.LAB",
		cast(zeroifnull(case when "29AI108.PV" < 300 then "29AI108.PV" else "29AI105.PV" end) as decimal(10,3)) as RhenFlareH2S,
		cast(zeroifnull("29FI291C.PV"/"29FI291B.PV"*"29FI291A.PV")/60 as decimal(9,2)) as FlareGasVolFlowHigh,
		cast(((zeroifnull("2-Methyl-1-Butene.LAB")*140.256)+
		(zeroifnull("Ethylene_(C2=).LAB")*28.054)+
		(zeroifnull("Propane_(C3).LAB")*44.097)+
		(zeroifnull("1-Butene_(C4=1).LAB")*112.216)+
		(zeroifnull("Hexanes_Plus_(C6+).LAB")*172.354)+
		(zeroifnull("C-2-Butene_(CC4=2).LAB")*112.216)+
		(zeroifnull("Isobutylene_(IC4=1).LAB")*112.216)+
		(zeroifnull("Isobutane_(IC4).LAB")*116.246)+
		(zeroifnull("Isopentane_(IC5).LAB")*144.3)+
		(zeroifnull("3MEC4=1.LAB")*140.268)+
		(zeroifnull("N-Butane_(NC4).LAB")*116.246)+
		(zeroifnull("N-Pentane_(NC5).LAB")*144.288)+
		(zeroifnull("T-2-Butene_(TC4=2).LAB")*112.216)+
		(zeroifnull("Propylene_(C3=).LAB")*42.081)+
		(zeroifnull("Hydrogen_(H2).LAB")*0)+
		(zeroifnull("Methane_(C1).LAB")*0)+
		(zeroifnull("Ethane_(C2).LAB")*0)	) as decimal(10,3)) as VOCSumproduct
		From
			(SELECT	Trans_Date, Trans_Hour,
					Trans_Min,
					max(case when tag_id = '29FI291A.PV' then Tag_Value end) as "29FI291A.PV",
					max(case when tag_id = '29FI291B.PV' then Tag_Value end) as "29FI291B.PV",
					max(case when tag_id = '29FI291C.PV' then Tag_Value end) as "29FI291C.PV",
					max(case when tag_id = '29AI108.PV' then Tag_Value end) as "29AI108.PV",
					max(case when tag_id = '29AI105.PV' then Tag_Value end) as "29AI105.PV",
					max(case when tag_id = '29DI2910.PV' then Tag_Value end) as "29DI2910.PV",
					max(case when tag_id = '88PC109.op' then Tag_Value end) as "88PC109.op",
					max(case when tag_id = '88PC117.op' then Tag_Value end) as "88PC117.op",
					max(case when tag_id = '88PC116B.op' then Tag_Value end) as "88PC116B.op",
					max(case when tag_id = '30PC308.op' then Tag_Value end) as "30PC308.op",
					max(case when tag_id = '41PI261.pv' then Tag_Value end) as "41PI261.pv",
					max(case when tag_id = '41FI412.pv' then Tag_Value end) as "41FI412.pv"
			FROM	prod_edw_base_views.EPA_ELP_FLARE
			group by trans_date,trans_hour, trans_min) as fl
		INNER JOIN
			PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
		ON 
			con.trans_date = fl.trans_date
			and con.trans_hour = fl.trans_hour
			-- Don't use trans_min join, Rheniformer is done on hourly basis
		INNER JOIN 
			(Select Date_Sampled, Time_Sampled,
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Net_Heat_of_Combustion.LAB' then results_value end) as "Net_Heat_of_Combustion.LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).LAB' then results_value end) as "2-Methyl-1-Butene.LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Ethylene_(C2=).LAB' then results_value end) as "Ethylene_(C2=).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Propane_(C3).lab' then results_value end) as "Propane_(C3).lab",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.1-Butene_(C4=1).LAB' then results_value end) as "1-Butene_(C4=1).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.HEXANES_PLUS_(C6+).LAB' then results_value end) as "HEXANES_PLUS_(C6+).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.C-2-Butene_(CC4=2).LAB' then results_value end) as "C-2-Butene_(CC4=2).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isobutylene_(IC4=1).LAB' then results_value end) as "Isobutylene_(IC4=1).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isobutane_(IC4).LAB' then results_value end) as "Isobutane_(IC4).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isopentane_(IC5).LAB' then results_value end) as "Isopentane_(IC5).LAB",
					max(case when pitag = 'e.MSSRHENFLARE.GCMOLE.3MEC4=1.lab' then results_value end) as "3MEC4=1.lab",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.N-Butane_(NC4).LAB' then results_value end) as "N-Butane_(NC4).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.N-Pentane_(NC5).LAB' then results_value end) as "N-Pentane_(NC5).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.T-2-Butene_(TC4=2).LAB' then results_value end) as "T-2-Butene_(TC4=2).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Propylene_(C3=).LAB' then results_value end) as "Propylene_(C3=).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Hydrogen_(H2).LAB' then results_value end) as "Hydrogen_(H2).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Methane_(C1).LAB' then results_value end) as "Methane_(C1).LAB",
					max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Ethane_(C2).LAB' then results_value end) as "Ethane_(C2).LAB"
			FROM prod_edw_base_views.lab_results
			GROUP BY Date_Sampled, Time_Sampled ) lr
		ON
			con.date_scheduled = lr.date_sampled
			and con.time_scheduled = lr.time_sampled
			and con.Unit = 'Rheniformer'
		where "29FI291B.PV" > 0
		and "29FI291C.PV" > 0
		AND
		(
			"88PC109.op" > -4
			OR "88PC117.op" > -4
			OR "88PC116B.op" > -4
			OR "30PC308.op" > -4
			OR "41PI261.pv" > -0
			OR "41FI412.pv" > -0
		)
		and fl.trans_date = :report_date) as tmptblFlareGroup
	group by trans_date
/* End Rheniformer */
;)
--------------------------------------------------------------------------------

Replace macro prod_edw_base_views.M_Flare_YTD (begin_date date, end_date date)
as
(Select
	Unit
	,EXTRACT(Month from Trans_Date) as Trans_Month
	,COUNT(Trans_Date) as CNT_Trans_Date
	,SUM(CNT_Trans_Min) as SUM_Trans_Min
	,SUM(SO2) as SO2
	,SUM("H2S_UN SUM") as H2S
	,SUM("NOX_UN SUM") as NOX
	,SUM("CO_UN SUM") as CO
	,SUM("VOC_UN SUM") as VOC
FROM
(
	/* Start South */
	Select cast('South' as varchar(11)) as Unit
			,trans_date
			,COUNT(trans_min) as CNT_Trans_Min
			,SUM("SO2_UN") as SO2
			,SUM("H2S_UN") as "H2S_UN SUM"
			,SUM("NOX_UN") as "NOX_UN SUM"
			,SUM("CO_UN") as "CO_UN SUM"
			,SUM("VOC_UN") as "VOC_UN SUM"
		FROM
		(
			select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event
					,CASE WHEN con.Maint_Event is null THEN "Hydrogen_Sulfide_(H2S)" ELSE "M.Hydrogen_Sulfide_(H2S)" END as "Hydrogen_Sulfide_(H2S)"
					,"southflare.flow"
					,CASE WHEN con.Maint_Event is null THEN "Net_Heat_of_Combustion" ELSE "M.Net_Heat_of_Combustion" END as "Net_Heat_of_Combustion"
					,CASE WHEN con.Maint_Event is null
					THEN
						((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
						(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
						(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
						(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
						(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081))
					ELSE
						((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
						(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
						(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
						(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
						(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081))
					END as VOCSumproduct
					,CASE WHEN con.Maint_Event is null 
							THEN ("southflare.flow"	* 1000/379/100* "Hydrogen_Sulfide_(H2S)" * 64.06) 
							ELSE ("southflare.flow"	* 1000/379/100* "M.Hydrogen_Sulfide_(H2S)" * 64.06)
					END as "SO2_UN"
					,CASE WHEN con.Maint_Event is null 
						THEN (("southflare.flow" * 1000/379/100* "Hydrogen_Sulfide_(H2S)" * 64.06)/64.06*34.08 * (100 - 98)/100)
						ELSE (("southflare.flow" * 1000/379/100* "M.Hydrogen_Sulfide_(H2S)" * 64.06)/64.06*34.08 * (100 - 98)/100)
					END as "H2S_UN" 
			,CASE WHEN con.Maint_Event is null THEN
					CASE
						WHEN "Net_Heat_of_Combustion" > 1000
						THEN (0.0485*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
						ELSE (0.068*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					END 
			ELSE 
					CASE 
						WHEN "M.Net_Heat_of_Combustion" > 1000
						THEN (0.0485*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
						ELSE (0.068*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					END
			END as "NOX_UN"
			,CASE WHEN con.Maint_Event is null THEN
					CASE
						WHEN "Net_Heat_of_Combustion" > 1000
						THEN (0.3503*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
						ELSE (0.3465*"Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					END
			ELSE
					CASE
						WHEN "M.Net_Heat_of_Combustion" > 1000
						THEN (0.3503*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
						ELSE (0.3465*"M.Net_Heat_of_Combustion"/1000000*"southflare.flow"*1000)
					END
			END as "CO_UN"
			, ("VOCSumproduct"*"southflare.flow"*1000/379/100/100) as "VOC_UN"
			From
				(SELECT	fl.Trans_Date, fl.Trans_Hour,
						fl.Trans_Min,
						max(case when fl.tag_id = 'southflare.exception' then fl.tag_value end) as "southflare.exception",
						max(case when fl.tag_id = 'southflare.flow' then fl.tag_value/60 end) as "southflare.flow"									
				FROM	prod_edw_base_views.EPA_ELP_FLARE fl
				group by fl.trans_date,fl.trans_hour, fl.trans_min
				) as fl
				INNER JOIN
					PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
				ON
					con.trans_date = fl.trans_date
					and con.trans_hour = fl.trans_hour
					and con.trans_min = fl.trans_min
				INNER JOIN 
				( Select date_sampled, time_sampled,
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "Hydrogen_Sulfide_(H2S)",
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "Net_Heat_of_Combustion",
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "2-Methyl-1-Butene_(2MEC4=1)",			
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "Ethylene_(C2=)",
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "Propane_(C3)",			
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "1-Butene_(C4=1)",						
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "Hexanes_Plus_(C6+)",						
						max(case when lr.pitag = 'e.85SFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "C-2-Butene_(CC4=2)",									
						max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "Isobutylene_(IC4=1)",
						max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "Isobutane_(IC4)",
						max(case when lr.pitag = 'e.85SFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "Isopentane_(IC5)",
						max(case when lr.pitag = 'e.85SFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "3MEC4=1",
						max(case when lr.pitag = 'e.85SFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "N-Butane_(NC4)",
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "N-Pentane_(NC5)",
						max(case when lr.pitag = 'e.85SFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "T-2-Butene_(TC4=2)",
						max(case when lr.pitag = 'E.85SFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "Propylene_(C3=)",
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "M.Hydrogen_Sulfide_(H2S)",
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "M.Net_Heat_of_Combustion",
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "M.2-Methyl-1-Butene_(2MEC4=1)",			
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "M.Ethylene_(C2=)",
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "M.Propane_(C3)",			
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "M.1-Butene_(C4=1)",						
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "M.Hexanes_Plus_(C6+)",						
						max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "M.C-2-Butene_(CC4=2)",								
						max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "M.Isobutylene_(IC4=1)",	
						max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "M.Isobutane_(IC4)",									
						max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "M.Isopentane_(IC5)",									
						max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "M.3MEC4=1",
						max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "M.N-Butane_(NC4)",
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "M.N-Pentane_(NC5)",
						max(case when lr.pitag = 'e.MSSSFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "M.T-2-Butene_(TC4=2)",
						max(case when lr.pitag = 'E.MSSSFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "M.Propylene_(C3=)"					
					FROM prod_edw_base_views.lab_results lr
					group by date_sampled, time_sampled
					) lr
				ON
					con.date_Scheduled = lr.date_sampled
					and con.time_Scheduled = lr.time_sampled
				where "southflare.exception" = 1
				and con.Unit = 'South'
				and con.trans_date between :begin_date and :end_date
			) tmpCalc_UN
		GROUP BY trans_Date

	/* End South */

	UNION 

	/* Start North */
	SELECT cast('North' as varchar(11)) as Unit
		,trans_date
		,COUNT(Trans_min) as CNT_Trans_Min
		,SUM("SO2_UN") as "SO2_UN SUM"
		,SUM("H2S_UN") as "H2S_UN SUM"
		,SUM("NOX_UN") as "NOX_UN SUM"
		,SUM("CO_UN") as "CO_UN SUM"
		,SUM("VOC_UN") as "VOC_UN SUM"
	FROM
		(select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event,
			CASE 	WHEN con.Maint_Event in ('A', 'B')
					THEN "Hydrogen_Sulfide_(H2S)" ELSE "M.Hydrogen_Sulfide_(H2S)" END as "Hydrogen_Sulfide_(H2S)"
			,"northflare.volume"
			,CASE	WHEN con.Maint_Event in ('A', 'B')
					THEN "Net_Heat_of_Combustion" ELSE "M.Net_Heat_of_Combustion" END as "Net_Heat_of_Combustion"
			,CASE	WHEN con.Maint_Event in ('A', 'B')
			THEN	((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
					(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
					(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
					(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081)) 
			ELSE 
					((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
					(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
					(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
					(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
					(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081)) 
			END as VOCSumproduct

			,CASE 	WHEN con.Maint_Event in ('A', 'B')
					THEN ("northflare.volume"*1000/379/100*"Hydrogen_Sulfide_(H2S)"*64.06) 
					ELSE ("northflare.volume"*1000/379/100*"M.Hydrogen_Sulfide_(H2S)"*64.06) END as "SO2_UN"
			,CASE 	WHEN con.Maint_Event in ('A', 'B')
					THEN (("northflare.volume"*1000/379/100*"Hydrogen_Sulfide_(H2S)"*64.06)/64.06*34.08*(100-98)/100) 
					ELSE (("northflare.volume"*1000/379/100*"M.Hydrogen_Sulfide_(H2S)"*64.06)/64.06*34.08*(100-98)/100) END as "H2S_UN"			
			,CASE	WHEN con.Maint_Event in ('A', 'B')
					THEN	CASE WHEN "Net_Heat_of_Combustion">1000
								THEN (0.0485*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
								ELSE (0.068*"Net_Heat_of_Combustion"/1000000*"Net_Heat_of_Combustion"*1000)
						END
					ELSE 
						CASE WHEN "M.Net_Heat_of_Combustion">1000
							THEN (0.0485*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
							ELSE (0.068*"M.Net_Heat_of_Combustion"/1000000*"M.Net_Heat_of_Combustion"*1000)
						END
			END as "NOX_UN"			
			,CASE	WHEN con.Maint_Event in ('A', 'B')
					THEN	CASE WHEN "Net_Heat_of_Combustion">1000
								THEN (0.3503*"Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
								ELSE (0.3465*"Net_Heat_of_Combustion"/1000000*"Net_Heat_of_Combustion"*1000)
							END 
						ELSE
						CASE WHEN "M.Net_Heat_of_Combustion">1000
							THEN (0.3503*"M.Net_Heat_of_Combustion"/1000000*"northflare.volume"*1000)
							ELSE (0.3465*"M.Net_Heat_of_Combustion"/1000000*"M.Net_Heat_of_Combustion"*1000)
						END 
			END as "CO_UN"				
			,CASE	WHEN con.Maint_Event in ('A', 'B')
				THEN	((zeroifnull("2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("Ethylene_(C2=)")*28.054)+(zeroifnull("Propane_(C3)")*44.097)+
						(zeroifnull("1-Butene_(C4=1)")*112.216)+(zeroifnull("Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("C-2-Butene_(CC4=2)")*112.216)+
						(zeroifnull("Isobutylene_(IC4=1)")*112.216)+(zeroifnull("Isobutane_(IC4)")*116.246)+(zeroifnull("Isopentane_(IC5)")*144.3)+
						(zeroifnull("3MEC4=1")*140.268)+(zeroifnull("N-Butane_(NC4)")*116.246)+(zeroifnull("N-Pentane_(NC5)")*144.288)+
						(zeroifnull("T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("Propylene_(C3=)")*42.081)) * "northflare.volume" *1000/379/100/100 		
				ELSE
						((zeroifnull("M.2-Methyl-1-Butene_(2MEC4=1)")*140.256)+(zeroifnull("M.Ethylene_(C2=)")*28.054)+(zeroifnull("M.Propane_(C3)")*44.097)+
						(zeroifnull("M.1-Butene_(C4=1)")*112.216)+(zeroifnull("M.Hexanes_Plus_(C6+)")*172.354)+(zeroifnull("M.C-2-Butene_(CC4=2)")*112.216)+
						(zeroifnull("M.Isobutylene_(IC4=1)")*112.216)+(zeroifnull("M.Isobutane_(IC4)")*116.246)+(zeroifnull("M.Isopentane_(IC5)")*144.3)+
						(zeroifnull("M.3MEC4=1")*140.268)+(zeroifnull("M.N-Butane_(NC4)")*116.246)+(zeroifnull("M.N-Pentane_(NC5)")*144.288)+
						(zeroifnull("M.T-2-Butene_(TC4=2)")*112.216)+(zeroifnull("M.Propylene_(C3=)")*42.081)) * "northflare.volume" *1000/379/100/100
			END as "VOC_UN"
		 FROM 
			(SELECT	fl.Trans_Date, fl.Trans_Hour,
						fl.Trans_Min,
						max(case when fl.tag_id = 'northflare.exception' then fl.tag_value end) as "northflare.exception",
						max(case when fl.tag_id = 'northflare.volume' then fl.tag_value/60 end) as "northflare.volume"									
				FROM	prod_edw_base_views.EPA_ELP_FLARE fl
			group by fl.trans_date,fl.trans_hour, fl.trans_min
			) as fl
		INNER JOIN
			PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
		ON 
			con.trans_date = fl.trans_date
			and con.trans_hour = fl.trans_hour
			and con.trans_min = fl.trans_min
		INNER JOIN
			( Select date_sampled, time_sampled,
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "Ethylene_(C2=)",
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "Propane_(C3)",			
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "C-2-Butene_(CC4=2)",									
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "Isobutylene_(IC4=1)",									
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "Isobutane_(IC4)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "Isopentane_(IC5)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "3MEC4=1",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "N-Butane_(NC4)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "N-Pentane_(NC5)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "T-2-Butene_(TC4=2)",															
					max(case when lr.pitag = 'E.05CLARKCMP.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "Propylene_(C3=)",	
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Hydrogen_Sulfide_(H2S).lab' then lr.Results_Value end) as "M.Hydrogen_Sulfide_(H2S)",
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Net_Heat_of_Combustion.lab' then lr.Results_Value end) as "M.Net_Heat_of_Combustion",
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).lab' then lr.Results_Value end) as "M.2-Methyl-1-Butene_(2MEC4=1)",			
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Ethylene_(C2=).lab' then lr.Results_Value end) as "M.Ethylene_(C2=)",
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Propane_(C3).lab' then lr.Results_Value end) as "M.Propane_(C3)",			
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.1-Butene_(C4=1).lab' then lr.Results_Value end) as "M.1-Butene_(C4=1)",						
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Hexanes_Plus_(C6+).lab' then lr.Results_Value end) as "M.Hexanes_Plus_(C6+)",						
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.C-2-Butene_(CC4=2).lab' then lr.Results_Value end) as "M.C-2-Butene_(CC4=2)",									
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isobutylene_(IC4=1).lab' then lr.Results_Value end) as "M.Isobutylene_(IC4=1)",									
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isobutane_(IC4).lab' then lr.Results_Value end) as "M.Isobutane_(IC4)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Isopentane_(IC5).lab' then lr.Results_Value end) as "M.Isopentane_(IC5)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.3MEC4=1.lab' then lr.Results_Value end) as "M.3MEC4=1",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.N-Butane_(NC4).lab' then lr.Results_Value end) as "M.N-Butane_(NC4)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.N-Pentane_(NC5).lab' then lr.Results_Value end) as "M.N-Pentane_(NC5)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.T-2-Butene_(TC4=2).lab' then lr.Results_Value end) as "M.T-2-Butene_(TC4=2)",															
					max(case when lr.pitag = 'E.MSSNFLARE.GCMOLE.Propylene_(C3=).lab' then lr.Results_Value end) as "M.Propylene_(C3=)"	
				FROM prod_edw_base_views.lab_results lr
				group by date_sampled, time_sampled
			) lr
		ON
			con.date_scheduled = lr.date_sampled
			and con.time_scheduled = lr.time_sampled
		WHERE
			con.unit = 'North'
			and "northflare.exception" = 1
			and con.trans_date between :begin_date and :end_date  
		) tmpCalc_UN
	GROUP BY trans_Date
	/* End North */
	UNION
	/* Start Rheniformer */
	select	'Rheniformer' as Unit
			,trans_date
			,COUNT(Trans_Min) as CNT_Trans_Min
			,sum(FlareGasVolFlowHigh*1000/24/379*RhenFlareH2S*64.06/1000000) as SO2_Sum, 
			SO2_Sum/64.06*34.08*(100-98)/100 as H2S_Sum,	
			sum(case when "Net_Heat_Of_Combustion.LAB">1000
				then (0.0485*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
				else (0.068*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
			end) as NOX_Sum,
			sum(case when "Net_Heat_Of_Combustion.LAB">1000
				then (0.3503*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
				else (0.3465*"Net_Heat_Of_Combustion.Lab"/1000000*(FlareGasVolFlowHigh)*1000)
			end) as CO_Sum,		
			sum(VOCSumproduct/100*FlareGasVolFlowHigh*1000/24/379*("29FI291B.PV"/"29FI291C.PV"*379/100)) as VOC_Sum

		from
			(select fl.trans_date, fl.trans_hour, fl.trans_min, con.Maint_Event,
			cast("29DI2910.PV" as decimal(10,3)) as "29DI2910.PV",
			cast("29FI291B.PV" as decimal(10,3)) as "29FI291B.PV",
			cast("29FI291C.PV" as decimal(10,3)) as "29FI291C.PV",	
			cast("88PC109.op" as decimal(10,3)) as "88PC109.op",	
			cast("88PC117.op" as decimal(10,3)) as "88PC117.op",	
			cast("88PC116B.op" as decimal(10,3)) as "88PC116B.op",	
			cast("30PC308.op" as decimal(10,3)) as "30PC308.op",	
			cast("41PI261.pv" as decimal(10,3)) as "41PI261.pv",	
			cast("41FI412.pv" as decimal(10,3)) as "41FI412.pv",	
			cast("Net_Heat_of_Combustion.LAB" as decimal(9,2)) as "Net_Heat_of_Combustion.LAB",
			cast(zeroifnull(case when "29AI108.PV" < 300 then "29AI108.PV" else "29AI105.PV" end) as decimal(10,3)) as RhenFlareH2S,
			cast(zeroifnull("29FI291C.PV"/"29FI291B.PV"*"29FI291A.PV")/60 as decimal(9,2)) as FlareGasVolFlowHigh,
			cast(((zeroifnull("2-Methyl-1-Butene.LAB")*140.256)+
			(zeroifnull("Ethylene_(C2=).LAB")*28.054)+
			(zeroifnull("Propane_(C3).LAB")*44.097)+
			(zeroifnull("1-Butene_(C4=1).LAB")*112.216)+
			(zeroifnull("Hexanes_Plus_(C6+).LAB")*172.354)+
			(zeroifnull("C-2-Butene_(CC4=2).LAB")*112.216)+
			(zeroifnull("Isobutylene_(IC4=1).LAB")*112.216)+
			(zeroifnull("Isobutane_(IC4).LAB")*116.246)+
			(zeroifnull("Isopentane_(IC5).LAB")*144.3)+
			(zeroifnull("3MEC4=1.LAB")*140.268)+
			(zeroifnull("N-Butane_(NC4).LAB")*116.246)+
			(zeroifnull("N-Pentane_(NC5).LAB")*144.288)+
			(zeroifnull("T-2-Butene_(TC4=2).LAB")*112.216)+
			(zeroifnull("Propylene_(C3=).LAB")*42.081)+
			(zeroifnull("Hydrogen_(H2).LAB")*0)+
			(zeroifnull("Methane_(C1).LAB")*0)+
			(zeroifnull("Ethane_(C2).LAB")*0)	) as decimal(10,3)) as VOCSumproduct
			From
				(SELECT	Trans_Date, Trans_Hour,
						Trans_Min,
						max(case when tag_id = '29FI291A.PV' then Tag_Value end) as "29FI291A.PV",
						max(case when tag_id = '29FI291B.PV' then Tag_Value end) as "29FI291B.PV",
						max(case when tag_id = '29FI291C.PV' then Tag_Value end) as "29FI291C.PV",
						max(case when tag_id = '29AI108.PV' then Tag_Value end) as "29AI108.PV",
						max(case when tag_id = '29AI105.PV' then Tag_Value end) as "29AI105.PV",
						max(case when tag_id = '29DI2910.PV' then Tag_Value end) as "29DI2910.PV",
						max(case when tag_id = '88PC109.op' then Tag_Value end) as "88PC109.op",
						max(case when tag_id = '88PC117.op' then Tag_Value end) as "88PC117.op",
						max(case when tag_id = '88PC116B.op' then Tag_Value end) as "88PC116B.op",
						max(case when tag_id = '30PC308.op' then Tag_Value end) as "30PC308.op",
						max(case when tag_id = '41PI261.pv' then Tag_Value end) as "41PI261.pv",
						max(case when tag_id = '41FI412.pv' then Tag_Value end) as "41FI412.pv"
				FROM	prod_edw_base_views.EPA_ELP_FLARE
				group by trans_date,trans_hour, trans_min) as fl
			INNER JOIN
				PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL con
			ON 
				con.trans_date = fl.trans_date
				and con.trans_hour = fl.trans_hour
				-- Don't use trans_min join, Rheniformer is done on hourly basis
			INNER JOIN 
				(Select Date_Sampled, Time_Sampled,
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Net_Heat_of_Combustion.LAB' then results_value end) as "Net_Heat_of_Combustion.LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.2-Methyl-1-Butene_(2MEC4=1).LAB' then results_value end) as "2-Methyl-1-Butene.LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Ethylene_(C2=).LAB' then results_value end) as "Ethylene_(C2=).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Propane_(C3).lab' then results_value end) as "Propane_(C3).lab",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.1-Butene_(C4=1).LAB' then results_value end) as "1-Butene_(C4=1).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.HEXANES_PLUS_(C6+).LAB' then results_value end) as "HEXANES_PLUS_(C6+).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.C-2-Butene_(CC4=2).LAB' then results_value end) as "C-2-Butene_(CC4=2).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isobutylene_(IC4=1).LAB' then results_value end) as "Isobutylene_(IC4=1).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isobutane_(IC4).LAB' then results_value end) as "Isobutane_(IC4).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Isopentane_(IC5).LAB' then results_value end) as "Isopentane_(IC5).LAB",
						max(case when pitag = 'e.MSSRHENFLARE.GCMOLE.3MEC4=1.lab' then results_value end) as "3MEC4=1.lab",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.N-Butane_(NC4).LAB' then results_value end) as "N-Butane_(NC4).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.N-Pentane_(NC5).LAB' then results_value end) as "N-Pentane_(NC5).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.T-2-Butene_(TC4=2).LAB' then results_value end) as "T-2-Butene_(TC4=2).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Propylene_(C3=).LAB' then results_value end) as "Propylene_(C3=).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Hydrogen_(H2).LAB' then results_value end) as "Hydrogen_(H2).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Methane_(C1).LAB' then results_value end) as "Methane_(C1).LAB",
						max(case when pitag = 'E.MSSRHENFLARE.GCMOLE.Ethane_(C2).LAB' then results_value end) as "Ethane_(C2).LAB"
				FROM prod_edw_base_views.lab_results
				GROUP BY Date_Sampled, Time_Sampled ) lr
			ON
				con.date_scheduled = lr.date_sampled
				and con.time_scheduled = lr.time_sampled
				and con.Unit = 'Rheniformer'
			where "29FI291B.PV" > 0
			and "29FI291C.PV" > 0
			AND
			(
				"88PC109.op" > -4
				OR "88PC117.op" > -4	
				OR "88PC116B.op" > -4
				OR "30PC308.op" > -4
				OR "41PI261.pv" > -0
				OR "41FI412.pv" > -0
			)
			and con.trans_date between :begin_date and :end_date) as tmptblFlareGroup
		group by trans_date
	/* End Rheniformer */
) date_grp
Group by Unit, EXTRACT(Month from Trans_Date);
)
--------------------------------------------------------------------------------

replace macro PROD_edw_base_views.m_INVENT_HEDGE_TREND_GAS_GRID (begin_date date, end_date date)
as
(
SELECT  	1 as Sort_Ord,'1.0' as Rep_Cat1_CD, cast('Gasoline  - El Paso' as varchar(50)) as Rep_Cat1_Desc, '1.1' as Rep_Cat2_CD, cast('Offsite Gasoline' as  varchar(50)) as  Rep_Cat2_Desc, Eff_Date, Location_Category, comm_prod_location, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between :begin_date and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 = 'Motor Gasolines' and
					comm_prod_location not in ('El Paso Refinery') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date, Location_Category, comm_prod_location
union all
SELECT  	2 as Sort_Ord,'1.0' as Rep_Cat1_CD,'Gasoline  - El Paso' as Rep_Cat1_Desc, '1.2' as Rep_Cat2_CD,'El Paso Refinery Gas' as  Rep_Cat2_Desc,Eff_Date, Location_Category, comm_prod_location, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between :begin_date and  :end_date  and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 = 'Motor Gasolines' and
					comm_prod_location in ('El Paso Refinery') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date, Location_Category, comm_prod_location
union all
SELECT  	3 as Sort_Ord,'1.0' as Rep_Cat1_CD,'Gasoline  - El Paso' as Rep_Cat1_Desc, '1.3' as Rep_Cat2_CD,'Refinery Components' as  Rep_Cat2_Desc,Eff_Date, Location_Category, comm_prod_location, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between :begin_date and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced') and
					comm_prod_location in ('El Paso Refinery') and
					Prod_Group_SubCat4 not in ('FCC Feed') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date, Location_Category, comm_prod_location
union all
SELECT  	4 as Sort_Ord,'1.0' as Rep_Cat1_CD,'Gasoline  - El Paso' as Rep_Cat1_Desc, '1.4' as Rep_Cat2_CD,'Offsite Components' as  Rep_Cat2_Desc,Eff_Date, Location_Category, comm_prod_location, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between :begin_date and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced') and
					comm_prod_location not in ('El Paso Refinery')  and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date, Location_Category, comm_prod_location
union all
SELECT  	5 as Sort_Ord,'2.0' as Rep_Cat1_CD,'Gasoline  - FCS' as Rep_Cat1_Desc, '2.1' as Rep_Cat2_CD,'Gasoline' as  Rep_Cat2_Desc,Eff_Date, Location_Category, comm_prod_location, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between  :begin_date and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = '4C-All' and
					prod_group_subcat3 in ('Motor Gasolines')  and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date, Location_Category, comm_prod_location
union all
SELECT  	6 as Sort_Ord,'2.0' as Rep_Cat1_CD,'Gasoline  - FCS' as Rep_Cat1_Desc, '2.2' as Rep_Cat2_CD,'Refinery Components' as  Rep_Cat2_Desc, Eff_Date, Location_Category, comm_prod_location, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between :begin_date and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = '4C-All' and
					prod_group_subcat3  in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced')  and
					Comm_Prod_Location in ('Gallup Refinery') and
					Prod_Group_SubCat4 not in ('FCC Feed') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date, Location_Category, comm_prod_location
union all
SELECT  	7 as Sort_Ord,'2.0' as Rep_Cat1_CD,'Gasoline  - FCS' as Rep_Cat1_Desc, '2.3' as Rep_Cat2_CD, 'Offsite Components' as  Rep_Cat2_Desc, Eff_Date, Location_Category, comm_prod_location, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between :begin_date and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = '4C-All' and
					prod_group_subcat3  in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced')  and
					Comm_Prod_Location not in ('Gallup Refinery') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date, Location_Category, comm_prod_location
order by 		1, 6, 8;
)
--------------------------------------------------------------------------------

replace macro PROD_edw_base_views.m_INVENT_HEDGE_TREND_GAS_GRPH (begin_date date, end_date date)
as
(
SELECT  	Eff_Date, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between ADD_MONTHS(:end_date, -12) and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 = 'Motor Gasolines' and
					comm_prod_location not in ('El Paso Refinery') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date
union all
SELECT  	Eff_Date, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between ADD_MONTHS(:end_date, -12) and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 = 'Motor Gasolines' and
					comm_prod_location in ('El Paso Refinery') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date
union all
SELECT  	Eff_Date, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between ADD_MONTHS(:end_date, -12) and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced') and
					comm_prod_location in ('El Paso Refinery') and
					Prod_Group_SubCat4 not in ('FCC Feed') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date
union all
SELECT  	Eff_Date, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between ADD_MONTHS(:end_date, -12) and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = 'el paso - all' and
					prod_group_subcat3 in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced') and
					comm_prod_location not in ('El Paso Refinery')  and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date
union all
SELECT  	Eff_Date, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between ADD_MONTHS(:end_date, -12) and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = '4C-All' and
					prod_group_subcat3 in ('Motor Gasolines')  and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date
union all
SELECT  	Eff_Date, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between ADD_MONTHS(:end_date, -12) and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = '4C-All' and
					prod_group_subcat3  in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced')  and
					Comm_Prod_Location in ('Gallup Refinery') and
					Prod_Group_SubCat4 not in ('FCC Feed') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date
union all
SELECT  	Eff_Date, sum(Net_Quantity) as Net_Quantity
FROM    		PROD_edw_base_views.PROD_UNION
where		 	eff_date between ADD_MONTHS(:end_date, -12) and :end_date and
					prod_group_subcat1 = 'Gasoline Hedge' and
					location_category = '4C-All' and
					prod_group_subcat3  in ('Intermediates','Blendstocks - Purchased','Blendstocks - Produced')  and
					Comm_Prod_Location not in ('Gallup Refinery') and
					td_day_of_week(Eff_Date) in (1,2,3,4,5)	
group by 	Eff_Date
order by     1;
)
--------------------------------------------------------------------------------

--exec m_maint_kpi_mrp (current_date-10, 'EPA650' , 'EPA650 Main Storehouse')

create Macro PROD_EDW_BASE_VIEWS.m_KPI_Excess_MRP (Report_Date date, StID varchar(36), Storeid varchar(72))
as (
Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = :Report_Date
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),0)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-1)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-2)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-3)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-4)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-5)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-6)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-7)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-8)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-9)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month

UNION 

Select SUM(Excess_Amt) as Excess_Amt, SUM(Excess_Value) as Excess_Value, Begin_Month, Begin_Year FROM
	(Select distinct 
	(IB.ONHAND_AMT - MRO.SAFESTK_AMT) as Excess_Amt
	, (Excess_Amt * IB.unit_amt) as Excess_Value
	, EXTRACT( MONTH FROM IB.Item_Bal_Eff_Date ) as Begin_Month
	, EXTRACT( YEAR FROM IB.Item_Bal_Eff_Date ) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.itemoi = IB.item_oi
	AND MRO.maint_loc = IB.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.MAINT_ITEM_STORE_ROOM ISR
	ON	IB.itstore_oi = ISR.ITSTOI
	AND IB.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON SR.storoi = ISR.stor_oi
	AND SR.maint_loc = ISR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE IB.item_bal_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-10)
	AND SITE.StID = :StID
	AND SR.StoreID = :Storeid
	AND IB.onhand_amt > mro.safestk_amt
	)MRP
GROUP BY Begin_Year, Begin_Month


;
);
--------------------------------------------------------------------------------

Create macro PROD_EDW_BASE_VIEWS.M_KPI_Slow_Moving (Report_Date date, Last_Issue_Date date, StID varchar(36), Storeid varchar(72))
	as
	(SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = :Report_Date
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = :Report_Date
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),0)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),0)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-1)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-1)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION
	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-2)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-2)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-3)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-3)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-4)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-4)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-5)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-5)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-6)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-6)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-7)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-7)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-8)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-8)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-9)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-9)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year

	UNION

	SELECT
		SUM(IB.inv_amt) as Sum_Inv_Amt
		,Extract(MONTH FROM IB.Item_Bal_Eff_Date) as Begin_Month
		,Extract(YEAR FROM IB.Item_Bal_Eff_Date) as Begin_Year
	FROM PROD_EDW_BASE_VIEWS.Maint_MRO_Item MRO
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Bal IB
	ON MRO.Itemoi = IB.item_oi AND MRO.maint_loc = IB.maint_loc
	AND IB.Item_Bal_Eff_Date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-10)
	AND IB.onhand_amt > 0
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Item_Store_Room ISR
	ON ISR.item_oi = IB.item_oi	AND ISR.maint_loc = IB.maint_loc
		AND ISR.itstoi = IB.itstore_oi
		AND ISR.item_stor_eff_date = ADD_MONTHS(cast(:Report_Date as date)-EXTRACT(DAY FROM cast(:Report_Date as date)),-10)
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Store_Room SR
	ON ISR.Stor_oi = SR.storoi
	AND ISR.maint_loc = SR.maint_loc
	INNER JOIN PROD_EDW_BASE_VIEWS.Maint_Site SITE
	ON SR.be_oi = SITE.siteoi
	AND SR.maint_loc = SITE.maint_loc
	WHERE cast(ISR.lastissdate_date as date)< :Last_Issue_Date
	AND SITE.StID = :StID
	AND SR.Storeid = :Storeid
	GROUP BY Begin_Month, Begin_Year


	;
	);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_LAB_RESULTS (Begin_Date date, End_Date date ) as
	(

SELECT	Ref_prod_location, Job_Name, cast(Sample_Number as integer) as Sample_Number,
		Test_Number, Component_Name, 
		Date_Sampled, substr(Cast(Time_Sampled as varchar(20)),1,5) as Time_Sampled, 
		Results_Text, Min_Limit, Max_Limit, Units, Tank,
		Product, Sample_Type, Location_Id, Analysis
		
FROM	prod_edw_base_views.LAB_RESULTS

Where date_sampled between :Begin_Date and :End_Date
order by date_sampled, time_sampled, sample_number, component_name


;);
--------------------------------------------------------------------------------

/* Combined Salesdat Load PRODUCTION */ 
Replace MACRO PROD_EDW_BASE_VIEWS.m_Load_Combined_Salesdat as 
--Change 4336
(
DELETE FROM PROD_EDW_BASE.WSALE_COMBINED_SALESDAT;

INSERT INTO PROD_EDW_BASE.WSALE_COMBINED_SALESDAT
SELECT 
		Wsale_PDS_Salesdat.Record_Number,
       CAST('' AS VARCHAR(50)) AS TYPE_FLAG,
       ZeroIfNull(CAST((CAST(WSale_PDS_SalesDat.Batch_Date AS DATE FORMAT 'YYYYMM')(CHAR(8))) as integer)) AS PERIOD,
     --CAST(WSale_PDS_SalesDat.Batch_Date AS DATE FORMAT 'YYYYMM')(CHAR(8)) AS PERIOD,
       ZeroIfNull(Cast(WSale_PDS_SalesDat.SM  as Integer))  AS SM,
       COALESCE(Cast(CRM_SHIPTO.TerritoryNum as Integer), (Select CASE WHEN MAX(TerritoryNum) = MIN(TerritoryNum) THEN MAX(TerritoryNum) ELSE -1 END FROM PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST WHERE AccountNum = WSALE_PDS_Salesdat.Cust_Code GROUP BY ACCOUNTNUM ))  AS CURRENT_SM,
       CAST(NVL(CustBillTo.CUSTOMER_NAME,'') AS VARCHAR(255)) AS SOURCE_BILL_TO_NAME,
       CAST(NVL(WSale_PDS_SalesDat.CUSTOMER_NAME,'') AS VARCHAR(255)) AS SOURCE_SHIP_TO_NAME,
       CAST(NVL(CRM_BILLTO.AccountName,'') AS VARCHAR(255)) AS CRM_BILL_TO_NAME,
       CAST(NVL(CRM_SHIPTO.AccountName,'') AS VARCHAR(255)) AS CRM_SHIP_TO_NAME,

	   
	             ZeroIfNull(COALESCE(CAST(QScreenBillTo.QS_CONTENT as integer), (Select CASE WHEN MAX(BillToJDENumber) = MIN(BillToJDENumber) 
			THEN (CASE WHEN MAX(SUBSTR(BillToJDENumber, 1, 1)) = 'D' THEN MAX(SUBSTR(BillToJDENumber, 2, Length(BillToJDENumber))) ELSE MAX(BillToJDENumber) END )
			ELSE -1 END FROM PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST WHERE AccountNum = WSALE_PDS_Salesdat.Cust_Code GROUP BY AccountNum))) AS JDE_BILL_TO, 
		
	   BTST.BILLTOJDENUMBER as Cur_JDE_Bill_To,
       ZeroIfNull(CAST(QScreenShipTo.QS_CONTENT as integer)) AS JDE_SHIP_TO,
	   BTST.SHIPTOJDENUM as Cur_JDE_Ship_To,
       CAST(NVL(WSale_PDS_SalesDat.Warehouse, '') as varchar(100)) AS Supply_Point,
       ZeroIfNull(CAST(WSale_PDS_SalesDat.PCAT AS INTEGER)) AS PCAT,
       CAST(NVL(WSale_PDS_SalesDat.ProdCode,'') AS VARCHAR(100)) AS Product_code,
       CAST(NVL(WSale_PDS_SalesDat.PRODUCT,'') AS VARCHAR(255)) AS Product_description,
       CAST(NVL(WSale_PDS_SalesDat.BOL_NUM, '') as varchar(100)) AS BOL,
       UPPER(CAST(NVL(SUBSTR(WSALE_PDS_SalesDat.U, 1, 1),'') AS VARCHAR(1))) AS UOM,
       CAST(NVL(WSale_PDS_SalesDat.QTY_DEL,0) AS DECIMAL(38,4)) AS QTY,
       CAST(NVL(WSale_PDS_SalesDat.INV_AMOUNT,0) AS DECIMAL(38,4)) AS Sales_Price,
       CAST(0 AS DECIMAL(38,4)) AS FreightSalesPrice,
       CAST(NVL(WSale_PDS_SalesDat.INV_AMOUNT,0) AS DECIMAL(38,4)) AS TotalSales,
       CASE WHEN WSale_PDS_SalesDat.SLS = 'Y' OR WSale_PDS_SalesDat.SLS = 'P' THEN CAST(0 AS DECIMAL(38,4))
       WHEN WSale_PDS_SalesDat.SLS = 'N' THEN CAST(NVL(WSALE_PDS_ORDERS_CLSD.Sales_Tax,0) AS DECIMAL(38,4))
       END AS Tax,
	   CAST(NVL(WSale_PDS_SalesDat.COST,0) AS DECIMAL(38,4)) AS Cost,
       CAST(0 AS DECIMAL(38,4)) AS Ancillary_Fees,
       CAST(0 AS DECIMAL(38,4)) AS EquipmentCharge,
	   'NA' as AdditiveType,
	   CAST(0 AS DECIMAL(38,4)) AS AdditiveValue,
       CAST(NVL(WSale_PDS_SalesDat.FREIGHT,0) AS DECIMAL(38,4)) AS INT_FRT,
       CAST(NVL(WSale_PDS_SalesDat.INV_AMOUNT,0) - NVL(WSale_PDS_SalesDat.COST,0)- NVL(WSale_PDS_SalesDat.FREIGHT,0) AS DECIMAL(38,4))  AS GM,
       QTY as QTY_ITD,
       Sales_Price AS SalesPrice_ITD,
       FreightSalesPrice AS FreightSalesPrice_ITD,
       TotalSales AS Sales_ITD,
       Tax AS Tax_ITD,
       Cost AS Cost_ITD,
       Ancillary_Fees AS Ancillary_ITD,
       EquipmentCharge AS EquipmentCharge_ITD,
	   AdditiveValue AS AdditiveValue_ITD,
       INT_FRT AS INT_FRT_ITD,
       GM AS GM_ITD,
       CAST('' AS VARCHAR(100)) AS Origin,
        ZeroIfNull(CAST(WSale_PDS_SalesDat.POO as integer)) AS POO,
       CAST(NVL(WSale_PDS_VENDOR.VendorName,'') AS VARCHAR(100)) AS Vendor,
        ZeroIfNull(CAST(WSale_PDS_SalesDat.VENDOR as integer)) AS Vendor_Account_Number,
       CAST(NVL(WSale_PDS_SalesDat.DRIVER, '') as varchar(100)) AS Driver,
        CAST(NVL(WSale_PDS_SalesDat.TRUCK, '') as varchar(100)) AS Truck,
       CAST('' as varchar(100)) AS TMW_Order_Number,
       CAST(NVL(WSale_PDS_SalesDat.PAK,'') AS VARCHAR(4)) AS PAK, 
       CAST(NVL(WSale_PDS_SalesDat.Inv_Num,0) AS VARCHAR(100)) AS Invoice_Number,
       CAST(NULL AS DATE FORMAT 'mm/dd/yyyy') AS Invoice_Create_Date,
       CAST(WSale_PDS_SalesDat.DEL_DATE  AS DATE FORMAT 'mm/dd/yyyy') AS Delivery_Date,
       CAST(WSale_PDS_SalesDat.Batch_Date AS DATE FORMAT 'mm/dd/yyyy') AS BHD,
       CAST(0 as integer) as IBAJDEAddBookNum,
       CAST('' AS VARCHAR(100)) AS InternalBAName,
       CASE WHEN LENGTH(WSale_PDS_PACK.pack_code) > 0 
       THEN CAST(ROUND(WSale_PDS_SalesDat.QTY_DEL / WSALE_PDS_PACK.multiplier) AS DECIMAL(38,4))
       ELSE CAST(NVL(WSale_PDS_SalesDat.QTY_DEL,0) AS DECIMAL(38,4))
       END AS Units,
        ZeroIfNull(CAST(WSale_PDS_SalesDat.PC as integer)) AS Profit_Center,
       CAST('' AS VARCHAR(100)) AS LiftingNumber,
       CAST('' AS VARCHAR(100)) AS ProvisionName,
       CAST('' AS VARCHAR(100)) AS MaxProvisionService,
       CAST('' AS VARCHAR(100)) AS MinProvisionService,
       CAST('' AS VARCHAR(100)) AS TransactionType,
       CAST('' AS VARCHAR(100)) AS TransactionTypeGroup,
       CAST('' AS VARCHAR(100)) AS Carrier,
       CAST('' AS VARCHAR(100)) AS ContractNumber,
       CAST(NVL(WSale_PDS_Salesdat.SAP_CODE,'') AS VARCHAR(20)) AS SAP_CODE,
       CASE WHEN WSale_PDS_Salesdat.PCAT_MAIN >= 26 THEN 0
       WHEN SUBSTR(WSALE_PDS_SalesDat.U, 1, 1) = 'P' AND WSale_PDS_SalesDat.PCAT_MAIN = 22
       THEN CAST(NVL(WSALE_PDS_SalesDat.QTY_DEL,0) / 8 AS DECIMAL(38,4))
       WHEN SUBSTR(WSALE_PDS_SalesDat.U, 1, 1) = 'P' AND WSale_PDS_SalesDat.PCAT_MAIN <> 22
       THEN CAST(NVL(WSale_PDS_SalesDat.QTY_DEL,0) / 7.5 AS DECIMAL(38,4))
       ELSE CAST(NVL(WSale_PDS_SalesDat.QTY_DEL,0) AS DECIMAL(38,4)) 
       END AS Gallons,
	   CAST(0 AS DECIMAL(38,4)) as Gallons_ITD,
	   QTY as SA_QTY,
	   Gallons as SA_Gallons,
	   TotalSales as SA_Sales,
	   GM as SA_Profit,
	   Ancillary_Fees as SA_Ancillary,
       CAST('PDS' AS VARCHAR(10)) AS Source,
        ZeroIfNull(CAST(WSale_PDS_SalesDat.BILLTO as integer)) AS Source_Bill_to,
        ZeroIfNull(CAST(WSale_PDS_SalesDat.Cust_Code as integer)) AS Source_Ship_to,
		Current_Date,
		Current_Date,
		CAST(0 AS DECIMAL(38,4)) AS SalesServiceFee,	   
		SalesServiceFee as SalesServiceFee_ITD
  FROM PROD_EDW_BASE_VIEWS.WSale_PDS_SalesDat WSale_PDS_SalesDat
		LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_PDS_CustDat WSALE_PDS_CustDat
           ON WSale_PDS_SalesDat.Cust_Code = WSALE_PDS_CustDat.ACCT_No
        LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_PDS_CustDat CustBillTo
          ON WSale_PDS_SalesDat.BILLTO = CustBillTo.ACCT_No
       LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_PDS_Cust_QScreen QScreenBillTo
          ON (WSale_PDS_SalesDat.BILLTO = QScreenBillTo.ACCT_No AND QScreenBillTo.QS_Type='73')
       LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_PDS_Cust_QScreen QScreenShipTo
          ON (WSALE_PDS_SalesDat.Cust_Code = QScreenShipTo.ACCT_No AND QScreenShipTo.QS_Type='73')
       LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST CRM_SHIPTO
          ON CRM_SHIPTO.jdeaccountnum = QScreenShipTo.QS_CONTENT
	  /* LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST CRM_SHIPTO_PDS
          ON CRM_SHIPTO.AccountNum = WSALE_PDS_SalesDat.Cust_Code*/
	   LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST CRM_BILLTO
          ON CRM_BILLTO.jdeaccountnum = QScreenBillTo.QS_CONTENT
       LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_PDS_Vendor WSALE_PDS_VENDOR
       ON WSALE_PDS_SalesDat.Vendor = WSALE_PDS_VENDOR.VendorID
       LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_CLSD WSALE_PDS_ORDERS_CLSD
       ON WSALE_PDS_SalesDat.INV_NUM = WSALE_PDS_ORDERS_CLSD.INV_NUM 
       AND TRIM(WSale_PDS_SalesDat.PRODCODE) = TRIM(WSALE_PDS_ORDERS_CLSD.PRODUCT)
       AND WSALE_PDS_SalesDat.DEL_DATE = WSALE_PDS_ORDERS_CLSD.DELDT 
       AND TRIM(WSALE_PDS_SalesDat.PAK) = TRIM(WSALE_PDS_ORDERS_CLSD.PACK)
       AND WSALE_PDS_SALESDAT.Cust_Code = WSALE_PDS_ORDERS_CLSD.ACCT_NUM 
       AND WSALE_PDS_SALESDAT.BOL_NUM = WSALE_PDS_ORDERS_CLSD.BOL_NUM 
       AND CAST(SUBSTR(CAST(WSALE_PDS_ORDERS_CLSD.INVOICE_LINE AS VARCHAR(12)),LENGTH(CAST(WSALE_PDS_ORDERS_CLSD.INVOICE_LINE AS VARCHAR(12)))-1) AS INTEGER) = CAST(WSALE_PDS_SALESDAT.LINE_NUMBER AS INTEGER)
       LEFT JOIN PROD_EDW_BASE_VIEWS.WSale_PDS_Pack WSALE_PDS_PACK
       ON WSALE_PDS_SalesDat.PAK = WSALE_PDS_PACK.pack_code
       LEFT JOIN (
		SELECT ST.ACCOUNTNUM, ST.BILLTOJDENUMBER, 
			CASE WHEN SUBSTR(ST.JDEACCOUNTNUM, 1, 1) = 'D' THEN SUBSTR(ST.JDEACCOUNTNUM, 2, Length(ST.JDEACCOUNTNUM)) ELSE ST.JDEACCOUNTNUM END as SHIPTOJDENUM 
			FROM PROD_EDW_BASE_VIEWS.WSALE_CRM_CustMast ST
		LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST BLT
		ON ST.BILLTOJDENUMBER=BLT.JDEACCOUNTNUM 
		WHERE Trim(ST.JDEACCOUNTNUM) <> ''
		GROUP BY 1, 2, 3
		) BTST 
	ON  BTST.ACCOUNTNUM = WSale_PDS_SalesDat.Cust_Code;
   
            
		
--Advent
INSERT INTO PROD_EDW_BASE.WSALE_COMBINED_SALESDAT
SELECT
      -1 as Record_Number,
  CAST('' AS VARCHAR(50)) AS TYPE_FLAG,
  ZeroIfNull(CAST((CAST(IH.inv_date AS DATE FORMAT 'yyyymm')(CHAR(8))) as integer)) AS SALES_PERIOD,
 ZeroIfNull(Cast(C1.slsman as Integer))  AS SM,
  COALESCE(Cast(CRM_SHIPTO.TerritoryNum as Integer), SM_JDE.TerritoryNum  ) AS CURRENT_SM,
  CAST(NVL(C1.name,'') AS VARCHAR(255)) AS SOURCE_BILL_TO_NAME,
  CAST('' AS VARCHAR(255)) AS SOURCE_SHIP_TO_NAME,
  CAST(NVL(CRM_BILLTO.AccountName,'') AS VARCHAR(255)) AS CRM_BILL_TO_NAME,
  CAST(NVL(CRM_SHIPTO.AccountName,'') AS VARCHAR(255)) AS CRM_SHIP_TO_NAME,
 ZeroIfNull(
	COALESCE(
      CAST(CRM_BILLTO.jdeaccountnum as integer), Cast(CUST_MAST_A.BillToJDENumber as Integer), Cast(CUST_MAST_B.BillToJDENumber as Integer))
	) AS JDE_BILL_TO,
  JDE_Bill_To as CUR_JDE_Bill_To,
  ZeroIfNull(CAST(CRM_SHIPTO.jdeaccountnum as integer)) AS JDE_SHIP_TO,
  JDE_Ship_To as CUR_JDE_Ship_To,
  CAST('23' as varchar(2))  AS Supply_Point,
  ZeroIfNUll(CAST(DC.PCAT AS INTEGER)) AS PCAT,
  CAST(NVL(DC.ProductCode,'') AS VARCHAR(100)) AS Product_code,
  CAST(NVL(DC.PCATDesc,'') AS VARCHAR(255)) AS Product_description,
  CAST('' as varchar(1)) AS BOL,
  CAST(NVL(DC.UOM,'') AS VARCHAR(1)) AS UOM,
  SUM(CAST(NVL(FH.fuel_qty,0) AS DECIMAL(38,4))) AS QTY,
  SUM(CAST(NVL(FH.total_charge,0)-NVL(FH.Sales_Tax,0)-NVL(FH.fuel_tax,0) AS DECIMAL(38,4))) AS Sales_Price,
  SUM(CAST(0 AS DECIMAL(38,4)) )AS FreightSalesPrice,
  SUM(CAST(NVL(FH.total_charge,0)-NVL(FH.sales_tax,0)-NVL(FH.fuel_tax,0) AS DECIMAL(38,4)) )AS TotalSales,
  SUM(CAST( NVL(FH.sales_tax,0)+NVL(FH.fuel_tax,0) AS DECIMAL(38,4)) )AS Tax,
  SUM(CAST(NVL(FH.rpt_cost,0)-NVL(FH.fuel_tax,0)-NVL(FH.sales_tax,0) AS DECIMAL(38,4)) ) AS Cost,
  SUM(CAST(0 AS DECIMAL(38,4)) ) AS Ancillary_Fees,
  SUM(CAST(0 AS DECIMAL(38,4)) )AS EquipmentCharge,
  'NA' as AdditiveType,
  SUM(CAST(0 AS DECIMAL(38,4)) )AS AdditiveValue,
  SUM(CAST(0 AS DECIMAL(38,4)) )AS INT_FRT,
  SUM(CAST(NVL(FH.total_charge,0)-NVL(FH.RPT_COST,0) AS DECIMAL(38,4)) )AS GM,
  QTY as QTY_ITD,
  Sales_Price AS SalesPrice_ITD,
  FreightSalesPrice AS FreightSalesPrice_ITD,
  TotalSales AS Sales_ITD,
  Tax AS Tax_ITD,
  Cost AS Cost_ITD,
  Ancillary_Fees AS Ancillary_ITD,
  EquipmentCharge AS EquipmentCharge_ITD,
  AdditiveValue AS AdditiveValue_ITD,
  INT_FRT AS INT_FRT_ITD,
  GM AS GM_ITD,
  CAST('' AS VARCHAR(100)) AS Origin,
  CAST(0 as integer)  AS POO,
  CAST('' AS VARCHAR(100)) AS Vendor,
  CAST(0 as integer) AS Vendor_Account_Number,
  CAST('' as varchar(1)) AS Driver,
  CAST('' as varchar(1)) AS Truck,
  CAST('' as varchar(100)) AS TMW_Order_Number,
  CAST('' AS VARCHAR(4)) AS PAK, 
  CAST(FH.inv_num AS VARCHAR(100)) AS Invoice_Number,
  CAST(NULL AS DATE FORMAT 'mm/dd/yyyy') AS Invoice_Create_Date,
  CAST(NULL AS DATE FORMAT 'mm/dd/yyyy') AS Delivery_date,
  CAST(IH.inv_date AS DATE FORMAT 'mm/dd/yyyy') AS BHD,
  CAST(0 as integer) AS IBAJDEAddBookNum,
  CAST('' AS VARCHAR(100)) AS InternalBAName,
  SUM(CAST(NVL(FH.fuel_qty,0) AS DECIMAL(38,4))) AS Units,
  CAST(0 as integer) AS Profit_Center,
  CAST('' AS VARCHAR(100)) AS LiftingNumber,
  CAST('' AS VARCHAR(100)) AS ProvisionName,
  CAST('' AS VARCHAR(100)) AS MaxProvisionPriceService,
  CAST('' AS VARCHAR(100)) AS MinProvisionPriceService,
  CAST('' AS VARCHAR(100)) AS TransactionType,
  CAST('' AS VARCHAR(100)) AS TransactionTypeGroup,
  CAST('' AS VARCHAR(100)) AS Carrier,
  CAST('' AS VARCHAR(100)) AS ContractNumber,
  CAST('' AS VARCHAR(20)) AS SAP_CODE,
  SUM(CAST(NVL(FH.fuel_qty,0) AS DECIMAL(38,4)) )AS Gallons,
  SUM(CAST(0 AS DECIMAL(38,4)) )as Gallons_ITD,
  QTY as SA_QTY,
  Gallons as SA_Gallons,
  TotalSales as SA_Sales,
  GM as SA_Profit,
  Ancillary_Fees as SA_Ancillary,
  CAST('ADVENT' AS VARCHAR(10)) AS Source,      
	ZeroIfNull(CAST(FH.cust_num AS VARCHAR(12))) AS Source_Bill_to,
	ZeroIfNull (CAST(CRM_SHIPTO.accountnum AS VARCHAR(12))) AS Source_Ship_To,
  CAST(CAST(Current_Timestamp AS VARCHAR(19)) AS TIMESTAMP(0))as Create_Dttm_Ins,
  CAST(CAST(Current_Timestamp AS VARCHAR(19)) AS TIMESTAMP(0)) as Last_Update_Dttm_Ins,
  SUM(CAST(0 AS DECIMAL(38,4))) AS SalesServiceFee,  
  SalesServiceFee as SalesServiceFee_ITD
FROM PROD_EDW_BASE_VIEWS.WSale_Advent_FuelHistSum FH
INNER JOIN PROD_EDW_BASE_VIEWS.WSale_Advent_Customer C1 on FH.cust_key=C1.cust_key --AND C1.cust_key is not null AND TRIM(C1.cust_key) <> ''
INNER JOIN PROD_EDW_BASE_VIEWS.WSALE_Advent_CustData C2 on C1.cust_key = C2.cust_key  --AND C1.cust_key is not null AND TRIM(C1.cust_key) <> '' AND C2.cust_key is not null AND TRIM(C2.cust_key) <> ''
INNER JOIN PROD_EDW_BASE_VIEWS.WSALE_ADVENT_PRODUCT_DCD DC on DC.AdventProductCode = FH.prod_code
LEFT JOIN PROD_EDW_BASE_VIEWS.WSale_Advent_InvHist IH on FH.cust_key=IH.cust_key AND FH.inv_num = IH.inv_num --AND FH.inv_num is not null and TRIM(FH.inv_num) <>''
LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CustMast CRM_BILLTO ON (LPAD(TRIM(C2.voy_ref),8,'0') = LPAD(TRIM(CRM_BILLTO.jdeaccountnum),8,'0') AND CRM_BILLTO.jdeaccountnum is not null AND TRIM(C2.voy_ref) <> '' AND C2.voy_ref is not null)
LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CustMast CRM_SHIPTO ON (LPAD(TRIM(C2.voy_level_2),8,'0') = LPAD(TRIM(CRM_SHIPTO.jdeaccountnum),8,'0') AND CRM_SHIPTO.jdeaccountnum is not null AND TRIM(C2.voy_level_2) <> '' AND C2.voy_level_2 is not null)
LEFT JOIN
	( SELECT AccountNum, CASE WHEN Max(TerritoryNum) = Min(TerritoryNum) THEN Max(Cast(TerritoryNum as int)) ELSE -1  END as TerritoryNum
				FROM PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST  Group by AccountNum ) SM_JDE 
	ON
	(
		( LENGTH(CAST(FH.cust_num AS VARCHAR(12))) = 5 AND SUBSTR(CAST(FH.cust_num AS VARCHAR(12)),1,1) = '1'  AND SUBSTR(CAST(FH.cust_num AS VARCHAR(12)),2) = CAST(SM_JDE.AccountNum AS VARCHAR(12)) )
		OR
		 
			(( ( LENGTH(CAST(FH.cust_num AS VARCHAR(12))) <> 5) OR (SUBSTR(CAST(FH.cust_num AS VARCHAR(12)),1,1) <>  '1' ) ) AND  CAST(FH.cust_num as varchar(14)) = CAST(SM_JDE.AccountNum as varchar(14)) )
	
	)
LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST CUST_MAST_A
ON LENGTH(CAST(FH.cust_num AS VARCHAR(12))) = 5 AND SUBSTR(CAST(FH.cust_num AS VARCHAR(12)),1,1) = '1' 
AND SUBSTR(CAST(FH.cust_num AS VARCHAR(12)),2) = CAST(CUST_MAST_A.AccountNum AS VARCHAR(12))
LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST CUST_MAST_B 
ON LENGTH(CAST(FH.cust_num AS VARCHAR(12))) = 5 AND SUBSTR(CAST(FH.cust_num AS VARCHAR(12)),1,1) <> '1'  
AND CAST(FH.cust_num as varchar(14)) = CAST(CUST_MAST_B.AccountNum as varchar(14))
WHERE IH.inv_date IS NOT NULL
Group by 
TYPE_FLAG, Sales_Period, SM, CURRENT_SM, SOURCE_BILL_TO_NAME,
		SOURCE_SHIP_TO_NAME, CRM_BILL_TO_NAME, CRM_SHIP_TO_NAME, JDE_BILL_TO,
		JDE_SHIP_TO, Supply_Point, PCAT, Product_Code, Product_Description,
		BOL, UOM, AdditiveType, Origin, POO, Vendor, Vendor_Account_Number,
  		Driver,Truck, TMW_Order_Number, PAK, Invoice_Number,  Invoice_Create_Date,
 		Delivery_date, BHD,  IBAJDEAddBookNum, InternalBAName, Profit_Center,
		LiftingNumber, ProvisionName, MaxProvisionPriceService, MinProvisionPriceService, TransactionType,
 		TransactionTypeGroup, Carrier, ContractNumber,SAP_CODE, Source,      
		Source_Bill_to, Source_Ship_To, Create_Dttm_Ins, Last_Update_Dttm_Ins;


--RA
INSERT INTO PROD_EDW_BASE.WSALE_COMBINED_SALESDAT
SELECT 
-1 as Record_Number,
  CAST(NVL(SC.Type_Flag,'') AS VARCHAR(50)) AS Type_Flag,
   ZeroIfNull(CAST((CAST(SC.JDEAccountingPeriod AS CHAR(8))) as integer)) AS PERIOD,
   --CAST(SC.JDEAccountingPeriod AS CHAR(8)) AS PERIOD,
    ZeroIfNull(Cast(SC.SalesmanCode as Integer))   AS SM, 
    ZeroIfNull(Cast(SC.Current_SalesmanCode as Integer)) AS CURRENT_SM,
  CAST(NVL(SC.BANME,'') AS VARCHAR(255)) AS SOURCE_BILL_TO_NAME,
  CAST(NVL(SC.DestinationTrm,'') AS VARCHAR(255)) AS SOURCE_SHIP_TO_NAME,
  CAST(NVL(WSALE_CRM_CUSTMAST_BILLTO.AccountName,'') AS VARCHAR(255)) AS CRM_BILL_TO_NAME,
  CAST(NVL(WSALE_CRM_CUSTMAST_SHIPTO.AccountName,'') AS VARCHAR(255)) AS CRM_SHIP_TO_NAME,
  CASE WHEN SC.BillToJDEAddrBookNumber = 'NA' THEN -1 ELSE
	ZeroIfNull(CAST(SC.BillToJDEAddrBookNumber as integer)) END AS JDE_BILL_TO,
	JDE_Bill_To as CUR_JDE_Bill_To,
  CASE WHEN SC.ShipToJDEAddrBookNumber = 'NA' THEN -1 ELSE 
	ZeroIfNull(CAST(SC.ShipToJDEAddrBookNumber as integer)) END AS JDE_SHIP_TO,
	JDE_SHIP_TO as CUR_JDE_Ship_To,
   CAST(NVL(WSALE_CRM_CUSTMAST_SHIPTO.supplypoint, '') as varchar(100)) AS Supply_Point,
    ZeroIfNull(CAST(SUBSTR(SC.PCAT,1,2) AS INTEGER)) AS PCAT,
  CAST(NVL(SUBSTR(SC.PCAT,4),'') AS VARCHAR(100)) AS Product_code,
  CAST(NVL(SUBSTR(SC.PCAT,4),'') AS VARCHAR(255)) AS Product_description,
   CAST(NVL(SC.BOL, '') as varchar(100)) AS BOL,
  UPPER(CAST(NVL(SC.UOM,'') AS VARCHAR(1))) AS UOM,
  CAST(NVL(SC.Volume,0) AS DECIMAL(38,4)) AS QTY,
  CAST(NVL(SC.SalesPrice,0) AS DECIMAL(38,4)) AS Sales_Price,
  CAST(NVL(SC.FreightSalesPrice,0) AS DECIMAL(38,4)) AS FreightSalesPrice,
  CAST(NVL(SC.TotalSales,0) AS DECIMAL(38,4)) AS TotalSales,
  CAST(NVL(SC.Tax,0) AS DECIMAL(38,4)) AS Tax,
  CAST(NVL(SC.PurchPrice,0) AS DECIMAL(38,4)) AS Cost,
  CAST(NVL(SC.Ancillary_Fees,0) AS DECIMAL(38,4)) AS Ancillary,
  CAST(NVL(SC.EquipmentCharge,0) AS DECIMAL(38,4)) AS EquipmentCharge,
  SC.AdditiveType,
  SC.AdditiveValue,
  CAST(NVL(SC.FrtPurchPrice,0) AS DECIMAL(38,4)) AS INT_FRT,
  CAST(NVL(SC.GrossMargin,0) AS DECIMAL(38,4)) AS GM,
  CAST(NVL(SC.Volume_ITD,0) AS INTEGER) AS QTY_ITD,
  CAST(NVL(SC.SalesPrice_ITD,0) AS DECIMAL(38,4)) AS SalesPrice_ITD,
  CAST(NVL(SC.FreightSalesPrice_ITD,0) AS DECIMAL(38,4)) AS FreightSalesPrice_ITD,
  CAST(NVL(SC.Sales_ITD,0) AS DECIMAL(38,4)) AS Sales_ITD, 
  CAST(NVL(SC.Tax_ITD,0) AS DECIMAL(38,4)) AS Tax_ITD, 
  CAST(NVL(SC.PurchPrice_ITD,0) AS DECIMAL(38,4)) AS Cost_ITD,
  CAST(NVL(SC.Ancillary_Fees_ITD,0) AS DECIMAL(38,4)) AS Ancillary_ITD, 
  CAST(NVL(SC.EquipmentCharge_ITD,0) AS DECIMAL(38,4)) AS EquipmentCharge_ITD,
  SC.AdditiveValue_ITD,
  CAST(NVL(FrtPurchPrice_ITD,0) AS DECIMAL(38,4)) AS INT_FRT_ITD, 
  CAST(NVL(GrossMargin_ITD,0) AS DECIMAL(38,4)) AS GM_ITD,
  CAST(NVL(SC.Origin,'') AS VARCHAR(100)) As Origin,
    ZeroIfNull(CAST(SC.PointOfOrigin as integer)) AS POO,
  CAST(NVL(SC.Vendor,'') AS VARCHAR(100)) AS Vendor,
  CASE WHEN SC.VendorJDEAddrBookNumber = 'NA' THEN -1 ELSE 
	ZeroIfNull(CAST(SC.VendorJDEAddrBookNumber as integer)) END AS Vendor_Account_Number,
   CAST(NVL(SC.DriverName, '') as varchar(12)) AS Driver,
   CAST(nvl(SC.TruckNumber, '') as varchar(100)) AS Truck,
   CAST(NVL(SC.TMWORDERNUMBER, '') as varchar(100)) AS TMW_Order_Number,
  CAST('' AS VARCHAR(4)) AS PAK,
  CAST(NVL(SC.INVOICENUMBER,'') AS VARCHAR(100)) AS Invoice_Number,
  CAST(SC.InvoiceCreationDate AS DATE FORMAT 'mm/dd/yyyy') AS Invoice_Create_Date,
  CAST(SC.MovementDate AS DATE FORMAT 'mm/dd/yyyy') AS Delivery_Date,
  CAST(SC.GL_Date AS DATE FORMAT 'mm/dd/yyyy') AS BHD,
   ZeroIfNull(CAST(SC.IBAJDEAddBookNum as integer)) AS IBAJDEAddBookNum,
  CAST(NVL(SC.InternalBANme,'') AS VARCHAR(100)) AS InternalBAName,
  CAST(NVL(SC.Volume,0) AS DECIMAL(38,4)) AS Units,
  CAST(0 as integer) AS Profit_Center,
  CAST(NVL(SC.LiftingNumber,'') AS VARCHAR(100)) AS LiftingNumber,
  CAST(NVL(SC.ProvisionName,'') AS VARCHAR(100)) AS ProvisionName,
  CAST(NVL(SC.MaxProvisionPriceService,'') AS VARCHAR(100)) AS MaxProvisionPriceService,
  CAST(NVL(SC.MinProvisionPriceService,'') AS VARCHAR(100)) AS MinProvisionPriceService,
  CAST(NVL(SC.TransactionType,'') AS VARCHAR(100)) AS TransactionType,
  CAST(NVL(SC.TransactionTypeGroup,'') AS VARCHAR(100)) AS TransactionTypeGroup,
  CAST(NVL(SC.Carrier,'') AS VARCHAR(100)) AS Carrier,
  CAST(NVL(SC.ContractNumber,'') AS VARCHAR(100)) AS ContractNumber,
  CAST('' AS VARCHAR(20)) AS SAP_CODE,
  CASE WHEN TYPE_FLAG <> 'Sales Service Fee' THEN CAST(NVL(SC.Volume,0) AS DECIMAL(38,4)) ELSE 0 END AS Gallons,
  CASE WHEN TYPE_FLAG <> 'Sales Service Fee' THEN CAST(NVL(SC.Volume_ITD,0) AS DECIMAL(38,4)) ELSE 0 END AS Gallons_ITD,
  CASE WHEN TYPE_FLAG IN ('Purchase, Previous Sales') THEN Prev_Sales_Vol			WHEN TYPE_FLAG in ('Sale, No Purchase - DFI', 'Sale, No Purchase - FOB') THEN CAST(0 AS DECIMAL(38,4)) ELSE QTY END as SA_QTY,
  CASE WHEN TYPE_FLAG IN ('Purchase, Previous Sales') THEN Prev_Sales_Vol			WHEN TYPE_FLAG in ('Sale, No Purchase - DFI', 'Sale, No Purchase - FOB', 'Sales Service Fee') THEN CAST(0 AS DECIMAL(38,4)) ELSE Gallons END as SA_Gallons,
  CASE WHEN TYPE_FLAG IN ('Purchase, Previous Sales') THEN Prev_Sales_Price			WHEN TYPE_FLAG in ('Sale, No Purchase - DFI', 'Sale, No Purchase - FOB') THEN CAST(0 AS DECIMAL(38,4)) ELSE TotalSales END as SA_Sales,
  CASE WHEN TYPE_FLAG IN ('Purchase, Previous Sales') THEN Prev_Sales_Price + Prev_Sale_Freight_Charge - Cost -Prev_Sale_Equip_Charge WHEN TYPE_FLAG in ('Sale, No Purchase - DFI', 'Sale, No Purchase - FOB') THEN CAST(0 AS DECIMAL(38,4)) ELSE GM END as SA_Profit,
  CASE WHEN TYPE_FLAG IN ('Purchase, Previous Sales') THEN Ancillary_ITD 			WHEN TYPE_FLAG in ('Sale, No Purchase - DFI', 'Sale, No Purchase - FOB') THEN CAST(0 AS DECIMAL(38,4)) ELSE Ancillary_Fees END as SA_Ancillary,
  CAST('RA' AS VARCHAR(10)) AS Source,
  CAST(0 as integer) AS Source_Bill_to,
  CAST(0 as integer) AS Source_Ship_to,
  CAST(CAST(Current_Timestamp AS VARCHAR(19)) AS TIMESTAMP(0))as Create_Dttm,
  CAST(CAST(Current_Timestamp AS VARCHAR(19)) AS TIMESTAMP(0)) as Last_Update_Dttm,
  CAST(NVL(SC.SalesServiceFee, 0) as DECIMAL(38,4)) AS SalesServiceFee,
  CAST(NVL(SC.SalesServiceFee_ITD, 0) as DECIMAL(38,4)) AS SalesServiceFee_ITD
FROM PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_SUM_ITD SC
LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST WSALE_CRM_CUSTMAST_SHIPTO
ON WSALE_CRM_CUSTMAST_SHIPTO.jdeaccountnum = SC.ShipToJDEAddrBookNumber
LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_CRM_CUSTMAST WSALE_CRM_CUSTMAST_BILLTO
ON WSALE_CRM_CUSTMAST_BILLTO.jdeaccountnum = SC.BillToJDEAddrBookNumber
WHERE Type_Flag <> 'Deferred Tax'
;);
--------------------------------------------------------------------------------

REPLACE MACRO PROD_EDW_BASE_VIEWS.m_Load_Comb_Cust_Prod_Sales(ReportingPeriod integer) as 
(
DELETE FROM PROD_EDW_BASE.WSALE_COMBINED_CUST_PROD_SALES WHERE Cal_Period = :ReportingPeriod;

INSERT INTO PROD_EDW_BASE.WSALE_COMBINED_CUST_PROD_SALES
Select 
-- Coalesce all Source columns. Every record is garunteed to have one, and we can use this to filter out all NULL results that join to BASE. Do not include BASE in coalesce for this reason
	COALESCE(CPMonth.Source, CPMonthPrior.Source, CPQtrs.Source, YTD.Source, CPQtrsPrior.Source, YTDPrior.Source) as allSource,
-- Dimensions
	Base.JDE_Bill_To, Base.JDE_Ship_to, Base.CRM_Ship_to_Name as Customer, Base.Supply_Point as WH, Base.Current_SM as SMAN, Base.Product_Code as PROD_CODE, Base.Product_Description as PRODUCT_NAME, Base.PCAT,
-- Current Month date values
	BASE.Cal_Period, 
	CAST(SUBSTR(Base.Cal_Period, 1, 4) as int) as CurrentYear,  
	CAST(SUBSTR(Base.Cal_Period, 5, 2) as int) as CurrentMonth,	
	CASE 
		WHEN CurrentMonth in (1, 2, 3) 		THEN  'Q1' 
		WHEN CurrentMonth in (4, 5, 6) 		THEN  'Q2' 
		WHEN CurrentMonth in (7, 8, 9) 		THEN  'Q3' 
		WHEN CurrentMonth in (10, 11, 12) 	THEN  'Q4' 
	END as Qtr, 
-- Current Month sales values
	ZeroIfNull(CPMonth.QTY) as Month_QTY, ZeroIfNull(CPMonth.Gallons) as Month_Gallons, ZeroIfNull(CPMonth.Sales) as Month_Sales, ZeroIfNull(CPMonth.Profit) as Month_Profit,
-- Prior Month date values
	NVL(CAST(CPMonthPrior.Period as varchar(6)), 'NA') as PriorPeriod,
-- Prior Month sales values
	ZeroIfNull(CPMonthPrior.QTY) as PriorMonth_QTY, ZeroIfNull(CPMonthPrior.Gallons) as PriorMonth_Gallons, ZeroIfNull(CPMonthPrior.Sales) as PriorMonth_Sales, ZeroIfNull(CPMonthPrior.Profit) as PriorMonth_Profit,
-- Current Quarter sales values
	ZeroIfNull(CPQtrs.Q1_QTY) as Q1_QTY, ZeroIfNull(CPQtrs.Q1_Gallons) as Q1_Gallons, ZeroIfNull(CPQtrs.Q1_Sales) as Q1_Sales, ZeroIfNull(CPQtrs.Q1_Profit) as Q1_Profit,
	ZeroIfNull(CPQtrs.Q2_QTY) as Q2_QTY, ZeroIfNull(CPQtrs.Q2_Gallons) as Q2_Gallons, ZeroIfNull(CPQtrs.Q2_Sales) as Q2_Sales, ZeroIfNull(CPQtrs.Q2_Profit) as Q2_Profit,
	ZeroIfNull(CPQtrs.Q3_QTY) as Q3_QTY, ZeroIfNull(CPQtrs.Q3_Gallons) as Q3_Gallons, ZeroIfNull(CPQtrs.Q3_Sales) as Q3_Sales, ZeroIfNull(CPQtrs.Q3_Profit) as Q3_Profit,
	ZeroIfNull(CPQtrs.Q4_QTY) as Q4_QTY, ZeroIfNull(CPQtrs.Q4_Gallons) as Q4_Gallons, ZeroIfNull(CPQtrs.Q4_Sales) as Q4_Sales, ZeroIfNull(CPQtrs.Q4_Profit) as Q4_Profit,
-- YTD Values
	ZeroIfNull(YTD.QTY) as YTD_QTY, ZeroIfNull(YTD.Gallons) as YTD_Gallons, ZeroIfNull(YTD.Sales) as YTD_Sales, ZeroIfNull(YTD.Profit) as YTD_Profit,
-- Prior Year, Current Month Values
	ZeroIfNull(CPPriorYrMonth.QTY) as PriorYear_QTY, ZeroIfNull(CPPriorYrMonth.Gallons) as PriorYear_Gallons, ZeroIfNull(CPPriorYrMonth.Sales) as PriorYear_Sales, ZeroIfNull(CPPriorYrMonth.Profit) as PriorYear_Profit,
-- Prior Qtr Values
	ZeroIfNull(CPQtrsPrior.Q1_QTY) as PriorQ1_QTY, ZeroIfNull(CPQtrsPrior.Q1_Gallons) as PriorQ1_Gallons, ZeroIfNull(CPQtrsPrior.Q1_Sales) as PriorQ1_Sales, ZeroIfNull(CPQtrsPrior.Q1_Profit) as PriorQ1_Profit,
	ZeroIfNull(CPQtrsPrior.Q2_QTY) as PriorQ2_QTY, ZeroIfNull(CPQtrsPrior.Q2_Gallons) as PriorQ2_Gallons, ZeroIfNull(CPQtrsPrior.Q2_Sales) as PriorQ2_Sales, ZeroIfNull(CPQtrsPrior.Q2_Profit) as PriorQ2_Profit,
	ZeroIfNull(CPQtrsPrior.Q3_QTY) as PriorQ3_QTY, ZeroIfNull(CPQtrsPrior.Q3_Gallons) as PriorQ3_Gallons, ZeroIfNull(CPQtrsPrior.Q3_Sales) as PriorQ3_Sales, ZeroIfNull(CPQtrsPrior.Q3_Profit) as PriorQ3_Profit,
	ZeroIfNull(CPQtrsPrior.Q4_QTY) as PriorQ4_QTY, ZeroIfNull(CPQtrsPrior.Q4_Gallons) as PriorQ4_Gallons, ZeroIfNull(CPQtrsPrior.Q4_Sales) as PriorQ4_Sales, ZeroIfNull(CPQtrsPrior.Q4_Profit) as PriorQ4_Profit,
-- Prior YTD Values 
	ZeroIfNull(YTDPrior.QTY) as PriorYTD_QTY, ZeroIfNull(YTDPrior.Gallons) as PriorYTD_Gallons, ZeroIfNull(YTDPrior.Sales) as PriorYTD_Sales, ZeroIfNull(YTDPrior.Profit) as PriorYTD_Profit
	,Current_Date as Create_Dttm
	,Current_Date as Last_Update_Dttm
FROM
(	
	select CAST(EXTRACT(YEAR From Cur_Date) as CHAR(4)) ||  CAST( (EXTRACT(Month From Cur_Date)  (format '99')) as char(2)) as Cal_Period, 
	CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM, Product_Code, Product_Description, PCAT
	from PROD_EDW_BASE_VIEWS.CUR_DATE
	CROSS JOIN
	PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT CP
	WHERE CAL_PERIOD = :ReportingPeriod and CP.Period = :ReportingPeriod
	GROUP BY Cal_Period, CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM, CP.Product_Code, CP.Product_Description, CP.PCAT
) BASE
LEFT OUTER JOIN
(
	Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, Product_Code, Product_Description, PCAT, Period, 
		SUM(SA_QTY) as  QTY, SUM(SA_Gallons) as  Gallons, SUM(SA_Sales) as Sales, SUM(SA_Profit)  as Profit
	from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
	WHERE Period is not null
	
	GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Period
) CPMonth
ON		CPMonth.JDE_Bill_To 			= BASE.JDE_Bill_To
AND 	CPMonth.JDE_Ship_To				= BASE.JDE_Ship_To
AND 	CPMonth.CRM_Ship_to_Name		= BASE.CRM_Ship_to_Name
AND 	CPMonth.Supply_Point 			= BASE.Supply_Point
AND 	CPMonth.Current_SM 				= BASE.Current_SM
AND 	CPMonth.Product_Code			= BASE.Product_Code
AND 	CPMonth.Product_Description		= BASE.Product_Description
AND 	CPMonth.PCAT					= BASE.PCAT
AND		CPMonth.Source					= BASE.Source
AND		CPMonth.Period					= Base.Cal_Period

-- Current Month, Prior Year
LEFT OUTER JOIN
(
	Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, Product_Code, Product_Description, PCAT, Period, 
		SUM(SA_QTY) as  QTY, SUM(SA_Gallons) as  Gallons, SUM(SA_Sales) as Sales, SUM(SA_Profit)  as Profit
	from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
	WHERE Period is not null
	
	GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Period
) CPPriorYrMonth
ON		CPPriorYrMonth.JDE_Bill_To 				= BASE.JDE_Bill_To
AND 	CPPriorYrMonth.JDE_Ship_To				= BASE.JDE_Ship_To
AND 	CPPriorYrMonth.CRM_Ship_to_Name			= BASE.CRM_Ship_to_Name
AND 	CPPriorYrMonth.Supply_Point 			= BASE.Supply_Point
AND 	CPPriorYrMonth.Current_SM 				= BASE.Current_SM
AND 	CPPriorYrMonth.Product_Code				= BASE.Product_Code
AND 	CPPriorYrMonth.Product_Description		= BASE.Product_Description
AND 	CPPriorYrMonth.PCAT						= BASE.PCAT
AND		CPPriorYrMonth.Source					= BASE.Source
AND		CPPriorYrMonth.Period	+100			= Base.Cal_Period

LEFT OUTER JOIN
(
	Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, Product_Code, Product_Description, PCAT, Period,
	CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) as Mnth, 
	CAST(SUBSTR(Cast(PERIOD as varchar(6)), 1, 4) as int) as Yr,
		SUM(SA_QTY) as  QTY, SUM(SA_Gallons) as  Gallons, SUM(SA_Sales) as Sales, SUM(SA_Profit)  as Profit
	from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
	WHERE Period is not null
	
	GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Period
) CPMonthPrior
ON 		
	(		(CurrentMonth -1 = CPMonthPrior.Mnth 				AND CurrentYear 	= CPMonthPrior.Yr)
	OR  	(CurrentMonth	 = 1 AND CPMonthPrior.Mnth = 12 	AND CurrentYear -1 	= CPMonthPrior.Yr)
	)
AND 	BASE.JDE_Bill_To 			= CPMonthPrior.JDE_Bill_To
AND 	BASE.JDE_Ship_To			= CPMonthPrior.JDE_Ship_To
AND 	BASE.CRM_Ship_to_Name		= CPMonthPrior.CRM_Ship_to_Name
AND 	BASE.Supply_Point 			= CPMonthPrior.Supply_Point
AND 	BASE.Current_SM 			= CPMonthPrior.Current_SM
AND 	BASE.Product_Code			= CPMonthPrior.Product_Code
AND 	BASE.Product_Description	= CPMonthPrior.Product_Description
AND 	BASE.PCAT					= CPMonthPrior.PCAT
AND		BASE.Source					= CPMonthPrior.Source

LEFT OUTER JOIN
(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Yr,
			SUM(Q1_QTY) as Q1_QTY, SUM(Q1_Gallons) as Q1_Gallons, SUM(Q1_Sales) as Q1_Sales, SUM(Q1_Profit) as Q1_Profit,
			SUM(Q2_QTY) as Q2_QTY, SUM(Q2_Gallons) as Q2_Gallons, SUM(Q2_Sales) as Q2_Sales, SUM(Q2_Profit) as Q2_Profit,
			SUM(Q3_QTY) as Q3_QTY, SUM(Q3_Gallons) as Q3_Gallons, SUM(Q3_Sales) as Q3_Sales, SUM(Q3_Profit) as Q3_Profit,
			SUM(Q4_QTY) as Q4_QTY, SUM(Q4_Gallons) as Q4_Gallons, SUM(Q4_Sales) as Q4_Sales, SUM(Q4_Profit) as Q4_Profit
		FROM
		(
				Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, Product_Code, Product_Description, PCAT,
				CASE 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (1, 2, 3) THEN  'Q1' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (4, 5, 6) THEN  'Q2' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (7, 8, 9) THEN  'Q3' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (10, 11, 12) THEN  'Q4' 
				END as QTR,
				CAST(SUBSTR(Cast(PERIOD as varchar(6)), 1, 4) as int) as Yr,
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_QTY) ELSE SUM(0) END as Q1_QTY, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_QTY) ELSE SUM(0) END as Q2_QTY, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_QTY) ELSE SUM(0) END as Q3_QTY, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_QTY) ELSE SUM(0) END as Q4_QTY, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q1_Gallons, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q2_Gallons, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q3_Gallons, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q4_Gallons, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Sales) ELSE SUM(0) END as Q1_Sales, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Sales) ELSE SUM(0) END as Q2_Sales, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Sales) ELSE SUM(0) END as Q3_Sales, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Sales) ELSE SUM(0) END as Q4_Sales, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Profit) ELSE SUM(0) END as Q1_Profit, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Profit) ELSE SUM(0) END as Q2_Profit, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Profit) ELSE SUM(0) END as Q3_Profit, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Profit) ELSE SUM(0) END as Q4_Profit
				from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
				WHERE Period is not null
				
				GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Period
		) ttl Group By Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Yr
) CPQtrs
ON 		CurrentYear						= CPQtrs.Yr
AND 	BASE.JDE_Bill_To 				= CPQtrs.JDE_Bill_To
AND 	BASE.JDE_Ship_To				= CPQtrs.JDE_Ship_To
AND 	BASE.CRM_Ship_to_Name			= CPQtrs.CRM_Ship_to_Name
AND 	BASE.Supply_Point 				= CPQtrs.Supply_Point
AND 	BASE.Current_SM 				= CPQtrs.Current_SM
AND 	BASE.Product_Code				= CPQtrs.Product_Code
AND 	BASE.Product_Description		= CPQtrs.Product_Description
AND 	BASE.PCAT						= CPQtrs.PCAT
AND		BASE.Source						= CPQtrs.Source

LEFT OUTER JOIN 
(
	Select Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.Product_Code, Cur.Product_Description, Cur.PCAT, Cur.Cal_Period,
	CAST(SUBSTR(Cast(Cur.Cal_PERIOD as varchar(6)), 5, 2) as int) as Mnth, 
	CAST(SUBSTR(Cast(Cur.Cal_PERIOD as varchar(6)), 1, 4) as int) as Yr, 
	SUM(Prev.QTY) as QTY, SUM(Prev.Gallons) as Gallons, SUM(Prev.Sales) as Sales, SUM(Prev.Profit) as Profit
	
	from 
	(	
		select CAST(EXTRACT(YEAR From Cur_Date) as CHAR(4)) ||  CAST( (EXTRACT(Month From Cur_Date)  (format '99')) as char(2)) as Cal_Period, 
		CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM, Product_Code, Product_Description, PCAT
		from PROD_EDW_BASE_VIEWS.CUR_DATE
		CROSS JOIN
		PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT CP
		WHERE CAL_PERIOD = :ReportingPeriod and CP.Period = :ReportingPeriod
		GROUP BY Cal_Period, CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM, CP.Product_Code, CP.Product_Description, CP.PCAT
	) Cur
	INNER JOIN 
	(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, Product_Code, Product_Description, PCAT,
		Period,
		SUM(SA_QTY) as QTY, SUM(SA_Gallons) as Gallons, SUM(SA_Sales) as Sales, SUM(SA_Profit) as Profit
		from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
		WHERE Period is not null
		GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Period
	) Prev

	ON 		Mnth 						   >= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 5, 2) as int)
	AND 	Yr 								= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 1, 4) as int)
	AND 	Cur.JDE_Bill_To 				= Prev.JDE_Bill_To
	AND 	Cur.JDE_Ship_To					= Prev.JDE_Ship_To
	AND 	Cur.CRM_Ship_to_Name			= Prev.CRM_Ship_to_Name
	AND 	Cur.Supply_Point				= Prev.Supply_Point
	AND 	Cur.Current_SM					= Prev.Current_SM
	AND 	Cur.Product_Code				= Prev.Product_Code
	AND 	Cur.Product_Description			= Prev.Product_Description
	AND 	Cur.PCAT						= Prev.PCAT
	GROUP BY Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.Product_Code, Cur.Product_Description, Cur.PCat, Cur.Cal_Period
) YTD
ON	CurrentYear 					= YTD.Yr
AND	CurrentMonth					= YTD.Mnth
AND BASE.JDE_Bill_To 				= YTD.JDE_Bill_To
AND BASE.JDE_Ship_To				= YTD.JDE_Ship_To
AND BASE.CRM_Ship_to_Name			= YTD.CRM_Ship_to_Name
AND BASE.Supply_Point				= YTD.Supply_Point
AND BASE.Current_SM					= YTD.Current_SM
AND BASE.Product_Code				= YTD.Product_Code
AND BASE.Product_Description		= YTD.Product_Description
AND BASE.PCAT						= YTD.PCAT
AND BASE.Source						= YTD.Source


LEFT OUTER JOIN
(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Yr,
			SUM(Q1_QTY) as Q1_QTY, SUM(Q1_Gallons) as Q1_Gallons, SUM(Q1_Sales) as Q1_Sales, SUM(Q1_Profit) as Q1_Profit,
			SUM(Q2_QTY) as Q2_QTY, SUM(Q2_Gallons) as Q2_Gallons, SUM(Q2_Sales) as Q2_Sales, SUM(Q2_Profit) as Q2_Profit,
			SUM(Q3_QTY) as Q3_QTY, SUM(Q3_Gallons) as Q3_Gallons, SUM(Q3_Sales) as Q3_Sales, SUM(Q3_Profit) as Q3_Profit,
			SUM(Q4_QTY) as Q4_QTY, SUM(Q4_Gallons) as Q4_Gallons, SUM(Q4_Sales) as Q4_Sales, SUM(Q4_Profit) as Q4_Profit
		FROM
		(
				Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, Product_Code, Product_Description, PCAT,
				CASE 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (1, 2, 3) THEN  'Q1' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (4, 5, 6) THEN  'Q2' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (7, 8, 9) THEN  'Q3' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (10, 11, 12) THEN  'Q4' 
				END as QTR,
				CAST(SUBSTR(Cast(PERIOD as varchar(6)), 1, 4) as int) as Yr,
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_QTY) ELSE SUM(0) END as Q1_QTY, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_QTY) ELSE SUM(0) END as Q2_QTY, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_QTY) ELSE SUM(0) END as Q3_QTY, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_QTY) ELSE SUM(0) END as Q4_QTY, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q1_Gallons, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q2_Gallons, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q3_Gallons, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Gallons) ELSE SUM(0) END as Q4_Gallons, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Sales) ELSE SUM(0) END as Q1_Sales, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Sales) ELSE SUM(0) END as Q2_Sales, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Sales) ELSE SUM(0) END as Q3_Sales, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Sales) ELSE SUM(0) END as Q4_Sales, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Profit) ELSE SUM(0) END as Q1_Profit, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Profit) ELSE SUM(0) END as Q2_Profit, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Profit) ELSE SUM(0) END as Q3_Profit, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Profit) ELSE SUM(0) END as Q4_Profit
				from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
				WHERE Period is not null
				
				GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Period
		) ttl Group By Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Yr
) CPQtrsPrior
ON 		CurrentYear -1					= CPQtrsPrior.Yr
AND 	BASE.JDE_Bill_To 				= CPQtrsPrior.JDE_Bill_To
AND		BASE.JDE_Ship_To				= CPQtrsPrior.JDE_Ship_To
AND 	BASE.CRM_Ship_to_Name			= CPQtrsPrior.CRM_Ship_to_Name
AND 	BASE.Supply_Point 				= CPQtrsPrior.Supply_Point
AND 	BASE.Current_SM 				= CPQtrsPrior.Current_SM
AND 	BASE.Product_Code				= CPQtrsPrior.Product_Code
AND 	BASE.Product_Description		= CPQtrsPrior.Product_Description
AND 	BASE.PCAT						= CPQtrsPrior.PCAT
AND		BASE.Source						= CPQtrsPrior.Source

LEFT OUTER JOIN 
(
	Select Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.Product_Code, Cur.Product_Description, Cur.PCAT, Cur.Cal_Period,
	CAST(SUBSTR(Cast(Cur.Cal_PERIOD as varchar(6)), 5, 2) as int) as Mnth, 
	CAST(SUBSTR(Cast(Cur.Cal_PERIOD as varchar(6)), 1, 4) as int) as Yr, 
	SUM(Prev.QTY) as QTY, SUM(Prev.Gallons) as Gallons, SUM(Prev.Sales) as Sales, SUM(Prev.Profit) as Profit
	from 
	(	
		/* We need to join to records from last year, YTD. Because CalPeriod is int, we cannot do normal date math
		Instead we add 1 year to the records we pull (so 2015 becomes 2016), and use that as a CalPeriod to join to /**/	
		select 
		CAST(EXTRACT(YEAR From Cur_Date)+1 as CHAR(4)) ||  CAST( (EXTRACT(Month From Cur_Date)  (format '99')) as char(2)) as joinCal_Period, 
		CAST(EXTRACT(YEAR From Cur_Date) as CHAR(4)) ||  CAST( (EXTRACT(Month From Cur_Date)  (format '99')) as char(2)) as Cal_Period, 
		CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM, Product_Code, Product_Description, PCAT
		from PROD_EDW_BASE_VIEWS.CUR_DATE 
		CROSS JOIN
		PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT CP
		WHERE joinCal_Period = :ReportingPeriod  and CP.Period = :ReportingPeriod 
		GROUP BY joinCal_Period, Cal_Period, CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM, CP.Product_Code, CP.Product_Description, CP.PCAT
	) Cur
	INNER JOIN 
	(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, Product_Code, Product_Description, PCAT,
		Period,
		SUM(SA_QTY) as QTY, SUM(SA_Gallons) as Gallons, SUM(SA_Sales) as Sales, SUM(SA_Profit) as Profit
		from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
		WHERE Period is not null
		
		GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Period
	) Prev

	ON 		Mnth 						   >= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 5, 2) as int)
	AND 	Yr 								= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 1, 4) as int)
	AND 	Cur.JDE_Bill_To 				= Prev.JDE_Bill_To
	AND 	Cur.JDE_Ship_To					= Prev.JDE_Ship_To
	AND 	Cur.CRM_Ship_to_Name			= Prev.CRM_Ship_to_Name
	AND 	Cur.Supply_Point				= Prev.Supply_Point
	AND 	Cur.Current_SM					= Prev.Current_SM
	AND 	Cur.Product_Code				= Prev.Product_Code
	AND 	Cur.Product_Description			= Prev.Product_Description
	AND 	Cur.PCAT						= Prev.PCAT
	GROUP BY Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.Product_Code, Cur.Product_Description, Cur.PCat, Cur.Cal_Period
) YTDPrior
ON	CPMonth.Source					= YTDPrior.Source
AND	CurrentYear -1 					= YTDPrior.Yr
AND	CurrentMonth					= YTDPrior.Mnth
AND BASE.JDE_Bill_To 				= YTDPrior.JDE_Bill_To
AND	BASE.JDE_Ship_To				= YTDPrior.JDE_Ship_To
AND BASE.CRM_Ship_to_Name			= YTDPrior.CRM_Ship_to_Name
AND BASE.Supply_Point				= YTDPrior.Supply_Point
AND BASE.Current_SM					= YTDPrior.Current_SM
AND BASE.Product_Code				= YTDPrior.Product_Code
AND BASE.Product_Description		= YTDPrior.Product_Description
AND BASE.PCAT						= YTDPrior.PCAT

WHERE allSource is not null
/******** UNION TO Ancillary Fee Records 
	- Rerun above query, but using Ancillary_Fees for Sales and setting PCAT to 29
**********/

UNION ALL
Select 
-- Coalesce all Source columns. Every record is garunteed to have one, and we can use this to filter out all NULL results that join to BASE. Do not include BASE in coalesce for this reason
	COALESCE(CPMonth.Source, CPMonthPrior.Source, CPQtrs.Source, YTD.Source, CPQtrsPrior.Source, YTDPrior.Source) as allSource,
-- Dimensions
	Base.JDE_Bill_To, Base.JDE_Ship_to, Base.CRM_Ship_to_Name as Customer, Base.Supply_Point as WH, Base.Current_SM as SMAN, Base.Product_Code as PROD_CODE, Base.Product_Description as PRODUCT_NAME, Base.PCAT,
-- Current Month date values
	BASE.Cal_Period, 
	CAST(SUBSTR(Base.Cal_Period, 1, 4) as int) as CurrentYear,  
	CAST(SUBSTR(Base.Cal_Period, 5, 2) as int) as CurrentMonth,	
	CASE 
		WHEN CurrentMonth in (1, 2, 3) 		THEN  'Q1' 
		WHEN CurrentMonth in (4, 5, 6) 		THEN  'Q2' 
		WHEN CurrentMonth in (7, 8, 9) 		THEN  'Q3' 
		WHEN CurrentMonth in (10, 11, 12) 	THEN  'Q4' 
	END as Qtr, 
-- Current Month sales values
	ZeroIfNull(CPMonth.QTY) as Month_QTY, 0 as Month_Gallons, ZeroIfNull(CPMonth.Sales) as Month_Sales, ZeroIfNull(CPMonth.Profit) as Month_Profit,
-- Prior Month date values
	NVL(CAST(CPMonthPrior.Period as varchar(6)), 'NA') as PriorPeriod,
-- Prior Month sales values
	ZeroIfNull(CPMonthPrior.QTY) as PriorMonth_QTY, 0 as PriorMonth_Gallons, ZeroIfNull(CPMonthPrior.Sales) as PriorMonth_Sales, ZeroIfNull(CPMonthPrior.Profit) as PriorMonth_Profit,
-- Current Quarter sales values
	ZeroIfNull(CPQtrs.Q1_QTY) as Q1_QTY, 0 as Q1_Gallons, ZeroIfNull(CPQtrs.Q1_Sales) as Q1_Sales, ZeroIfNull(CPQtrs.Q1_Profit) as Q1_Profit,
	ZeroIfNull(CPQtrs.Q2_QTY) as Q2_QTY, 0 as Q2_Gallons, ZeroIfNull(CPQtrs.Q2_Sales) as Q2_Sales, ZeroIfNull(CPQtrs.Q2_Profit) as Q2_Profit,
	ZeroIfNull(CPQtrs.Q3_QTY) as Q3_QTY, 0 as Q3_Gallons, ZeroIfNull(CPQtrs.Q3_Sales) as Q3_Sales, ZeroIfNull(CPQtrs.Q3_Profit) as Q3_Profit,
	ZeroIfNull(CPQtrs.Q4_QTY) as Q4_QTY, 0 as Q4_Gallons, ZeroIfNull(CPQtrs.Q4_Sales) as Q4_Sales, ZeroIfNull(CPQtrs.Q4_Profit) as Q4_Profit,
-- YTD Values
	ZeroIfNull(YTD.QTY) as YTD_QTY, 0 as YTD_Gallons, ZeroIfNull(YTD.Sales) as YTD_Sales, ZeroIfNull(YTD.Profit) as YTD_Profit,
-- Prior Year, CurrentMonth
	ZeroIfNull(YTDPrior.QTY) as PriorYear_QTY, 0 as PriorYear_Gallons, ZeroIfNull(YTDPrior.Sales) as PriorYearD_Sales, ZeroIfNull(YTDPrior.Profit) as PriorYear_Profit,
-- Prior Qtr Values
	ZeroIfNull(CPQtrsPrior.Q1_QTY) as PriorQ1_QTY, 0 as PriorQ1_Gallons, ZeroIfNull(CPQtrsPrior.Q1_Sales) as PriorQ1_Sales, ZeroIfNull(CPQtrsPrior.Q1_Profit) as PriorQ1_Profit,
	ZeroIfNull(CPQtrsPrior.Q2_QTY) as PriorQ2_QTY, 0 as PriorQ2_Gallons, ZeroIfNull(CPQtrsPrior.Q2_Sales) as PriorQ2_Sales, ZeroIfNull(CPQtrsPrior.Q2_Profit) as PriorQ2_Profit,
	ZeroIfNull(CPQtrsPrior.Q3_QTY) as PriorQ3_QTY, 0 as PriorQ3_Gallons, ZeroIfNull(CPQtrsPrior.Q3_Sales) as PriorQ3_Sales, ZeroIfNull(CPQtrsPrior.Q3_Profit) as PriorQ3_Profit,
	ZeroIfNull(CPQtrsPrior.Q4_QTY) as PriorQ4_QTY, 0 as PriorQ4_Gallons, ZeroIfNull(CPQtrsPrior.Q4_Sales) as PriorQ4_Sales, ZeroIfNull(CPQtrsPrior.Q4_Profit) as PriorQ4_Profit,
-- Prior YTD Values 
	ZeroIfNull(YTDPrior.QTY) as PriorYTD_QTY, 0 as PriorYTD_Gallons, ZeroIfNull(YTDPrior.Sales) as PriorYTD_Sales, ZeroIfNull(YTDPrior.Profit) as PriorYTD_Profit
	
	,Current_Date as Create_Dttm
	,Current_Date as Last_Update_Dttm
FROM
(	
	select CAST(EXTRACT(YEAR From Cur_Date) as CHAR(4)) ||  CAST( (EXTRACT(Month From Cur_Date)  (format '99')) as char(2)) as Cal_Period, 
	CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT
	from PROD_EDW_BASE_VIEWS.CUR_DATE
	CROSS JOIN
	PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT CP
	WHERE CAL_PERIOD = :ReportingPeriod and CP.Period = :ReportingPeriod
	GROUP BY Cal_Period, CP.Source, CP.JDE_Bill_To, CP.JDE_Ship_To, CP.CRM_Ship_to_Name,  CP.Supply_Point, CP.Current_SM
) BASE
LEFT OUTER JOIN
(
	Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT, Period, 
	SUM(SA_QTY) as QTY, SUM(SA_Ancillary) as Sales, SUM(SA_Ancillary) as Profit
	from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
	WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
	
	GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Period
) CPMonth
ON		CPMonth.JDE_Bill_To 			= BASE.JDE_Bill_To
AND 	CPMonth.JDE_Ship_To				= BASE.JDE_Ship_To
AND 	CPMonth.CRM_Ship_to_Name		= BASE.CRM_Ship_to_Name
AND 	CPMonth.Supply_Point 			= BASE.Supply_Point
AND 	CPMonth.Current_SM 				= BASE.Current_SM
AND 	CPMonth.Product_Code			= BASE.Product_Code
AND 	CPMonth.Product_Description		= BASE.Product_Description
AND 	CPMonth.PCAT					= BASE.PCAT
AND		CPMonth.Source					= BASE.Source
AND		CPMonth.Period					= Base.Cal_Period
-- Prior Year, CurrentMonth
LEFT OUTER JOIN
(
	Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT, Period, 
	SUM(SA_QTY) as QTY, SUM(SA_Ancillary) as Sales, SUM(SA_Ancillary) as Profit
	from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
	WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
	
	GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Period
) CPPriorYrMonth
ON		CPPriorYrMonth.JDE_Bill_To 			= BASE.JDE_Bill_To
AND 	CPPriorYrMonth.JDE_Ship_To			= BASE.JDE_Ship_To
AND 	CPPriorYrMonth.CRM_Ship_to_Name		= BASE.CRM_Ship_to_Name
AND 	CPPriorYrMonth.Supply_Point 		= BASE.Supply_Point
AND 	CPPriorYrMonth.Current_SM 			= BASE.Current_SM
AND 	CPPriorYrMonth.Product_Code			= BASE.Product_Code
AND 	CPPriorYrMonth.Product_Description	= BASE.Product_Description
AND 	CPPriorYrMonth.PCAT					= BASE.PCAT
AND		CPPriorYrMonth.Source				= BASE.Source
AND		CPPriorYrMonth.Period	+100		= Base.Cal_Period
LEFT OUTER JOIN
(
	Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT, Period,
	CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) as Mnth, 
	CAST(SUBSTR(Cast(PERIOD as varchar(6)), 1, 4) as int) as Yr,
	SUM(SA_QTY) as QTY, SUM(SA_Ancillary) as Sales, SUM(SA_Ancillary) as Profit
	from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
	WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
	
	GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Period
) CPMonthPrior
ON 		
	(		(CurrentMonth -1 = CPMonthPrior.Mnth 				AND CurrentYear 	= CPMonthPrior.Yr)
	OR  	(CurrentMonth	 = 1 AND CPMonthPrior.Mnth = 12 	AND CurrentYear -1 	= CPMonthPrior.Yr)
	)
AND 	BASE.JDE_Bill_To 			= CPMonthPrior.JDE_Bill_To
AND 	BASE.JDE_Ship_To			= CPMonthPrior.JDE_Ship_To
AND 	BASE.CRM_Ship_to_Name		= CPMonthPrior.CRM_Ship_to_Name
AND 	BASE.Supply_Point 			= CPMonthPrior.Supply_Point
AND 	BASE.Current_SM 			= CPMonthPrior.Current_SM
AND 	BASE.Product_Code			= CPMonthPrior.Product_Code
AND 	BASE.Product_Description	= CPMonthPrior.Product_Description
AND 	BASE.PCAT					= CPMonthPrior.PCAT
AND		BASE.Source					= CPMonthPrior.Source

LEFT OUTER JOIN
(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Yr,
			SUM(Q1_QTY) as Q1_QTY, SUM(Q1_Sales) as Q1_Sales, SUM(Q1_Profit) as Q1_Profit,
			SUM(Q2_QTY) as Q2_QTY, SUM(Q2_Sales) as Q2_Sales, SUM(Q2_Profit) as Q2_Profit,
			SUM(Q3_QTY) as Q3_QTY, SUM(Q3_Sales) as Q3_Sales, SUM(Q3_Profit) as Q3_Profit,
			SUM(Q4_QTY) as Q4_QTY, SUM(Q4_Sales) as Q4_Sales, SUM(Q4_Profit) as Q4_Profit
		FROM
		(
				Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT,
				CASE 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (1, 2, 3) THEN  'Q1' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (4, 5, 6) THEN  'Q2' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (7, 8, 9) THEN  'Q3' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (10, 11, 12) THEN  'Q4' 
				END as QTR,
				CAST(SUBSTR(Cast(PERIOD as varchar(6)), 1, 4) as int) as Yr,
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_QTY) ELSE SUM(0) END as Q1_QTY, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_QTY) ELSE SUM(0) END as Q2_QTY, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_QTY) ELSE SUM(0) END as Q3_QTY, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_QTY) ELSE SUM(0) END as Q4_QTY, 
								
				CASE QTR WHEN 'Q1' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q1_Sales, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q2_Sales, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q3_Sales, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q4_Sales, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q1_Profit, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q2_Profit, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q3_Profit, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q4_Profit
				from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
				WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
				
				GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Period
		) ttl Group By Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Yr
) CPQtrs
ON 		CurrentYear						= CPQtrs.Yr
AND 	BASE.JDE_Bill_To 				= CPQtrs.JDE_Bill_To
AND 	BASE.JDE_Ship_To				= CPQtrs.JDE_Ship_To
AND 	BASE.CRM_Ship_to_Name			= CPQtrs.CRM_Ship_to_Name
AND 	BASE.Supply_Point 				= CPQtrs.Supply_Point
AND 	BASE.Current_SM 				= CPQtrs.Current_SM
AND 	BASE.Product_Code				= CPQtrs.Product_Code
AND 	BASE.Product_Description		= CPQtrs.Product_Description
AND 	BASE.PCAT						= CPQtrs.PCAT
AND		BASE.Source						= CPQtrs.Source

LEFT OUTER JOIN 
(

	Select Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.Product_Code, Cur.Product_Description, Cur.PCAT, Cur.CAL_Period,
	CAST(SUBSTR(Cast(Cur.CAL_PERIOD as varchar(6)), 5, 2) as int) as Mnth, 
	CAST(SUBSTR(Cast(Cur.CAL_PERIOD as varchar(6)), 1, 4) as int) as Yr, 
	SUM(Prev.QTY) as QTY, SUM(Prev.Sales) as Sales, SUM(Prev.Profit) as Profit
	from 
	(
		Select CAST(EXTRACT(YEAR From Cur_Date) as CHAR(4)) ||  CAST( (EXTRACT(Month From Cur_Date)  (format '99')) as char(2)) as Cal_Period, Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT
		from PROD_EDW_BASE_VIEWS.CUR_DATE
		CROSS JOIN
		PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT CP
		WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
		AND CAL_PERIOD = :ReportingPeriod and CP.Period = :ReportingPeriod
		GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, CAL_Period
	) Cur
	INNER JOIN 
	(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT,
		Period,
		SUM(SA_QTY) as QTY, SUM(SA_Ancillary) as Sales, SUM(SA_Ancillary) as Profit
		from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
		WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
		
		GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Period
	) Prev

	ON 		Mnth 						   >= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 5, 2) as int)
	AND 	Yr 								= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 1, 4) as int)
	AND 	Cur.JDE_Bill_To 				= Prev.JDE_Bill_To
	AND 	Cur.JDE_Ship_To					= Prev.JDE_Ship_To
	AND 	Cur.CRM_Ship_to_Name			= Prev.CRM_Ship_to_Name
	AND 	Cur.Supply_Point				= Prev.Supply_Point
	AND 	Cur.Current_SM					= Prev.Current_SM
	AND 	Cur.Product_Code				= Prev.Product_Code
	AND 	Cur.Product_Description			= Prev.Product_Description
	AND 	Cur.PCAT						= Prev.PCAT
	GROUP BY Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.CAL_Period
) YTD
ON	CurrentYear 					= YTD.Yr
AND	CurrentMonth					= YTD.Mnth
AND BASE.JDE_Bill_To 				= YTD.JDE_Bill_To
AND BASE.JDE_Ship_To				= YTD.JDE_Ship_To
AND BASE.CRM_Ship_to_Name			= YTD.CRM_Ship_to_Name
AND BASE.Supply_Point				= YTD.Supply_Point
AND BASE.Current_SM					= YTD.Current_SM
AND BASE.Product_Code				= YTD.Product_Code
AND BASE.Product_Description		= YTD.Product_Description
AND BASE.PCAT						= YTD.PCAT
AND BASE.Source						= YTD.Source


LEFT OUTER JOIN
(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Product_Code, Product_Description, PCAT, Yr,
			SUM(Q1_QTY) as Q1_QTY, SUM(Q1_Sales) as Q1_Sales, SUM(Q1_Profit) as Q1_Profit,
			SUM(Q2_QTY) as Q2_QTY, SUM(Q2_Sales) as Q2_Sales, SUM(Q2_Profit) as Q2_Profit,
			SUM(Q3_QTY) as Q3_QTY, SUM(Q3_Sales) as Q3_Sales, SUM(Q3_Profit) as Q3_Profit,
			SUM(Q4_QTY) as Q4_QTY, SUM(Q4_Sales) as Q4_Sales, SUM(Q4_Profit) as Q4_Profit
		FROM
		(
				Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT,
				CASE 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (1, 2, 3) THEN  'Q1' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (4, 5, 6) THEN  'Q2' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (7, 8, 9) THEN  'Q3' 
					WHEN CAST(SUBSTR(Cast(PERIOD as varchar(6)), 5, 2) as int) in (10, 11, 12) THEN  'Q4' 
				END as QTR,
				CAST(SUBSTR(Cast(PERIOD as varchar(6)), 1, 4) as int) as Yr,
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_QTY) ELSE SUM(0) END as Q1_QTY, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_QTY) ELSE SUM(0) END as Q2_QTY, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_QTY) ELSE SUM(0) END as Q3_QTY, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_QTY) ELSE SUM(0) END as Q4_QTY, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q1_Sales, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q2_Sales, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q3_Sales, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q4_Sales, 
				
				CASE QTR WHEN 'Q1' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q1_Profit, 
				CASE QTR WHEN 'Q2' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q2_Profit, 
				CASE QTR WHEN 'Q3' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q3_Profit, 
				CASE QTR WHEN 'Q4' THEN SUM(SA_Ancillary) ELSE SUM(0) END as Q4_Profit
				from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
				WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
				
				GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, Period
		) ttl Group By Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Yr
) CPQtrsPrior
ON 		CurrentYear -1					= CPQtrsPrior.Yr
AND 	BASE.JDE_Bill_To 				= CPQtrsPrior.JDE_Bill_To
AND		BASE.JDE_Ship_To				= CPQtrsPrior.JDE_Ship_To
AND 	BASE.CRM_Ship_to_Name			= CPQtrsPrior.CRM_Ship_to_Name
AND 	BASE.Supply_Point 				= CPQtrsPrior.Supply_Point
AND 	BASE.Current_SM 				= CPQtrsPrior.Current_SM
AND 	BASE.Product_Code				= CPQtrsPrior.Product_Code
AND 	BASE.Product_Description		= CPQtrsPrior.Product_Description
AND 	BASE.PCAT						= CPQtrsPrior.PCAT
AND		BASE.Source						= CPQtrsPrior.Source

LEFT OUTER JOIN 
(
	Select Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.Product_Code, Cur.Product_Description, Cur.PCAT, Cur.CAL_Period,
	CAST(SUBSTR(Cast(Cur.CAL_PERIOD as varchar(6)), 5, 2) as int) as Mnth, 
	CAST(SUBSTR(Cast(Cur.CAL_PERIOD as varchar(6)), 1, 4) as int) as Yr, 
	SUM(Prev.QTY) as QTY, SUM(Prev.Sales) as Sales, SUM(Prev.Profit) as Profit
	from 
	(
		Select CAST(EXTRACT(YEAR From Cur_Date) as CHAR(4)) ||  CAST( (EXTRACT(Month From Cur_Date)  (format '99')) as char(2)) as Cal_Period, Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT
		from PROD_EDW_BASE_VIEWS.CUR_DATE
		CROSS JOIN
		PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT CP
		WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
		AND CAL_PERIOD = :ReportingPeriod and CP.Period = :ReportingPeriod
		GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, Current_SM, CAL_Period
	) Cur
	INNER JOIN 
	(
		Select Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name,  Supply_Point, COALESCE(Current_SM, '') as Current_SM, 'Ancillary Fees' as Product_Code, 'Ancillary Fees' as Product_Description, 29 as PCAT,
		Period,
		SUM(SA_QTY) as QTY, SUM(SA_Ancillary) as Sales, SUM(SA_Ancillary) as Profit
		from PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
		WHERE Period is not null AND SA_Ancillary is not null AND SA_Ancillary <> 0
		
		GROUP BY Source, JDE_Bill_To, JDE_Ship_To, CRM_Ship_to_Name, Supply_Point, Current_SM, Period
	) Prev

	ON 		Mnth 						   >= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 5, 2) as int)
	AND 	Yr 								= CAST(SUBSTR(Cast(Prev.PERIOD as Varchar(6)), 1, 4) as int)
	AND 	Cur.JDE_Bill_To 				= Prev.JDE_Bill_To
	AND		Cur.JDE_Ship_To					= Prev.JDE_Ship_To
	AND 	Cur.CRM_Ship_to_Name			= Prev.CRM_Ship_to_Name
	AND 	Cur.Supply_Point				= Prev.Supply_Point
	AND 	Cur.Current_SM					= Prev.Current_SM
	AND 	Cur.Product_Code				= Prev.Product_Code
	AND 	Cur.Product_Description			= Prev.Product_Description
	AND 	Cur.PCAT						= Prev.PCAT
	AND		Cur.Source						= Prev.Source
	GROUP BY Cur.Source, Cur.JDE_Bill_To, Cur.JDE_Ship_To, Cur.CRM_Ship_to_Name, Cur.Supply_Point, Cur.Current_SM, Cur.CAL_Period
) YTDPrior
ON	CurrentYear -1 					= YTDPrior.Yr
AND	CurrentMonth					= YTDPrior.Mnth
AND BASE.JDE_Bill_To 				= YTDPrior.JDE_Bill_To
AND	BASE.JDE_Ship_To				= YTDPrior.JDE_Ship_To
AND BASE.CRM_Ship_to_Name			= YTDPrior.CRM_Ship_to_Name
AND BASE.Supply_Point				= YTDPrior.Supply_Point
AND BASE.Current_SM					= YTDPrior.Current_SM
AND BASE.Product_Code				= YTDPrior.Product_Code
AND BASE.Product_Description		= YTDPrior.Product_Description
AND BASE.PCAT						= YTDPrior.PCAT
AND BASE.Source						= YTDPrior.Source

WHERE allSource is not null;
);
--------------------------------------------------------------------------------

/* Load Purch w/ Dummy Records */
Replace Macro PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy (ReportingPeriod INTEGER) as 
(
INSERT INTO PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP
Select PURCH.SalesDataType,
PURCH.OrderType,
PURCH.SourceType,
PURCH.TransactionTypeID,
PURCH.DlHdrID,
PURCH.BOL,
PURCH.MovementDate,
PURCH.OriginLocaleID,
PURCH.DestLocaleID,
PURCH.TransactionType,
'Dummy Record' as InvoiceNumber,
:ReportingPeriod,
PURCH.PeriodVolume,
PURCH.UOM,
PURCH.PeriodValue,
PURCH.PeriodUnitCost,
PURCH.Origin,
PURCH.Destination,
PURCH.Destination_Trm,
PURCH.ContractNumber,
PURCH.BANme,
PURCH.JDEAddressBookNumber,
PURCH.ARFedDate,
PURCH.DestAddressOne,
PURCH.DestAddressTwo,
PURCH.DestCity,
PURCH.DestState,
PURCH.DestZipCode,
PURCH.PointOfOrigin,
PURCH.InvoiceCreationDate,
PURCH.ProvisionName,
PURCH.MaxProvisionPriceService,
PURCH.MinProvisionPriceService,
PURCH.SalesmanCode,
PURCH.DriverName,
PURCH.TruckNumber,
PURCH.TMWOrderNumber,
PURCH.LiftingNumber,
PURCH.Carrier,
PURCH.MovementType,
PURCH.DestJDEAddBookNum,
PURCH.InternalBANme,
PURCH.IBAJDEAddBookNum,
PURCH.PCAT,
PURCH.TransactionTypeGroup,
PURCH.InvoiceTypeID,
PURCH.CR_Indicator,
current_Date,
Current_Date
FROM PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP PURCH
INNER JOIN 
	( SELECT BOL, PCAT, OriginLocaleID, OrderType, MovementDate, MAX(JDEAccountingPeriod) as MaxJDEAcctPeriod FROM PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP GROUP BY BOL, PCAT, OriginLocaleID, OrderType, MovementDate where InvoiceNumber <> 'Dummy Record') MAX_PURCH
ON PURCH.BOL 							= MAX_PURCH.BOL AND
	   PURCH.PCAT							= MAX_PURCH.PCAT AND
	   PURCH.OriginLocaleID			= MAX_PURCH.OriginLocaleID AND
	   PURCH.MovementDate			= MAX_PURCH.MovementDate AND
	   PURCH.JDEAccountingPeriod	= MAX_PURCH.MaxJDEAcctPeriod
INNER JOIN PROD_EDW_BASE_VIEWS.WSale_RA_SALESDAT_SLSD_GRP SALES
ON PURCH.BOL 						= SALES.BOL AND
		PURCH.PCAT 					= SALES.PCAT AND
		PURCH.OriginLocaleID 		= SALES.OriginLocaleID AND
		PURCH.OrderType				= SALES.OrderType AND
		(
			( PURCH.OrderType = 'D' AND cast(SALES.MovementDate as date)		between  CAST(PURCH.MovementDate as Date)-7 and CAST(PURCH.MovementDate as Date)+7 ) OR
			( PURCH.OrderType = 'F' AND cast(SALES.MovementDate as date)	= cast(PURCH.MovementDate as Date) )
		) AND
		PURCH.JDEAccountingPeriod < SALES.JDEAccountingPeriod AND
		SALES.JDEAccountingPeriod = :ReportingPeriod;
);
--------------------------------------------------------------------------------

CREATE MACRO PROD_EDW_BASE_VIEWS.m_Load_RA_COMBINED_FULL as 
(

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201404);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201404);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201404);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201405);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201405);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201405);


exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201406);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201406);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201406);


exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201407);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201407);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201407);


exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201408);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201408);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201408);


exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201409);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201409);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201409);


exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201410);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201410);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201410);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201411);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201411);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201411);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201412);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201412);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201412);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201501);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201501);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201501);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201502);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201502);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201502);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201503);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201503);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201503);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201504);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201504);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201504);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201505);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201505);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201505);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201506);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201506);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201506);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201507);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201507);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201507);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201508);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201508);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201508);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201509);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201509);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201509);

exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP(201510);
exec PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy(201510);
exec PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month(201510);

--exec PROD_EDW_BASE_VIEWS.m_Load_Combined_Salesdat;
);
--------------------------------------------------------------------------------

Replace Macro PROD_EDW_BASE_VIEWS.m_Load_RA_PREV_SLS_GRP ( ReportingPeriod Integer) as  (
INSERT INTO PROD_EDW_BASE.WSALE_RA_PREV_SLS_GRP
Select Distinct
MAX(PRESL.AccountDetailSource) as AccountDetailSource,
PRESL.TransactionTypeGroup,
PRESL.MovementDate,
MAX(PRESL.SalesDataType) as SalesdataType,
MAX(PRESL.TransactionTypeID) as TransactionTypeID,
MAX(PRESL.OrderType) as OrderType,
Max(PRESL.SourceType) as SourceType,
MAX(DlHdrID) as DlHdrID,
PRESL.BOL,
MAX(PRESL.OriginLocaleID) as OriginLocaleID,
MAX(PRESL.DestLocaleID) as DestLocaleID,
MAX(PRESL.TransactionType) as TransactionType,
MAX(PRESL.InvoiceNumber) as InvoiceNumber,
MAX(PRESL.JDEAccountingPeriod) as JDEAccountingPeriod,
MAX(PRESL.AccountingPeriod) as AccountingPeriod,
MAX(PRESL.Origin) as Origin,
MAX(PRESL.Destination) as Destination,
MAX(PRESL.Destination_Trm) as Destination_Trm,
MAX(PRESL.ContractNumber) as ContractNumber,
MAX(PRESL.BANme) as BANme,
MAX(PRESL.JDEAddressBookNumber) as JDEAddressBookNumber,
MAX(PRESL.ARFedDate) as ARFedDate,
MAX(PRESL.DestAddressOne) as DestAddressOne,
MAX(PRESL.DestAddressTwo) as DestAddressTwo,
MAX(PRESL.DestCity) as DestCity,
MAX(PRESL.DestState) as DestState,
MAX(PRESL.DestZipCode) as DestZipCode,
MAX(PRESL.PointOfOrigin) as PointOfOrigin,
MAX(PRESL.InvoiceCreationDate) as InvoiceCreationDate,
MAX(PRESL.ProvisionName) as ProvisionName,
MAX(PRESL.MaxProvisionPriceService) as MaxProvisionPriceService,
MAX(PRESL.MinProvisionPriceService) as MinProvisionPriceService,
MAX(PRESL.SalesmanCode) as SalesmanCode,
MAX(PRESL.DriverName) as DriverName,
MAX(PRESL.TruckNumber) as TruckNumber,
MAX(PRESL.TMWOrderNumber) as TMWOrderNumber,
MAX(PRESL.LiftingNumber) as LiftingNumber,
MAX(PRESL.MovementType) as MovementType,
MAX(PRESL.FTAProductCode) as FTAProductCode,
MAX(PRESL.DestJDEAddBookNum) as DestJDEAddBookNum,
MAX(PRESL.UOM) as UOM,
MAX(PRESL.InternalBANme) as InternalBANme,
MAX(PRESL.IBAJDEAddBookNum) as IBAJDEAddBookNum,
MAX(PRESL.Carrier) as Carrier,
PRESL.PCAT,
SUM(PRESL.Sales_Price) as Prev_Sales_Price, 
SUM(SUM_Frt_Purch_Price) as Prev_Frt_Purch_Price,
SUM(SUM_EqpChg_Price) as Prev_SUM_EqpChg_Price,
SUM(PRESL.Vol_Sold) as Prev_Vol_Sold,
Current_Date as Create_Dttm,
Current_Date as Last_Update_Dttm
FROM
	(Select 
		SLS.SalesDataType,
		SLS.OrderType,
		SLS.SourceType,
		SLS.TransactionTypeGroup,
		SLS.TransactionTypeID,
		SLS.DlHdrID,
		SLS.BOL,
		SLS.MovementDate,
		SLS.OriginLocaleID,
		SLS.DestLocaleID,
		SLS.TransactionType,
		SLS.InvoiceNumber,
		PURCH.JDEAccountingPeriod,
		SLS.AccountingPeriod,
		SLS.Origin,
		SLS.Destination,
		SLS.Destination_Trm,
		SLS.ContractNumber,
		SLS.BANme,
		SLS.JDEAddressBookNumber,
		SLS.ARFedDate,
		SLS.DestAddressOne,
		SLS.DestAddressTwo,
		SLS.DestCity,
		SLS.DestState,
		SLS.DestZipCode,
		SLS.PointOfOrigin,
		SLS.InvoiceCreationDate,
		SLS.ProvisionName,
		SLS.MaxProvisionPriceService,
		SLS.MinProvisionPriceService,
		SLS.SalesmanCode,
		SLS.DriverName,
		SLS.TruckNumber,
		SLS.TMWOrderNumber,
		SLS.LiftingNumber,
		SLS.MovementType,
		SLS.AccountDetailSource,
		SLS.FTAProductCode,
		SLS.DestJDEAddBookNum,
		SLS.UOM,
		SLS.InternalBANme,
		SLS.IBAJDEAddBookNum,
		SLS.Carrier,
		SLS.PCAT,
		SLS.Sales_Price, 
		Frt_Side.SUM_Frt_Purch_Price,--Prev_Sale_Freight_Charge,
		EqpChg_Side.Tot_DFI_Value as SUM_EqpChg_Price,--Prev_Sale_Equip_Charge,
		SLS.Vol_Sold
	FROM PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SLSD_GRP SLS
	-- Make sure there are purch records in this period, otherwise no point in loading
	INNER JOIN PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP PURCH
	ON PURCH.BOL 					= SLS.BOL AND
		PURCH.PCAT 					= SLS.PCAT AND
		PURCH.OriginLocaleID 		= SLS.OriginLocaleID AND
		PURCH.OrderType				= SLS.OrderType AND
		(
			( PURCH.OrderType = 'D' AND cast(SLS.MovementDate as date)		between  CAST(PURCH.MovementDate as Date)-7 and CAST(PURCH.MovementDate as Date)+7 ) OR
			( PURCH.OrderType = 'F' AND cast(SLS.MovementDate as date)	= cast(PURCH.MovementDate as Date) )
		) AND
		PURCH.JDEAccountingPeriod > SLS.JDEAccountingPeriod AND
		PURCH.JDEAccountingPeriod = :ReportingPeriod
		
	-- Anti Join, "WHERE Cur_SLS IS NULL" in Query Filter
	-- No point in pulling forward sales if we have sales for this period. Credit / rebill sales get their own record, and this load is only for later purchases 06/2016 SC 
	LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SLSD_GRP CUR_SLS
	ON  PURCH.BOL 					= CUR_SLS.BOL AND
		PURCH.PCAT 					= CUR_SLS.PCAT AND
		PURCH.OriginLocaleID 		= CUR_SLS.OriginLocaleID AND
		PURCH.OrderType				= CUR_SLS.OrderType AND
		(
			( PURCH.OrderType = 'D' AND cast(SLS.MovementDate as date)		between  CAST(PURCH.MovementDate as Date)-7 and CAST(PURCH.MovementDate as Date)+7 ) OR
			( PURCH.OrderType = 'F' AND cast(SLS.MovementDate as date)	= cast(PURCH.MovementDate as Date) )
		) AND
		PURCH.JDEAccountingPeriod = CUR_SLS.JDEAccountingPeriod
	-- Find Freight Charges
	left outer join
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										cast(MovementDate as Date) as MvDate,
										sum(DFI_Value) as Sum_Frt_Purch_Price,
										sum(volume) as tot_vol, 
										sum((DFI_Value))/sum(volume) as frt_purch_unit_price 
					from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT 
					where 		TransactionTypeGroup = 'Freight Purchase Price' 
					group by		BOL, PCAT, DestLocaleID, MvtHdrID, cast(MovementDate as Date)
					having		tot_vol <> 0
					) Frt_Side on
					SLS.BOL 						=	Frt_Side.BOL and	
					SLS.PCAT 						=	Frt_Side.PCAT and	
					SLS.DestLocaleID				=	Frt_Side.DestLocaleID and
					SLS.MvtHdrID					=	Frt_Side.MvtHdrID and
					cast(SLS.MovementDate as date) 	=  	Frt_Side.MvDate
	-- Find Equipment Charges
	left outer join
					(
					select 			BOL, 
										PCAT, 
										OriginLocaleID,
										DestLocaleID,
										BANme as Vendor,
										cast(MovementDate as Date) as MvDate, 
										sum(volume) as tot_vol, 
										sum((DFI_Value*-1)) as Tot_DFI_Value
					 from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT  
					 where 		TransactionTypeGroup = 'Purchase Equipment Charges'  
					group by 	BOL, PCAT, OriginLocaleID, DestLocaleID, BANme, cast(MovementDate as Date)
					having 		tot_vol <> 0
					) EqpChg_Side on
					SLS.BOL 						=	EqpChg_Side.BOL and	
					SLS.PCAT 						=	EqpChg_Side.PCAT and	
					SLS.OriginLocaleID				=	EqpChg_Side.OriginLocaleID and
					SLS.DestLocaleID				=	EqpChg_Side.DestLocaleID and
					cast(SLS.MovementDate as date)	=  	EqpChg_Side.MvDate 
	WHERE SLS.JDEAccountingPeriod <= :ReportingPeriod
	and Cur_SLS.BOL IS NULL
	) PRESL
GROUP BY PRESL.BOL, PRESL.PCAT, PRESL.MovementDate, PRESL.TransactionTypeGroup;
);
--------------------------------------------------------------------------------

/* Load Purch */
Replace Macro PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP ( ReportingPeriod Integer) as  (

INSERT INTO PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP
Select  SalesDataType,
OrderType,
SourceType,
TransactionTypeID,
DlHdrID,
BOL,
MovementDate,
OriginLocaleID,
DestLocaleID,
TransactionType,
'Original' as InvoiceNumber,
cJDEAccountingPeriod,
PeriodVolume,
UOM,
PeriodValue,
ABS(PeriodValue / PeriodVolume) as PeriodUnitCost,
--ABS(UnitPrice)) as PeriodUnitPrice, -- Added ABS to fix negative UC for BOL 180797
--PeriodUnitCost,
Origin,
Destination,
Destination_Trm,
ContractNumber,
BANme,
JDEAddressBookNumber,
ARFedDate,
DestAddressOne,
DestAddressTwo,
DestCity,
DestState,
DestZipCode,
PointOfOrigin,
InvoiceCreationDate,
ProvisionName,
MaxProvisionPriceService,
MinProvisionPriceService,
SalesmanCode,
DriverName,
TruckNumber,
TMWOrderNumber,
LiftingNumber,
Carrier,
MovementType,
DestJDEAddBookNum,
InternalBANme,
IBAJDEAddBookNum,
PCAT,
TransactionTypeGroup,
InvoiceTypeID,
cCR_Indicator,
Cur_Date,
Last_Date from (
Select 
					MAX(SalesDataType) as SalesDataType,
					OrderType,
					MAX(SourceType) as SourceType,
					TransactionTypeID,
					MAX(DlHdrID) as DlHdrID,
					BOL,
					MovementDate,
					OriginLocaleID,
					MAX(DestLocaleID) as DestLocaleID,
					MAX(TransactionType) as TransactionType,
					InvoiceNumber,
					cJDEAccountingPeriod,
					SUM(Volume) as PeriodVolume,
				--	SUM(PeriodVolume) Over (Partition by BOL, BANME, PCAT) as ITDVolume,
					UOM,
					SUM(DFI_Value) as PeriodValue,
				--	SUM(PeriodValue) Over (Partition by BOL, BANME, PCAT) as ITDValue,
					ABS(SUM(UnitPrice)) as PeriodUnitPrice, -- Added ABS to fix negative UC for BOL 180797
				--	SUM(PeriodUnitCost) over (Partition by BOL, Banme, PCAT) as ITDUnitCust,
				--	Product,
	    			MAX(Origin) as Origin,
					MAX(Destination) as Destination,
					MAX(Destination_Trm) as Destination_Trm,
					MAX(ContractNumber) as ContractNumber,
					BANme,
					JDEAddressBookNumber,
					MAX(ARFedDate) as ARFedDate,
					MAX(DestAddressOne) as DestAddressOne,
					MAX(DestAddressTwo) as DestAddressTwo,
					MAX(DestCity) as DestCity,
					MAX(DestState) as DestState,
					MAX(DestZipCode) as DestZipCode,
					MAX(PointOfOrigin) as PointOfOrigin,
					MAX(InvoiceCreationDate) as InvoiceCreationDate,
					MAX(ProvisionName) as ProvisionName,
					MAX(MaxProvisionPriceService) as MaxProvisionPriceService,
					MAX(MinProvisionPriceService) as MinProvisionPriceService,
					SalesmanCode,
					MAX(DriverName) as DriverName,
					MAX(TruckNumber) as TruckNumber,
					MAX(TMWOrderNumber) as TMWOrderNumber,
					MAX(LiftingNumber) as LiftingNumber,
					MAX(MovementType) as MovementType,
					MAX(DestJDEAddBookNum) as DestJDEAddBookNum,
					InternalBANme,
					IBAJDEAddBookNum,
					MAX(Carrier) as Carrier,
					PCAT,
					TransactionTypeGroup,
					InvoiceTypeID,
					MAX(CR_Indicator) as cCR_Indicator,
					Cur_Date,
					Last_Date
FROM (
select 			Purch_Side.SalesDataType,
					Purch_Side.OrderType,
					Purch_Side.SourceType,
					Purch_Side.TransactionTypeID,
					Purch_Side.DlHdrID,
					Purch_Side.BOL,
					Purch_Side.MovementDate,
					Purch_Side.OriginLocaleID,
					Purch_Side.DestLocaleID,
					Purch_Side.TransactionType,
					Purch_Side.InvoiceNumber,
					-- Get JDE Accounting Period. If Not Found in JDE_411, use JDE_911 instead
					cJDEAccountingPeriod,
				--	Purch_Side.Product,
	    			Purch_Side.Origin,
					Purch_Side.Destination,
					case when substring(Purch_Side.Destination from 4 for 1)=' ' then substring(Purch_Side.Destination from 5 for (length(Purch_Side.Destination)-4)) 
					else	Purch_Side.Destination end Destination_Trm,
					Purch_Side.UOM,
					Purch_Side.ContractNumber,
					Purch_Side.BANme,
					Purch_Side.JDEAddressBookNumber,
					Purch_Side.ARFedDate,
					Purch_Side.DestAddressOne,
					Purch_Side.DestAddressTwo,
					Purch_Side.DestCity,
					Purch_Side.DestState,
					Purch_Side.DestZipCode,
					Purch_Side.PointOfOrigin,
					Purch_Side.InvoiceCreationDate,
					Purch_Side.ProvisionName,
					Purch_Side.MaxProvisionPriceService,
					Purch_Side.MinProvisionPriceService,
					Purch_Side.SalesmanCode,
					Purch_Side.DriverName,
					Purch_Side.TruckNumber,
					Purch_Side.TMWOrderNumber,
					Purch_Side.LiftingNumber,
					Purch_Side.MovementType,
					Purch_Side.AccountDetailSource,
					--Purch_Side.FTAProductCode,
					Purch_Side.DestJDEAddBookNum,
					Purch_Side.InternalBANme,
					Purch_Side.IBAJDEAddBookNum,
					Purch_Side.Carrier,
					Purch_Side.PCAT,
					Purch_Side.TransactionTypeGroup,
					Purch_Side.Volume,
					Purch_Side.DFI_Value,
					CASE WHEN VOLUME > 0 THEN (DFI_Value / Volume) *-1 ELSE (DFI_Value / Volume) END as UnitPrice,
					Purch_Side.InvoiceTypeID,
					CASE WHEN VOLUME < 0 THEN 1 ELSE 0 END as CR_Indicator,
					Current_Date as Cur_Date,
					Current_Date as Last_Date
from 			PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_PURCH_STG Purch_Side
where 		Purch_Side.TransactionTypeGroup in ('Purchase Price Rack','Purchase Price Delivered') 
AND cJDEAccountingPeriod <= :ReportingPeriod
and Volume <> 0  AND UnitPrice <> 0 AND Volume is not null
) SC
group by
					OrderType,
					TransactionTypeID,
					BOL,
					MovementDate,
					OriginLocaleID,
					-- DestLocaleID, Removed, 03/02, to solve duplication of values on BOL 497607
					InvoiceNumber,
					cJDEAccountingPeriod,
					UOM,
					BANme,
					JDEAddressBookNumber,
					SalesmanCode,
					InternalBANme,
					IBAJDEAddBookNum,
					PCAT,
					TransactionTypeGroup,
					InvoiceTypeID,
					Cur_Date,
					Last_Date
	HAVING SUM(SC.Volume) <> 0	
					) ttl where cJDEAccountingPeriod between :ReportingPeriod and :ReportingPeriod ;);
--------------------------------------------------------------------------------

Replace Macro PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month (ReportingPeriod integer) as 
(

DELETE FROM PROD_EDW_BASE.WSale_RA_Salesdat_SUM_ITD where JDEAccountingPeriod = :ReportingPeriod;

INSERT INTO PROD_EDW_BASE.WSale_RA_Salesdat_SUM_ITD
Select 
CASE
	WHEN STG.c_Purch_CR_Indicator = 1 AND PeriodPurchPrice < 0 
		THEN 'CR Purchase'
	WHEN STG.c_Purch_CR_Indicator = 1 AND PeriodPurchPrice > 0
		THEN 'RB Purchase'
	WHEN STG.Type_Flag IN ('Sales - FOB', 'Sales - DFI', 'Sale, No Purchase - FOB', 'Sale, No Purchase - DFI') AND SalesPrice < 0 AND PurchPrice <> 0 -- AND PurchPrice_ITD <> 0 DISABLED 06/09, 
		THEN 'CR Sales'
	WHEN STG.Type_Flag IN ('Sales - FOB', 'Sales - DFI', 'Sale, No Purchase - FOB', 'Sale, No Purchase - DFI') AND STG.AvgAcctPrd <> STG.JDEAccountingPeriod AND PurchPrice_ITD <> 0 AND PeriodPurchPrice = 0 
		THEN 'Sale, Previous Purchase'
	ELSE STG.Type_Flag END as Type_Flag,	
STG.JDEAccountingPeriod,
STG.GL_Date,
STG.AccountingPeriod,
STG.SalesmanCode,
STG.Current_SalesmanCode,
STG.BillToJDEAddrBookNumber,
STG.ShipToJDEAddrBookNumber,
STG.VendorJDEAddrBookNumber,
STG.BANme, 
STG.PCAT,
STG.InvoiceNumber,
STG.MovementDate as MovementDateTime,
CAST(STG.MovementDate as Date) as cMovementDate,
cast(cast(CAST(STG.MovementDate AS char(19)) as TIMESTAMP(0)) as time(0)) as MovementTime,
STG.OriginLocaleID,
STG.BOL,
STG.UOM,
STG.cVolume, 
STG.cGrossVolume,
STG.Prev_Sales_Vol,

--				STG.Purch_Volume,
--				STG.Avg_Purch_Volume,
STG.cSalesPrice as SalesPrice, 
STG.Prev_Sales_Price,
STG.FreightSalesPrice,
STG.cSalesPrice + STG.FreightSalesPrice + STG.SalesServiceFee as PeriodTotalSales,
STG.Tax, 
Period_UnitPrice,
PeriodPurchPrice,
ZeroIfNull(STG.Ancillary_Fees) as Ancillary_Fees,
CASE WHEN STG.Type_Flag <> 'Purchase, Previous Sales' AND STG.PeriodRank <> 1 THEN 
			CASE WHEN STG.cSalesPrice < 0 THEN STG.EquipmentCharge_ITD * -1 ELSE STG.EquipmentCharge_ITD END
ELSE STG.EquipmentCharge END as PeriodEquipmentCharge,
STG.Prev_Sale_Equip_Charge, 
CASE WHEN STG.ProvisionName = 'FMI Temporary Allowance' THEN 0 ELSE  CASE WHEN STG.Type_Flag <> 'Purchase, Previous Sales' AND STG.PeriodRank <> 1 THEN 
			CASE WHEN STG.cSalesPrice < 0 THEN STG.FrtPurchPrice_ITD * -1 ELSE STG.FrtPurchPrice_ITD END
ELSE STG.FrtPurchPrice END END as PeriodFrtPurchPrice,

STG.Prev_Sale_Freight_Charge,
STG.AdditiveType,
STG.AdditiveValue,
PeriodPurchPrice + PeriodEquipmentCharge + PeriodFrtPurchPrice + AdditiveValue as PeriodCOGS,
PeriodTotalSales - PeriodCOGS as PeriodGrossMargin, 
STG.Volume_ITD,
STG.GrossVolume_ITD,
STG.SalesPrice_ITD,
STG.FreightSalesPrice_ITD,
STG.Sales_ITD + STG.SalesServiceFee_ITD as cSales_ITD,
STG.Tax_ITD,
STG.UnitPrice_ITD,
STG.PurchPrice_ITD,
STG.COGS_ITD,	
--STG.GM_ITD as GrossMargin_ITD,
cSales_ITD - STG.PurchPrice_ITD - STG.EquipmentCharge_ITD - STG.FrtPurchPrice_ITD - STG.AdditiveValue_ITD as GrossMargin_ITD,
STG.Ancillary_Fees_ITD,
STG.EquipmentCharge_ITD, 
STG.FrtPurchPrice_ITD,
STG.AdditiveValue_ITD,
STG.SalesDataType,
STG.TransactionTypeID,
STG.DlHdrID,
STG.DestLocaleID,
STG.OrderType,
STG.SourceType,
STG.TransactionType,
STG.Origin,
STG.Destination,
STG.DestinationTrm,
STG.ContractNumber,
STG.ARFedDate,
STG.DestAddressOne,
STG.DestAddressTwo,
STG.DestCity,
STG.DestState,
STG.DestZipCode,
STG.PointOfOrigin,
STG.InvoiceCreationDate,
STG.ProvisionName,
STG.MaxProvisionPriceService,
STG.MinProvisionPriceService,
STG.DriverName,
STG.TruckNumber,
STG.TMWOrderNumber,
STG.TransactionTypeGroup,
STG.LiftingNumber,
STG.AccountDetailSource,
STG.FTAProductCode,
STG.Vendor,
STG.InternalBANme,
STG.IBAJDEAddBookNum,
STG.Carrier,
STG.MovementType,
STG.PeriodSequence,
STG.PeriodRank,
STG.BOLJDECount,
STG.BOLCount,
STG. PeriodCount,
STG.AvgAcctPrd,
Current_Timestamp(0),
Current_Timestamp(0),
STG.SalesServiceFee,
STG.SalesServiceFee_ITD
 from (
 SELECT Type_Flag,JDEAccountingPeriod, GL_Date, AccountingPeriod,SalesmanCode,Current_SalesmanCode,BillToJDEAddrBookNumber,ShipToJDEAddrBookNumber, VendorJDEAddrBookNumber,BANme, PCAT,InvoiceNumber,MovementDate,OriginLocaleID,BOL,UOM,cVolume, cGrossVolume, Prev_Sales_Vol, Prev_Sales_Price,Prev_Sale_Freight_Charge, Prev_Sale_Equip_Charge,
Purch_Volume,Avg_Purch_Volume,cSalesPrice, FreightSalesPrice,TotalSales,Tax,SalesServiceFee,Period_UnitPrice, PurchPrice, Ancillary_Fees,EquipmentCharge,FrtPurchPrice, AdditiveType, AdditiveValue, GrossMargin, COGS, Volume_ITD, GrossVolume_ITD, SalesPrice_ITD,FreightSalesPrice_ITD,
Sales_ITD,Tax_ITD,SalesServiceFee_ITD,UnitPrice_ITD,COGS_ITD,	Ancillary_Fees_ITD,EquipmentCharge_ITD, FrtPurchPrice_ITD, AdditiveValue_ITD, GM_ITD,
PeriodPurchPrice,
SUM(ZeroIfNull(PeriodPurchPrice)) over (Partition by BOL, BANME, PCAT, DestLocaleID) as PurchPrice_ITD,
SalesDataType,TransactionTypeID,DlHdrID,DestLocaleID,OrderType,SourceType,TransactionType,Origin,Destination,DestinationTrm,ContractNumber,ARFedDate,DestAddressOne,DestAddressTwo,DestCity,DestState,DestZipCode,
PointOfOrigin,InvoiceCreationDate,ProvisionName,MaxProvisionPriceService,MinProvisionPriceService,DriverName,TruckNumber,TMWOrderNumber,TransactionTypeGroup,LiftingNumber,AccountDetailSource,FTAProductCode,Vendor,
InternalBANme,IBAJDEAddBookNum,Carrier,MovementType,c_Purch_CR_Indicator,PeriodSequence,PeriodRank,BOLJDECount,BOLCount,PeriodCount,AvgAcctPrd,Occurrences_Flag 
FROM (
SELECT			INTSTG.Type_Flag,
				INTSTG.JDEAccountingPeriod,
				INTSTG.GL_Date,
				INTSTG.AccountingPeriod,
				INTSTG.SalesmanCode,
				INTSTG.Current_SalesmanCode,
				INTSTG.BillToJDEAddrBookNumber,
				INTSTG.ShipToJDEAddrBookNumber,
				INTSTG.VendorJDEAddrBookNumber,
				INTSTG.BANme, 
				INTSTG.PCAT,
				INTSTG.InvoiceNumber,
				INTSTG.MovementDate,
				INTSTG.OriginLocaleID,
				INTSTG.BOL,
				INTSTG.UOM,
				INTSTG.cVolume,
				INTSTG.cGrossVolume,
				INTSTG.Prev_Sales_Vol,
				INTSTG.Prev_Sales_Price,
				INTSTG.Prev_Sale_Freight_Charge,
				INTSTG.Prev_Sale_Equip_Charge,
				INTSTG.Purch_Volume,
				INTSTG.Avg_Purch_Volume,
				INTSTG.cSalesPrice, 
				INTSTG.FreightSalesPrice,
				INTSTG.TotalSales,
				INTSTG.Tax,
				INTSTG.SalesServiceFee,
				ZeroIfNull(INTSTG.adjPurchUnitPrice) as Period_UnitPrice, 

				INTSTG.PurchPrice, 
				INTSTG.Ancillary_Fees,
				INTSTG.EquipmentCharge,
				INTSTG.FrtPurchPrice,
				INTSTG.AdditiveType,
				INTSTG.AdditiveValue,
				INTSTG.GrossMargin, 
				INTSTG.COGS,				
		--COGS
				CASE WHEN INTSTG.PCat = '30-Labor and Delivery Charges' and INTSTG.BOL is NULL 
					THEN SUM(ZeroIfNull(INTSTG.cVolume)) over (Partition by INTSTG.InvoiceNumber, INTSTG.BANME, INTSTG.PCAT) 
					ELSE SUM(ZeroIfNull(INTSTG.cVolume)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) 
				END as Volume_ITD,
				
				CASE WHEN INTSTG.PCat = '30-Labor and Delivery Charges' and INTSTG.BOL is NULL 
					THEN SUM(ZeroIfNull(INTSTG.cGrossVolume)) over (Partition by INTSTG.InvoiceNumber, INTSTG.BANME, INTSTG.PCAT) 
					ELSE SUM(ZeroIfNull(INTSTG.cGrossVolume)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) 
				END as GrossVolume_ITD,

				CASE WHEN INTSTG.PCat = '30-Labor and Delivery Charges' and INTSTG.BOL is NULL 
					THEN SUM(ZeroIfNull(INTSTG.cSalesPrice)) over (Partition by INTSTG.InvoiceNumber, INTSTG.BANME, INTSTG.PCAT) 
					ELSE SUM(ZeroIfNull(INTSTG.cSalesPrice)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) 
				END as SalesPrice_ITD,


				SUM(ZeroIfNull(INTSTG.FreightSalesPrice)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID)as FreightSalesPrice_ITD,
				
				CASE WHEN INTSTG.PCat = '30-Labor and Delivery Charges' and INTSTG.BOL is NULL 
					THEN SUM(ZeroIfNull(INTSTG.TotalSales)) over (Partition by INTSTG.InvoiceNumber, INTSTG.BANME, INTSTG.PCAT) 
					ELSE SUM(ZeroIfNull(INTSTG.TotalSales)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) 
				END as Sales_ITD,
				
				CASE WHEN INTSTG.PCat = '30-Labor and Delivery Charges' and INTSTG.BOL is NULL 
					THEN SUM(ZeroIfNull(INTSTG.Tax)) over (Partition by INTSTG.InvoiceNumber, INTSTG.BANME, INTSTG.PCAT) 
					ELSE SUM(ZeroIfNull(INTSTG.Tax)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) 
				END as Tax_ITD,
				
				CASE WHEN INTSTG.PCat = '30-Labor and Delivery Charges' and INTSTG.BOL is NULL 
					THEN SUM(ZeroIfNull(INTSTG.SalesServiceFee)) over (Partition by INTSTG.InvoiceNumber, INTSTG.BANME, INTSTG.PCAT) 
					ELSE SUM(ZeroIfNull(INTSTG.SalesServiceFee)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) 
				END as SalesServiceFee_ITD,
				
				SUM(ZeroIfNull(INTSTG.adjPurchUnitPrice)) over (Partition by INTSTG.BOL, INTSTG.PCAT, INTSTG.BANME, INTSTG.DestLocaleID /*INTSTG.MovementDate*/) as UnitPrice_ITD,
				SUM(ZeroIfNull(INTSTG.COGs)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) as COGS_ITD,	
				SUM(ZeroIfNull(INTSTG.Ancillary_Fees)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) as Ancillary_Fees_ITD,
				SUM(ZeroIfNull(INTSTG.EquipmentCharge)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) as EquipmentCharge_ITD, 
				SUM(ZeroIfNull(INTSTG.FrtPurchPrice)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) as FrtPurchPrice_ITD,
				SUM(ZeroIfNull(INTSTG.AdditiveValue)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) as AdditiveValue_ITD,
				
				CASE WHEN INTSTG.PCat = '30-Labor and Delivery Charges' and INTSTG.BOL is NULL 
					THEN SUM(ZeroIfNull(INTSTG.GrossMargin)) over (Partition by INTSTG.InvoiceNumber, INTSTG.BANME, INTSTG.PCAT) 
					ELSE SUM(ZeroIfNull(INTSTG.GrossMargin)) over (Partition by INTSTG.BOL, INTSTG.BANME, INTSTG.PCAT, INTSTG.DestLocaleID) 
				END as GM_ITD,
				
				CASE WHEN INTSTG.Type_Flag = 'Purchase, Previous Sales' THEN ZeroIfNull(INTSTG.PurchPrice)
					WHEN INTSTG.PeriodRank = 1 THEN ABS(Period_UnitPrice) * INTSTG.cVolume -- Sales Record, when first occurence, added ABS()
					--ELSE UnitPrice_ITD * INTSTG.cVolume
					ELSE Period_UnitPrice * INTSTG.cVolume 
				End as PeriodPurchPrice,
				INTSTG.SalesDataType,
				INTSTG.TransactionTypeID,
				INTSTG.DlHdrID,
				INTSTG.DestLocaleID,
				INTSTG.OrderType,
				INTSTG.SourceType,
				INTSTG.TransactionType,
				INTSTG.Origin,
				INTSTG.Destination,
				INTSTG.DestinationTrm,
				INTSTG.ContractNumber,
				INTSTG.ARFedDate,
				INTSTG.DestAddressOne,
				INTSTG.DestAddressTwo,
				INTSTG.DestCity,
				INTSTG.DestState,
				INTSTG.DestZipCode,
				INTSTG.PointOfOrigin,
				INTSTG.InvoiceCreationDate,
				INTSTG.ProvisionName,
				INTSTG.MaxProvisionPriceService,
				INTSTG.MinProvisionPriceService,
				INTSTG.DriverName,
				INTSTG.TruckNumber,
				INTSTG.TMWOrderNumber,
				INTSTG.TransactionTypeGroup,
				INTSTG.LiftingNumber,
				INTSTG.AccountDetailSource,
				INTSTG.FTAProductCode,
				INTSTG.Vendor,
				INTSTG.InternalBANme,
				INTSTG.IBAJDEAddBookNum,
				INTSTG.Carrier,
				INTSTG.MovementType,
				INTSTG.c_Purch_CR_Indicator,
				INTSTG.PeriodSequence,
				INTSTG.PeriodRank,
				INTSTG.BOLJDECount,
				INTSTG.BOLCount,
				INTSTG.PeriodCount,
				INTSTG.AvgAcctPrd,
				INTSTG.Occurrences_Flag 
FROM (
				SELECT SC.Type_Flag,
				SC.JDEAccountingPeriod,
				SLS.GL_Date,
				SC.AccountingPeriod,
				SC.SalesmanCode,
				SC.Current_SalesmanCode,
				SC.BillToJDEAddrBookNumber,
				SC.ShipToJDEAddrBookNumber,
				COALESCE(FOB_Purch_Side.JDEAddressBookNumber, DFI_Purch_Side.JDEAddressBookNumber) as VendorJDEAddrBookNumber,
				SC.BANme, 
				SC.PCAT,
				SC.InvoiceNumber,
				SC.MovementDate,
				SC.OriginLocaleID,
				SC.BOL,
				SC.UOM,
				COALESCE(SLS.Vol_Sold*-1, SC.Volume) as cVolume,
				SLS.GrossVolume*-1 as cGrossVolume,
				SC.Prev_Sales_Vol,
				SC.Prev_Sales_Price,
				SC.Prev_Sale_Freight_Charge,
				SC.Prev_Sale_Equip_Charge,
				SC.Purch_Volume,
				SC.Avg_Purch_Volume,
				COALESCE(SLS.Tot_Sales, SC.SalesPrice) as cSalesPrice, 
				CASE WHEN SC.Volume < 0 THEN -1* ABS(SC.FreightSalesPrice) ELSE ABS(SC.FreightSalesPrice) END as FreightSalesPrice, /* Since FOB/DFI reuse freight value, and Freight only does not, must use ABS here*/
				SC.TotalSales,
				SC.Tax, 
				SC.SalesServiceFee,
				CASE WHEN Type_Flag = 'Sales - FOB' THEN FOB_Purch_Side.PeriodUnitCost 
					 WHEN Type_Flag = 'Sales - DFI' THEN DFI_Purch_Side.PeriodUnitCost
					 WHEN Type_Flag = 'Sale, No Purchase - FOB' THEN FOB_Purch_Side.PeriodUnitCost
					 WHEN Type_Flag = 'Sale, No Purchase - DFI' THEN DFI_Purch_Side.PeriodUnitCost
					 WHEN Type_Flag = 'Purchase, Previous Sales' THEN SC.PurchUnitPrice
				END as cPurchUnitPrice,
				--CASE WHEN SC.Volume < 0 THEN cPurchUnitPrice *-1 ELSE cPurchUnitPrice END as adjPurchUnitPrice, 
				cPurchUnitPrice as adjPurchUnitPrice,
				SC.PurchPrice, 
				SC.Ancillary_Fees,
				SC.EquipmentCharge,
				CASE WHEN SC.ProvisionName = 'FMI Temporary Allowance' THEN 0 ELSE SC.FrtPurchPrice END as FrtPurchPrice,
				COALESCE(ADTV.TransactionTypeGroup, 'NA') as AdditiveType,
				CASE WHEN cSalesPrice < 0 THEN COALESCE(ADTV.Tot_DFI_Value, 0) *-1 ELSE COALESCE(ADTV.Tot_DFI_Value, 0) END as AdditiveValue,
				SC.GrossMargin, 
				SC.COGS,
				SC.SalesDataType,
				SC.TransactionTypeID,
				SC.DlHdrID,
				SC.DestLocaleID,
				SC.OrderType,
				SC.SourceType,
				SC.TransactionType,
				SC.Origin,
				SC.Destination,
				SC.DestinationTrm,
				SC.ContractNumber,
				SC.ARFedDate,
				SC.DestAddressOne,
				SC.DestAddressTwo,
				SC.DestCity,
				SC.DestState,
				SC.DestZipCode,
				SC.PointOfOrigin,
				SC.InvoiceCreationDate,
				SC.ProvisionName,
				SC.MaxProvisionPriceService,
				SC.MinProvisionPriceService,
				SC.DriverName,
				SC.TruckNumber,
				SC.TMWOrderNumber,
				SC.TransactionTypeGroup,
				SC.LiftingNumber,
				SC.AccountDetailSource,
				SC.FTAProductCode,
				COALESCE(FOB_Purch_Side.BANme, DFI_Purch_Side.BANme, FOB_EqpChg_Side.Vendor, DFI_EqpChg_Side.Vendor, SC.Vendor) as Vendor,
				SC.InternalBANme,
				SC.IBAJDEAddBookNum,
				SC.Carrier,
				SC.MovementType,
							COALESCE(FOB_Purch_Side.CR_Indicator, DFI_Purch_Side.CR_Indicator) as c_Purch_CR_Indicator,
							Row_Number () over (partition by SC.BOL, SC.BANME, SC.PCAT order by SC.JDEAccountingPeriod ) as PeriodSequence,
							Rank () Over (Partition by SC.BOL, SC.BANME, SC.PCAT order by SC.JDEAccountingPeriod ) as PeriodRank,
							Count (*) over (partition by SC.BOL, SC.BANME, SC.PCAT, SC.JDEAccountingPeriod) as BOLJDECount,
							Count (*) over (partition by SC.BOL, SC.BANME, SC.PCAT) as BOLCount,
							Count (*) over (partition by SC.BOL, SC.BANME, SC.PCAT, SC.JDEAccountingPeriod) as PeriodCount,
							AVG(SC.JDEAccountingPeriod) Over (Partition by SC.BOL, SC.BANME, SC.PCAT, Cast(SC.MovementDate as Date)) as AvgAcctPrd,
				Case WHEN AvgAcctPrd <> SC.JDEAccountingPeriod THEN 'Multiple Periods' ELSE 'Single Period' END as Occurrences_Flag 
				FROM	PROD_EDW_BASE_VIEWS.WSale_RA_SLSD_STG_SUM SC
				
				-- FOB Purchase
				left outer join PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP FOB_Purch_Side on
					SC.BOL 										=	FOB_Purch_Side.BOL and	
					SC.PCAT 									=	FOB_Purch_Side.PCAT and	
					SC.OriginLocaleID							=	FOB_Purch_Side.OriginLocaleID and
					cast(SC.MovementDate as date)				=  	CAST(FOB_Purch_Side.MovementDate as Date) and 
					SC.OrderType 								= 'F' AND
					--SC.OrderType								= FOB_Purch_Side.OrderType AND
					SC.Type_Flag							IN ('Sales - FOB', 'Sale, No Purchase - FOB') AND
					SC.JDEAccountingPeriod 						= FOB_Purch_Side.JDEAccountingPeriod 
				
				-- FOB Equipment
				left outer join
					(
					select 			BOL, 
										PCAT, 
										OriginLocaleID,
										DestLocaleID,
										BANme as Vendor,
										cast(MovementDate as Date) as MvDate, 
										sum(volume) as tot_vol, 
										sum((DFI_Value*-1)) as Tot_DFI_Value
					 from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT  
					 where 		TransactionTypeGroup = 'Purchase Equipment Charges'  and
					 					OrderType = 'F'
					group by 	BOL, PCAT, OriginLocaleID, DestLocaleID, BANme, cast(MovementDate as Date)
					having 		tot_vol <> 0
					) FOB_EqpChg_Side on
					SC.BOL 									=	FOB_EqpChg_Side.BOL and	
					SC.PCAT 								=	FOB_EqpChg_Side.PCAT and	
					SC.OriginLocaleID						=	FOB_EqpChg_Side.OriginLocaleID and
					SC.DestLocaleID							=	FOB_EqpChg_Side.DestLocaleID and
					SC.OrderType 							= 'F' AND 
					SC.Type_Flag							IN ('Sales - FOB', 'Sale, No Purchase - FOB') AND
					cast(SC.MovementDate as date)			=  FOB_EqpChg_Side.MvDate
				
				-- DFI Purchase
				left outer join  PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP DFI_Purch_Side on 
					SC.BOL 									=	DFI_Purch_Side.BOL and	
					SC.PCAT 								=	DFI_Purch_Side.PCAT and	
					SC.OriginLocaleID						=	DFI_Purch_Side.OriginLocaleID and
					SC.JDEAccountingPeriod 					= DFI_Purch_Side.JDEAccountingPeriod and 
					SC.OrderType							= 'D' AND
					--SC.OrderType							= DFI_Purch_Side.OrderType AND
					SC.Type_Flag 							IN ('Sales - DFI', 'Sale, No Purchase - DFI') AND
					cast(SC.MovementDate as date)		between  CAST(DFI_Purch_Side.MovementDate as Date)-14 and CAST(DFI_Purch_Side.MovementDate as Date)+14 
				
				-- DFI Equipment
				left outer join
					(
					select 			BOL, 
										PCAT, 
										OriginLocaleID,
										DestLocaleID,
										BANme as Vendor,
										cast(MovementDate as Date) as MvDate, 
										sum(volume) as tot_vol, 
										sum((DFI_Value*-1)) as Tot_DFI_Value
					 from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT  
					 where 		TransactionTypeGroup = 'Purchase Equipment Charges'  and
					 					OrderType = 'D'
					group by 	BOL, PCAT, OriginLocaleID, DestLocaleID, BANme, cast(MovementDate as Date)
					having 		tot_vol <> 0
					) DFI_EqpChg_Side on
					SC.BOL 									=	DFI_EqpChg_Side.BOL and	
					SC.PCAT 								=	DFI_EqpChg_Side.PCAT and	
					SC.OriginLocaleID						=	DFI_EqpChg_Side.OriginLocaleID and
					SC.DestLocaleID							=	DFI_EqpChg_Side.DestLocaleID and
					SC.OrderType 							= 'D' and
					SC.Type_Flag 							IN ('Sales - DFI', 'Sale, No Purchase - DFI') AND
					cast(SC.MovementDate as date)			=  DFI_EqpChg_Side.MvDate
					
				-- Additives
				left outer join 
				(
					select 			BOL, 
										PCAT, 
										OriginLocaleID,
										DestLocaleID,
										BANme as Vendor,
										TransactionTypeGroup,
										OrderType,
										cast(MovementDate as Date) as MvDate, 
										sum(volume) as tot_vol, 
										sum((DFI_Value*-1)) as Tot_DFI_Value
					 from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT  
					 where 		TransactionTypeGroup in ('Purchase Shell Additive', 'Purchase CTLA Additive' )
				group by 	BOL, PCAT, OriginLocaleID, DestLocaleID, BANme, cast(MovementDate as Date), TransactionTypeGroup, OrderType
				having 		tot_vol <> 0				
				) ADTV on
				SC.BOL 									=	ADTV.BOL and	
				SC.PCAT 								=	ADTV.PCAT and	
				SC.OriginLocaleID						=	ADTV.OriginLocaleID and
				SC.DestLocaleID							=	ADTV.DestLocaleID and
				SC.OrderType 							=   ADTV.OrderType AND
				SC.Type_Flag 							IN ('Sales - DFI', 'Sale, No Purchase - DFI', 'Sales - FOB', 'Sale, No Purchase - FOB') AND
				cast(SC.MovementDate as date)			=  ADTV.MvDate
				
LEFT OUTER JOIN
	(Select BOL, PCAT, InvoiceNumber, JDEAccountingPeriod, DestLocaleID, MAX(GL_Date) as GL_Date, SUM(Vol_Sold) as Vol_Sold, SUM(GrossVolume) as GrossVolume, SUM(Sales_Price) as Tot_Sales FROM PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_SLSD_GRP
	GROUP BY BOL, PCAT, InvoiceNumber, JDEAccountingPeriod, DestLocaleID) SLS 
	
	ON SLS.BOL = SC.BOL AND SLS.PCAT = SC.PCAT AND SLS.InvoiceNumber = SC.InvoiceNumber AND SLS.JDEAccountingPeriod = SC.JDEAccountingPeriod AND SLS.DestLocaleID =  SC.DestLocaleID
WHERE  SC.JDEAccountingPeriod <= :ReportingPeriod
AND (SLS.BOL IS NOT NULL OR (SC.Type_Flag = 'Purchase, Previous Sales' AND ZeroIfNull(SC.PurchPrice) <> 0) OR (SC.Type_Flag = 'Freight Only' OR SC.Type_Flag = 'Sales Service Fee'))
) INTSTG
) SecStg
)  STG 
WHERE  STG.JDEAccountingPeriod between :ReportingPeriod and :ReportingPeriod

 ;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_OPERATING_PLAN (Begin_Date date, End_Date date, Tag1 varchar(100), Tag2 varchar(100), Name1 varchar(50), Name2 varchar(50)) as
	(SELECT                
	                   ref_prod_location
	                   , :Name1 As Name1
	                   ,:Name2  As Name2
	                   , eff_date
	                   ,eff_hour
						, cast(eff_date as timestamp(0)) + cast(eff_hour as interval hour) as Eff_DateTime
	                   ,max(CASE WHEN tag_id = :tag1 THEN tag_id END) AS "tag_id1"
	                ,max(CASE WHEN tag_id = :tag2 THEN tag_id END) AS "tag_id2"
	                ,max(CASE WHEN tag_id = :tag1 THEN result_value END) AS "result_value1"
	                ,max(CASE WHEN tag_id = :tag2 THEN result_value END) AS "result_value2"
	                ,max(CASE WHEN tag_id = :tag1 THEN target_min END) AS "tgtmin1"
	                ,max(CASE WHEN tag_id = :tag2 THEN target_min END) AS "tgtmin2"
	                ,max(CASE WHEN tag_id = :tag1 THEN target_max END) AS "tgtmax1"
	                ,max(CASE WHEN tag_id = :tag2 THEN target_max END) AS "tgtmax2"
	                ,max(CASE WHEN tag_id = :tag1 THEN target END) AS "tgt1"
	                ,max(CASE WHEN tag_id = :tag2 THEN target END) AS "tgt2"
	FROM    prod_edw_base_views.REFOPS
	where tag_id in (:Tag1, :Tag2)
	and eff_date between :Begin_Date and :End_Date
	order by eff_date
	Group by ref_prod_location, eff_date, eff_hour
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_OPERATING_PLAN_CONCAT (Begin_Date date, End_Date date, Tag1 varchar(100), Tag2 varchar(100), Name1 varchar(50), Name2 varchar(50)) as
	(SELECT                
	                   ref_prod_location
	                   , :Name1 As Name1
	                   ,:Name2  As Name2
	                   ,eff_date
	                   ,eff_hour
	                   ,cast(eff_date as timestamp(0)) + cast(eff_hour as interval hour) as Eff_DateTime
	                   ,Test_number
	                   ,max(CASE WHEN tag_id = :tag1 THEN tag_id END) AS "tag_id1"
	                ,max(CASE WHEN tag_id = :tag2 THEN tag_id END) AS "tag_id2"
	                ,max(CASE WHEN tag_id = :tag1 THEN result_value END) AS "result_value1"
	                ,max(CASE WHEN tag_id = :tag2 THEN result_value END) AS "result_value2"
	                ,max(CASE WHEN tag_id = :tag1 THEN target_min END) AS "tgtmin1"
	                ,max(CASE WHEN tag_id = :tag2 THEN target_min END) AS "tgtmin2"
	                ,max(CASE WHEN tag_id = :tag1 THEN target_max END) AS "tgtmax1"
	                ,max(CASE WHEN tag_id = :tag2 THEN target_max END) AS "tgtmax2"
	                ,max(CASE WHEN tag_id = :tag1 THEN target END) AS "tgt1"
	                ,max(CASE WHEN tag_id = :tag2 THEN target END) AS "tgt2"
	FROM    prod_edw_base_views.REFOPS
	where tag_id in (:Tag1, :Tag2)
	and eff_date between :Begin_Date and :End_Date
	order by eff_date, eff_hour, test_number
	Group by ref_prod_location, eff_date, eff_hour, Test_number
;);
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_opis_crude (report_date date) as 
(
/* Reg Price Daily */
Select
	  CP.pricing_code
	  , CASE CP.pricing_code
			   When 'WVBM011' Then 'Brent/WTI Spread'
			   When 'AAGVZ00' Then 'WTI Midland/WTI Cush'
			   When 'AASRW00' Then 'Bakken'
			   When 'AASOM00' Then 'Syncrude'
			   When 'PCACG00' Then 'WTI'
			   When 'AAGWB00' Then 'WTS'
			   when	 'AAPPP00' then  'WCS Spd'	
			   End As FriendlyDesc
	  ,CP.pricing_code2
	  ,CP.pricing_desc
	  ,CP.pricing_group
	  ,CP.pricing_location
	  ,CP.price_eff_date
							,CP.Price
							,regavg.Average_Price

FROM     PROD_EDW_BASE_VIEWS.COMBINED_PRICING As CP
/* End Reg Price Daily */

Inner JOIN 
			(               Select /* Regular Price 30 Day Avg */ 
											Pricing_code
											,avg(CP.Price) as Average_Price
							FROM     
											PROD_EDW_BASE_VIEWS.COMBINED_PRICING As CP          
							Where  Price_Eff_date between :report_date - 30 and :report_date
							And pricing_code In 
															(
															   'WVBM011'
															   ,'AAGVZ00' 
															   ,'AASRW00' 
															   ,'AASOM00' 
															   ,'PCACG00'
															   ,'AAGWB00'
															   ,'AAPPP00' 
															)
											  And price_type = 'Close'
							Group By Pricing_code         
			) regavg
ON
			CP.Pricing_Code = regavg.Pricing_Code
Where  cp.Price_Eff_date = :report_date
	  And cp.pricing_code In 
											(
											   'WVBM011'
											   ,'AAGVZ00' 
											   ,'AASRW00' 
											   ,'AASOM00' 
											   ,'PCACG00'
											   ,'AAGWB00'
											   ,'AAPPP00' 
											)
							  And cp.price_type = 'Close'
							  
UNION 
Select 
			'Calc Price' as Pricing_code
			,'SPP Proxy' as FriendlyDesc
			,'N/A' as Pricing_code2
			,'SPP Proxy Minn' as Pricing_desc
			,'N/A' as Pricing_Group
			,'United States' as pricing_location
			, price_eff_date,
			(((PCACG00_Price + AASRW00_Price) * .6) + ((PCACG00_Price + AASOM00_Price)*.15) + ((PCACG00_Price + AAPPP00_Price) * .25)) - PCACG00_Price as price
			,avgcalc.Average_Price
			from
			(Select
				cp.price_eff_date
			,               max(case when cp.pricing_code = 'AASRU00' then cp.price end) as "AASRU00_Price"
		   -- ,               max(case when cp.pricing_code = 'AASOK00' then cp.price end) as "AASOK00_Price"
			,               max(case when cp.pricing_code = 'AAPPN00' then cp.price end) as "AAPPN00_Price"
			,               max(case when cp.pricing_code = 'PCACG00' then cp.price end) as "PCACG00_Price"
			,               max(case when cp.pricing_code = 'AASOM00' then cp.price end) as "AASOM00_Price"
			,               max(case when cp.pricing_code = 'AASRW00' then cp.price end) as "AASRW00_Price"
			,               max(case when cp.pricing_code = 'AAPPP00' then cp.price end) as "AAPPP00_Price"
															,99 as Join_Key
			FROM     PROD_EDW_BASE_VIEWS.COMBINED_PRICING As CP
					  Where  Price_Eff_date = :report_date
					  And pricing_code In 
					(
					'AASRU00', 
					'AASOK00',
					'AAPPN00', 
					'PCACG00',
					'AASOM00', 
					'AASRW00',
					'AAPPP00'
					)
					  And price_type = 'Close'
			
			Group by cp.price_eff_date) calcTable
			
INNER JOIN 

			
			(               Select 
							AVG((((PCACG00_Price + AASRW00_Price) * .6) + ((PCACG00_Price + AASOM00_Price)*.15) + ((PCACG00_Price + AAPPP00_Price) * .25)) - PCACG00_Price) as Average_Price
							,99 as Join_Key
							from
						(Select
						cp.price_eff_date
				,               max(case when cp.pricing_code = 'AASRU00' then cp.price end) as "AASRU00_Price"
				,               max(case when cp.pricing_code = 'AASOK00' then cp.price end) as "AASOK00_Price"
				,               max(case when cp.pricing_code = 'AAPPN00' then cp.price end) as "AAPPN00_Price"
				,               max(case when cp.pricing_code = 'PCACG00' then cp.price end) as "PCACG00_Price"
				,               max(case when cp.pricing_code = 'AASOM00' then cp.price end) as "AASOM00_Price"
				,               max(case when cp.pricing_code = 'AASRW00' then cp.price end) as "AASRW00_Price"
				,               max(case when cp.pricing_code = 'AAPPP00' then cp.price end) as "AAPPP00_Price"
							
							FROM     PROD_EDW_BASE_VIEWS.COMBINED_PRICING As CP
															  
					  Where  Price_Eff_date between :report_date - 30 and :report_date
					  And pricing_code In 
							(
							'AASRU00', -- 60%
							'AASOK00', -- 15%
							'AAPPN00', --25%
							'PCACG00', -- Special Calc
							'AASOM00', 
							'AASRW00',
							'AAPPP00'
							)
							And price_type = 'Close'
							
							Group by cp.price_eff_date) calc
			) avgcalc
ON calctable.Join_Key = avgcalc.join_key
;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_opis_crude_argus (report_date date) as 
(
Select
	cp.Pricing_Code
	,CASE cp.Pricing_Code
		WHEN 'PA0002668' Then 'WTI'
		WHEN 'PA0003358' THEN 'WTI Midland/WTI Cush' 
		WHEN 'PA0008305' Then 'Syncrude'
		WHEN 'PA0003363' Then 'WTS'
	END as FriendlyDesc
	,cp.Pricing_Code2
	,cp.Pricing_Desc
	,cp.Pricing_Group
	,cp.Pricing_Location
	,cp.Price_Eff_Date
	-- Some prices need differential to WTI
	,Case cp.Pricing_Code
		WHEN 'PA0008305' THEN dayavg.Average_Price 
		WHEN 'PA0003358' THEN dayavg.Average_Price
		WHEN 'PA0003363' THEN dayavg.Average_Price
	ELSE
		dayavg.Average_Price 
	END as Price
	-- Some prices need differential to WTI
	,Case cp.Pricing_Code
		WHEN 'PA0008305' THEN monavg.Average_Price
		WHEN 'PA0003358' THEN monavg.Average_Price
		WHEN 'PA0003363' THEN monavg.Average_Price
	ELSE
		monavg.Average_Price 
	END as Average_Price	
From PROD_EDW_BASE_VIEWS.Combined_Pricing cp
INNER JOIN
	(
		Select
			cp.Pricing_Code, cp.Price_Eff_Date, cp.Price_Period
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date = :report_date
				 AND
					(
					(
						Pricing_Code in ( 'PA0002668') and price_type in ('value high', 'value low')
					)
					OR
					(
						Pricing_Code in ('PA0008305','PA0003358','PA0003363') and price_type in ('diff index')
					)
					)
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code, cp.Price_Eff_Date, cp.Price_Period
	) dayavg
ON
	cp.Pricing_Code = dayavg.Pricing_Code
AND cp.Price_Eff_Date = dayavg.Price_Eff_Date
AND cp.Price_Period = dayavg.Price_Period
INNER JOIN
	(
		Select
			cp.Pricing_Code
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date between :report_date - 30 and :report_date
				 AND
					((
						Pricing_Code in ( 'PA0002668') and price_type in ('value high', 'value low')
					)
					OR
					(
						Pricing_Code in ('PA0008305','PA0003358','PA0003363') and price_type in ('diff index')
					))
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code
	) monavg
ON
	cp.Pricing_Code = monavg.Pricing_Code
-- Find WTI price on report date for calculation with other columns
FULL OUTER JOIN
	(
		Select
			cp.Pricing_Code
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date = :report_date
				 AND
				 	Pricing_Code in ('PA0002668') and price_type in ('value high', 'value low')
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code
	) less_day_wti
ON 1= 1
-- Find WTI over time period for calculation with other columns
FULL OUTER JOIN
	(
		Select
			cp.Pricing_Code
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date between :report_date - 30 and :report_date
				 AND
				 	Pricing_Code in ('PA0002668') and price_type in ('value high', 'value low')
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code
	) less_mon_wti
ON 1= 1
Where
	cp.Price_Eff_Date between :report_date - 30 and :report_date
-- We've already averaged the high and low prices by this point, just need to filter to prevent dupes
AND cp.Price_Type = 'value high' or (cp.pricing_code in ('PA0008305', 'PA0003358','PA0003363') and price_type = 'diff index')
UNION
Select 
                'Calc Price' as Pricing_code
                ,'SPP Proxy' as FriendlyDesc
                ,'N/A' as Pricing_code2
                ,'SPP Proxy Minn' as Pricing_desc
                ,'N/A' as Pricing_Group
                ,'United States' as pricing_location
                , price_eff_date,
                ((((PA0002668_Price + PA0009012_Price) * .6) + ((PA0002668_Price + PA0008305_Price) *.15) + (PA0002668_Price+ PA0008317_Price)* .25) - PA0002668_Price) as price
                ,avgcalc.Average_Price
                from
                (Select
					cp.price_eff_date
				--	,AVG(case when cp.pricing_code = 'PA0009012' then Coalesce(cp.price, 0) end) as "PA0009012_Price"
					--,AVG(case when cp.pricing_code = 'PA0002353' then Coalesce(cp.price, 0) end) as "PA0002353_Price"
					,AVG(case when cp.pricing_code = 'PA0008317' then Coalesce(cp.price, 0) end) as "PA0008317_Price"
					,AVG(case when cp.pricing_code = 'PA0002668' then Coalesce(cp.price, 0) end) as "PA0002668_Price"
					,AVG(case when cp.pricing_code = 'PA0008305' then Coalesce(cp.price, 0) end) as "PA0008305_Price"
					,AVG(case when cp.pricing_code = 'PA0009012' then Coalesce(cp.price, 0) end) as "PA0009012_Price"
					
					, 99 as Join_Key
					FROM     PROD_EDW_BASE_VIEWS.COMBINED_PRICING As CP
					INNER JOIN
						(
							Select pricing_code, price_eff_date, price_type, Min(Price_Period) as min_Period 
							From PROD_EDW_BASE_VIEWS.COMBINED_PRICING 
							Where price_eff_date = :report_date
							And Price_type in ('value high', 'value low', 'diff index','Close','diff high','diff low') and
									pricing_code in ('PA0008317','PA0002668','PA0008305','PA0009012')
							Group By Pricing_Code, Price_Eff_Date, Price_type
						) max_CP
					ON
						cp.Pricing_Code = max_CP.Pricing_Code
					AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
					AND cp.Price_Type = max_CP.Price_Type
					AND (cp.Price_Period = max_CP.min_Period) 
					Where  cp.Price_Eff_date = :report_date
					And 
					(	(cp.pricing_code In 
								(
								'PA0002668' -- Special Calc
								)
						And cp.price_type in ('value high', 'value low'))
					/*OR
						(cp.pricing_code in 
							('PA0009012') -- 60%
						AND cp.price_type in ('diff high')) -- 'PA0009012' only value high*/
					OR	
						(cp.pricing_code in 
							('PA0008305','PA0008317') 
						AND cp.price_type in ('diff index'))
						
					OR 
						(cp.pricing_code in
							('PA0009012')
						AND cp.price_type in ('diff high','diff low'))
					)
					Group by cp.price_eff_date) calcTable
                
INNER JOIN 

                
				(Select 
					AVG(((((PA0002668_Price + PA0009012_Price) * .6) + ((PA0002668_Price + PA0008305_Price) *.15) + (PA0002668_Price+ PA0008317_Price)* .25) - PA0002668_Price)) as Average_Price
					,99 as Join_Key
				from
					(Select
						cp.price_eff_date
							,AVG(case when cp.pricing_code = 'PA0008317' then Coalesce(cp.price, 0) end) as "PA0008317_Price"
						,AVG(case when cp.pricing_code = 'PA0002668' then Coalesce(cp.price, 0) end) as "PA0002668_Price"
						,AVG(case when cp.pricing_code = 'PA0008305' then Coalesce(cp.price, 0) end) as "PA0008305_Price"
						,AVG(case when cp.pricing_code = 'PA0009012' then Coalesce(cp.price, 0) end) as "PA0009012_Price"
						FROM     PROD_EDW_BASE_VIEWS.COMBINED_PRICING As CP
						INNER JOIN
							(
								Select pricing_code, price_eff_date, price_type, Min(Price_Period) as min_Period 
								From PROD_EDW_BASE_VIEWS.COMBINED_PRICING 
								Where price_eff_date between :report_date - 30 and :report_date
											And Price_type in ('value high', 'value low', 'diff index','Close','diff high','diff low') and
									pricing_code in ('PA0008317','PA0002668','PA0008305','PA0009012')
								Group By Pricing_Code, Price_Eff_Date, Price_type
							) max_CP
						ON
							cp.Pricing_Code = max_CP.Pricing_Code
						AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
						AND cp.Price_Type = max_CP.Price_Type
						Where  cp.Price_Eff_date between :report_date - 30 and :report_date
						And 
						(	(cp.pricing_code In 
									(
								--	'PA0002353', -- 15%
									'PA0002668' -- Special Calc
									)
							And cp.price_type in ('value high', 'value low'))
						/*OR
							(cp.pricing_code in 
								('PA0009012') -- 60%
							AND cp.price_type in ('diff high')) -- 'PA0009012' only value high*/
						OR	
							(cp.pricing_code in 
								('PA0008305','PA0008317') 
							AND cp.price_type in ('diff index'))
							
						OR 
							(cp.pricing_code in
								('PA0009012')
							AND cp.price_type in ('diff high','diff low'))
						)
						Group by cp.price_eff_date) calc
                ) avgcalc
ON calctable.Join_Key = avgcalc.join_key
union
Select      CP.pricing_code,
          		CASE CP.pricing_code
                   	When 'PA0008317' Then 'WCS Spd'
           		End As FriendlyDesc,
          		CP.pricing_code2,
          		CP.pricing_desc,
          		CP.pricing_group,
          		CP.pricing_location,
          		CP.price_eff_date,
                DaAvg.Price as Price,
                MonAvg.Price as Average_Price
FROM     	PROD_EDW_BASE_VIEWS.COMBINED_PRICING As CP 
				inner join
				(
				select		CPI.pricing_code, 
								CPI.Price_Eff_Date,
								avg(CPI.Price) as Price,
								min(Price_Period) as Min_Price_Period
				FROM     	PROD_EDW_BASE_VIEWS.COMBINED_PRICING CPI
				where		cpi.pricing_code = 'PA0008317' and
								cpi.Price_Eff_Date=:report_date and 
								cpi.price_type = ('diff index') 
				group by	CPI.pricing_code, CPI.Price_Eff_Date				
				) DaAvg 				
				on CP.pricing_code=DaAvg.pricing_code and CP.Price_Eff_Date=DaAvg.Price_Eff_Date 
				inner join
				(
				select		CPI.pricing_code, 
								avg(CPI.Price) as Price
				FROM     	PROD_EDW_BASE_VIEWS.COMBINED_PRICING CPI
				where		cpi.pricing_code = 'PA0008317' and
								cpi.Price_Eff_Date between  :report_date - 30 and :report_date  and
								cpi.price_type = ('diff index') 
				group by	CPI.pricing_code
				) MonAvg
				on CP.pricing_code=MonAvg.pricing_code
where		cp.price_type ='diff index' and
				CP.Price_Eff_Date=DaAvg.Price_Eff_Date and
				cp.Price_Period=DaAvg.Min_Price_Period
union
Select
	cp.Pricing_Code
	,CASE cp.Pricing_Code
		WHEN 'PA0002809' Then 'Brent/WTI Spread'
	END as FriendlyDesc
	,cp.Pricing_Code2
	,cp.Pricing_Desc
	,cp.Pricing_Group
	,cp.Pricing_Location
	,cp.Price_Eff_Date
	-- Some prices need differential to WTI
	,Case cp.Pricing_Code
		WHEN 'PA0002809' THEN less_day_wti_new.Average_Price - dayavg.Average_Price 
	ELSE
		dayavg.Average_Price 
	END as Price
	-- Some prices need differential to WTI
	,Case cp.Pricing_Code
		WHEN 'PA0002809' THEN less_mon_wti_new.Average_Price - monavg.Average_Price
	ELSE
		monavg.Average_Price 
	END as Average_Price	
From PROD_EDW_BASE_VIEWS.Combined_Pricing cp
INNER JOIN
	(
		Select
			cp.Pricing_Code, cp.Price_Eff_Date, cp.Price_Period
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date = :report_date
				 AND
					((
						Pricing_Code in ('PA0002809') and price_type in ('value high', 'value low')
					)
				)
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code, cp.Price_Eff_Date, cp.Price_Period
	) dayavg
ON
	cp.Pricing_Code = dayavg.Pricing_Code
AND cp.Price_Eff_Date = dayavg.Price_Eff_Date
AND cp.Price_Period = dayavg.Price_Period
INNER JOIN
	(
		Select
			cp.Pricing_Code
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date between :report_date - 30 and :report_date
				 AND
					((
						Pricing_Code in ('PA0002809') and price_type in ('value high', 'value low')
					)
					)
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code
	) monavg
ON
	cp.Pricing_Code = monavg.Pricing_Code
-- Find WTI price on report date for calculation with other columns
FULL OUTER JOIN
	(
		Select
			cp.Pricing_Code
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date = :report_date
				 AND
				 	Pricing_Code in ('PA0002652') and price_type in ('value high', 'value low')
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code
	) less_day_wti_new
ON 1= 1
-- Find WTI over time period for calculation with other columns
FULL OUTER JOIN
	(
		Select
			cp.Pricing_Code
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date between :report_date - 30 and :report_date
				 AND
				 	Pricing_Code in ('PA0002652') and price_type in ('value high', 'value low')
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code
	) less_mon_wti_new
ON 1= 1
Where
	cp.Price_Eff_Date between :report_date - 30 and :report_date
-- We've already averaged the high and low prices by this point, just need to filter to prevent dupes
AND cp.Price_Type = 'value high'
--Sj Code 20160118
union
Select
	cp.Pricing_Code
	,CASE cp.Pricing_Code
		WHEN 'PA0009012' Then 'Bakken'
	END as FriendlyDesc
	,cp.Pricing_Code2
	,cp.Pricing_Desc
	,cp.Pricing_Group
	,cp.Pricing_Location
	,cp.Price_Eff_Date
	-- Some prices need differential to WTI
	,Case cp.Pricing_Code
		WHEN 'PA0009012' THEN dayavg.Average_Price 
	ELSE
		dayavg.Average_Price 
	END as Price
	-- Some prices need differential to WTI
	,Case cp.Pricing_Code
		WHEN 'PA0009012' THEN monavg.Average_Price
	ELSE
		monavg.Average_Price 
	END as Average_Price	
From PROD_EDW_BASE_VIEWS.Combined_Pricing cp
INNER JOIN
	(
		Select
			cp.Pricing_Code, cp.Price_Eff_Date, cp.Price_Period
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date = :report_date
				 AND
					((
						Pricing_Code in ('PA0009012') and price_type in ('diff low', 'diff high')
					)
				)
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code, cp.Price_Eff_Date, cp.Price_Period
	) dayavg
ON
	cp.Pricing_Code = dayavg.Pricing_Code
AND cp.Price_Eff_Date = dayavg.Price_Eff_Date
AND cp.Price_Period = dayavg.Price_Period
INNER JOIN
	(
		Select
			cp.Pricing_Code
			,Avg(cp.Price) as Average_Price
		From
			PROD_EDW_BASE_VIEWS.Combined_Pricing cp
		Inner Join
			(Select pricing_code, Price_eff_Date, Price_type, Min(Price_Period) as min_Period
				 From PROD_EDW_BASE_VIEWS.Combined_Pricing
				 Where Price_Eff_Date between :report_date - 30 and :report_date
				 AND
					((
						Pricing_Code in ('PA0009012') and price_type in ('diff low', 'diff high')
					)
					)
				 Group by pricing_code, price_eff_date, price_type
			 ) max_CP
		 
		ON
			cp.Pricing_Code = max_CP.Pricing_Code
		AND cp.Price_Eff_Date = max_CP.Price_Eff_Date
		AND cp.Price_Type = max_CP.Price_Type
		AND cp.Price_Period = max_CP.min_Period
		Group By cp.Pricing_Code
	) monavg
ON
	cp.Pricing_Code = monavg.Pricing_Code
Where
	cp.Price_Eff_Date between :report_date - 30 and :report_date
-- We've already averaged the high and low prices by this point, just need to filter to prevent dupes
AND cp.Price_Type = 'diff high';
)
--------------------------------------------------------------------------------

Replace Macro PROD_Edw_Base_views.M_Opis_PremUnleaded (Cur_Date date) as
(
SELECT                
Cur_Date,
CASE pricing_location
                WHEN 'El Paso Rack' THEN 'ELP Rack'
                WHEN 'Phoenix Conv Rack' THEN 'PHX Conv Rack'
                WHEN 'Phoenix CBG Rack' THEN 'PHX CBG Rack'
                WHEN 'LA Spot Azrbob' THEN 'L.A. Spt AZ'
                WHEN 'LA Spot Suboctane' THEN 'L.A. Spt Sub'
                WHEN 'Albuquerque Rack' THEN 'ABQ Rack'
                WHEN 'Tucson Rack' THEN 'TUC Rack'
                WHEN 'Minneapolis Rack' THEN 'MIN Rack'
                WHEN 'Denver Rack' THEN 'DEN Rack'
                WHEN 'SLC Rack' THEN 'SLC Rack'
                WHEN 'LV Rack' THEN 'LV Rack'
				WHEN 'Norfolk Reg Rack' THEN 'NF Reg Rack'
				WHEN 'Norfolk RFG Rack' THEN 'NF RFG Rack'
END
pricing_location,
Case pricing_location
                When 'LA Spot Azrbob' Then 10
                When 'LA Spot Suboctane' Then 11
                When 'Albuquerque Rack' Then 20
                When 'El Paso Rack'        Then 30
                When 'Phoenix Conv Rack'      Then 40
                When 'Phoenix CBG Rack'      Then 41
                When 'Tucson Rack'        Then 50
                WHEN 'Minneapolis Rack' THEN 60
                When 'Denver Rack' 				Then 70
                When 'SLC Rack' 	Then 80
                When 'LV Rack' 	Then 90
				When 'Norfolk Reg Rack' 			Then 91
				When 'Norfolk RFG Rack' 			Then 92
END
location_sort,
pricing_Desc,
tmpCurrent.pricing_code,
tmpCurrent.Price - tmpUSGC.Price as "Price Differential",
tmpCurrent.Price,
tmpCurrent.AvgPrice - tmpUSGC.AvgPrice as "Average Price Differential",
tmpCurrent.AvgPrice,
tmpUSGC.AvgPrice As "USGC_Avg_Price",
tmpUSGC.Price As "USGC Price",
tmpUSGC.Pricing_Code As "USGC_Pricing_Code"

FROM    PROD_Edw_Base_views.Cur_Date
Left Outer Join
                (Select price_eff_date, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('AAMNG00')
                and price_type = 'close') as tmpUSGC
                On tmpUSGC.price_eff_date = cur_date.cur_date
Left Outer Join
                (SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, 'LA Spot Suboctane' as Pricing_Location, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('OPSPT00802')
                and price_type in ('average')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, 'LA Spot Azrbob' as Pricing_Location, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
               where pricing_code in ('OPSPT00677')
                and price_type in ('average')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP25052')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP06574')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP26900')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, Pricing_Location || ' Conv Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP27262')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, Pricing_Location || ' CBG Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP13362')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP22853')
                and price_type in ('avg')
                  UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP21460')
                and price_type in ('avg')
                  UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, 'SLC Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP25790')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, 'LV Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP27028')
                and price_type in ('avg')
				UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, 'Norfolk Reg Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP01312')
                and price_type in ('avg')
				UNION
                SELECT price_eff_date, 'Premium Unleaded' as Pricing_Desc, 'Norfolk RFG Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP01152')
                and price_type in ('avg')
                ) as tmpCurrent
                On tmpCurrent.price_eff_date = cur_date.cur_date
where cur_date =:Cur_Date
;);
--------------------------------------------------------------------------------

Replace Macro PROD_Edw_Base_views.M_Opis_RegUnleaded (Cur_Date date) as
(
SELECT                
Cur_Date,
CASE pricing_location
                WHEN 'El Paso Rack' THEN 'ELP Rack'
                WHEN 'Phoenix Conv Rack' THEN 'PHX Conv Rack'
                WHEN 'Phoenix CBG Rack' THEN 'PHX CBG Rack'
                WHEN 'LA Spot Azrbob' THEN 'L.A. Spot AZ'
                WHEN 'LA Spot Suboctane' THEN 'L.A. Spot Sub'
                WHEN 'Albuquerque Rack' THEN 'ABQ Rack'
                WHEN 'Tucson Rack' THEN 'TUC Rack'
                WHEN 'Minneapolis Rack' THEN 'MIN Rack'
                WHEN 'Denver Rack' THEN 'Den Rack'
                WHEN 'SLC Rack' THEN 'SLC Rack'
                WHEN 'LV Rack' THEN 'LV Rack'
				WHEN 'Norfolk Reg Rack' THEN 'NF Reg Rack'
				WHEN 'Norfolk RFG Rack' THEN 'NF RFG Rack'
END
pricing_location,
Case pricing_location
                When 'LA Spot Azrbob' 			Then 10
                When 'LA Spot Suboctane' 	Then 11
                When 'Albuquerque Rack' 		Then 20
                When 'El Paso Rack'         		Then 30
                When 'Phoenix Conv Rack'    Then 40
                When 'Phoenix CBG Rack'    Then 41
                When 'Tucson Rack'          	Then 50
                When 'Minneapolis Rack' 		Then 60
                When 'Denver Rack' 				Then 70
                When 'SLC Rack' 					Then 80
                When 'LV Rack' 						Then 90
				When 'Norfolk Reg Rack' 			Then 91
				When 'Norfolk RFG Rack' 			Then 92
END
location_sort,
tmpCurrent.pricing_code,
pricing_Desc, 
tmpCurrent.Price - tmpUSGC.Price as "Price Differential",
tmpCurrent.Price,
tmpCurrent.AvgPrice - tmpUSGC.AvgPrice as "Average Price Differential",
tmpCurrent.AvgPrice,
tmpUSGC.AvgPrice As "USGC_Avg_Price",
tmpUSGC.Price As "USGC Price",
tmpUSGC.Pricing_Code As "USGC_Pricing_Code"

FROM    PROD_Edw_Base_views.Cur_Date
Left Outer Join
                (Select price_eff_date, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('PGACT00')
                and price_type = 'close') as tmpUSGC
                On tmpUSGC.price_eff_date = cur_date.cur_date
Left Outer Join
                (SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, 'LA Spot Suboctane' as Pricing_Location, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('OPSPT00689')
                and price_type in ('average')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, 'LA Spot Azrbob' as Pricing_Location, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('OPSPT00676')
                and price_type in ('average')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP24970')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP06394')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP26776')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, Pricing_Location || ' Conv Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP27192')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, Pricing_Location || ' CBG Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP13188')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP22795')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, Pricing_Location || ' Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP20448')
                and price_type in ('avg')
				UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, 'SLC Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP25712')
                and price_type in ('avg')
                UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, 'LV Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP26952')
                and price_type in ('avg')
				UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, 'Norfolk Reg Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP01220')
                and price_type in ('avg')
				UNION
                SELECT price_eff_date, 'Regular Unleaded' as Pricing_Desc, 'Norfolk RFG Rack' as Pricing_Location, Price*100 as Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_Code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP01034')
                and price_type in ('avg')
                ) as tmpCurrent
                On tmpCurrent.price_eff_date = cur_date.cur_date
where cur_date =:Cur_Date
;);
--------------------------------------------------------------------------------

Replace Macro PROD_Edw_Base_views.M_Opis_ULSD (Cur_Date date) as
(
SELECT                
Cur_Date,
CASE pricing_location
            WHEN 'El Paso' THEN 'ELP Rack'
            WHEN 'Phoenix' THEN 'PHX Rack'
            WHEN 'Los Angeles' THEN 'L.A. Spot'
            WHEN 'Albuquerque' THEN 'ABQ Rack'
            WHEN 'Tucson' THEN 'TUC Rack'
            WHEN 'Minneapolis' THEN 'MIN Rack'
            WHEN 'Denver' THEN 'Den Rack'
            WHEN 'Salt Lake City' THEN 'SLC Rack'
            WHEN 'Las Vegas' THEN 'LV Rack'
			WHEN 'Norfolk' THEN 'NF Rack'
END
pricing_location,
Case pricing_location
            When 'Los Angeles' Then 10
            When 'Albuquerque' Then 20
            When 'El Paso'        Then 30
            When 'Phoenix'       Then 40
            When 'Tucson'         Then 50
            WHEN 'Minneapolis' THEN 60
            When 'Denver' 			Then 70
            When 'Salt Lake City' 	Then 80
             WHEN 'Las Vegas' THEN 90
			 WHEN 'Norfolk' THEN 91
END
location_sort,
pricing_Desc, 
tmpCurrent.pricing_code,
tmpCurrent.Price - tmpUSGC.Price as "Price Differential",
tmpCurrent.Price,
tmpCurrent.AvgPrice - tmpUSGC.AvgPrice as "Average Price Differential",
tmpCurrent.AvgPrice,
tmpUSGC.AvgPrice As "USGC Avg Price",
tmpUSGC.Price As "USGC Price",
tmpUSGC.Pricing_Code As "USGC_Pricing_Code"

FROM    PROD_Edw_Base_views.Cur_Date
Left Outer Join
                (Select price_eff_date, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_code As pricing_code 
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('OPSPT00660')
                and price_type = 'average') as tmpUSGC
                On tmpUSGC.price_eff_date = cur_date.cur_date
Left Outer Join
                (SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP03610')
                and pricing_location in ('Albuquerque')
                and price_type = 'avg'
                UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP06880')
                and pricing_location in ('El Paso')
                and price_type = 'avg'
                UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP14624')
                and pricing_location in ('Tucson')
                and price_type = 'avg'
                UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP13478')
                and pricing_location in ('Phoenix')
                and price_type = 'avg'
                UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price, mavg(Price, 23, price_eff_date) as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('OPSPT00685')
                and pricing_location in ('Los Angeles')
                and price_type = 'average'
                UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP23234')
                and pricing_location in ('Minneapolis')
                and price_type = 'avg'
                UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP08998')
                and pricing_location in ('Denver')
                and price_type = 'avg'
                 UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP11244')
                and pricing_location in ('Salt Lake City')
                and price_type = 'avg'
                UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP12508')
                and pricing_location in ('Las Vegas')
                and price_type = 'avg'
				UNION
                SELECT price_eff_date, 'ULSD No. 2' as Pricing_Desc, Pricing_Location, Price*100 As Price, mavg(Price, 23, price_eff_date)*100 as AvgPrice, pricing_code As pricing_code
                FROM    PROD_Edw_Base_views.COMBINED_PRICING
                where pricing_code in ('COMP01456')
                and pricing_location in ('Norfolk')
                and price_type = 'avg'
                ) as tmpCurrent
                On tmpCurrent.price_eff_date = cur_date.cur_date

where cur_date =:Cur_Date
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_PI_SingleTag_AdHoc (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20), tag_id varchar(100)) as
	(
SELECT	Trans_Date, Trans_Hour,
		Trans_Min, Tag_ID, Tag_Value, Tag_Value_Raw, Audit_Date, Tag_Value_Audit,
		Audit_Person, Audit_Reason
FROM	prod_edw_base_views.PI_CORRECTED
WHERE ref_prod_location = :Ref_Prod_Location
	AND trans_date between :Begin_Date AND :End_Date
	AND tag_id = :Tag_ID
ORDER by trans_date, trans_hour, trans_min
	;)
;
--------------------------------------------------------------------------------

/*
exec prod_refops_views.m_PPL_MBO_FUTR_TNK_VOLS_BS (?,?,?,?,?);
exec prod_refops_views.m_PPL_MBO_FUTR_TNK_VOLS_BS ('2018-01-01','Base','El Paso Refinery',50,50);
*/
replace macro PROD_EDW_BASE_VIEWS.m_PPL_MBO_FUTR_TNK_VOLS_BS (eff_date date, TNK_CASE varchar(50), Ref_Prod_Location varchar(20), NoofDaysPPL integer, NoofDaysMBO integer) as
(
--PPL Part
select 			InvDat.Ref_Prod_Location, 
					cast (null as varchar(32)) as MBO_Tank,					
					TnkMast.Master_Code as PPL_Tank,
					cast(cast(InvDat.Eff_Date as date format 'YYYY-MM-DD') as varchar(20))||TnkMast.Master_Code  as  Date_Tank,
					cast(PrdMast.Product_Desc as varchar(255)) as Product_Desc_PPL,
					Cast(null as varchar(255)) as Product_Desc_MBO, 					
					InvDat.Eff_Date, 
					:TNK_CASE as TNK_CASE,
					cast('PPL' as varchar(20)) as prop_type,
					InvDat.Gross_Quantity as Gross_Product,
					case 
						when (InvDat.Gross_Quantity-TnkDet.Min_Op_Qty) > 0 then (InvDat.Gross_Quantity-TnkDet.Min_Op_Qty)
						else 0 
					end as Aval_Product,
					TnkDet.Max_Op_Qty-InvDat.Gross_Quantity as Aval_Capacity,
					TnkDet.Max_Op_Qty as Safe_Fill,
					RVP_Tab.results_value as RVP,
					DON_Tab.results_value as DON,
					cast(0 as float)  as TL_MINW, 
					cast(0 as float) as TL_MAXW, 
					cast(0 as float) as MINW, 
					cast(0 as float) as MAXW, 
					cast(0 as float) as Work_Min,
					cast(0 as float)  as Work_Max 
from				PROD_EDW_BASE_VIEWS.TANK InvDat 
					inner join PROD_EDW_BASE_VIEWS.Master TnkMast on InvDat.Ref_Prod_Location = TnkMast.Ref_Prod_Location and InvDat.Tank_ID = TnkMast.Master_ID
					inner join PROD_EDW_BASE_VIEWS.Tank_Info TnkDet on InvDat.Ref_Prod_Location = TnkDet.Ref_Prod_Location and InvDat.Tank_ID = TnkDet.Tank_ID
					inner join PROD_EDW_BASE_VIEWS.REF_PRODUCT PrdMast on InvDat.Ref_Prod_Location = PrdMast.Ref_Prod_Location and InvDat.Product_ID = PrdMast.Product_ID and PrdMast.Product_Desc <> 'Out of Service'
					left outer join
					(
					SELECT 	LRI.Ref_Prod_Location,
									LRI.tank, 
									case	LRI.tank
										when	'0076'	then	'T0076'
										when	'0079'	then	'T0079'
										when	'0087'	then	'T0087'
										when	'0090'	then	'T0090'
										when	'0096'	then	'T0096'
										when	'0100'	then	'T0100'
										when	'0114'	then	'T0114'
										when	'0115'	then	'T0115'
										when	'0116'	then	'T0116'
										when	'0117'	then	'T0117'
										when	'0119'	then	'T0119'
										when	'0123'	then	'T0123'
										when	'0124'	then	'T0124'
										when	'0125'	then	'T0125'
										when	'0126'	then	'T0126'
										when	'0127'	then	'T0127'
										when	'0130'	then	'T0130'
										when	'0134'	then	'T0134'
										when	'0140'	then	'T0140'
										when	'0141'	then	'T0141'
										when	'0142'	then	'T0142'
										when	'0143'	then	'T0143'
										when	'0144'	then	'T0144'
										when	'0145'	then	'T0145'
										when	'0146'	then	'T0146'
										when	'0157'	then	'T0157'
										when	'0158'	then	'T0158'
										when	'0159'	then	'T0159'
										when	'0160'	then	'T0160'
										when	'0164'	then	'T0164'
										when	'0166'	then	'T0166'
										when	'0167'	then	'T0167'
										when	'0181'	then	'T0181'
										when	'0182'	then	'T0182'
										when	'0202'	then	'T0202'
										when	'0508'	then	'T0508'
										when	'0512'	then	'T0512'
										when	'0513'	then	'T0513'
										when	'0514'	then	'T0514'
										when	'0515'	then	'T0515'
										when	'0516'	then	'T0516'
										when	'0520'	then	'T0520'
										when	'4013'	then	'T4013'
										when	'4050'	then	'T4050'
										when	'4052'	then	'T4052'
										when	'4060'	then	'T4060'
										when	'4061'	then	'T4061'
										when	'4065'	then	'T4065'
										when	'4119'	then	'T4119'
										when	'4120'	then	'T4120'
										when	'4121'	then	'T4121'
										when	'4122'	then	'T4122'
										when	'4124'	then	'T4124'
										when	'4125'	then	'T4125'
										when	'4126'	then	'T4126'
										when	'4285'	then	'T4285'
										when	'4287'	then	'T4287'
										when	'4288'	then	'T4288'
										when	'4601'	then	'T4601'
										when	'4603'	then	'T4603'
										when	'0129'	then	'T0129'
										when	'0513'	then	'T0513'
										when	'0131'	then	'T0131'
										when	'4123'	then	'T4123'
										when	'4285'	then	'T4285'
										else 'N/A'
									end	PPL_Tank,
									LRI.component_name, 
									LRI.results_value,
									CAST(CAST(LRI.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRI.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) as DateTimeSampled
					FROM 		PROD_EDW_BASE_VIEWS.lab_results LRI INNER JOIN
									(
									SELECT	LRMX.Ref_Prod_Location, 
													LRMX.Component_Name, 
													LRMX.Tank,
													LRMX.date_sampled, 
													max(CAST(CAST(LRMX.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRMX.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
									FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMX
									WHERE 	LRMX.ref_prod_location = :Ref_Prod_Location AND 
													LRMX.date_sampled between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
													LRMX.tank in 	
													(
															'0076','0079','0087','0090','0096','0100','0114','0115','0116','0117','0119','0123','0124','0125','0126','0127','0130','0134','0140','0141',
															'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0202','0508','0512','0513',
															'0514','0515','0516','0520','4013','4050','4052','4060','4061','4065','4119','4120','4121','4122','4124','4125','4126','4285','4287','4288','4601','4603','0129','0513','0131','4123','4285'
													) and
													LRMX.component_name in ('RVP') and
													LRMX.product not in ('XCHK_MOGAS') 
									GROUP BY LRMX.Ref_Prod_Location, LRMX.Tank, LRMX.Component_Name, LRMX.date_sampled
								)  AS tmpMaxLabDate ON LRI.ref_prod_location = tmpMaxLabDate.ref_prod_location and
									LRI.component_name = tmpMaxLabDate.component_name and
									LRI.tank = tmpMaxLabDate.tank AND
					 				DateTimesampled = tmpMaxLabDate.MaxDateTimesampled and
									LRI.ref_prod_location = tmpMaxLabDate.Ref_Prod_Location
					WHERE 	LRI.product not in ('XCHK_MOGAS')
					union
					select		tmpMaxLabDateIN_NI.Ref_Prod_Location,
										tmpMaxLabDateIN_NI.Tank,
										case	tmpMaxLabDateIN_NI.tank
											when	'0076'	then	'T0076'
											when	'0079'	then	'T0079'
											when	'0087'	then	'T0087'
											when	'0090'	then	'T0090'
											when	'0096'	then	'T0096'
											when	'0100'	then	'T0100'
											when	'0114'	then	'T0114'
											when	'0115'	then	'T0115'
											when	'0116'	then	'T0116'
											when	'0117'	then	'T0117'
											when	'0119'	then	'T0119'
											when	'0123'	then	'T0123'
											when	'0124'	then	'T0124'
											when	'0125'	then	'T0125'
											when	'0126'	then	'T0126'
											when	'0127'	then	'T0127'
											when	'0130'	then	'T0130'
											when	'0134'	then	'T0134'
											when	'0140'	then	'T0140'
											when	'0141'	then	'T0141'
											when	'0142'	then	'T0142'
											when	'0143'	then	'T0143'
											when	'0144'	then	'T0144'
											when	'0145'	then	'T0145'
											when	'0146'	then	'T0146'
											when	'0157'	then	'T0157'
											when	'0158'	then	'T0158'
											when	'0159'	then	'T0159'
											when	'0160'	then	'T0160'
											when	'0164'	then	'T0164'
											when	'0166'	then	'T0166'
											when	'0167'	then	'T0167'
											when	'0181'	then	'T0181'
											when	'0182'	then	'T0182'
											when	'0202'	then	'T0202'											
											when	'0508'	then	'T0508'
											when	'0512'	then	'T0512'
											when	'0513'	then	'T0513'
											when	'0514'	then	'T0514'
											when	'0515'	then	'T0515'
											when	'0516'	then	'T0516'
											when	'0520'	then	'T0520'
											when	'4013'	then	'T4013'
											when	'4050'	then	'T4050'
											when	'4052'	then	'T4052'
											when	'4060'	then	'T4060'
											when	'4061'	then	'T4061'
											when	'4065'	then	'T4065'
											when	'4119'	then	'T4119'
											when	'4120'	then	'T4120'
											when	'4121'	then	'T4121'
											when	'4122'	then	'T4122'
											when	'4124'	then	'T4124'
											when	'4125'	then	'T4125'
											when	'4126'	then	'T4126'
											when	'4285'	then	'T4285'
											when	'4287'	then	'T4287'
											when	'4288'	then	'T4288'
											when	'4601'	then	'T4601'
										    when	'0129'	then	'T0129'
											when	'0513'	then	'T0513'
											when	'0131'	then	'T0131'
											when	'4123'	then	'T4123'
											when	'4285'	then	'T4285'
											when	'4603'	then	'T4603'
											else 'N/A'
										end	PPL_Tank,
										tmpMaxLabDateIN_NI.Component_Name,
										LTIN99.results_value,
										tmpMaxLabDateIN_NI.DateTimeSampled
						from			PROD_EDW_BASE_VIEWS.lab_results LTIN99 INNER JOIN
										(
											SELECT	LRMX.Ref_Prod_Location, 
															LRMX.Component_Name, 
															LRMX.Tank,
															cast(cast(cast((:eff_date-:NoofDaysPPL) as date format 'YYYY-MM-DD') as varchar(20))||' 00:00:00' as timestamp(0)) as DateTimeSampled,
															max(CAST(CAST(LRMX.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRMX.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
											FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMX
											WHERE 	LRMX.ref_prod_location =  :Ref_Prod_Location  AND 
															LRMX.tank in 	
															(
																'0076','0079','0087','0090','0096','0100','0114','0115','0116','0117','0119','0123','0124','0125','0126','0127','0130','0134','0140','0141',
																'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0202','0508','0512','0513',
																'0514','0515','0516','0520','4013','4050','4052','4060','4061','4065','4119','4120','4121','4122','4124','4125','4126','4285','4287','4288','4601','4603','0129','0513','0131','4123','4285'
															) and
															LRMX.component_name in ('RVP') and
															LRMX.product not in ('XCHK_MOGAS') and
															LRMX.Tank not in
															(
																SELECT	LRMXNI.Tank
																FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMXNI
																WHERE 	LRMXNI.ref_prod_location = :Ref_Prod_Location  AND 
																				LRMXNI.date_sampled  between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
																				LRMXNI.tank in 	
																				(
																					'0076','0079','0087','0090','0096','0100','0114','0115','0116','0117','0119','0123','0124','0125','0126','0127','0130','0134','0140','0141',
																					'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0202','0508','0512','0513',
																					'0514','0515','0516','0520','4013','4050','4052','4060','4061','4065','4119','4120','4121','4122','4124','4125','4126','4285','4287','4288','4601','4603','0129','0513','0131','4123','4285'
																				) and
																				LRMXNI.component_name in ('RVP') and
																				LRMXNI.product not in ('XCHK_MOGAS') 
															)
											GROUP BY LRMX.Ref_Prod_Location, LRMX.Component_Name, LRMX.Tank
										) as tmpMaxLabDateIN_NI on
										LTIN99.Ref_Prod_Location=tmpMaxLabDateIN_NI.Ref_Prod_Location and
										LTIN99.Tank=tmpMaxLabDateIN_NI.Tank and
										LTIN99.component_name=tmpMaxLabDateIN_NI.component_name and
										CAST(CAST(LTIN99.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LTIN99.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) =tmpMaxLabDateIN_NI.MaxDateTimesampled
					) RVP_Tab on InvDat.Ref_Prod_Location=RVP_Tab.Ref_Prod_Location and TnkMast.Master_Code=RVP_Tab.PPL_Tank and InvDat.Eff_Date = cast(RVP_Tab.DateTimeSampled as date)
					--upto here RVP
					left outer join
					(
					SELECT 	LRID.Ref_Prod_Location,
									LRID.tank, 
									case LRID.tank
										when	'0076'	then	'T0076'
										when	'0079'	then	'T0079'
										when	'0087'	then	'T0087'
										when	'0090'	then	'T0090'
										when	'0096'	then	'T0096'
										when	'0100'	then	'T0100'										
										when	'0114'	then	'T0114'
										when	'0115'	then	'T0115'
										when	'0116'	then	'T0116'
										when	'0117'	then	'T0117'
										when	'0119'	then	'T0119'
										when	'0123'	then	'T0123'
										when	'0124'	then	'T0124'
										when	'0125'	then	'T0125'
										when	'0126'	then	'T0126'
										when	'0127'	then	'T0127'
										when	'0130'	then	'T0130'
										when	'0134'	then	'T0134'
										when	'0140'	then	'T0140'
										when	'0141'	then	'T0141'
										when	'0142'	then	'T0142'
										when	'0143'	then	'T0143'
										when	'0144'	then	'T0144'
										when	'0145'	then	'T0145'
										when	'0146'	then	'T0146'
										when	'0157'	then	'T0157'
										when	'0158'	then	'T0158'
										when	'0159'	then	'T0159'
										when	'0160'	then	'T0160'
										when	'0164'	then	'T0164'
										when	'0166'	then	'T0166'
										when	'0167'	then	'T0167'
										when	'0181'	then	'T0181'
										when	'0182'	then	'T0182'
										when	'0202'	then	'T0202'
										when	'0508'	then	'T0508'
										when	'0512'	then	'T0512'
										when	'0513'	then	'T0513'
										when	'0514'	then	'T0514'
										when	'0515'	then	'T0515'
										when	'0516'	then	'T0516'
										when	'0520'	then	'T0520'
										when	'4013'	then	'T4013'
										when	'4050'	then	'T4050'
										when	'4052'	then	'T4052'
										when	'4060'	then	'T4060'
										when	'4061'	then	'T4061'
										when	'4065'	then	'T4065'
										when	'4119'	then	'T4119'
										when	'4120'	then	'T4120'
										when	'4121'	then	'T4121'
										when	'4122'	then	'T4122'
										when	'4124'	then	'T4124'
										when	'4125'	then	'T4125'
										when	'4126'	then	'T4126'
										when	'4285'	then	'T4285'
										when	'4287'	then	'T4287'
										when	'4288'	then	'T4288'
										when	'4601'	then	'T4601'
										when	'0129'	then	'T0129'
										when	'0513'	then	'T0513'
										when	'0131'	then	'T0131'
										when	'4123'	then	'T4123'
										when	'4285'	then	'T4285'
										when	'4603'	then	'T4603'
										else 'N/A'
									end	PPL_Tank,
									cast('DON' as varchar(50)) as component_name, 
									avg(LRID.results_value) as results_value,
									CAST(CAST(LRID.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRID.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) as DateTimeSampled
					FROM 		PROD_EDW_BASE_VIEWS.lab_results LRID INNER JOIN
									(
									SELECT	LRIDM.Ref_Prod_Location, 
													LRIDM.Component_Name, 
													LRIDM.Tank, 
													max(CAST(CAST(LRIDM.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRIDM.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
									FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRIDM
									WHERE 	LRIDM.ref_prod_location = :Ref_Prod_Location AND 
													LRIDM.date_sampled between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
													LRIDM.tank in 	
													(
															'0076','0079','0087','0090','0096','0100','0114','0115','0116','0117','0119','0123','0124','0125','0126','0127','0130','0134','0140','0141',
															'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0202','0508','0512','0513',
															'0514','0515','0516','0520','4013','4050','4052','4060','4061','4065','4119','4120','4121','4122','4124','4125','4126','4285','4287','4288','4601','4603','0129','0513','0131','4123','4285'
													) and
													LRIDM.component_name in ('Motor_Octane_D2700','Research_Octane_D2699') and
													LRIDM.product not in ('XCHK_MOGAS') 
									GROUP BY LRIDM.Ref_Prod_Location, LRIDM.Tank, LRIDM.Component_Name, LRIDM.date_sampled 
									)  AS tmpMaxLabDate ON LRID.ref_prod_location = tmpMaxLabDate.ref_prod_location and
									LRID.component_name = tmpMaxLabDate.component_name and
									LRID.tank = tmpMaxLabDate.tank AND
						 			DateTimesampled = tmpMaxLabDate.MaxDateTimesampled and
									LRID.ref_prod_location = LRID.Ref_Prod_Location
					WHERE 	LRID.product not in ('XCHK_MOGAS')				
					group by 	LRID.Ref_Prod_Location, LRID.tank, CAST(CAST(LRID.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRID.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))
					having avg(LRID.results_value) <> 0
					union
					select			tmpMaxLabDateIN_NI.Ref_Prod_Location,
										tmpMaxLabDateIN_NI.Tank,
										case	tmpMaxLabDateIN_NI.tank
											when	'0076'	then	'T0076'
											when	'0079'	then	'T0079'
											when	'0087'	then	'T0087'
											when	'0090'	then	'T0090'
											when	'0096'	then	'T0096'
											when	'0100'	then	'T0100'											
											when	'0114'	then	'T0114'
											when	'0115'	then	'T0115'
											when	'0116'	then	'T0116'
											when	'0117'	then	'T0117'
											when	'0119'	then	'T0119'
											when	'0123'	then	'T0123'
											when	'0124'	then	'T0124'
											when	'0125'	then	'T0125'
											when	'0126'	then	'T0126'
											when	'0127'	then	'T0127'
											when	'0130'	then	'T0130'
											when	'0134'	then	'T0134'
											when	'0140'	then	'T0140'
											when	'0141'	then	'T0141'
											when	'0142'	then	'T0142'
											when	'0143'	then	'T0143'
											when	'0144'	then	'T0144'
											when	'0145'	then	'T0145'
											when	'0146'	then	'T0146'
											when	'0157'	then	'T0157'
											when	'0158'	then	'T0158'
											when	'0159'	then	'T0159'
											when	'0160'	then	'T0160'
											when	'0164'	then	'T0164'
											when	'0166'	then	'T0166'
											when	'0167'	then	'T0167'
											when	'0181'	then	'T0181'
											when	'0182'	then	'T0182'
											when	'0202'	then	'T0202'
											when	'0508'	then	'T0508'
											when	'0512'	then	'T0512'
											when	'0513'	then	'T0513'
											when	'0514'	then	'T0514'
											when	'0515'	then	'T0515'
											when	'0516'	then	'T0516'
											when	'0520'	then	'T0520'
											when	'4013'	then	'T4013'
											when	'4050'	then	'T4050'
											when	'4052'	then	'T4052'
											when	'4060'	then	'T4060'
											when	'4061'	then	'T4061'
											when	'4065'	then	'T4065'
											when	'4119'	then	'T4119'
											when	'4120'	then	'T4120'
											when	'4121'	then	'T4121'
											when	'4122'	then	'T4122'
											when	'4124'	then	'T4124'
											when	'4125'	then	'T4125'
											when	'4126'	then	'T4126'
											when	'4285'	then	'T4285'
											when	'4287'	then	'T4287'
											when	'4288'	then	'T4288'
											when	'4601'	then	'T4601'
											when	'0129'	then	'T0129'
											when	'0513'	then	'T0513'
											when	'0131'	then	'T0131'
											when	'4123'	then	'T4123'
											when	'4285'	then	'T4285'
											when	'4603'	then	'T4603'
											else 'N/A'
										end	PPL_Tank,
										cast('DON' as varchar(50)) as component_name, 
										avg(LTIN99.results_value) as results_value,
										tmpMaxLabDateIN_NI.DateTimeSampled
						from			PROD_EDW_BASE_VIEWS.lab_results LTIN99 INNER JOIN
										(
											SELECT	LRMX.Ref_Prod_Location, 
															LRMX.Component_Name, 
															LRMX.Tank,
															cast(cast(cast((:eff_date-:NoofDaysPPL) as date format 'YYYY-MM-DD') as varchar(20))||' 00:00:00' as timestamp(0)) as DateTimeSampled,
															max(CAST(CAST(LRMX.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRMX.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
											FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMX
											WHERE 	LRMX.ref_prod_location =  :Ref_Prod_Location  AND 
															LRMX.tank in 	
															(
																'0076','0079','0087','0090','0096','0100','0114','0115','0116','0117','0119','0123','0124','0125','0126','0127','0130','0134','0140','0141',
																'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0202','0508','0512','0513',
																'0514','0515','0516','0520','4013','4050','4052','4060','4061','4065','4119','4120','4121','4122','4124','4125','4126','4285','4287','4288','4601','4603','0129','0513','0131','4123','4285'
															) and
															LRMX.component_name in ('Motor_Octane_D2700','Research_Octane_D2699') and
															LRMX.product not in ('XCHK_MOGAS') and
															LRMX.Tank not in
															(
																SELECT	LRMXNI.Tank
																FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMXNI
																WHERE 	LRMXNI.ref_prod_location =  :Ref_Prod_Location  AND 
																				LRMXNI.date_sampled  between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
																				LRMXNI.tank in 	
																				(
																					'0076','0079','0087','0090','0096','0100','0114','0115','0116','0117','0119','0123','0124','0125','0126','0127','0130','0134','0140','0141',
																					'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0202','0508','0512','0513',
																					'0514','0515','0516','0520','4013','4050','4052','4060','4061','4065','4119','4120','4121','4122','4124','4125','4126','4285','4287','4288','4601','4603','0129','0513','0131','4123','4285'
																				) and
																				LRMXNI.component_name in ('Motor_Octane_D2700','Research_Octane_D2699') and
																				LRMXNI.product not in ('XCHK_MOGAS') 
															)
											GROUP BY LRMX.Ref_Prod_Location, LRMX.Component_Name, LRMX.Tank
										) as tmpMaxLabDateIN_NI on
										LTIN99.Ref_Prod_Location=tmpMaxLabDateIN_NI.Ref_Prod_Location and
										LTIN99.Tank=tmpMaxLabDateIN_NI.Tank and
										LTIN99.component_name=tmpMaxLabDateIN_NI.component_name and
										CAST(CAST(LTIN99.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LTIN99.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) =tmpMaxLabDateIN_NI.MaxDateTimesampled
							group by 	tmpMaxLabDateIN_NI.Ref_Prod_Location, tmpMaxLabDateIN_NI.tank, tmpMaxLabDateIN_NI.DateTimeSampled
							having avg(LTIN99.results_value) <> 0			
					)DON_Tab on InvDat.Ref_Prod_Location=DON_Tab.Ref_Prod_Location and TnkMast.Master_Code=DON_Tab.PPL_Tank and InvDat.Eff_Date = cast(DON_Tab.DateTimeSampled as date)
					--upto here DON
where			InvDat.Ref_Prod_Location=:Ref_Prod_Location and
					InvDat.Eff_Date between (:eff_date-:NoofDaysPPL) and (:eff_date-1)  and
					PrdMast.Product_Desc in ('Albuquerque Sub Unleaded','Alkylate','Cat Gasoline','CBG Premium','CBG Unlead','CGHT Feed','Conv Premium','Conv Unlead','Heavy Reformate','Iso Butane','Light Reformate','Light Straight Run','Mixed Butane', 'Normal Butane','Olefins','Pemex Premium','Pemex Unleaded','Reformate','Southern New Mexico Unleaded','Sweet Heavy Straight Run (Hydrobate)','Toluene','Transmix','Tucson Sub Premium Unleaded','Tucson Subgrade Unleaded','Diesel Hydrotreater Feed','Jet Fuel (Jet A)','Diesel Hydrotreater Feed','Ultra Low Sulfur Diesel','Diesel Hydrotreater Feed','Aggregate Jet','Aggregate ULSD','Petroleum Distillates','FCC Feed','Process Water Stripper Feed','Shell ALK','Rerun Oil - w/ Benzene','Heavy Straight Run','Light Cycle Oil') and
					TnkMast.Master_Code in ('T4124','T4121','T4122','T4119','T4120','RC_BF_IB','T0087','T0160','T4288','TLF_IBUT','T0127','T0130','T0117','RC_BF_MB','T4052','T4125','RC_BF_NB','T0157','T0158','T0159','T4060','T4061','T4065','T4126','T0125','T0142','T0181','T0090','T0076','T0079','T0514','T0095','T0096','T0100','T0126','T0202','T4013','T4287','T4288','T4601','T0129','T0513','T0131','T4123','T4285','T4603')
--MBO Part
union
select	MBO_Vals.Ref_Prod_Location,
			MBO_Vals.MBO_Tank, 
			case MBO_Tank
				when	'TK076'		then	'T0076'
				when	'TK079'		then	'T0079'
				when	'TK087'		then	'T0087'
				when	'TK090'		then	'T0090'
				when	'TK114'		then	'T0114'
				when	'TK115'		then	'T0115'
				when	'TK116'		then	'T0116'
				when	'TK117'		then	'T0117'
				when	'TK119'		then	'T0119'
				when	'TK123'		then	'T0123'
				when	'TK124'		then	'T0124'
				when	'TK125'		then	'T0125'
				when	'TK126'		then	'T0126'
				when	'TK127'		then	'T0127'
				when	'TK130'		then	'T0130'
				when	'TK134'		then	'T0134'
				when	'TK140'		then	'T0140'
				when	'TK141'		then	'T0141'
				when	'TK142'		then	'T0142'
				when	'TK143'		then	'T0143'
				when	'TK144'		then	'T0144'
				when	'TK145'		then	'T0145'
				when	'TK146'		then	'T0146'
				when	'TK157'		then	'T0157'
				when	'TK158'		then	'T0158'
				when	'TK159'		then	'T0159'
				when	'TK160'		then	'T0160'
				when	'TK164'		then	'T0164'
				when	'TK166'		then	'T0166'
				when	'TK167'		then	'T0167'
				when	'TK181'		then	'T0181'
				when	'TK182'		then	'T0182'
				when	'TK508'		then	'T0508'
				when	'TK512'		then	'T0512'
				when	'TK513'		then	'T0513'
				when	'TK514'		then	'T0514'
				when	'TK515'		then	'T0515'
				when	'TK516'		then	'T0516'
				when	'TK520'		then	'T0520'
				when	'TK4050'	then	'T4050'
				when	'TK4052'	then	'T4052'
				when	'TK4060'	then	'T4060'
				when	'TK4061'	then	'T4061'
				when	'TK4119'	then	'T4119'
				when	'TK4120'	then	'T4120'
				when	'TK4121'	then	'T4121'
				when	'TK4122'	then	'T4122'
				when	'TK4124'	then	'T4124'
				when	'TK4125'	then	'T4125'
				when	'TK4126'	then	'T4126'
				when	'TK4285'	then	'T4285'
				when	'TK4288'	then	'T4288'	
				when	'TK095'		then	'T0095'
				when	'TK096'		then	'T0096'
				when	'TK100'		then	'T0100'
				when	'TK202'		then	'T0202'
				when	'TK4013'	then	'T4013'
				when	'TK097'		then	'T0097'
				when	'TK098'		then	'T0098'
				when	'TK099'		then	'T0099'
				when	'TK136'		then	'T0136'
				when	'TK165'		then	'T0165'
				when	'TK183'		then	'T0183'
				when	'TK4007'	then	'T4007'
				when	'TK4008'	then	'T4008'
				when	'TK4046'	then	'T4046'
				when	'TK4050'	then	'T4050'
				when	'TK4057'	then	'T4057'
				when	'TK4602'	then	'T4602'
				when	'TK4603'	then	'T4603'
				when	'TK4605'	then	'T4605'
				else 'N/A'
			end	PPL_Tank,
			cast(cast(MBO_Vals.Eff_Date as date format 'YYYY-MM-DD') as varchar(20))||PPL_Tank  as  Date_Tank,
			case	MBO_Vals.Product_Desc
				when	'ABQ Sub'										then	'Albuquerque Sub Unleaded'
				when	'Alky'												then	'Alkylate'
				when	'LCC-LSR'										then	'Cat Gasoline'
				when	'Phoenix Prem'								then	'CBG Premium'
				when	'Phoenix'										then	'CBG Unlead'
				when	'CBG Unlead'									then	'CBG Unlead'
				when	'El Paso/ABQ Prem'						then	'Conv Premium'
				when	'Conv Premium'								then	'Conv Premium'
				when	'El Paso Sub'									then	'Conv Unlead'
				when	'Conv Unlead'								then	'Conv Unlead'
				when	'Hvy Ref'										then	'Heavy Reformate'
				when	'Iso Butane'									then	'Iso Butane'
				when	'iC4'												then	'Iso Butane'
				when	'Lt Ref'											then	'Light Reformate'
				when	'LSR'												then	'Light Straight Run'
				when	'Mixed Butane'								then	'Mixed Butane'
				when	'SlopC4'										then	'Mixed Butane' 
				when	'Normal Butane'								then	'Normal Butane'
				when	'nC4'												then	'Normal Butane'
				when	'Pemex Prem'								then	'Pemex Premium'
				when	'Pemex Reg'									then	'Pemex Unleaded'
				when	'Ref'												then	'Reformate'
				when	'Southern New Mexico Unleaded'	then	'Southern New Mexico Unleaded'
				when	'Hydrobate'									then	'Sweet Heavy Straight Run (Hydrobate)'
				when	'TOL'												then	'Toluene'
				when	'Transmix'										then	'Transmix'
				when	'Tuc Prem'										then	'Tucson Sub Premium Unleaded'
				when	'Tucson Sub Premium Unleaded'		then	'Tucson Sub Premium Unleaded'
				when	'Tucson Sub'									then	'Tucson Subgrade Unleaded'
				when	'Tucson Subgrade Unleaded'			then	'Tucson Subgrade Unleaded'
				when	'Gasoline Slop' 								then 'Gasoline Slop'
				when	'DHT Feedstock'							then	'Diesel Hydrotreater Feed'
				when	'Jet'												then	'Jet Fuel (Jet A)'
				when	'LCO'												then	'Light Cycle Oil'
				when	'ULSD'											then	'Ultra Low Sulfur Diesel'
				when	'DHT Feedstock Tank'					then	'Diesel Hydrotreater Feed'
				when	'Aggregate Jet'								then	'Aggregate Jet'
				when	'Aggregate ULSD'							then	'Aggregate ULSD'
				when	'Petroleum Distillates'							then	'Petroleum Distillates'
				when	'FCC Feed'							then	'FCC Feed'
				when	'Process Water Stripper Feed'							then	'Process Water Stripper Feed'
				when	'Shell ALK'							then	'Shell ALK'
				when	'Rerun Oil - w/ Benzene'							then	'Rerun Oil - w/ Benzene'
				when	'Heavy Straight Run'	then	'Heavy Straight Run'
			else 'N/A'  
			end as Product_Desc_PPL,
			MBO_Vals.Product_Desc as Product_Desc_MBO, 
			MBO_Vals.Eff_Date, 
			MBO_Vals.TNK_CASE,
			cast('MBO' as varchar(20)) as prop_type,
			sum(MBO_Vals.Gross_Product) as Gross_Product, 
			sum(MBO_Vals.Aval_Product) as Aval_Product,
			sum(MBO_Vals.Aval_Capacity) as Aval_Capacity,
			cast(null as float) as Safe_Fill,
			sum(MBO_Vals.RVP) as RVP,
			sum(MBO_Vals.DON) as DON,
			sum(MBO_Vals.TL_MINW) as TL_MINW, 
			sum(MBO_Vals.TL_MAXW) as TL_MAXW, 
			sum(MBO_Vals.MINW) as MINW, 
			sum(MBO_Vals.MAXW) as MAXW, 
			sum(MBO_Vals.Work_Min) as Work_Min,
			sum(MBO_Vals.Work_Max) as Work_Max 
from			
			(
			select  MTI.Ref_Prod_Location,
						MTI.TANK_ID as MBO_Tank, 
						MTI.TI_DESCRIPTION as Product_Desc, 
						COALESCE(cast(MTV.value_date as date),:eff_date) as Eff_Date, 
						COALESCE(MTV.TNK_CASE, :TNK_CASE) as TNK_CASE,
						cast('MBO Vol' as varchar(20)) as prop_type,
						MTV.TNK_VALUE as Gross_Product, 
						cast(0 as float) as Aval_Product,
						cast(0 as float) as Aval_Capacity,
						cast(null as float) as RVP,
						cast(null as float) as DON,
						MTL.TL_MINW, 
						MTL.TL_MAXW, 
						MTI.MINW, 
						MTI.MAXW, 
						case when MTL.TL_MINW is null then MTI.MINW else MTL.TL_MINW end Work_Min,
						case when MTL.TL_MAXW is null then MTI.MAXW else MTL.TL_MAXW end Work_Max 
			from 	PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI  
						left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV on  MTI.Ref_Prod_Location=MTV.Ref_Prod_Location and MTI.tank_id=MTV.tank_id and MTV.prop ='VOL' and cast(MTV.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and MTV.TNK_CASE=:TNK_CASE
						left outer join PROD_EDW_BASE_VIEWS.MBO_TREND_LIMIT MTL on MTI.Ref_Prod_Location=MTL.Ref_Prod_Location and MTI.tank_id=MTL.tank_id and cast(MTL.tl_date as date)  = cast(MTV.value_date as date) 
			where 	MTI.tank_id in 
						( 
								'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK126','TK127','TK130','TK134','TK140','TK141','TK142',
								'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
								'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
								'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
								'TK095','TK096','TK097','TK098','TK099','TK100','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
						) and
						MTI.Ref_Prod_Location=:Ref_Prod_Location
			union
			--RVP Query
			select  MTV.Ref_Prod_Location,
						MTV.TANK_ID as MBO_Tank,
						MTI.TI_DESCRIPTION as Product_Desc, 
						cast(MTV.value_date as date) as Eff_Date, 
						MTV.TNK_CASE, 
						cast('MBO RVP' as varchar(20)) as prop_type,
						cast(0 as float) as Gross_Product,
						cast(0 as float) as Aval_Product,
						cast(0 as float) as Aval_Capacity,
						MTV.TNK_VALUE as RVP, 
						cast(null as float) as DON,
						cast(0 as float)  as TL_MINW, 
						cast(0 as float) as TL_MAXW, 
						cast(0 as float) as MINW, 
						cast(0 as float) as MAXW, 
						cast(0 as float) as Work_Min,
						cast(0 as float)  as Work_Max 
			from 	PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
						left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI on MTV.Ref_Prod_Location=MTI.Ref_Prod_Location and MTV.tank_id=MTI.tank_id
			where 	MTV.prop ='RVP' and
						cast(MTV.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
						MTV.TNK_CASE=:TNK_CASE and
						MTV.Ref_Prod_Location=:Ref_Prod_Location and
						MTV.tank_id in 
						( 
								'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK126','TK127','TK130','TK134','TK140','TK141','TK142',
								'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
								'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
								'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
								'TK095','TK096','TK097','TK098','TK099','TK100','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
						)
			union
			--RVP Not available in the date range
			select			MTV_RVPNF.Ref_Prod_Location,
								MTV_RVPNF.TANK_ID as MBO_Tank,
								NFRVPDET.Product_Desc as Product_Desc, 
								cast(:eff_date as date) as Eff_Date, 
								MTV_RVPNF.TNK_CASE, 
								cast('MBO RVP' as varchar(20)) as prop_type,
								cast(0 as float) as Gross_Product,
								cast(0 as float) as Aval_Product,
								cast(0 as float) as Aval_Capacity,
								MTV_RVPNF.TNK_VALUE as RVP, 
								cast(null as float) as DON,
								cast(0 as float)  as TL_MINW, 
								cast(0 as float) as TL_MAXW, 
								cast(0 as float) as MINW, 
								cast(0 as float) as MAXW, 
								cast(0 as float) as Work_Min,
								cast(0 as float)  as Work_Max 
			from				PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_RVPNF inner join	
								(
									select  			MTV.Ref_Prod_Location,
														MTV.TANK_ID as MBO_Tank,
														MTI.TI_DESCRIPTION as Product_Desc, 
														MTV.TNK_CASE,
														max(cast(MTV.value_date as date)) as Max_Eff_Date
									from 			PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
														on MTI.Ref_Prod_Location=MTV.Ref_Prod_Location and MTI.tank_id=MTV.tank_id
									where 			MTV.prop ='RVP' and
														MTV.TNK_CASE= :TNK_CASE and
														MTV.Ref_Prod_Location= :Ref_Prod_Location and
														MTV.tank_id in 
														( 
															'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK126','TK127','TK130','TK134','TK140','TK141','TK142',
															'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
															'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
															'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
															'TK095','TK096','TK097','TK098','TK099','TK100','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
														)	and
														MTV.tank_id not in
														(
																select 	distinct	 MTV_NA1.tank_id
																from		PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_NA1
																where	cast(MTV_NA1.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
																			MTV_NA1.TNK_CASE= :TNK_CASE and
																			MTV_NA1.Ref_Prod_Location= :Ref_Prod_Location and
																			MTV_NA1.prop ='RVP'  and
																			MTV_NA1.tank_id in 
																			( 
																				'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK126','TK127','TK130','TK134','TK140','TK141','TK142',
																				'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
																				'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
																				'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
																				'TK095','TK096','TK097','TK098','TK099','TK100','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
																			)	
														)
									group by		MTV.Ref_Prod_Location, MTV.TANK_ID, MTI.TI_DESCRIPTION, MTV.TNK_CASE		
								)NFRVPDET	on	MTV_RVPNF.Ref_Prod_Location=NFRVPDET.Ref_Prod_Location and
								MTV_RVPNF.TANK_ID=NFRVPDET.MBO_Tank and
								MTV_RVPNF.prop ='RVP' and
								MTV_RVPNF.TNK_CASE= :TNK_CASE and
								cast(MTV_RVPNF.value_date as date) = NFRVPDET.Max_Eff_Date	
			union					
			--DON Query 
			select  MTV.Ref_Prod_Location,
						MTV.TANK_ID as MBO_Tank,
						MTI.TI_DESCRIPTION as Product_Desc, 
						cast(MTV.value_date as date) as Eff_Date, 
						MTV.TNK_CASE, 
						cast('MBO DON' as varchar(20)) as prop_type,
						cast(0 as float) as Gross_Product,
						cast(0 as float) as Aval_Product,
						cast(0 as float) as Aval_Capacity,
						cast(null as float) as RVP,
						MTV.TNK_VALUE as DON,
						cast(0 as float)  as TL_MINW, 
						cast(0 as float) as TL_MAXW, 
						cast(0 as float) as MINW, 
						cast(0 as float) as MAXW, 
						cast(0 as float) as Work_Min,
						cast(0 as float)  as Work_Max 
			from 	PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
						left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI on MTV.Ref_Prod_Location=MTI.Ref_Prod_Location and MTV.tank_id=MTI.tank_id
			where 	MTV.prop ='RM2' and
						cast(MTV.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
						MTV.TNK_CASE=:TNK_CASE and
						MTV.Ref_Prod_Location=:Ref_Prod_Location and
						MTV.tank_id in 
						( 
								'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK126','TK127','TK130','TK134','TK140','TK141','TK142',
								'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
								'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
								'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
								'TK095','TK096','TK097','TK098','TK099','TK100','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
						)
			--MBO DON NV Qry
			union
			select			MTV_DONNF.Ref_Prod_Location,
								MTV_DONNF.TANK_ID as MBO_Tank,
								NFDONDET.Product_Desc as Product_Desc, 
								cast(:eff_date as date) as Eff_Date, 
								MTV_DONNF.TNK_CASE, 
								cast('MBO DON' as varchar(20)) as prop_type,
								cast(0 as float) as Gross_Product,
								cast(0 as float) as Aval_Product,
								cast(0 as float) as Aval_Capacity,
								cast(null as float) as RVP,
								MTV_DONNF.TNK_VALUE as DON,
								cast(0 as float)  as TL_MINW, 
								cast(0 as float) as TL_MAXW, 
								cast(0 as float) as MINW, 
								cast(0 as float) as MAXW, 
								cast(0 as float) as Work_Min,
								cast(0 as float)  as Work_Max 
			from				PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_DONNF inner join	
								(
										select  			MTV.Ref_Prod_Location,
															MTV.TANK_ID as MBO_Tank,
															MTI.TI_DESCRIPTION as Product_Desc, 
															MTV.TNK_CASE,
															max(cast(MTV.value_date as date)) as Max_Eff_Date
										from 			PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
															on MTI.Ref_Prod_Location=MTV.Ref_Prod_Location and MTI.tank_id=MTV.tank_id
										where 			MTV.prop ='RM2' and
															MTV.TNK_CASE= :TNK_CASE and
															MTV.Ref_Prod_Location= :Ref_Prod_Location and
															MTV.tank_id in 
															( 
																	'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK126','TK127','TK130','TK134','TK140','TK141','TK142',
																	'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
																	'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
																	'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
																	'TK095','TK096','TK097','TK098','TK099','TK100','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
															)	and
															MTV.tank_id not in
															(
																	select 	distinct	 MTV_NA1.tank_id
																	from		PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_NA1
																	where	cast(MTV_NA1.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
																				MTV_NA1.TNK_CASE= :TNK_CASE and
																				MTV_NA1.Ref_Prod_Location= :Ref_Prod_Location and
																				MTV_NA1.prop ='RM2'  and
																				MTV_NA1.tank_id in 
																				( 
																						'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK126','TK127','TK130','TK134','TK140','TK141','TK142',
																						'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
																						'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
																						'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
																						'TK095','TK096','TK097','TK098','TK099','TK100','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
																				)	
															)
										group by		MTV.Ref_Prod_Location, MTV.TANK_ID, MTI.TI_DESCRIPTION, MTV.TNK_CASE		
								)NFDONDET	on	MTV_DONNF.Ref_Prod_Location=NFDONDET.Ref_Prod_Location and
								MTV_DONNF.TANK_ID=NFDONDET.MBO_Tank and
								MTV_DONNF.prop ='RM2' and
								MTV_DONNF.TNK_CASE= :TNK_CASE and
								cast(MTV_DONNF.value_date as date) = NFDONDET.Max_Eff_Date								
						
			) MBO_Vals
			where		PPL_Tank in ('T4124','T4121','T4122','T4119','T4120','RC_BF_IB','T0087','T0160','T4288','TLF_IBUT','T0127','T0130','T0117','RC_BF_MB','T4052','T4125','RC_BF_NB','T0157','T0158','T0159','T4060','T4126','T0125','T0142','T0181','T0090','T0076','T0079','T0514','T0095','T0096','T0100','T0126','T0202','T4013','T0129','T0513','T0131','T4123','T4285','T4603')
			group by 	MBO_Vals.Ref_Prod_Location, MBO_Vals.MBO_Tank, MBO_Vals.Product_Desc, MBO_Vals.Eff_Date, MBO_Vals.TNK_CASE 
			order by 	3, 6;
);
--------------------------------------------------------------------------------

/*
exec prod_refops_views.m_PPL_MBO_FUTR_TNK_VOLS_FG (?,?,?,?,?);
exec prod_refops_views.m_PPL_MBO_FUTR_TNK_VOLS_FG ('2018-01-01','Base','El Paso Refinery',50,50);
*/
replace macro PROD_EDW_BASE_VIEWS.m_PPL_MBO_FUTR_TNK_VOLS_FG (eff_date date, TNK_CASE varchar(50), Ref_Prod_Location varchar(20), NoofDaysPPL integer, NoofDaysMBO integer) as
(
--PPL Part
select 			InvDat.Ref_Prod_Location, 
					cast (null as varchar(32)) as MBO_Tank,					
					TnkMast.Master_Code as PPL_Tank,
					cast(cast(InvDat.Eff_Date as date format 'YYYY-MM-DD') as varchar(20))||TnkMast.Master_Code  as  Date_Tank,
					cast(PrdMast.Product_Desc as varchar(255)) as Product_Desc_PPL,
					Cast(null as varchar(255)) as Product_Desc_MBO, 
					InvDat.Eff_Date, 
					:TNK_CASE as TNK_CASE,
					cast('PPL' as varchar(20)) as prop_type,
					InvDat.Gross_Quantity as Gross_Product,
					case 
						when (InvDat.Gross_Quantity-TnkDet.Min_Op_Qty) > 0 then (InvDat.Gross_Quantity-TnkDet.Min_Op_Qty)
						else 0 
					end as Aval_Product,
					TnkDet.Max_Op_Qty-InvDat.Gross_Quantity as Aval_Capacity,
					TnkDet.Max_Op_Qty as Safe_Fill,
					RVP_Tab.results_value as RVP,
					DON_Tab.results_value as DON,
					cast(0 as float)  as TL_MINW, 
					cast(0 as float) as TL_MAXW, 
					cast(0 as float) as MINW, 
					cast(0 as float) as MAXW, 
					cast(0 as float) as Work_Min,
					cast(0 as float)  as Work_Max 
from				PROD_EDW_BASE_VIEWS.TANK InvDat 
					inner join PROD_EDW_BASE_VIEWS.Master TnkMast on InvDat.Ref_Prod_Location = TnkMast.Ref_Prod_Location and InvDat.Tank_ID = TnkMast.Master_ID
					inner join PROD_EDW_BASE_VIEWS.Tank_Info TnkDet on InvDat.Ref_Prod_Location = TnkDet.Ref_Prod_Location and InvDat.Tank_ID = TnkDet.Tank_ID
					inner join PROD_EDW_BASE_VIEWS.REF_PRODUCT PrdMast on InvDat.Ref_Prod_Location = PrdMast.Ref_Prod_Location and InvDat.Product_ID = PrdMast.Product_ID and PrdMast.Product_Desc <> 'Out of Service'
					left outer join
					(
					SELECT 	LRI.Ref_Prod_Location,
									LRI.tank, 
									case	LRI.tank
										when	'0076'	then	'T0076'
										when	'0079'	then	'T0079'
										when	'0087'	then	'T0087'
										when	'0090'	then	'T0090'
										when	'0114'	then	'T0114'
										when	'0115'	then	'T0115'
										when	'0116'	then	'T0116'
										when	'0117'	then	'T0117'
										when	'0119'	then	'T0119'
										when	'0123'	then	'T0123'
										when	'0124'	then	'T0124'
										when	'0125'	then	'T0125'
										when	'0127'	then	'T0127'
										when	'0130'	then	'T0130'
										when	'0134'	then	'T0134'
										when	'0140'	then	'T0140'
										when	'0141'	then	'T0141'
										when	'0142'	then	'T0142'
										when	'0143'	then	'T0143'
										when	'0144'	then	'T0144'
										when	'0145'	then	'T0145'
										when	'0146'	then	'T0146'
										when	'0157'	then	'T0157'
										when	'0158'	then	'T0158'
										when	'0159'	then	'T0159'
										when	'0160'	then	'T0160'
										when	'0164'	then	'T0164'
										when	'0166'	then	'T0166'
										when	'0167'	then	'T0167'
										when	'0181'	then	'T0181'
										when	'0182'	then	'T0182'
										when	'0508'	then	'T0508'
										when	'0512'	then	'T0512'
										when	'0513'	then	'T0513'
										when	'0514'	then	'T0514'
										when	'0515'	then	'T0515'
										when	'0516'	then	'T0516'
										when	'0517'	then	'T0517'
										when	'0518'	then	'T0518'
										when	'0519'	then	'T0519'
										when	'0520'	then	'T0520'
										when	'4050'	then	'T4050'
										when	'4052'	then	'T4052'
										when	'4060'	then	'T4060'
										when	'4061'	then	'T4061'
										when	'4119'	then	'T4119'
										when	'4120'	then	'T4120'
										when	'4121'	then	'T4121'
										when	'4122'	then	'T4122'
										when	'4124'	then	'T4124'
										when	'4125'	then	'T4125'
										when	'4126'	then	'T4126'
										when	'4285'	then	'T4285'
										when	'4288'	then	'T4288'
										when	'0107'	then	'T0107'
										when	'0521'	then	'T0521'
										when	'0522'	then	'T0522'
										when	'4040'	then	'T4040'
										else 'N/A'
									end	PPL_Tank,
									LRI.component_name, 
									LRI.results_value,
									CAST(CAST(LRI.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRI.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) as DateTimeSampled
					FROM 		PROD_EDW_BASE_VIEWS.lab_results LRI INNER JOIN
									(
									SELECT	LRMX.Ref_Prod_Location, 
													LRMX.Component_Name, 
													LRMX.Tank,
													LRMX.date_sampled, 
													max(CAST(CAST(LRMX.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRMX.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
									FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMX
									WHERE 	LRMX.ref_prod_location = :Ref_Prod_Location AND 
													LRMX.date_sampled between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
													LRMX.tank in 	
													(
															'0076','0079','0087','0090','0114','0115','0116','0117','0119','0123','0124','0125','0127','0130','0134','0140','0141',
															'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0508','0512','0513',
															'0514','0515','0516','0517','0518','0519','0520','4050','4052','4060','4061','4119','4120','4121','4122','4124','4125','4126','4285','4288','0107', '0521', '0522', '4040'
													) and
													LRMX.component_name in ('RVP_Average') and
													LRMX.product not in ('XCHK_MOGAS') 
									GROUP BY LRMX.Ref_Prod_Location, LRMX.Tank, LRMX.Component_Name, LRMX.date_sampled
								)  AS tmpMaxLabDate ON LRI.ref_prod_location = tmpMaxLabDate.ref_prod_location and
									LRI.component_name = tmpMaxLabDate.component_name and
									LRI.tank = tmpMaxLabDate.tank AND
					 				DateTimesampled = tmpMaxLabDate.MaxDateTimesampled and
									LRI.ref_prod_location = tmpMaxLabDate.Ref_Prod_Location
					WHERE 	LRI.product not in ('XCHK_MOGAS')
					union
					select		tmpMaxLabDateIN_NI.Ref_Prod_Location,
										tmpMaxLabDateIN_NI.Tank,
										case	tmpMaxLabDateIN_NI.tank
											when	'0076'	then	'T0076'
											when	'0079'	then	'T0079'
											when	'0087'	then	'T0087'
											when	'0090'	then	'T0090'
											when	'0114'	then	'T0114'
											when	'0115'	then	'T0115'
											when	'0116'	then	'T0116'
											when	'0117'	then	'T0117'
											when	'0119'	then	'T0119'
											when	'0123'	then	'T0123'
											when	'0124'	then	'T0124'
											when	'0125'	then	'T0125'
											when	'0127'	then	'T0127'
											when	'0130'	then	'T0130'
											when	'0134'	then	'T0134'
											when	'0140'	then	'T0140'
											when	'0141'	then	'T0141'
											when	'0142'	then	'T0142'
											when	'0143'	then	'T0143'
											when	'0144'	then	'T0144'
											when	'0145'	then	'T0145'
											when	'0146'	then	'T0146'
											when	'0157'	then	'T0157'
											when	'0158'	then	'T0158'
											when	'0159'	then	'T0159'
											when	'0160'	then	'T0160'
											when	'0164'	then	'T0164'
											when	'0166'	then	'T0166'
											when	'0167'	then	'T0167'
											when	'0181'	then	'T0181'
											when	'0182'	then	'T0182'
											when	'0508'	then	'T0508'
											when	'0512'	then	'T0512'
											when	'0513'	then	'T0513'
											when	'0514'	then	'T0514'
											when	'0515'	then	'T0515'
											when	'0516'	then	'T0516'
											when	'0517'	then	'T0517'
											when	'0518'	then	'T0518'
											when	'0519'	then	'T0519'
											when	'0520'	then	'T0520'
											when	'4050'	then	'T4050'
											when	'4052'	then	'T4052'
											when	'4060'	then	'T4060'
											when	'4061'	then	'T4061'
											when	'4119'	then	'T4119'
											when	'4120'	then	'T4120'
											when	'4121'	then	'T4121'
											when	'4122'	then	'T4122'
											when	'4124'	then	'T4124'
											when	'4125'	then	'T4125'
											when	'4126'	then	'T4126'
											when	'4285'	then	'T4285'
											when	'4288'	then	'T4288'
											when	'0107'	then	'T0107'
											when	'0521'	then	'T0521'
											when	'0522'	then	'T0522'
											when	'4040'	then	'T4040'											
											else 'N/A'
										end	PPL_Tank,
										tmpMaxLabDateIN_NI.Component_Name,
										LTIN99.results_value,
										tmpMaxLabDateIN_NI.DateTimeSampled
						from			PROD_EDW_BASE_VIEWS.lab_results LTIN99 INNER JOIN
										(
											SELECT	LRMX.Ref_Prod_Location, 
															LRMX.Component_Name, 
															LRMX.Tank,
															cast(cast(cast((:eff_date-:NoofDaysPPL) as date format 'YYYY-MM-DD') as varchar(20))||' 00:00:00' as timestamp(0)) as DateTimeSampled,
															max(CAST(CAST(LRMX.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRMX.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
											FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMX
											WHERE 	LRMX.ref_prod_location =  :Ref_Prod_Location  AND 
															LRMX.tank in 	
															(
																'0076','0079','0087','0090','0114','0115','0116','0117','0119','0123','0124','0125','0127','0130','0134','0140','0141',
																'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0508','0512','0513',
																'0514','0515','0516','0517','0518','0519','0520','4050','4052','4060','4061','4119','4120','4121','4122','4124','4125','4126','4285','4288','0107', '0521', '0522', '4040'
															) and
															LRMX.component_name in ('RVP_Average') and
															LRMX.product not in ('XCHK_MOGAS') and
															LRMX.Tank not in
															(
																SELECT	LRMXNI.Tank
																FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMXNI
																WHERE 	LRMXNI.ref_prod_location = :Ref_Prod_Location  AND 
																				LRMXNI.date_sampled  between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
																				LRMXNI.tank in 	
																				(
																					'0076','0079','0087','0090','0114','0115','0116','0117','0119','0123','0124','0125','0127','0130','0134','0140','0141',
																					'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0508','0512','0513',
																					'0514','0515','0516','0517','0518','0519','0520','4050','4052','4060','4061','4119','4120','4121','4122','4124','4125','4126','4285','4288','0107', '0521', '0522', '4040'
																				) and
																				LRMXNI.component_name in ('RVP_Average') and
																				LRMXNI.product not in ('XCHK_MOGAS') 
															)
											GROUP BY LRMX.Ref_Prod_Location, LRMX.Component_Name, LRMX.Tank
										) as tmpMaxLabDateIN_NI on
										LTIN99.Ref_Prod_Location=tmpMaxLabDateIN_NI.Ref_Prod_Location and
										LTIN99.Tank=tmpMaxLabDateIN_NI.Tank and
										LTIN99.component_name=tmpMaxLabDateIN_NI.component_name and
										CAST(CAST(LTIN99.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LTIN99.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) =tmpMaxLabDateIN_NI.MaxDateTimesampled
					) RVP_Tab on InvDat.Ref_Prod_Location=RVP_Tab.Ref_Prod_Location and TnkMast.Master_Code=RVP_Tab.PPL_Tank and InvDat.Eff_Date = cast(RVP_Tab.DateTimeSampled as date)
					--upto here RVP
					left outer join
					(
					SELECT 	LRID.Ref_Prod_Location,
									LRID.tank, 
									case LRID.tank
										when	'0076'	then	'T0076'
										when	'0079'	then	'T0079'
										when	'0087'	then	'T0087'
										when	'0090'	then	'T0090'
										when	'0114'	then	'T0114'
										when	'0115'	then	'T0115'
										when	'0116'	then	'T0116'
										when	'0117'	then	'T0117'
										when	'0119'	then	'T0119'
										when	'0123'	then	'T0123'
										when	'0124'	then	'T0124'
										when	'0125'	then	'T0125'
										when	'0127'	then	'T0127'
										when	'0130'	then	'T0130'
										when	'0134'	then	'T0134'
										when	'0140'	then	'T0140'
										when	'0141'	then	'T0141'
										when	'0142'	then	'T0142'
										when	'0143'	then	'T0143'
										when	'0144'	then	'T0144'
										when	'0145'	then	'T0145'
										when	'0146'	then	'T0146'
										when	'0157'	then	'T0157'
										when	'0158'	then	'T0158'
										when	'0159'	then	'T0159'
										when	'0160'	then	'T0160'
										when	'0164'	then	'T0164'
										when	'0166'	then	'T0166'
										when	'0167'	then	'T0167'
										when	'0181'	then	'T0181'
										when	'0182'	then	'T0182'
										when	'0508'	then	'T0508'
										when	'0512'	then	'T0512'
										when	'0513'	then	'T0513'
										when	'0514'	then	'T0514'
										when	'0515'	then	'T0515'
										when	'0516'	then	'T0516'
										when	'0517'	then	'T0517'
										when	'0518'	then	'T0518'
										when	'0519'	then	'T0519'
										when	'0520'	then	'T0520'
										when	'4050'	then	'T4050'
										when	'4052'	then	'T4052'
										when	'4060'	then	'T4060'
										when	'4061'	then	'T4061'
										when	'4119'	then	'T4119'
										when	'4120'	then	'T4120'
										when	'4121'	then	'T4121'
										when	'4122'	then	'T4122'
										when	'4124'	then	'T4124'
										when	'4125'	then	'T4125'
										when	'4126'	then	'T4126'
										when	'4285'	then	'T4285'
										when	'4288'	then	'T4288'
										when	'0107'	then	'T0107'
										when	'0521'	then	'T0521'
										when	'0522'	then	'T0522'
										when	'4040'	then	'T4040'
										else 'N/A'
									end	PPL_Tank,
									cast('DON' as varchar(50)) as component_name, 
									avg(LRID.results_value) as results_value,
									CAST(CAST(LRID.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRID.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) as DateTimeSampled
					FROM 		PROD_EDW_BASE_VIEWS.lab_results LRID INNER JOIN
									(
									SELECT	LRIDM.Ref_Prod_Location, 
													LRIDM.Component_Name, 
													LRIDM.Tank, 
													max(CAST(CAST(LRIDM.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRIDM.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
									FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRIDM
									WHERE 	LRIDM.ref_prod_location = :Ref_Prod_Location AND 
													LRIDM.date_sampled between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
													LRIDM.tank in 	
													(
															'0076','0079','0087','0090','0114','0115','0116','0117','0119','0123','0124','0125','0127','0130','0134','0140','0141',
															'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0508','0512','0513',
															'0514','0515','0516','0517','0518','0519','0520','4050','4052','4060','4061','4119','4120','4121','4122','4124','4125','4126','4285','4288','0107', '0521', '0522', '4040'
													) and
													LRIDM.component_name in ('Motor_Octane_D2700','Research_Octane_D2699') and
													LRIDM.product not in ('XCHK_MOGAS') 
									GROUP BY LRIDM.Ref_Prod_Location, LRIDM.Tank, LRIDM.Component_Name, LRIDM.date_sampled 
									)  AS tmpMaxLabDate ON LRID.ref_prod_location = tmpMaxLabDate.ref_prod_location and
									LRID.component_name = tmpMaxLabDate.component_name and
									LRID.tank = tmpMaxLabDate.tank AND
						 			DateTimesampled = tmpMaxLabDate.MaxDateTimesampled and
									LRID.ref_prod_location = LRID.Ref_Prod_Location
					WHERE 	LRID.product not in ('XCHK_MOGAS')				
					group by 	LRID.Ref_Prod_Location, LRID.tank, CAST(CAST(LRID.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRID.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))
					having avg(LRID.results_value) <> 0
					union
					select			tmpMaxLabDateIN_NI.Ref_Prod_Location,
										tmpMaxLabDateIN_NI.Tank,
										case	tmpMaxLabDateIN_NI.tank
											when	'0076'	then	'T0076'
											when	'0079'	then	'T0079'
											when	'0087'	then	'T0087'
											when	'0090'	then	'T0090'
											when	'0114'	then	'T0114'
											when	'0115'	then	'T0115'
											when	'0116'	then	'T0116'
											when	'0117'	then	'T0117'
											when	'0119'	then	'T0119'
											when	'0123'	then	'T0123'
											when	'0124'	then	'T0124'
											when	'0125'	then	'T0125'
											when	'0127'	then	'T0127'
											when	'0130'	then	'T0130'
											when	'0134'	then	'T0134'
											when	'0140'	then	'T0140'
											when	'0141'	then	'T0141'
											when	'0142'	then	'T0142'
											when	'0143'	then	'T0143'
											when	'0144'	then	'T0144'
											when	'0145'	then	'T0145'
											when	'0146'	then	'T0146'
											when	'0157'	then	'T0157'
											when	'0158'	then	'T0158'
											when	'0159'	then	'T0159'
											when	'0160'	then	'T0160'
											when	'0164'	then	'T0164'
											when	'0166'	then	'T0166'
											when	'0167'	then	'T0167'
											when	'0181'	then	'T0181'
											when	'0182'	then	'T0182'
											when	'0508'	then	'T0508'
											when	'0512'	then	'T0512'
											when	'0513'	then	'T0513'
											when	'0514'	then	'T0514'
											when	'0515'	then	'T0515'
											when	'0516'	then	'T0516'
											when	'0517'	then	'T0517'
											when	'0518'	then	'T0518'
											when	'0519'	then	'T0519'
											when	'0520'	then	'T0520'
											when	'4050'	then	'T4050'
											when	'4052'	then	'T4052'
											when	'4060'	then	'T4060'
											when	'4061'	then	'T4061'
											when	'4119'	then	'T4119'
											when	'4120'	then	'T4120'
											when	'4121'	then	'T4121'
											when	'4122'	then	'T4122'
											when	'4124'	then	'T4124'
											when	'4125'	then	'T4125'
											when	'4126'	then	'T4126'
											when	'4285'	then	'T4285'
											when	'4288'	then	'T4288'
											when	'0107'	then	'T0107'
											when	'0521'	then	'T0521'
											when	'0522'	then	'T0522'
											when	'4040'	then	'T4040'
											else 'N/A'
										end	PPL_Tank,
										cast('DON' as varchar(50)) as component_name, 
										avg(LTIN99.results_value) as results_value,
										tmpMaxLabDateIN_NI.DateTimeSampled
						from			PROD_EDW_BASE_VIEWS.lab_results LTIN99 INNER JOIN
										(
											SELECT	LRMX.Ref_Prod_Location, 
															LRMX.Component_Name, 
															LRMX.Tank,
															cast(cast(cast((:eff_date-:NoofDaysPPL) as date format 'YYYY-MM-DD') as varchar(20))||' 00:00:00' as timestamp(0)) as DateTimeSampled,
															max(CAST(CAST(LRMX.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LRMX.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0))) as MaxDateTimesampled
											FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMX
											WHERE 	LRMX.ref_prod_location =  :Ref_Prod_Location  AND 
															LRMX.tank in 	
															(
																'0076','0079','0087','0090','0114','0115','0116','0117','0119','0123','0124','0125','0127','0130','0134','0140','0141',
																'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0508','0512','0513',
																'0514','0515','0516','0517','0518','0519','0520','4050','4052','4060','4061','4119','4120','4121','4122','4124','4125','4126','4285','4288','0107', '0521', '0522', '4040'
															) and
															LRMX.component_name in ('Motor_Octane_D2700','Research_Octane_D2699') and
															LRMX.product not in ('XCHK_MOGAS') and
															LRMX.Tank not in
															(
																SELECT	LRMXNI.Tank
																FROM		PROD_EDW_BASE_VIEWS.LAB_RESULTS LRMXNI
																WHERE 	LRMXNI.ref_prod_location =  :Ref_Prod_Location  AND 
																				LRMXNI.date_sampled  between (:eff_date-:NoofDaysPPL) and (:eff_date-1) AND 
																				LRMXNI.tank in 	
																				(
																					'0076','0079','0087','0090','0114','0115','0116','0117','0119','0123','0124','0125','0127','0130','0134','0140','0141',
																					'0142','0143','0144','0145','0146','0157','0158','0159','0160','0164','0166','0167','0181','0182','0508','0512','0513',
																					'0514','0515','0516','0517','0518','0519','0520','4050','4052','4060','4061','4119','4120','4121','4122','4124','4125','4126','4285','4288','0107', '0521', '0522', '4040'
																				) and
																				LRMXNI.component_name in ('Motor_Octane_D2700','Research_Octane_D2699') and
																				LRMXNI.product not in ('XCHK_MOGAS') 
															)
											GROUP BY LRMX.Ref_Prod_Location, LRMX.Component_Name, LRMX.Tank
										) as tmpMaxLabDateIN_NI on
										LTIN99.Ref_Prod_Location=tmpMaxLabDateIN_NI.Ref_Prod_Location and
										LTIN99.Tank=tmpMaxLabDateIN_NI.Tank and
										LTIN99.component_name=tmpMaxLabDateIN_NI.component_name and
										CAST(CAST(LTIN99.date_sampled AS FORMAT 'YYYY-MM-DD') || ' ' || CAST(CAST(LTIN99.time_sampled AS FORMAT 'HH:MI:SS') AS CHAR(8)) AS TIMESTAMP(0)) =tmpMaxLabDateIN_NI.MaxDateTimesampled
							group by 	tmpMaxLabDateIN_NI.Ref_Prod_Location, tmpMaxLabDateIN_NI.tank, tmpMaxLabDateIN_NI.DateTimeSampled
							having avg(LTIN99.results_value) <> 0			
					)DON_Tab on InvDat.Ref_Prod_Location=DON_Tab.Ref_Prod_Location and TnkMast.Master_Code=DON_Tab.PPL_Tank and InvDat.Eff_Date = cast(DON_Tab.DateTimeSampled as date)
					--upto here DON
where			InvDat.Ref_Prod_Location=:Ref_Prod_Location and
					InvDat.Eff_Date between (:eff_date-:NoofDaysPPL) and (:eff_date-1)  and
					PrdMast.Product_Desc in ('Albuquerque Sub Unleaded','Alkylate','Cat Gasoline','CBG Premium','CBG Unlead','Conv Premium','Conv Unlead','Heavy Reformate','Iso Butane','Light Reformate','Light Straight Run','Mixed Butane', 'Normal Butane','Pemex Premium','Pemex Unleaded','Reformate','Southern New Mexico Unleaded','Sweet Heavy Straight Run (Hydrobate)','Toluene','Transmix','Tucson Sub Premium Unleaded','Tucson Subgrade Unleaded','Diesel Hydrotreater Feed','Jet Fuel (Jet A)','Diesel Hydrotreater Feed','Ultra Low Sulfur Diesel','Diesel Hydrotreater Feed','Aggregate Jet','Aggregate ULSD','Jet Fuel (Military Jet Fuel)') and
					TnkMast.Master_Code in ('T0143','T0166','T0140','T0141','TLF_AZRB','T0115','T0164','T0515','T0516','T0517','T0518','T0519','TLF_PRMC','T0167','T0182','T0508','T0520','TLF_UNLC','T0116','T0114','T0119','T0123','T0124','T0512','T0146','TLF_TSUP','T0134','T0144','T0145','TLF_TSUB','T0097','T0098','T0099','T0136','T0165','T0183','T4007','T4008','T4046','T4050','T4057','T4602','T4605','T0107','T0521','T0522','T4040')
--MBO Part
union
select	MBO_Vals.Ref_Prod_Location,
			MBO_Vals.MBO_Tank, 
			case MBO_Tank
				when	'TK076'		then	'T0076'
				when	'TK079'		then	'T0079'
				when	'TK087'		then	'T0087'
				when	'TK090'		then	'T0090'
				when	'TK114'		then	'T0114'
				when	'TK115'		then	'T0115'
				when	'TK116'		then	'T0116'
				when	'TK117'		then	'T0117'
				when	'TK119'		then	'T0119'
				when	'TK123'		then	'T0123'
				when	'TK124'		then	'T0124'
				when	'TK125'		then	'T0125'
				when	'TK127'		then	'T0127'
				when	'TK130'		then	'T0130'
				when	'TK134'		then	'T0134'
				when	'TK140'		then	'T0140'
				when	'TK141'		then	'T0141'
				when	'TK142'		then	'T0142'
				when	'TK143'		then	'T0143'
				when	'TK144'		then	'T0144'
				when	'TK145'		then	'T0145'
				when	'TK146'		then	'T0146'
				when	'TK157'		then	'T0157'
				when	'TK158'		then	'T0158'
				when	'TK159'		then	'T0159'
				when	'TK160'		then	'T0160'
				when	'TK164'		then	'T0164'
				when	'TK166'		then	'T0166'
				when	'TK167'		then	'T0167'
				when	'TK181'		then	'T0181'
				when	'TK182'		then	'T0182'
				when	'TK508'		then	'T0508'
				when	'TK512'		then	'T0512'
				when	'TK513'		then	'T0513'
				when	'TK514'		then	'T0514'
				when	'TK515'		then	'T0515'
				when	'TK516'		then	'T0516'
				when	'TK520'		then	'T0520'
				when	'TK4050'	then	'T4050'
				when	'TK4052'	then	'T4052'
				when	'TK4060'	then	'T4060'
				when	'TK4061'	then	'T4061'
				when	'TK4119'	then	'T4119'
				when	'TK4120'	then	'T4120'
				when	'TK4121'	then	'T4121'
				when	'TK4122'	then	'T4122'
				when	'TK4124'	then	'T4124'
				when	'TK4125'	then	'T4125'
				when	'TK4126'	then	'T4126'
				when	'TK4285'	then	'T4285'
				when	'TK4288'	then	'T4288'	
				when	'TK095'		then	'T0095'
				when	'TK096'		then	'T0096'
				when	'TK100'		then	'T0100'
				when	'TK126'		then	'T0126'
				when	'TK202'		then	'T0202'
				when	'TK4013'	then	'T4013'
				when	'TK097'		then	'T0097'
				when	'TK098'		then	'T0098'
				when	'TK099'		then	'T0099'
				when	'TK136'		then	'T0136'
				when	'TK165'		then	'T0165'
				when	'TK183'		then	'T0183'
				when	'TK4007'	then	'T4007'
				when	'TK4008'	then	'T4008'
				when	'TK4046'	then	'T4046'
				when	'TK4050'	then	'T4050'
				when	'TK4057'	then	'T4057'
				when	'TK4602'	then	'T4602'
				when	'TK4603'	then	'T4603'
				when	'TK4605'	then	'T4605'
				else 'N/A'
			end	PPL_Tank,
			cast(cast(MBO_Vals.Eff_Date as date format 'YYYY-MM-DD') as varchar(20))||PPL_Tank  as  Date_Tank,
			case	MBO_Vals.Product_Desc
				when	'ABQ Sub'										then	'Albuquerque Sub Unleaded'
				when	'Alky'											then	'Alkylate'
				when	'LCC-LSR'										then	'Cat Gasoline'
				when	'Phoenix Prem'								then	'CBG Premium'
				when	'Phoenix'										then	'CBG Unlead'
				when	'CBG Unlead'								then	'CBG Unlead'
				when	'El Paso/ABQ Prem'						then	'Conv Premium'
				when	'Conv Premium'							then	'Conv Premium'
				when	'El Paso Sub'									then	'Conv Unlead'
				when	'Conv Unlead'								then	'Conv Unlead'
				when	'Hvy Ref'										then	'Heavy Reformate'
				when	'Iso Butane'									then	'Iso Butane'
				when	'iC4'												then	'Iso Butane'
				when	'Lt Ref'											then	'Light Reformate'
				when	'LSR'											then	'Light Straight Run'
				when	'Mixed Butane'								then	'Mixed Butane'
				when	'SlopC4'										then	'Mixed Butane' 
				when	'Normal Butane'							then	'Normal Butane'
				when	'nC4'											then	'Normal Butane'
				when	'Pemex Prem'								then	'Pemex Premium'
				when	'Pemex Reg'									then	'Pemex Unleaded'
				when	'Ref'												then	'Reformate'
				when	'Southern New Mexico Unleaded'	then	'Southern New Mexico Unleaded'
				when	'Hydrobate'									then	'Sweet Heavy Straight Run (Hydrobate)'
				when	'TOL'											then	'Toluene'
				when	'Transmix'									then	'Transmix'
				when	'Tuc Prem'									then	'Tucson Sub Premium Unleaded'
				when	'Tucson Sub Premium Unleaded'	then	'Tucson Sub Premium Unleaded'
				when	'Tucson Sub'									then	'Tucson Subgrade Unleaded'
				when	'Tucson Subgrade Unleaded'			then	'Tucson Subgrade Unleaded'
				when	'Gasoline Slop' 								then 	'Gasoline Slop'
				when	'DHT Feedstock'							then	'Diesel Hydrotreater Feed'
				when	'Jet'												then	'Jet Fuel (Jet A)'
				when	'LCO'											then	'Diesel Hydrotreater Feed'
				when	'ULSD'											then	'Ultra Low Sulfur Diesel'
				when	'DHT Feedstock Tank'					then	'Diesel Hydrotreater Feed'
				when	'Aggregate Jet'								then	'Aggregate Jet'
				when	'Aggregate ULSD'							then	'Aggregate ULSD'
				when	'Jet Fuel (Military Jet Fuel)'			then	'Jet Fuel (Military Jet Fuel)'
			else 'N/A'  
			end as Product_Desc_PPL,
			MBO_Vals.Product_Desc as Product_Desc_MBO, 
			MBO_Vals.Eff_Date, 
			MBO_Vals.TNK_CASE,
			cast('MBO' as varchar(20)) as prop_type,
			sum(MBO_Vals.Gross_Product) as Gross_Product, 
			sum(MBO_Vals.Aval_Product) as Aval_Product,
			sum(MBO_Vals.Aval_Capacity) as Aval_Capacity,
			cast(null as float) as Safe_Fill,
			sum(MBO_Vals.RVP) as RVP,
			sum(MBO_Vals.DON) as DON,
			sum(MBO_Vals.TL_MINW) as TL_MINW, 
			sum(MBO_Vals.TL_MAXW) as TL_MAXW, 
			sum(MBO_Vals.MINW) as MINW, 
			sum(MBO_Vals.MAXW) as MAXW, 
			sum(MBO_Vals.Work_Min) as Work_Min,
			sum(MBO_Vals.Work_Max) as Work_Max 
from			
			(
			select  MTI.Ref_Prod_Location,
						MTI.TANK_ID as MBO_Tank, 
						MTI.TI_DESCRIPTION as Product_Desc, 
						COALESCE(cast(MTV.value_date as date),:eff_date) as Eff_Date, 
						COALESCE(MTV.TNK_CASE, :TNK_CASE) as TNK_CASE,
						cast('MBO Vol' as varchar(20)) as prop_type,
						MTV.TNK_VALUE as Gross_Product, 
						cast(0 as float) as Aval_Product,
						cast(0 as float) as Aval_Capacity,
						cast(null as float) as RVP,
						cast(null as float) as DON,
						MTL.TL_MINW, 
						MTL.TL_MAXW, 
						MTI.MINW, 
						MTI.MAXW, 
						case when MTL.TL_MINW is null then MTI.MINW else MTL.TL_MINW end Work_Min,
						case when MTL.TL_MAXW is null then MTI.MAXW else MTL.TL_MAXW end Work_Max 
			from 	PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI  
						left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV on  MTI.Ref_Prod_Location=MTV.Ref_Prod_Location and MTI.tank_id=MTV.tank_id and MTV.prop ='VOL' and cast(MTV.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and MTV.TNK_CASE=:TNK_CASE
						left outer join PROD_EDW_BASE_VIEWS.MBO_TREND_LIMIT MTL on MTI.Ref_Prod_Location=MTL.Ref_Prod_Location and MTI.tank_id=MTL.tank_id and cast(MTL.tl_date as date)  = cast(MTV.value_date as date) 
			where 	MTI.tank_id in 
						( 
								'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK127','TK130','TK134','TK140','TK141','TK142',
								'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
								'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
								'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
								'TK095','TK096','TK097','TK098','TK099','TK100','TK126','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
						) and
						MTI.Ref_Prod_Location=:Ref_Prod_Location
			union
			--RVP Query
			select  MTV.Ref_Prod_Location,
						MTV.TANK_ID as MBO_Tank,
						MTI.TI_DESCRIPTION as Product_Desc, 
						cast(MTV.value_date as date) as Eff_Date, 
						MTV.TNK_CASE, 
						cast('MBO RVP' as varchar(20)) as prop_type,
						cast(0 as float) as Gross_Product,
						cast(0 as float) as Aval_Product,
						cast(0 as float) as Aval_Capacity,
						MTV.TNK_VALUE as RVP, 
						cast(null as float) as DON,
						cast(0 as float)  as TL_MINW, 
						cast(0 as float) as TL_MAXW, 
						cast(0 as float) as MINW, 
						cast(0 as float) as MAXW, 
						cast(0 as float) as Work_Min,
						cast(0 as float)  as Work_Max 
			from 	PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
						left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI on MTV.Ref_Prod_Location=MTI.Ref_Prod_Location and MTV.tank_id=MTI.tank_id
			where 	MTV.prop ='RVP' and
						cast(MTV.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
						MTV.TNK_CASE=:TNK_CASE and
						MTV.Ref_Prod_Location=:Ref_Prod_Location and
						MTV.tank_id in 
						( 
								'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK127','TK130','TK134','TK140','TK141','TK142',
								'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
								'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
								'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
								'TK095','TK096','TK097','TK098','TK099','TK100','TK126','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
						)
			union
			--RVP Not available in the date range
			select			MTV_RVPNF.Ref_Prod_Location,
								MTV_RVPNF.TANK_ID as MBO_Tank,
								NFRVPDET.Product_Desc as Product_Desc, 
								cast(:eff_date as date) as Eff_Date, 
								MTV_RVPNF.TNK_CASE, 
								cast('MBO RVP' as varchar(20)) as prop_type,
								cast(0 as float) as Gross_Product,
								cast(0 as float) as Aval_Product,
								cast(0 as float) as Aval_Capacity,
								MTV_RVPNF.TNK_VALUE as RVP, 
								cast(null as float) as DON,
								cast(0 as float)  as TL_MINW, 
								cast(0 as float) as TL_MAXW, 
								cast(0 as float) as MINW, 
								cast(0 as float) as MAXW, 
								cast(0 as float) as Work_Min,
								cast(0 as float)  as Work_Max 
			from				PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_RVPNF inner join	
								(
									select  			MTV.Ref_Prod_Location,
														MTV.TANK_ID as MBO_Tank,
														MTI.TI_DESCRIPTION as Product_Desc, 
														MTV.TNK_CASE,
														max(cast(MTV.value_date as date)) as Max_Eff_Date
									from 			PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
														on MTI.Ref_Prod_Location=MTV.Ref_Prod_Location and MTI.tank_id=MTV.tank_id
									where 			MTV.prop ='RVP' and
														MTV.TNK_CASE= :TNK_CASE and
														MTV.Ref_Prod_Location= :Ref_Prod_Location and
														MTV.tank_id in 
														( 
															'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK127','TK130','TK134','TK140','TK141','TK142',
															'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
															'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
															'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
															'TK095','TK096','TK097','TK098','TK099','TK100','TK126','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
														)	and
														MTV.tank_id not in
														(
																select 	distinct	 MTV_NA1.tank_id
																from		PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_NA1
																where	cast(MTV_NA1.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
																			MTV_NA1.TNK_CASE= :TNK_CASE and
																			MTV_NA1.Ref_Prod_Location= :Ref_Prod_Location and
																			MTV_NA1.prop ='RVP'  and
																			MTV_NA1.tank_id in 
																			( 
																				'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK127','TK130','TK134','TK140','TK141','TK142',
																				'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
																				'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
																				'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
																				'TK095','TK096','TK097','TK098','TK099','TK100','TK126','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
																			)	
														)
									group by		MTV.Ref_Prod_Location, MTV.TANK_ID, MTI.TI_DESCRIPTION, MTV.TNK_CASE		
								)NFRVPDET	on	MTV_RVPNF.Ref_Prod_Location=NFRVPDET.Ref_Prod_Location and
								MTV_RVPNF.TANK_ID=NFRVPDET.MBO_Tank and
								MTV_RVPNF.prop ='RVP' and
								MTV_RVPNF.TNK_CASE= :TNK_CASE and
								cast(MTV_RVPNF.value_date as date) = NFRVPDET.Max_Eff_Date	
			union					
			--DON Query 
			select  MTV.Ref_Prod_Location,
						MTV.TANK_ID as MBO_Tank,
						MTI.TI_DESCRIPTION as Product_Desc, 
						cast(MTV.value_date as date) as Eff_Date, 
						MTV.TNK_CASE, 
						cast('MBO DON' as varchar(20)) as prop_type,
						cast(0 as float) as Gross_Product,
						cast(0 as float) as Aval_Product,
						cast(0 as float) as Aval_Capacity,
						cast(null as float) as RVP,
						MTV.TNK_VALUE as DON,
						cast(0 as float)  as TL_MINW, 
						cast(0 as float) as TL_MAXW, 
						cast(0 as float) as MINW, 
						cast(0 as float) as MAXW, 
						cast(0 as float) as Work_Min,
						cast(0 as float)  as Work_Max 
			from 	PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
						left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI on MTV.Ref_Prod_Location=MTI.Ref_Prod_Location and MTV.tank_id=MTI.tank_id
			where 	MTV.prop ='RM2' and
						cast(MTV.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
						MTV.TNK_CASE=:TNK_CASE and
						MTV.Ref_Prod_Location=:Ref_Prod_Location and
						MTV.tank_id in 
						( 
								'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK127','TK130','TK134','TK140','TK141','TK142',
								'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
								'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
								'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
								'TK095','TK096','TK097','TK098','TK099','TK100','TK126','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
						)
			--MBO DON NV Qry
			union
			select			MTV_DONNF.Ref_Prod_Location,
								MTV_DONNF.TANK_ID as MBO_Tank,
								NFDONDET.Product_Desc as Product_Desc, 
								cast(:eff_date as date) as Eff_Date, 
								MTV_DONNF.TNK_CASE, 
								cast('MBO DON' as varchar(20)) as prop_type,
								cast(0 as float) as Gross_Product,
								cast(0 as float) as Aval_Product,
								cast(0 as float) as Aval_Capacity,
								cast(null as float) as RVP,
								MTV_DONNF.TNK_VALUE as DON,
								cast(0 as float)  as TL_MINW, 
								cast(0 as float) as TL_MAXW, 
								cast(0 as float) as MINW, 
								cast(0 as float) as MAXW, 
								cast(0 as float) as Work_Min,
								cast(0 as float)  as Work_Max 
			from				PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_DONNF inner join	
								(
										select  			MTV.Ref_Prod_Location,
															MTV.TANK_ID as MBO_Tank,
															MTI.TI_DESCRIPTION as Product_Desc, 
															MTV.TNK_CASE,
															max(cast(MTV.value_date as date)) as Max_Eff_Date
										from 			PROD_EDW_BASE_VIEWS.MBO_TANK_INFO MTI left outer join PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV 
															on MTI.Ref_Prod_Location=MTV.Ref_Prod_Location and MTI.tank_id=MTV.tank_id
										where 			MTV.prop ='RM2' and
															MTV.TNK_CASE= :TNK_CASE and
															MTV.Ref_Prod_Location= :Ref_Prod_Location and
															MTV.tank_id in 
															( 
																	'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK127','TK130','TK134','TK140','TK141','TK142',
																	'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
																	'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
																	'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
																	'TK095','TK096','TK097','TK098','TK099','TK100','TK126','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
															)	and
															MTV.tank_id not in
															(
																	select 	distinct	 MTV_NA1.tank_id
																	from		PROD_EDW_BASE_VIEWS.MBO_TANK_VALUES MTV_NA1
																	where	cast(MTV_NA1.value_date as date) between :eff_date and (:eff_date+:NoofDaysMBO) and
																				MTV_NA1.TNK_CASE= :TNK_CASE and
																				MTV_NA1.Ref_Prod_Location= :Ref_Prod_Location and
																				MTV_NA1.prop ='RM2'  and
																				MTV_NA1.tank_id in 
																				( 
																						'TK076','TK079','TK087','TK090','TK114','TK115','TK116','TK117','TK119','TK123','TK124','TK125','TK127','TK130','TK134','TK140','TK141','TK142',
																						'TK143','TK144','TK145','TK146','TK157','TK158','TK159','TK160','TK164','TK166','TK167','TK181','TK182','TK508','TK512','TK513','TK514','TK515',
																						'TK516','TK520','TK4050','TK4052','TK4060','TK4061','TK4119','TK4120','TK4121','TK4122','TK4124','TK4125','TK4126','TK4285','TK4288','TKABQSUB',
																						'TKALK','TKEPSUB','TKHVYREF','TKHYDRO','TKJZREG','TKLCCLSR','TKLTREF','TKNC4','TKPHXSUBCBG','TKREF','TKSLOPC4','TKSUREF','TKSWING','TKTOL','TKTUCSUB',
																						'TK095','TK096','TK097','TK098','TK099','TK100','TK126','TK136','TK165','TK183','TK202','TK4007','TK4008','TK4013','TK4046','TK4050','TK4057','TK4602','TK4603','TK4605','TKJETKM','TKJHT','TKMEROX','TKNULSD','TKSULD'
																				)	
															)
										group by		MTV.Ref_Prod_Location, MTV.TANK_ID, MTI.TI_DESCRIPTION, MTV.TNK_CASE		
								)NFDONDET	on	MTV_DONNF.Ref_Prod_Location=NFDONDET.Ref_Prod_Location and
								MTV_DONNF.TANK_ID=NFDONDET.MBO_Tank and
								MTV_DONNF.prop ='RM2' and
								MTV_DONNF.TNK_CASE= :TNK_CASE and
								cast(MTV_DONNF.value_date as date) = NFDONDET.Max_Eff_Date								
						
			) MBO_Vals
			where		PPL_Tank in ('T0143','T0166','T0140','T0141','TLF_AZRB','T0115','T0164','T0515','T0516','T0517','T0518','T0519','TLF_PRMC','T0167','T0182','T0508','T0520','TLF_UNLC','T0116','T0114','T0119','T0123','T0124','T0512','T0146','TLF_TSUP','T0134','T0144','T0145','TLF_TSUB','T0097','T0098','T0099','T0136','T0165','T0183','T4007','T4008','T4046','T4050','T4057','T4602','T4605','T0107','T0521','T0522','T4040')
			group by 	MBO_Vals.Ref_Prod_Location, MBO_Vals.MBO_Tank, MBO_Vals.Product_Desc, MBO_Vals.Eff_Date, MBO_Vals.TNK_CASE 
			order by 	3, 6;
);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_Production(Begin_Date_YTD DATE, Begin_Date_MTD DATE, End_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
(

SELECT	Prod_Hier.Ref_Prod_Location,Prod_Hier.Prod_Group_SubCat1, Prod_Hier.Prod_Group_SubCat2
	,Prod_Hier.Prod_Group_SubCat3, Prod_Hier.Prod_Group_SubCat4
	
	,CAST(ZEROIFNULL(MAX(inv_begin_daily)) AS DECIMAL(15,0)) AS inv_begin_daily, CAST(ZEROIFNULL(MAX(shipments_daily)) AS DECIMAL(15,0)) AS shipments_daily
	,CAST(ZEROIFNULL(MAX(receipts_daily)) AS DECIMAL(15,0))AS receipts_daily, CAST(ZEROIFNULL(MAX(inv_end_daily)) AS DECIMAL(15,0))AS inv_end_daily
	,CAST(ZEROIFNULL(MAX(production_daily)) AS DECIMAL(15,0))AS production_daily,CAST(ZEROIFNULL(MAX(planned_production_daily)) AS DECIMAL(15,0))AS planned_production_daily
	
	,CAST(ZEROIFNULL(MAX(inv_begin_mtd)) AS DECIMAL(15,0)) AS inv_begin_mtd, CAST(ZEROIFNULL(MAX(shipments_mtd)) AS DECIMAL(15,0)) AS shipments_mtd
	,CAST(ZEROIFNULL(MAX(receipts_mtd)) AS DECIMAL(15,0)) AS receipts_mtd, CAST(ZEROIFNULL(MAX(inv_end_daily)) AS DECIMAL(15,0)) AS inv_end_mtd
	,CAST(ZEROIFNULL(MAX(production_mtd)) AS DECIMAL(15,0)) AS production_mtd,CAST(ZEROIFNULL(MAX(planned_production_mtd)) AS DECIMAL(15,0)) AS planned_production_mtd
	
	,CAST(ZEROIFNULL(MAX(inv_begin_ytd)) AS DECIMAL(15,0)) AS inv_begin_ytd, CAST(ZEROIFNULL(MAX(shipments_ytd)) AS DECIMAL(15,0))AS shipments_ytd
	,CAST(ZEROIFNULL(MAX(receipts_ytd)) AS DECIMAL(15,0)) AS receipts_ytd, CAST(ZEROIFNULL(MAX(inv_end_daily)) AS DECIMAL(15,0)) AS inv_end_ytd
	,CAST(ZEROIFNULL(MAX(production_ytd)) AS DECIMAL(15,0)) AS production_ytd,CAST(ZEROIFNULL(MAX(planned_production_ytd)) AS DECIMAL(15,0)) AS planned_production_ytd
	
FROM prod_edw_base_views.PROD_HIER

LEFT OUTER JOIN
	(
	SELECT ref_prod_location, Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
		,SUM(Inv_Begin) AS Inv_begin_daily, SUM(Inv_End) AS inv_end_daily
		,SUM(Shipments) AS shipments_daily, SUM(Receipts) AS receipts_daily
		,SUM(Production) AS production_daily
		,SUM(Planned_Production_Daily) AS Planned_Production_daily
	FROM
		(
		SELECT	production.Ref_Prod_Location, eff_date, production.Product_Id
			,Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
			,Inv_Begin, Inv_End, Shipments, Receipts, Production
			,planned_volume/EXTRACT(DAY FROM LAST_DAY(Eff_date)) AS Planned_Production_Daily
		FROM prod_edw_base_views.PRODUCTION
		LEFT OUTER JOIN prod_edw_base_views.refops_plan_Production
		ON production.ref_prod_location = refops_plan_production.ref_prod_location
			AND production.product_id = refops_plan_production.product_id
			AND refops_plan_production.planned_month = TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
		WHERE eff_date = :End_Date
			AND prod_group_subcat1 IS NOT NULL
		) AS tmpProductionDaily2
	GROUP BY ref_prod_location, Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
	) AS tmpProductionDaily
ON Prod_Hier.Ref_Prod_Location = tmpProductionDaily.Ref_Prod_Location
	AND Prod_Hier.Prod_Group_Subcat1 = tmpProductionDaily.Prod_Group_Subcat1
	AND Prod_Hier.Prod_Group_Subcat2 = tmpProductionDaily.Prod_Group_Subcat2
	AND Prod_Hier.Prod_Group_Subcat3 = tmpProductionDaily.Prod_Group_Subcat3
	AND Prod_Hier.Prod_Group_Subcat4 = tmpProductionDaily.Prod_Group_Subcat4

LEFT OUTER JOIN
	(
	SELECT tmpProductionMTD2.ref_prod_location, tmpProductionMTD2.Prod_Group_SubCat1
		,tmpProductionMTD2.Prod_Group_SubCat2, tmpProductionMTD2.Prod_Group_SubCat3
		,tmpProductionMTD2.Prod_Group_SubCat4
		,MAX(Inv_Begin) AS Inv_begin_mtd
		,SUM(Shipments) AS shipments_mtd, SUM(Receipts) AS receipts_mtd
		,SUM(Production) AS production_mtd
		,SUM(Planned_Production_Daily) AS Planned_Production_MTD
	FROM
		(
		SELECT	production.Ref_Prod_Location, eff_date, production.Product_Id
			,Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
			,Shipments, Receipts, Production
			,planned_volume/EXTRACT(DAY FROM LAST_DAY(Eff_date)) AS Planned_Production_Daily
		FROM prod_edw_base_views.PRODUCTION
		LEFT OUTER JOIN prod_edw_base_views.refops_plan_Production
		ON production.ref_prod_location = refops_plan_production.ref_prod_location
			AND production.product_id = refops_plan_production.product_id
			AND refops_plan_production.planned_month = TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
		WHERE eff_date BETWEEN :Begin_Date_MTD AND  :End_Date
			AND prod_group_subcat1 IS NOT NULL
		) AS tmpProductionMTD2
	LEFT OUTER JOIN
		(
		SELECT	Ref_Prod_Location, Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
			,SUM(inv_begin) AS inv_begin
		FROM prod_edw_base_views.PRODUCTION
		WHERE eff_date = :Begin_Date_MTD
			AND prod_group_subcat1 IS NOT NULL
		GROUP BY Ref_Prod_Location, Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4	
		) AS tmpProductionMTD_InvBegin
	ON tmpProductionMTD2.ref_prod_location = tmpProductionMTD_InvBegin.ref_prod_location
		AND tmpProductionMTD2.Prod_Group_SubCat1 = tmpProductionMTD_InvBegin.Prod_Group_SubCat1
		AND tmpProductionMTD2.Prod_Group_SubCat2 = tmpProductionMTD_InvBegin.Prod_Group_SubCat2
		AND tmpProductionMTD2.Prod_Group_SubCat3 = tmpProductionMTD_InvBegin.Prod_Group_SubCat3
		AND tmpProductionMTD2.Prod_Group_SubCat4 = tmpProductionMTD_InvBegin.Prod_Group_SubCat4
	GROUP BY tmpProductionMTD2.ref_prod_location, tmpProductionMTD2.Prod_Group_SubCat1
		,tmpProductionMTD2.Prod_Group_SubCat2, tmpProductionMTD2.Prod_Group_SubCat3
		,tmpProductionMTD2.Prod_Group_SubCat4	
	) AS tmpProductionMTD
ON Prod_Hier.Ref_Prod_Location = tmpProductionMTD.Ref_Prod_Location
	AND Prod_Hier.Prod_Group_Subcat1 = tmpProductionMTD.Prod_Group_Subcat1
	AND Prod_Hier.Prod_Group_Subcat2 = tmpProductionMTD.Prod_Group_Subcat2
	AND Prod_Hier.Prod_Group_Subcat3 = tmpProductionMTD.Prod_Group_Subcat3
	AND Prod_Hier.Prod_Group_Subcat4 = tmpProductionMTD.Prod_Group_Subcat4

LEFT OUTER JOIN
	(
	SELECT tmpProductionYTD2.ref_prod_location, tmpProductionYTD2.Prod_Group_SubCat1
		,tmpProductionYTD2.Prod_Group_SubCat2, tmpProductionYTD2.Prod_Group_SubCat3
		,tmpProductionYTD2.Prod_Group_SubCat4
		,MAX(Inv_Begin) AS Inv_begin_ytd
		,SUM(Shipments) AS shipments_ytd, SUM(Receipts) AS receipts_ytd
		,SUM(Production) AS production_ytd
		,SUM(Planned_Production_Daily) AS Planned_Production_ytd
	FROM
		(
		SELECT	production.Ref_Prod_Location, eff_date, production.Product_Id
			,Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
			,Shipments, Receipts, Production
			,planned_volume/EXTRACT(DAY FROM LAST_DAY(Eff_date)) AS Planned_Production_Daily
		FROM prod_edw_base_views.PRODUCTION
		LEFT OUTER JOIN prod_edw_base_views.refops_plan_Production
		ON production.ref_prod_location = refops_plan_production.ref_prod_location
			AND production.product_id = refops_plan_production.product_id
			AND refops_plan_production.planned_month = TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
		WHERE eff_date BETWEEN :Begin_Date_YTD AND  :End_Date
			AND prod_group_subcat1 IS NOT NULL
		) AS tmpProductionYTD2
	LEFT OUTER JOIN
		(
		SELECT	Ref_Prod_Location, Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
			,SUM(inv_begin) AS inv_begin
		FROM prod_edw_base_views.PRODUCTION
		WHERE eff_date = :Begin_Date_YTD
			AND prod_group_subcat1 IS NOT NULL
		GROUP BY Ref_Prod_Location, Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4	
		) AS tmpProductionYTD_InvBegin
	ON tmpProductionYTD2.ref_prod_location = tmpProductionYTD_InvBegin.ref_prod_location
		AND tmpProductionYTD2.Prod_Group_SubCat1 = tmpProductionYTD_InvBegin.Prod_Group_SubCat1
		AND tmpProductionYTD2.Prod_Group_SubCat2 = tmpProductionYTD_InvBegin.Prod_Group_SubCat2
		AND tmpProductionYTD2.Prod_Group_SubCat3 = tmpProductionYTD_InvBegin.Prod_Group_SubCat3
		AND tmpProductionYTD2.Prod_Group_SubCat4 = tmpProductionYTD_InvBegin.Prod_Group_SubCat4
	GROUP BY tmpProductionYTD2.ref_prod_location, tmpProductionYTD2.Prod_Group_SubCat1
		,tmpProductionYTD2.Prod_Group_SubCat2, tmpProductionYTD2.Prod_Group_SubCat3
		,tmpProductionYTD2.Prod_Group_SubCat4	
	) AS tmpProductionYTD
ON Prod_Hier.Ref_Prod_Location = tmpProductionYTD.Ref_Prod_Location
	AND Prod_Hier.Prod_Group_Subcat1 = tmpProductionYTD.Prod_Group_Subcat1
	AND Prod_Hier.Prod_Group_Subcat2 = tmpProductionYTD.Prod_Group_Subcat2
	AND Prod_Hier.Prod_Group_Subcat3 = tmpProductionYTD.Prod_Group_Subcat3
	AND Prod_Hier.Prod_Group_Subcat4 = tmpProductionYTD.Prod_Group_Subcat4

WHERE report_desc = 'inventory'
	AND location_category = :Ref_Prod_Location

GROUP BY Prod_Hier.Ref_Prod_Location, Prod_Hier.Prod_Group_SubCat1, Prod_Hier.Prod_Group_SubCat2
	,Prod_Hier.Prod_Group_SubCat3, Prod_Hier.Prod_Group_SubCat4
ORDER BY Prod_Hier.Ref_Prod_Location, Prod_Hier.Prod_Group_SubCat1 DESC, Prod_Hier.Prod_Group_SubCat2
	,Prod_Hier.Prod_Group_SubCat3, Prod_Hier.Prod_Group_SubCat4
;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_QTS_Archive(UnitID VARCHAR(10), Begin_Date DATE, End_Date DATE) AS
	(
	SELECT DISTINCT railcar_qts_update_raw.UnitID, railcar_qts_update_raw.ShipDate, shipper, consignee, lastproduct
		,LastCLMDate, LastCLMTime, Ocity, OState, LastCLMCarrier, LastCLMCity, LastCLMState
		,LastCLMEvent, LastCLMStatus, LastCLMTrainID
		,LastCLMDCity, LastCLMDState
	FROM prod_edw_base_views.RAILCAR_QTS_Update_Raw
	LEFT OUTER JOIN prod_edw_base_views.railcar_qts_master_raw
	ON railcar_qts_master_raw.unitid = railcar_qts_update_raw.unitid
		AND railcar_qts_master_raw.shipdate = railcar_qts_update_raw.shipdate
	WHERE railcar_qts_update_raw.unitid = :UnitID
	AND railcar_qts_update_raw.lastclmdate BETWEEN :Begin_Date AND :End_Date
	ORDER BY lastclmdate , lastclmtime
;);
--------------------------------------------------------------------------------

Create macro PROD_EDW_BASE_VIEWS.m_REP_SEC_LIST  (UserID varchar(32)) as 
(
  Select distinct c.slsman
                ,case 
                                WHEN d.SalesPerson_Name is null THEN c.slsman
                                ELSE d.SalesPerson_Name
                end as Sales_Person_Name       
 from PROD_EDW_BASE_VIEWS.WSALE_ADVENT_CUSTOMER c
 left outer join PROD_EDW_BASE_VIEWS.WSale_PDS_SalesPerson_DCD d
 on c.slsman = d.PDS_Number
 inner join PROD_EDW_BASE_VIEWS.REP_SECU_LIST S on (c.slsman = s.Sec_Filter OR s.Sec_Filter = 'All')
 where c.slsman not in (91, 96, 97)  and 
 c.slsman is not null and 
 c.slsman <> ''  and
 s.Report_Name='Advent Cardlock Report' and
 s.Report_Login=:UserID
 order by d.SalesPerson_Name;

)
--------------------------------------------------------------------------------

Replace macro PROD_EDW_BASE_VIEWS.M_SOX_ETL_DAILY_AUDIT_REP (In_ETL_Run_Date date)
as
(
select 		DataSourceProvider,
				case  	
							when DataSourceProvider in ('ARGUS PRICES','COMPETITOR616 PRICES','COMPETITOR617 PRICES','FUTURES PRICES','GLOBALVIEW PRICES','OPIS FEEDSTOCK PRICES','OPIS LP PRICES','OPIS RACK PRICES','OPIS SPOT PRICES','PLATTS PRICES','POTEN PRICES','WESTERN/GIANT PRICES') then cast ('Pricing' as varchar(50)) 
							when DataSourceProvider in ('KM PIPELINE NOMINATIONS','KM PIPELINE TICKETS') then cast ('Pipeline' as varchar(50)) 
							when DataSourceProvider in ('DFI JDE F03B11','DFI JDE F0411','DFI JDE F0911','DFI SALESDAT') then cast ('RA JDE Wholesale DFI' as varchar(50)) 
							when DataSourceProvider in ('PDS CUSTHIST','PDS INVENTORY','PDS INVTRANS','PDS ORDERS CLOSED','PDS ORDERS OPEN','PDS SALESDAT') then cast ('Wholesale PDS' as varchar(50)) 
							when DataSourceProvider in ('CALJET INVENTORY','CATO INVENTORY','CHESAPEAKE INVENTORY','COOLIDGE INVENTORY','KINDERMORGAN INVENTORY','PPL MASTER','PPL MOVEMENT','PPL TANK','PRO PETROLEUM INVENTORY','REFOPS PUMPERSLOG','SOUTHWEST INVENTORY','YORKTOWN INVENTORY') then cast ('Teradata -> RA Interfaces' as varchar(50)) 
				end as DataSourceGroup,
				SourceRecCount,
 				TargetRecCount
from		PROD_EDW_BASE_VIEWS.SOX_ETL_DAILY_AUDIT 
where 	ETLRunDate=:In_ETL_Run_Date
order by	DataSourceGroup;
);
--------------------------------------------------------------------------------

Replace Macro Prod_EDW_BASE_VIEWS.M_SSRS_BorrowingBase (In_Price_Eff_Date date, In_Inventory_Eff_Date date, In_Location_Category varchar(30))
AS
(

/*
BorrowingBase_Final_v4
 - Initial. This query combines several queries from a previous version of the report. Consists of base query joined to supporting queries for special pricing and diff_factors
 - Initial. Changed Product_Category field from source query to be Prod_Group_Subcat3
 */
 Select 
	Location_Category
	,Comm_Prod_Location
	,Prod_Group_Subcat3
	,Prod_Group_Subcat4
	,Net_Quantity
	,Price
	,CASE Prod_Group_Subcat4
		WHEN 'Olefins' THEN cast(Price as decimal(12,4)) * cast(Diff_Factor as decimal(12,2))
		ELSE (Price + Diff_Factor)
	END as Adjusted_Price	
	,Diff_Factor
	,CASE Prod_Group_Subcat4
		WHEN 'Olefins' THEN cast(Price as decimal(12,4)) * cast(Diff_Factor as decimal(12,2))* cast(UOM_Factor as decimal(12,0)) * cast(Net_Quantity as decimal(12,2))
		ELSE (Price + Diff_Factor) * UOM_Factor * Net_Quantity
	END as Gross_Value
FROM
 (
	Select 
		base.Location_Category
		,base.Comm_Prod_Location
		,base.Prod_Group_Subcat3
		,base.Prod_Group_Subcat4
		,base.Net_Quantity
		,CASE base.Prod_Group_Subcat4
			WHEN 'Light Sour (WTS)' THEN base.Price + wti.Price
			WHEN 'Transmix' THEN (transGas.Price + transDiesel.Price ) / 2
			WHEN 'Unfinished Asphalt/Residuum' THEN asphalt.Price
			ELSE base.Price
		END as Price
		,base.UOM_Factor
		,CASE base.Prod_Group_Subcat4
			WHEN 'Purchased Alkylate' THEN alky.Diff_Factor + alky.Price
			WHEN 'Alkylate' THEN alky.Diff_Factor + alky.Price
			ELSE base.Diff_Factor
		END as Diff_Factor
	From
	 (
		/* 	START BASE QUERY
			Provides most of the inventory and pricing data
		*/
		Select 
			Location_Category
			,Comm_prod_location
			,MAX(Prod_Group_Subcat3) as Prod_Group_Subcat3
			,Prod_Group_Subcat4
			,Max(Net_Quantity) as Net_Quantity
			,Sum(Max_Price) / Max(divisor) as Price
			,Max(UOM_Factor) as UOM_Factor
			,Max(Diff_Factor) as Diff_Factor
		FROM
					(Select 
							sb.Location_Category
							,sb.Comm_Prod_Location
							,MAX(sb.Product_Category) as Prod_Group_Subcat3
							,SUM(pu.Net_Quantity) as Net_Quantity
							,sb.Prod_Group_Subcat4
							,max(cp.price) as max_price
							,max(sb.divisor) as divisor
							,max(sb.UOM_Factor) as UOM_Factor
							,max(Diff_Factor) as Diff_Factor
					FROM 
							PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
					LEFT OUTER JOIN                                                                                                                                                                             
							PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
						On
							sb.Pricing_Code = cp.Pricing_Code
							And sb.Price_type = cp.Price_type
							And cp.Price_Eff_Date = :In_Price_eff_date					-- CP_Date_Param
					LEFT OUTER JOIN 
							PROD_EDW_BASE_VIEWS.PROD_UNION pu
						On 
							sb.Location_Category = pu.Location_Category
							And sb.Comm_Prod_Location = pu.Comm_Prod_Location
							And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
							And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4                                   

					Where
						sb.Location_Category = :In_Location_Category
						AND ( pu.Report_Desc = 'Hedging' or pu.Report_Desc is null )
						AND 
						(
							(sb.Location_Category = 'El Paso - All' AND cp.PRICING_CODE = 'OPRK00061' AND cp.pricing_location = 'El Paso' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
							OR
							(sb.Location_Category = '4C-All' AND cp.Price_Source = 'OPIS RACK' AND cp.Pricing_Location = 'Albuquerque' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
							OR
							cp.PRICING_CODE <> 'OPRK00061'
							OR cp.Pricing_Code IS NULL
						)                          
						AND sb.Prod_Group_Subcat4 <> 'Special Alkylate'
					
									
					GROUP BY                           
						sb.Location_Category
						,sb.Comm_Prod_Location
						,sb.Prod_Group_Subcat4
						,cp.Price_Type
						,cp.Price
						,cp.Pricing_Code
		) PreTable
		Where Net_Quantity is not null
			Group by Location_Category, Comm_prod_location, Prod_Group_Subcat4
		/* 	END BASE QUERY
		*/
	) base
	LEFT OUTER JOIN
	(
		/* 	START Alky Query
			This query pulls the diff_factor for Alkylate
		*/
		Select Location_Category
				,Comm_prod_location
				,Prod_Group_Subcat4
				, Sum(Max_Price) / Max(divisor) as Price
				, Max(Diff_Factor) as Diff_Factor
				FROM
						(Select 
								sb.Location_Category
								,sb.Comm_Prod_Location
								,sb.Prod_Group_Subcat4
								,max(cp.price) as max_price
								,max(sb.divisor) as divisor
								,max(Diff_Factor) as Diff_Factor
						From 
								PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
						Inner Join                                                                                                                                                                             
								PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
							On
								sb.Pricing_Code = cp.Pricing_Code
								And sb.Price_type = cp.Price_type
								And cp.Price_Eff_Date = :In_Price_eff_date-- CP_Date_Param
						Left Outer Join 
								PROD_EDW_BASE_VIEWS.PROD_UNION pu
							On 
								sb.Location_Category = pu.Location_Category
								And sb.Comm_Prod_Location = pu.Comm_Prod_Location
								And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
								And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4                                   

						Where
							sb.Location_Category = :In_Location_Category
							AND ( pu.Report_Desc = 'Hedging' or pu.Report_Desc is null )
							AND sb.Prod_Group_Subcat4 = 'Special Alkylate'
						
										
						GROUP BY                           
							sb.Location_Category
							,sb.Comm_Prod_Location
							,sb.Prod_Group_Subcat4
							,cp.Price_Type
							,cp.Price
							,cp.Pricing_Code
			) PreTable
				Group by Location_Category, Comm_prod_location, Prod_Group_Subcat4
		/*
			END ALKY Query
		*/
	) Alky
	ON
		base.location_Category = alky.location_Category
		and base.prod_group_subcat4 in ('Purchased Alkylate', 'Alkylate')
	LEFT OUTER JOIN
	(
	/* START WTI QUERY
		- Generates the price for WTI so it is accessable alongside the WTS price. WTS final prices is based on a summation with WTI
		- Generates a record with price and location_category (one for El Paso, one for 4C) for joining purposes, even though they are the same price
	*/
		
		Select 
				sb.Location_Category
				,cp.price
		From 
				PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
		Inner Join                                                                                                                                                                             
				PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
			On
				sb.Pricing_Code = cp.Pricing_Code
				And sb.Price_type = cp.Price_type
				And cp.Price_Eff_Date = :In_Price_eff_date-- CP_Date_Param
		Left Outer Join 
				PROD_EDW_BASE_VIEWS.PROD_UNION pu
			On 
				sb.Location_Category = pu.Location_Category
				And sb.Comm_Prod_Location = pu.Comm_Prod_Location
				And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
				And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4                                   

		Where
			sb.Location_Category = :In_Location_Category
			AND ( pu.Report_Desc = 'Hedging' or pu.Report_Desc is null )
			AND sb.Prod_Group_Subcat4 = 'Light Sweet (WTI)'	
			
			Group by sb.Location_Category, cp.Price

	/*
		END WTI Query
	*/
	) wti
	ON
		base.location_category = wti.location_category
		and base.prod_group_Subcat4 = 'Light Sour (WTS)'
	Left Outer Join
	(
		/* START TransGas QUERY
			- Generates a price for TransGas from each Location_Category
		*/
		Select 
			sb.Location_Category
			,cp.Price
		From 
			PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
		Inner Join                                                                                                                                                                             
			PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
		On
			sb.Pricing_Code = cp.Pricing_Code
			And sb.Price_type = cp.Price_type
			And cp.Price_Eff_Date = :In_Price_eff_date -- CP_Date_Param
		Left Outer Join 
			PROD_EDW_BASE_VIEWS.PROD_UNION pu
		On 
			sb.Location_Category = pu.Location_Category
			And sb.Comm_Prod_Location = pu.Comm_Prod_Location
			And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
			And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4   
		Where
			(
			(cp.PRICING_CODE = 'COMP05568' AND sb.Location_Category ='El Paso - All')
			OR
			(cp.PRICING_CODE = 'COMP03090' AND sb.Location_Category ='4C-All')
			)                                                                                                                                                                               				
		GROUP BY                          
			sb.Location_Category
			,cp.Price
		/* END TransGas Query
		*/
	) transGas
	ON
		transGas.Location_Category = base.Location_Category
		and base.Prod_Group_Subcat4 = 'Transmix'
	LEFT OUTER JOIN
	(
		/* Start TransDiesesl Query
			- Generate a price for TransDiesel from each Location_Category
		*/
		Select 
			sb.Location_Category
			,cp.Price / sb.Divisor as Price
		From 
			PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
		Inner Join                                                                                                                                                                             
			PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
		On
			sb.Pricing_Code = cp.Pricing_Code
			And sb.Price_type = cp.Price_type
			And cp.Price_Eff_Date = :In_Price_eff_date -- CP_Date_Param
		Left Outer Join 
			PROD_EDW_BASE_VIEWS.PROD_UNION pu
		On 
			sb.Location_Category = pu.Location_Category
			And sb.Comm_Prod_Location = pu.Comm_Prod_Location
			And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
			And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4   
		Where
		(
			(sb.Location_Category = 'El Paso - All' AND cp.PRICING_CODE = 'OPRK00061' AND cp.pricing_location = 'El Paso' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
			OR
			(sb.Location_Category = '4C-All' AND cp.Price_Source = 'OPIS RACK' AND cp.Pricing_Location = 'Albuquerque' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
		)  
		Group By
			sb.Location_Category
			,cp.Price / sb.Divisor
		/* END TransDiesel Query
		*/
	) transDiesel
	ON 
		transGas.Location_Category = transDiesel.Location_Category
		and base.Prod_Group_Subcat4 = 'Transmix'
	LEFT OUTER JOIN
	(
		/* Start Unfinished Asphalt/Residuum Query
			- Unfinished Asphalt/Residuum price updated only once per week, this queries a 7 day range
		*/
		Select 
			sb.Location_Category
			,cp.Price / sb.Divisor as Price
		From 
			PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
		Inner Join                                                                                                                                                                             
			PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
		On
			sb.Pricing_Code = cp.Pricing_Code
			And sb.Price_type = cp.Price_type
			And cp.Price_Eff_Date between :In_Price_Eff_Date and cast(:In_Price_Eff_Date as date) +7  -- CP_Date_Param
		Left Outer Join 
			PROD_EDW_BASE_VIEWS.PROD_UNION pu
		On 
			sb.Location_Category = pu.Location_Category
			And sb.Comm_Prod_Location = pu.Comm_Prod_Location
			And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
			And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4   
		Where
				sb.Prod_Group_Subcat4 = 'Unfinished Asphalt/Residuum'
		Group By
			sb.Location_Category
			,cp.Price / sb.Divisor
		/* END Unfinished Asphalt/Residuum Query
		*/
	) asphalt
	ON
		asphalt.Location_Category = base.Location_Category
		and base.Prod_Group_Subcat4 = 'Unfinished Asphalt/Residuum'
)Total;
);
--------------------------------------------------------------------------------

Create Macro PROD_EDW_BASE_VIEWS.M_SSRS_BorrowingBase_Totals (In_Price_Eff_Date date, In_Inventory_Eff_Date date)
AS
(

/*
BorrowingBase_Final_v4
 - Initial. This query combines several queries from a previous version of the report. Consists of base query joined to supporting queries for special pricing and diff_factors
 - Initial. Changed Product_Category field from source query to be Prod_Group_Subcat3
 */
 Select
 Location_Category
 ,SUM(Net_Quantity)
 ,SUM(Gross_Value)
 FROM
 (
	 Select 
		Location_Category
		,Comm_Prod_Location
		,Prod_Group_Subcat3
		,Prod_Group_Subcat4
		,Net_Quantity
		,Price
		,CASE Prod_Group_Subcat4
			WHEN 'Olefins' THEN cast(Price as decimal(12,4)) * cast(Diff_Factor as decimal(12,2))
			ELSE (Price + Diff_Factor)
		END as Adjusted_Price	
		,Diff_Factor
		,CASE Prod_Group_Subcat4
			WHEN 'Olefins' THEN cast(Price as decimal(12,4)) * cast(Diff_Factor as decimal(12,2))* cast(UOM_Factor as decimal(12,0)) * cast(Net_Quantity as decimal(12,2))
			ELSE (Price + Diff_Factor) * UOM_Factor * Net_Quantity
		END as Gross_Value
	FROM
	 (
		Select 
			base.Location_Category
			,base.Comm_Prod_Location
			,base.Prod_Group_Subcat3
			,base.Prod_Group_Subcat4
			,base.Net_Quantity
			,CASE base.Prod_Group_Subcat4
				WHEN 'Light Sour (WTS)' THEN base.Price + wti.Price
				WHEN 'Transmix' THEN (transGas.Price + transDiesel.Price ) / 2
				WHEN 'Unfinished Asphalt/Residuum' THEN asphalt.Price
				ELSE base.Price
			END as Price
			,base.UOM_Factor
			,CASE base.Prod_Group_Subcat4
				WHEN 'Purchased Alkylate' THEN alky.Diff_Factor + alky.Price
				WHEN 'Alkylate' THEN alky.Diff_Factor + alky.Price
				ELSE base.Diff_Factor
			END as Diff_Factor
		From
		 (
			/* 	START BASE QUERY
				Provides most of the inventory and pricing data
			*/
			Select 
				Location_Category
				,Comm_prod_location
				,MAX(Prod_Group_Subcat3) as Prod_Group_Subcat3
				,Prod_Group_Subcat4
				,Max(Net_Quantity) as Net_Quantity
				,Sum(Max_Price) / Max(divisor) as Price
				,Max(UOM_Factor) as UOM_Factor
				,Max(Diff_Factor) as Diff_Factor
			FROM
						(Select 
								sb.Location_Category
								,sb.Comm_Prod_Location
								,MAX(sb.Product_Category) as Prod_Group_Subcat3
								,SUM(pu.Net_Quantity) as Net_Quantity
								,sb.Prod_Group_Subcat4
								,max(cp.price) as max_price
								,max(sb.divisor) as divisor
								,max(sb.UOM_Factor) as UOM_Factor
								,max(Diff_Factor) as Diff_Factor
						FROM 
								PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
						LEFT OUTER JOIN                                                                                                                                                                             
								PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
							On
								sb.Pricing_Code = cp.Pricing_Code
								And sb.Price_type = cp.Price_type
								And cp.Price_Eff_Date = :In_Price_eff_date					-- CP_Date_Param
						LEFT OUTER JOIN 
								PROD_EDW_BASE_VIEWS.PROD_UNION pu
							On 
								sb.Location_Category = pu.Location_Category
								And sb.Comm_Prod_Location = pu.Comm_Prod_Location
								And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
								And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4                                   

						Where
							sb.Location_Category in ('El Paso - All', '4C-All')
							AND ( pu.Report_Desc = 'Hedging' or pu.Report_Desc is null )
							AND 
							(
								(sb.Location_Category = 'El Paso - All' AND cp.PRICING_CODE = 'OPRK00061' AND cp.pricing_location = 'El Paso' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
								OR
								(sb.Location_Category = '4C-All' AND cp.Price_Source = 'OPIS RACK' AND cp.Pricing_Location = 'Albuquerque' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
								OR
								cp.PRICING_CODE <> 'OPRK00061'
								OR cp.Pricing_Code IS NULL
							)                          
							AND sb.Prod_Group_Subcat4 <> 'Special Alkylate'
						
										
						GROUP BY                           
							sb.Location_Category
							,sb.Comm_Prod_Location
							,sb.Prod_Group_Subcat4
							,cp.Price_Type
							,cp.Price
							,cp.Pricing_Code
			) PreTable
			Where Net_Quantity is not null
				Group by Location_Category, Comm_prod_location, Prod_Group_Subcat4
			/* 	END BASE QUERY
			*/
		) base
		LEFT OUTER JOIN
		(
			/* 	START Alky Query
				This query pulls the diff_factor for Alkylate
			*/
			Select Location_Category
					,Comm_prod_location
					,Prod_Group_Subcat4
					, Sum(Max_Price) / Max(divisor) as Price
					, Max(Diff_Factor) as Diff_Factor
					FROM
							(Select 
									sb.Location_Category
									,sb.Comm_Prod_Location
									,sb.Prod_Group_Subcat4
									,max(cp.price) as max_price
									,max(sb.divisor) as divisor
									,max(Diff_Factor) as Diff_Factor
							From 
									PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
							Inner Join                                                                                                                                                                             
									PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
								On
									sb.Pricing_Code = cp.Pricing_Code
									And sb.Price_type = cp.Price_type
									And cp.Price_Eff_Date = :In_Price_eff_date-- CP_Date_Param
							Left Outer Join 
									PROD_EDW_BASE_VIEWS.PROD_UNION pu
								On 
									sb.Location_Category = pu.Location_Category
									And sb.Comm_Prod_Location = pu.Comm_Prod_Location
									And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
									And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4                                   

							Where
								sb.Location_Category in ('El Paso - All', '4C-All')
								AND ( pu.Report_Desc = 'Hedging' or pu.Report_Desc is null )
								AND sb.Prod_Group_Subcat4 = 'Special Alkylate'
							
											
							GROUP BY                           
								sb.Location_Category
								,sb.Comm_Prod_Location
								,sb.Prod_Group_Subcat4
								,cp.Price_Type
								,cp.Price
								,cp.Pricing_Code
				) PreTable
					Group by Location_Category, Comm_prod_location, Prod_Group_Subcat4
			/*
				END ALKY Query
			*/
		) Alky
		ON
			base.location_Category = alky.location_Category
			and base.prod_group_subcat4 in ('Purchased Alkylate', 'Alkylate')
		LEFT OUTER JOIN
		(
		/* START WTI QUERY
			- Generates the price for WTI so it is accessable alongside the WTS price. WTS final prices is based on a summation with WTI
			- Generates a record with price and location_category (one for El Paso, one for 4C) for joining purposes, even though they are the same price
		*/
			
			Select 
					sb.Location_Category
					,cp.price
			From 
					PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
			Inner Join                                                                                                                                                                             
					PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
				On
					sb.Pricing_Code = cp.Pricing_Code
					And sb.Price_type = cp.Price_type
					And cp.Price_Eff_Date = :In_Price_eff_date-- CP_Date_Param
			Left Outer Join 
					PROD_EDW_BASE_VIEWS.PROD_UNION pu
				On 
					sb.Location_Category = pu.Location_Category
					And sb.Comm_Prod_Location = pu.Comm_Prod_Location
					And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
					And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4                                   

			Where
				sb.Location_Category in ('El Paso - All', '4C-All')
				AND ( pu.Report_Desc = 'Hedging' or pu.Report_Desc is null )
				AND sb.Prod_Group_Subcat4 = 'Light Sweet (WTI)'	
				
				Group by sb.Location_Category, cp.Price

		/*
			END WTI Query
		*/
		) wti
		ON
			base.location_category = wti.location_category
			and base.prod_group_Subcat4 = 'Light Sour (WTS)'
		Left Outer Join
		(
			/* START TransGas QUERY
				- Generates a price for TransGas from each Location_Category
			*/
			Select 
				sb.Location_Category
				,cp.Price
			From 
				PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
			Inner Join                                                                                                                                                                             
				PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
			On
				sb.Pricing_Code = cp.Pricing_Code
				And sb.Price_type = cp.Price_type
				And cp.Price_Eff_Date = :In_Price_eff_date -- CP_Date_Param
			Left Outer Join 
				PROD_EDW_BASE_VIEWS.PROD_UNION pu
			On 
				sb.Location_Category = pu.Location_Category
				And sb.Comm_Prod_Location = pu.Comm_Prod_Location
				And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
				And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4   
			Where
				(
				(cp.PRICING_CODE = 'COMP05568' AND sb.Location_Category ='El Paso - All')
				OR
				(cp.PRICING_CODE = 'COMP03090' AND sb.Location_Category ='4C-All')
				)                                                                                                                                                                               				
			GROUP BY                          
				sb.Location_Category
				,cp.Price
			/* END TransGas Query
			*/
		) transGas
		ON
			transGas.Location_Category = base.Location_Category
			and base.Prod_Group_Subcat4 = 'Transmix'
		LEFT OUTER JOIN
		(
			/* Start TransDiesesl Query
				- Generate a price for TransDiesel from each Location_Category
			*/
			Select 
				sb.Location_Category
				,cp.Price / sb.Divisor as Price
			From 
				PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
			Inner Join                                                                                                                                                                             
				PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
			On
				sb.Pricing_Code = cp.Pricing_Code
				And sb.Price_type = cp.Price_type
				And cp.Price_Eff_Date = :In_Price_eff_date -- CP_Date_Param
			Left Outer Join 
				PROD_EDW_BASE_VIEWS.PROD_UNION pu
			On 
				sb.Location_Category = pu.Location_Category
				And sb.Comm_Prod_Location = pu.Comm_Prod_Location
				And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
				And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4   
			Where
			(
				(sb.Location_Category = 'El Paso - All' AND cp.PRICING_CODE = 'OPRK00061' AND cp.pricing_location = 'El Paso' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
				OR
				(sb.Location_Category = '4C-All' AND cp.Price_Source = 'OPIS RACK' AND cp.Pricing_Location = 'Albuquerque' AND cp.Pricing_Desc = 'Ultra Low Sulfur Diesel No2')
			)  
			Group By
				sb.Location_Category
				,cp.Price / sb.Divisor
			/* END TransDiesel Query
			*/
		) transDiesel
		ON 
			transGas.Location_Category = transDiesel.Location_Category
			and base.Prod_Group_Subcat4 = 'Transmix'
		LEFT OUTER JOIN
		(
			/* Start Unfinished Asphalt/Residuum Query
				- Unfinished Asphalt/Residuum price updated only once per week, this queries a 7 day range
			*/
			Select 
				sb.Location_Category
				,cp.Price / sb.Divisor as Price
			From 
				PROD_EDW_BASE_VIEWS.SSRS_BORROWINGBASE sb
			Inner Join                                                                                                                                                                             
				PROD_EDW_BASE_VIEWS.COMBINED_PRICING cp
			On
				sb.Pricing_Code = cp.Pricing_Code
				And sb.Price_type = cp.Price_type
				And cp.Price_Eff_Date between :In_Price_Eff_Date and cast(:In_Price_Eff_Date as date) +7  -- CP_Date_Param
			Left Outer Join 
				PROD_EDW_BASE_VIEWS.PROD_UNION pu
			On 
				sb.Location_Category = pu.Location_Category
				And sb.Comm_Prod_Location = pu.Comm_Prod_Location
				And pu.Eff_Date = :In_Inventory_Eff_Date -- PU_Date_Param
				And sb.Prod_Group_Subcat4 = pu.Prod_Group_Subcat4   
			Where
					sb.Prod_Group_Subcat4 = 'Unfinished Asphalt/Residuum'
			Group By
				sb.Location_Category
				,cp.Price / sb.Divisor
			/* END Unfinished Asphalt/Residuum Query
			*/
		) asphalt
		ON
			asphalt.Location_Category = base.Location_Category
			and base.Prod_Group_Subcat4 = 'Unfinished Asphalt/Residuum'
	)Total
)Grand_Total
GROUP BY Location_Category;
);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_TankCapacity (Run_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
(
SELECT    tank_info.ref_prod_location
    ,prod_group_subcat1,prod_group_subcat2,prod_group_subcat3,prod_group_subcat4
    ,master_code, Min_Op_Qty AS MinOpQty, Max_Op_Qty AS MaxOpQty, net_quantity AS NetQiy
    ,max_op_qty - net_quantity AS Capacity
FROM prod_edw_base_views.Tank_Info
INNER JOIN prod_edw_base_views.tank
ON tank_info.ref_prod_location = tank.ref_prod_location
    AND tank_info.tank_id = tank.tank_id
INNER JOIN prod_edw_base_views.master
ON tank_info.ref_prod_location = master.ref_prod_location
    AND tank_info.tank_id = master.master_id
LEFT OUTER JOIN prod_edw_base_views.comm_prod_rep_hierarchy
ON tank.ref_prod_location = comm_prod_rep_hierarchy.ref_prod_location
    AND tank.product_id = comm_prod_rep_hierarchy.product_id
WHERE tank_info.ref_prod_location = :Ref_Prod_Location
    AND eff_date = :Run_Date
    AND report_desc = 'refops'
ORDER BY tank_info.ref_prod_location, prod_group_subcat1,prod_group_subcat2,prod_group_subcat3,prod_group_subcat4
    ,master_code

;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_TankLegLimit4 (Begin_Date DATE, End_Date DATE, Ref_Prod_Location VARCHAR(20)) AS
	(
	SELECT Unit, tag_id, SUM(Exc_Tank_Level) AS Exc_Tank_Level,SUM(ExcNull_Tank_Level) AS ExcNull_Tank_Level
		,MAX(limit_instant_value) AS Leg_Limit, tag_value_ppl AS Tank_Material
	FROM
		(
		SELECT	Unit, pi_corrected.tag_id, pi_corrected.Trans_Date, Trans_Hour,
				Trans_Min, Tag_Value, limit_instant_value, tag_value_ppl
				,CASE WHEN Tag_Value < Limit_Instant_Value AND Tag_Value IS NOT NULL
					THEN 1
					ELSE 0
				END AS Exc_Tank_Level
				,CASE WHEN Tag_Value IS NULL
					THEN 1
					ELSE 0
				END AS ExcNull_Tank_Level
		FROM	prod_edw_base_views.PI_CORRECTED
		INNER JOIN prod_edw_base_views.environmental_hier
			ON pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
			AND pi_corrected.trans_date = environmental_hier.eff_date
			AND pi_corrected.tag_id = environmental_hier.tag_id
		LEFT OUTER JOIN prod_edw_base_views.pi_material
			ON pi_corrected.ref_prod_location = pi_material.ref_prod_location
			AND pi_corrected.trans_date = pi_material.trans_date
			AND pi_corrected.tag_id = pi_material.tag_id
		WHERE pi_corrected.ref_prod_location = :Ref_Prod_Location
		AND pi_corrected.trans_date BETWEEN :Begin_Date AND :End_Date
		AND analysis_type = 'Tank_Level'
		)
		AS tmpTankLevel
	GROUP BY Unit, tag_id, Tank_Material
	ORDER BY Unit

;);
--------------------------------------------------------------------------------

--******************************************************

REPLACE MACRO prod_edw_base_views.M_TankLegLimit4_Detail (Begin_Date DATE, End_Date DATE, Ref_Prod_Location VARCHAR(20), Tag_ID VARCHAR(100)) AS
	(
	SELECT	Unit, pi_corrected.tag_id, Trans_Date, Trans_Hour,
			Trans_Min, Tag_Value, limit_instant_value
			,CASE WHEN Tag_Value > Limit_Instant_Value THEN 0
			ELSE 1
			END AS Exc_Tank_Level
	FROM	prod_edw_base_views.PI_CORRECTED
	LEFT OUTER JOIN prod_edw_base_views.environmental_hier
		ON pi_corrected.ref_prod_location = environmental_hier.ref_prod_location
		AND pi_corrected.trans_date = environmental_hier.eff_date
		AND pi_corrected.tag_id = environmental_hier.tag_id
	WHERE pi_corrected.ref_prod_location = :Ref_Prod_Location
	AND trans_date BETWEEN :Begin_Date AND :End_Date
	AND analysis_type = 'Tank_Level'
	AND pi_corrected.tag_id = :Tag_ID
	ORDER BY trans_date, trans_hour, trans_min
;);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_UEDC_ELP (Begin_Date date, End_Date date) as
	(

SELECT ref_prod_location, trans_date,
                cast((FCC_Rate_Act_UEDC+RHEN_Rate_Act_UEDC+Alk_Rate_Act_UEDC+Butamer_Rate_Act_UEDC+NHT_Rate_Act_UEDC+
                                DHT_Rate_Act_UEDC+JHT_Rate_Act_UEDC+JetMer_Rate_Act_UEDC+CGHT_Rate_Act_UEDC+BSU_Rate_Act_UEDC+
                                BSUSplit_Rate_Act_UEDC+CPS_Crude_Rate_Act_UEDC+NO6_Crude_Rate_Act_UEDC) as decimal(10,4)) as "Total_Rate_Act_UEDC",
                
                cast((FCC_Rate_Plan_UEDC+RHEN_Rate_Plan_UEDC+Alk_Rate_Plan_UEDC+Butamer_Rate_Plan_UEDC+NHT_Rate_Plan_UEDC+
                                DHT_Rate_Plan_UEDC+JHT_Rate_Plan_UEDC+JetMer_Rate_Plan_UEDC+CGHT_Rate_Plan_UEDC+BSU_Rate_Plan_UEDC+
                                BSUSplit_Rate_Plan_UEDC+CPS_Crude_Rate_Plan_UEDC+NO6_Crude_Rate_Plan_UEDC) as decimal(10,4)) as "Total_Rate_Plan_UEDC",
                
                cast((Total_Rate_Act_UEDC - Total_Rate_Plan_UEDC)/Total_Rate_Plan_UEDC as decimal(10,4)) as "Total_Process_Unit__P", 
                                cast(mavg("Total_Process_Unit__P", 365,trans_date) as decimal(10,4)) as "Total_Process_Unit__P_MAvg",
                
                cast(1000*CPS_Crude_Rate_Act as integer) as CPS_Crude_Rate_Act,
                                cast(1000*CPS_Crude_Rate_Plan as integer) as CPS_Crude_Rate_Plan,
                                CPS_Crude_Factor, 
                                CASE WHEN CPS_Crude_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((CPS_Crude_Rate_Act - CPS_Crude_Rate_Plan)/CPS_Crude_Rate_Plan as decimal(10,4))
                                END as "CPS_Crude_UEDC__P",
                                cast(mavg("CPS_Crude_UEDC__P", 365,trans_date) as decimal(10,4)) as "CPS_Crude_UEDC__P_MAvg",
                                cast(1000*CPS_Crude_Rate_Act*CPS_Crude_Factor as integer) as "CPS_Crude_Rate_Act_UEDC", 
                                cast(1000*CPS_Crude_Rate_Plan*CPS_Crude_Factor as integer) as "CPS_Crude_Rate_Plan_UEDC",
                
                cast(1000*NO6_Crude_Rate_Act as integer) as NO6_Crude_Rate_Act, 
                                cast(1000*NO6_Crude_Rate_Plan as integer) as NO6_Crude_Rate_Plan, 
                                NO6_Crude_Factor, 
                                CASE WHEN NO6_Crude_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((NO6_Crude_Rate_Act - NO6_Crude_Rate_Plan)/NO6_Crude_Rate_Plan as decimal(10,4))
                                END as "NO6_Crude_UEDC__P",
                                cast(mavg("NO6_Crude_UEDC__P", 365,trans_date) as decimal(10,4)) as "NO6_Crude_UEDC__P_MAvg",
                                cast(1000*NO6_Crude_Rate_Act*NO6_Crude_Factor as integer) as "NO6_Crude_Rate_Act_UEDC", 
                                cast(1000*NO6_Crude_Rate_Plan*NO6_Crude_Factor as integer) as "NO6_Crude_Rate_Plan_UEDC",

                cast(1000*FCC_Rate_Act as integer) as FCC_Rate_Act, 
                                cast(1000*FCC_Rate_Plan as integer) as FCC_Rate_Plan, 
                                FCC_Factor, 
                                CASE WHEN FCC_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((FCC_Rate_Act - FCC_Rate_Plan)/FCC_Rate_Plan as decimal(10,4))
                                END as "FCC_UEDC__P",
                                cast(mavg("FCC_UEDC__P", 365,trans_date) as decimal(10,4)) as "FCC_UEDC__P_MAvg",
                                cast(1000*FCC_Rate_Act*FCC_Factor as integer) as "FCC_Rate_Act_UEDC", 
                                cast(1000*FCC_Rate_Plan*FCC_Factor as integer) as "FCC_Rate_Plan_UEDC",

                cast(1000*Rhen_Rate_Act as integer) as Rhen_Rate_Act, 
                                cast(1000*Rhen_Rate_Plan as integer) as Rhen_Rate_Plan, 
                                Rhen_Factor, 
                                CASE WHEN Rhen_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((Rhen_Rate_Act - Rhen_Rate_Plan)/Rhen_Rate_Plan as decimal(10,4))
                                END as "Rhen_UEDC__P",
                                cast(mavg("Rhen_UEDC__P", 365,trans_date) as decimal(10,4)) as "Rhen_UEDC__P_MAvg",
                                cast(1000*Rhen_Rate_Act*Rhen_Factor as integer) as "Rhen_Rate_Act_UEDC", 
                                cast(1000*Rhen_Rate_Plan*Rhen_Factor as integer) as "Rhen_Rate_Plan_UEDC",

                cast(1000*Alk_Rate_Act as integer) as Alk_Rate_Act, 
                                cast(1000*Alk_Rate_Plan as integer) as Alk_Rate_Plan, 
                                Alk_Factor, 
                                CASE WHEN Alk_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((Alk_Rate_Act - Alk_Rate_Plan)/Alk_Rate_Plan as decimal(10,4))
                                END as "Alk_UEDC__P",
                                cast(mavg("Alk_UEDC__P", 365,trans_date) as decimal(10,4)) as "Alk_UEDC__P_MAvg",
                                cast(1000*Alk_Rate_Act*Alk_Factor as integer) as "Alk_Rate_Act_UEDC", 
                                cast(1000*Alk_Rate_Plan*Alk_Factor as integer) as "Alk_Rate_Plan_UEDC",

                cast(1000*Butamer_Rate_Act as integer) as Butamer_Rate_Act, 
                                cast(1000*Butamer_Rate_Plan as integer) as Butamer_Rate_Plan, 
                                Butamer_Factor, 
                                CASE WHEN Butamer_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((Butamer_Rate_Act - Butamer_Rate_Plan)/Butamer_Rate_Plan as decimal(10,4))
                                END as "Butamer_UEDC__P",
                                cast(mavg("Butamer_UEDC__P", 365,trans_date) as decimal(10,4)) as "Butamer_UEDC__P_MAvg",
                                cast(1000*Butamer_Rate_Act*Butamer_Factor as integer) as "Butamer_Rate_Act_UEDC", 
                                cast(1000*Butamer_Rate_Plan*Butamer_Factor as integer) as "Butamer_Rate_Plan_UEDC",

                cast(1000*NHT_Rate_Act as integer) as NHT_Rate_Act, 
                                cast(1000*NHT_Rate_Plan as integer) as NHT_Rate_Plan, 
                                NHT_Factor, 
                                CASE WHEN NHT_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((NHT_Rate_Act - NHT_Rate_Plan)/NHT_Rate_Plan as decimal(10,4))
                                END as "NHT_UEDC__P",
                                cast(mavg("NHT_UEDC__P", 365,trans_date) as decimal(10,4)) as "NHT_UEDC__P_MAvg",
                                cast(1000*NHT_Rate_Act*NHT_Factor as integer) as "NHT_Rate_Act_UEDC", 
                                cast(1000*NHT_Rate_Plan*NHT_Factor as integer) as "NHT_Rate_Plan_UEDC",

                cast(1000*DHT_Rate_Act1 as integer) as DHT_Rate_Act1, 
                                cast(1000*DHT_Rate_Act2 as integer) as DHT_Rate_Act2,
                                cast(1000*DHT_Rate_Plan as integer) as DHT_Rate_Plan, 
                                DHT_Factor, 
                                CASE WHEN DHT_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast(((DHT_Rate_Act1 + DHT_Rate_Act2) - DHT_Rate_Plan)/DHT_Rate_Plan as decimal(10,4))
                                END as "DHT_UEDC__P",
                                cast(mavg("DHT_UEDC__P", 365,trans_date) as decimal(10,4)) as "DHT_UEDC__P_MAvg",
                                cast(1000*(DHT_Rate_Act1+DHT_Rate_Act2)*DHT_Factor as integer) as "DHT_Rate_Act_UEDC", 
                                cast(1000*DHT_Rate_Plan*DHT_Factor as integer) as "DHT_Rate_Plan_UEDC",

                cast(1000*JHT_Rate_Act as integer) as JHT_Rate_Act, 
                                cast(1000*JHT_Rate_Plan as integer) as JHT_Rate_Plan, 
                                JHT_Factor, 
                                CASE WHEN JHT_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((JHT_Rate_Act - JHT_Rate_Plan)/JHT_Rate_Plan as decimal(10,4))
                                END as "JHT_UEDC__P",
                                cast(mavg("JHT_UEDC__P", 365,trans_date) as decimal(10,4)) as "JHT_UEDC__P_MAvg",
                                cast(1000*JHT_Rate_Act*JHT_Factor as integer) as "JHT_Rate_Act_UEDC", 
                                cast(1000*JHT_Rate_Plan*JHT_Factor as integer) as "JHT_Rate_Plan_UEDC",
                                
                cast(1000*JetMer_Rate_Act as integer) as JetMer_Rate_Act, 
                                cast(1000*JetMer_Rate_Plan as integer) as JetMer_Rate_Plan, 
                                JetMer_Factor, 
                                CASE WHEN JetMer_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((JetMer_Rate_Act - JetMer_Rate_Plan)/JetMer_Rate_Plan as decimal(10,4))
                                END as "JetMer_UEDC__P",
                                cast(mavg("JetMer_UEDC__P", 365,trans_date) as decimal(10,4)) as "JetMer_UEDC__P_MAvg",
                                cast(1000*JetMer_Rate_Act*JetMer_Factor as integer) as "JetMer_Rate_Act_UEDC", 
                                cast(1000*JetMer_Rate_Plan*JetMer_Factor as integer) as "JetMer_Rate_Plan_UEDC",
                                
                cast(1000*CGHT_Rate_Act1 as integer) as CGHT_Rate_Act1, 
                                cast(1000*CGHT_Rate_Act2 as integer) as CGHT_Rate_Act2,
                                cast(1000*CGHT_Rate_Plan as integer) as CGHT_Rate_Plan, 
                                CGHT_Factor, 
                                CASE WHEN CGHT_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast(((CGHT_Rate_Act1 - CGHT_Rate_Act2) - CGHT_Rate_Plan)/CGHT_Rate_Plan as decimal(10,4))
                                END as "CGHT_UEDC__P",
                                cast(mavg("CGHT_UEDC__P", 365,trans_date) as decimal(10,4)) "CGHT_UEDC__P_MAvg",
                                cast(1000*(CGHT_Rate_Act1-CGHT_Rate_Act2)*CGHT_Factor as integer) as "CGHT_Rate_Act_UEDC", 
                                cast(1000*CGHT_Rate_Plan*CGHT_Factor as integer) as "CGHT_Rate_Plan_UEDC",
                                
                cast(1000*BSU_Rate_Act as integer) as BSU_Rate_Act, 
                                cast(1000*BSU_Rate_Plan as integer) as BSU_Rate_Plan, 
                                BSU_Factor, 
                                CASE WHEN BSU_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((BSU_Rate_Act - BSU_Rate_Plan)/BSU_Rate_Plan as decimal(10,4))
                                END as "BSU_UEDC__P",
                                cast(mavg("BSU_UEDC__P", 365,trans_date) as decimal(10,4)) as "BSU_UEDC__P_MAvg",
                                cast(1000*BSU_Rate_Act*BSU_Factor as integer) as "BSU_Rate_Act_UEDC", 
                                cast(1000*BSU_Rate_Plan*BSU_Factor as integer) as "BSU_Rate_Plan_UEDC",
                                
                cast(1000*BSUSplit_Rate_Act as integer) as BSUSplit_Rate_Act, 
                                cast(1000*BSUSplit_Rate_Plan as integer) as BSUSplit_Rate_Plan, 
                                BSUSplit_Factor, 
                                CASE WHEN BSUSplit_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((BSUSplit_Rate_Act - BSUSplit_Rate_Plan)/BSUSplit_Rate_Plan as decimal(10,4))
                                END as "BSUSplit_UEDC__P",
                                cast(mavg("BSUSplit_UEDC__P", 365,trans_date) as decimal(10,4)) as "BSUSplit_UEDC__P_MAvg",
                                cast(1000*BSUSplit_Rate_Act*BSUSplit_Factor as integer) as "BSUSplit_Rate_Act_UEDC", 
                                cast(1000*BSUSplit_Rate_Plan*BSUSplit_Factor as integer) as "BSUSplit_Rate_Plan_UEDC"
                
FROM    
                (SELECT ref_prod_location, trans_date, 
                                max(CASE WHEN tag_id = 'cpscrude' then zeroifnull(AvgTagValue) END) as "CPS_Crude_Rate_Act",
                                max(CASE WHEN tag_id = 'cpscrude' then UEDC_Plan END) as "CPS_Crude_Rate_Plan",
                                max(CASE WHEN tag_id = 'cpscrude' then UEDC_Factor END) as "CPS_Crude_Factor",
                                max(CASE WHEN tag_id = '16FC202.pv' then zeroifnull(AvgTagValue) END) as "NO6_Crude_Rate_Act",
                                max(CASE WHEN tag_id = '16FC202.pv' then UEDC_Plan END) as "NO6_Crude_Rate_Plan",
                                max(CASE WHEN tag_id = '16FC202.pv' then UEDC_Factor END) as "NO6_Crude_Factor",    
                                max(CASE WHEN tag_id = '30FC104.pv' then zeroifnull(AvgTagValue) END) as "FCC_Rate_Act",
                                max(CASE WHEN tag_id = '30FC104.pv' then UEDC_Plan END) as "FCC_Rate_Plan",
                                max(CASE WHEN tag_id = '30FC104.pv' then UEDC_Factor END) as "FCC_Factor",                
                                max(CASE WHEN tag_id = '81FC342.pv' then zeroifnull(AvgTagValue) END) as "Alk_Rate_Act",
                                max(CASE WHEN tag_id = '81FC342.pv' then UEDC_Plan END) as "Alk_Rate_Plan",
                                max(CASE WHEN tag_id = '81FC342.pv' then UEDC_Factor END) as "Alk_Factor",  
                                max(CASE WHEN tag_id = '70FC124.pv' then zeroifnull(AvgTagValue) END) as "Butamer_Rate_Act",
                                max(CASE WHEN tag_id = '70FC124.pv' then UEDC_Plan END) as "Butamer_Rate_Plan",
                                max(CASE WHEN tag_id = '70FC124.pv' then UEDC_Factor END) as "Butamer_Factor",          
                                max(CASE WHEN tag_id = '41FC124.pv' then zeroifnull(AvgTagValue) END) as "NHT_Rate_Act",
                                max(CASE WHEN tag_id = '41FC124.pv' then UEDC_Plan END) as "NHT_Rate_Plan",
                                max(CASE WHEN tag_id = '41FC124.pv' then UEDC_Factor END) as "NHT_Factor",                
                                max(CASE WHEN tag_id = '41FC410.pv' then zeroifnull(AvgTagValue) END) as "Rhen_Rate_Act",
                                max(CASE WHEN tag_id = '41FC410.pv' then UEDC_Plan END) as "Rhen_Rate_Plan",
                                max(CASE WHEN tag_id = '41FC410.pv' then UEDC_Factor END) as "Rhen_Factor",
                                max(CASE WHEN tag_id = '43FC113.pv' then zeroifnull(AvgTagValue) END) as "BSU_Rate_Act",
                                max(CASE WHEN tag_id = '43FC113.pv' then UEDC_Plan END) as "BSU_Rate_Plan",
                                max(CASE WHEN tag_id = '43FC113.pv' then UEDC_Factor END) as "BSU_Factor",                
                                max(CASE WHEN tag_id = '43FC114.pv' then zeroifnull(AvgTagValue) END) as "BSUSplit_Rate_Act",
                                max(CASE WHEN tag_id = '43FC114.pv' then UEDC_Plan END) as "BSUSplit_Rate_Plan",
                                max(CASE WHEN tag_id = '43FC114.pv' then UEDC_Factor END) as "BSUSplit_Factor",         
                                max(CASE WHEN tag_id = '38FC102.pv' then zeroifnull(AvgTagValue) END) as "JHT_Rate_Act",
                                max(CASE WHEN tag_id = '38FC102.pv' then UEDC_Plan END) as "JHT_Rate_Plan",
                                max(CASE WHEN tag_id = '38FC102.pv' then UEDC_Factor END) as "JHT_Factor",
                                max(CASE WHEN tag_id = '01FI163.PV' then zeroifnull(AvgTagValue) END) as "JetMer_Rate_Act",
                                max(CASE WHEN tag_id = '01FI163.PV' then UEDC_Plan END) as "JetMer_Rate_Plan",
                                max(CASE WHEN tag_id = '01FI163.PV' then UEDC_Factor END) as "JetMer_Factor",
                                max(CASE WHEN tag_id = '39fc246.pv' then zeroifnull(AvgTagValue) END) as "DHT_Rate_Act1",
                                max(CASE WHEN tag_id = '39FC245.pv' then zeroifnull(AvgTagValue) END) as "DHT_Rate_Act2",
                                max(CASE WHEN tag_id = '39FC245.pv' then UEDC_Plan END) as "DHT_Rate_Plan",
                                max(CASE WHEN tag_id = '39FC245.pv' then UEDC_Factor END) as "DHT_Factor",
                                max(CASE WHEN tag_id = '89FC101A.pv' then zeroifnull(AvgTagValue) END) as "CGHT_Rate_Act1",
                                max(CASE WHEN tag_id = '89FC302.pv' then zeroifnull(AvgTagValue) END) as "CGHT_Rate_Act2",
                                max(CASE WHEN tag_id = '89FC302.pv' then UEDC_Plan END) as "CGHT_Rate_Plan",
                                max(CASE WHEN tag_id = '89FC302.pv' then UEDC_Factor END) as "CGHT_Factor"
                FROM
                                (SELECT               PI.Ref_Prod_Location, Trans_Date, pi.Tag_ID, unit, max(uedc_plan) UEDC_Plan, max(complex_factor) UEDC_Factor, 
                                                avg(Tag_Value) AvgTagValue
                                FROM    prod_edw_base_views.PI
                                INNER JOIN refops_uedc
                                                ON pi.ref_prod_location = refops_uedc.ref_prod_location
                                                AND pi.tag_id = refops_uedc.tag_id
                                                AND pi.trans_date = refops_uedc.eff_date
                                WHERE trans_date BETWEEN :Begin_Date AND :End_Date
                                                AND PI.Ref_Prod_Location = 'El Paso Refinery'
                                GROUP BY PI.Ref_Prod_Location, Trans_Date, pi.Tag_ID, unit) as tmpRateData1
                GROUP BY ref_prod_location, trans_date) as tmpRateData2
ORDER by Ref_Prod_Location, Trans_Date;

);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_UEDC_GAL (Begin_Date date, End_Date date) as
	(

SELECT ref_prod_location, trans_date,
                cast((CRUDE_FEED_Rate_Act_UEDC+FCC_Rate_Act_UEDC+NHT_FEED_Rate_Act_UEDC+KHT_FEED_Rate_Act_UEDC+DHT_FEED_Rate_Act_UEDC+
                                ALKYLATE_Rate_Act_UEDC+PLATFORMER_Rate_Act_UEDC+MSAT_SPLIT_Rate_Act_UEDC) as decimal(10,4)) as "Total_Rate_Act_UEDC",

                cast((CRUDE_FEED_Rate_Plan_UEDC+FCC_Rate_Plan_UEDC+NHT_FEED_Rate_Plan_UEDC+KHT_FEED_Rate_Plan_UEDC+DHT_FEED_Rate_Plan_UEDC+
                                ALKYLATE_Rate_Plan_UEDC+PLATFORMER_Rate_Plan_UEDC+MSAT_SPLIT_Rate_Plan_UEDC) as decimal(10,4)) as "Total_Rate_Plan_UEDC",

                cast((Total_Rate_Act_UEDC - Total_Rate_Plan_UEDC)/Total_Rate_Plan_UEDC as decimal(10,4)) as "Total_Process_Unit__P", 
                                cast(mavg("Total_Process_Unit__P", 365,trans_date) as decimal(10,4)) as "Total_Process_Unit__P_MAvg",
                                                
                cast(CRUDE_FEED_Rate_Act as integer) as CRUDE_FEED_Rate_Act,
                                cast(1000*CRUDE_FEED_Rate_Plan as integer) as CRUDE_FEED_Rate_Plan,
                                CRUDE_FEED_Factor, 
                                CASE WHEN CRUDE_FEED_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((CRUDE_FEED_Rate_Act - 1000*CRUDE_FEED_Rate_Plan)/(1000*CRUDE_FEED_Rate_Plan) as decimal(10,4))
                                END as "CRUDE_FEED_UEDC__P",
                                cast(mavg("CRUDE_FEED_UEDC__P", 365,trans_date) as decimal(10,4)) as "CRUDE_FEED_UEDC__P_MAvg",
                                cast(CRUDE_FEED_Rate_Act*CRUDE_FEED_Factor as integer) as "CRUDE_FEED_Rate_Act_UEDC", 
                                cast(1000*CRUDE_FEED_Rate_Plan*CRUDE_FEED_Factor as integer) as "CRUDE_FEED_Rate_Plan_UEDC",

            	 cast(FCC_Rate_Act as integer) as FCC_Rate_Act,
                                cast(1000*FCC_Rate_Plan as integer) as FCC_Rate_Plan,
                                FCC_Factor, 
                                CASE WHEN FCC_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((FCC_Rate_Act - 1000*FCC_Rate_Plan)/(1000*FCC_Rate_Plan) as decimal(10,4))
                                END as "FCC_UEDC__P",
                                cast(mavg("FCC_UEDC__P", 365,trans_date) as decimal(10,4)) as "FCC_UEDC__P_MAvg",
                                cast(FCC_Rate_Act*FCC_Factor as integer) as "FCC_Rate_Act_UEDC", 
                                cast(1000*FCC_Rate_Plan*FCC_Factor as integer) as "FCC_Rate_Plan_UEDC",

                cast(NHT_FEED_Rate_Act as integer) as NHT_FEED_Rate_Act,
                                cast(1000*NHT_FEED_Rate_Plan as integer) as NHT_FEED_Rate_Plan,
                                NHT_FEED_Factor, 
                                CASE WHEN NHT_FEED_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((NHT_FEED_Rate_Act - 1000*NHT_FEED_Rate_Plan)/(1000*NHT_FEED_Rate_Plan) as decimal(10,4))
                                END as "NHT_FEED_UEDC__P",
                                cast(mavg("NHT_FEED_UEDC__P", 365,trans_date) as decimal(10,4)) as "NHT_FEED_UEDC__P_MAvg",
                                cast(NHT_FEED_Rate_Act*NHT_FEED_Factor as integer) as "NHT_FEED_Rate_Act_UEDC", 
                                cast(1000*NHT_FEED_Rate_Plan*NHT_FEED_Factor as integer) as "NHT_FEED_Rate_Plan_UEDC",

                cast(KHT_FEED_Rate_Act as integer) as KHT_FEED_Rate_Act,
                                cast(1000*KHT_FEED_Rate_Plan as integer) as KHT_FEED_Rate_Plan,
                                KHT_FEED_Factor, 
                                CASE WHEN KHT_FEED_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((KHT_FEED_Rate_Act - 1000*KHT_FEED_Rate_Plan)/(1000*KHT_FEED_Rate_Plan) as decimal(10,4))
                                END as "KHT_FEED_UEDC__P",
                                cast(mavg("KHT_FEED_UEDC__P", 365,trans_date) as decimal(10,4)) as "KHT_FEED_UEDC__P_MAvg",
                                cast(KHT_FEED_Rate_Act*KHT_FEED_Factor as integer) as "KHT_FEED_Rate_Act_UEDC", 
                                cast(1000*KHT_FEED_Rate_Plan*KHT_FEED_Factor as integer) as "KHT_FEED_Rate_Plan_UEDC",

                cast(DHT_FEED_Rate_Act as integer) as DHT_FEED_Rate_Act,
                                cast(1000*DHT_FEED_Rate_Plan as integer) as DHT_FEED_Rate_Plan,
                                DHT_FEED_Factor, 
                                CASE WHEN DHT_FEED_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((DHT_FEED_Rate_Act - 1000*DHT_FEED_Rate_Plan)/(1000*DHT_FEED_Rate_Plan) as decimal(10,4))
                                END as "DHT_FEED_UEDC__P",
                                cast(mavg("DHT_FEED_UEDC__P", 365,trans_date) as decimal(10,4)) as "DHT_FEED_UEDC__P_MAvg",
                                cast(DHT_FEED_Rate_Act*DHT_FEED_Factor as integer) as "DHT_FEED_Rate_Act_UEDC", 
                                cast(1000*DHT_FEED_Rate_Plan*DHT_FEED_Factor as integer) as "DHT_FEED_Rate_Plan_UEDC",

                cast(ALKYLATE_Rate_Act as integer) as ALKYLATE_Rate_Act,
                                cast(1000*ALKYLATE_Rate_Plan as integer) as ALKYLATE_Rate_Plan,
                                ALKYLATE_Factor, 
                                CASE WHEN ALKYLATE_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((ALKYLATE_Rate_Act - 1000*ALKYLATE_Rate_Plan)/(1000*ALKYLATE_Rate_Plan) as decimal(10,4))
                                END as "ALKYLATE_UEDC__P",
                                cast(mavg("ALKYLATE_UEDC__P", 365,trans_date) as decimal(10,4)) as "ALKYLATE_UEDC__P_MAvg",
                                cast(ALKYLATE_Rate_Act*ALKYLATE_Factor as integer) as "ALKYLATE_Rate_Act_UEDC", 
                                cast(1000*ALKYLATE_Rate_Plan*ALKYLATE_Factor as integer) as "ALKYLATE_Rate_Plan_UEDC",

                cast(PLATFORMER_Rate_Act as integer) as PLATFORMER_Rate_Act,
                                cast(1000*PLATFORMER_Rate_Plan as integer) as PLATFORMER_Rate_Plan,
                                PLATFORMER_Factor, 
                                CASE WHEN PLATFORMER_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((PLATFORMER_Rate_Act - 1000*PLATFORMER_Rate_Plan)/(1000*PLATFORMER_Rate_Plan) as decimal(10,4))
                                END as "PLATFORMER_UEDC__P",
                                cast(mavg("PLATFORMER_UEDC__P", 365,trans_date) as decimal(10,4)) as "PLATFORMER_UEDC__P_MAvg",
                                cast(PLATFORMER_Rate_Act*PLATFORMER_Factor as integer) as "PLATFORMER_Rate_Act_UEDC", 
                                cast(1000*PLATFORMER_Rate_Plan*PLATFORMER_Factor as integer) as "PLATFORMER_Rate_Plan_UEDC",

                cast(MSAT_SPLIT_Rate_Act as integer) as MSAT_SPLIT_Rate_Act,
                                cast(1000*MSAT_SPLIT_Rate_Plan as integer) as MSAT_SPLIT_Rate_Plan,
                                MSAT_SPLIT_Factor, 
                                CASE WHEN MSAT_SPLIT_Rate_Plan = 0 
                                                THEN cast(0 as decimal(10,4))
                                ELSE
                                                cast((MSAT_SPLIT_Rate_Act - 1000*MSAT_SPLIT_Rate_Plan)/(1000*MSAT_SPLIT_Rate_Plan) as decimal(10,4))
                                END as "MSAT_SPLIT_UEDC__P",
                                cast(mavg("MSAT_SPLIT_UEDC__P", 365,trans_date) as decimal(10,4)) as "MSAT_SPLIT_UEDC__P_MAvg",
                                cast(MSAT_SPLIT_Rate_Act*MSAT_SPLIT_Factor as integer) as "MSAT_SPLIT_Rate_Act_UEDC", 
                                cast(1000*MSAT_SPLIT_Rate_Plan*MSAT_SPLIT_Factor as integer) as "MSAT_SPLIT_Rate_Plan_UEDC"

FROM    
                (SELECT ref_prod_location, trans_date, 
                                max(CASE WHEN tag_id = 'CRFC102.PV' then zeroifnull(AvgTagValue) END) as "Crude_Feed_Rate_Act",
                                max(CASE WHEN tag_id = 'CRFC102.PV' then UEDC_Plan END) as "Crude_Feed_Rate_Plan",
                                max(CASE WHEN tag_id = 'CRFC102.PV' then UEDC_Factor END) as "Crude_Feed_Factor",
                                max(CASE WHEN tag_id = 'FCFC401.PV' then zeroifnull(AvgTagValue) END) as "FCC_Rate_Act",
                                max(CASE WHEN tag_id = 'FCFC401.PV' then UEDC_Plan END) as "FCC_Rate_Plan",
                                max(CASE WHEN tag_id = 'FCFC401.PV' then UEDC_Factor END) as "FCC_Factor",                
                                max(CASE WHEN tag_id = 'NHFI221.PV' then zeroifnull(AvgTagValue) END) as "NHT_Feed_Rate_Act",
                                max(CASE WHEN tag_id = 'NHFI221.PV' then UEDC_Plan END) as "NHT_Feed_Rate_Plan",
                                max(CASE WHEN tag_id = 'NHFI221.PV' then UEDC_Factor END) as "NHT_Feed_Factor",    
                                max(CASE WHEN tag_id = 'D_FT_105.PV' then zeroifnull(AvgTagValue) END) as "KHT_Feed_Rate_Act",
                                max(CASE WHEN tag_id = 'D_FT_105.PV' then UEDC_Plan END) as "KHT_Feed_Rate_Plan",
                                max(CASE WHEN tag_id = 'D_FT_105.PV' then UEDC_Factor END) as "KHT_Feed_Factor",  
                                max(CASE WHEN tag_id = 'D_FI_550.PV' then zeroifnull(AvgTagValue) END) as "DHT_Feed_Rate_Act",
                                max(CASE WHEN tag_id = 'D_FI_550.PV' then UEDC_Plan END) as "DHT_Feed_Rate_Plan",
                                max(CASE WHEN tag_id = 'D_FI_550.PV' then UEDC_Factor END) as "DHT_Feed_Factor",          
                                max(CASE WHEN tag_id = 'A_FI_146.PV' then zeroifnull(AvgTagValue) END) as "Alkylate_Rate_Act",
                                max(CASE WHEN tag_id = 'A_FI_146.PV' then UEDC_Plan END) as "Alkylate_Rate_Plan",
                                max(CASE WHEN tag_id = 'A_FI_146.PV' then UEDC_Factor END) as "Alkylate_Factor",
                                max(CASE WHEN tag_id = 'P_FI_009.PV' then zeroifnull(AvgTagValue) END) as "Platformer_Rate_Act",
                                max(CASE WHEN tag_id = 'P_FI_009.PV' then UEDC_Plan END) as "Platformer_Rate_Plan",
                                max(CASE WHEN tag_id = 'P_FI_009.PV' then UEDC_Factor END) as "Platformer_Factor",                
                                max(CASE WHEN tag_id = 'ISFC102.calc' then zeroifnull(AvgTagValue) END) as "MSAT_Split_Rate_Act",
                                max(CASE WHEN tag_id = 'ISFC102.calc' then UEDC_Plan END) as "MSAT_Split_Rate_Plan",
                                max(CASE WHEN tag_id = 'ISFC102.calc' then UEDC_Factor END) as "MSAT_Split_Factor"
                FROM
                                (SELECT               PI.Ref_Prod_Location, Trans_Date, pi.Tag_ID, unit, max(uedc_plan) UEDC_Plan, max(complex_factor) UEDC_Factor, 
                                                avg(Tag_Value) AvgTagValue
                                FROM    prod_edw_base_views.PI
                                INNER JOIN refops_uedc
                                                ON pi.ref_prod_location = refops_uedc.ref_prod_location
                                                AND pi.tag_id = refops_uedc.tag_id
                                                AND pi.trans_date = refops_uedc.eff_date
                                WHERE trans_date BETWEEN :Begin_Date AND :End_Date
                                                AND PI.Ref_Prod_Location = 'Gallup'
                                                AND PI.Tag_ID IN ('CRFC102.PV','FCFC401.PV','NHFI221.PV','D_FT_105.PV','D_FI_550.PV','A_FI_146.PV','P_FI_009.PV','ISFC102.calc')
                                GROUP BY PI.Ref_Prod_Location, Trans_Date, pi.Tag_ID, unit) as tmpRateData1
                GROUP BY ref_prod_location, trans_date) as tmpRateData2
ORDER by Ref_Prod_Location, Trans_Date;

);
--------------------------------------------------------------------------------

/* Email Conversion */
REPLACE MACRO prod_edw_base_views.M_UEDC_PIDataCheck (Ref_Prod_Location VARCHAR(20), Trans_Source VARCHAR(20)) AS
    (

    SELECT 
    CASE WHEN uedc_run_bit = 'GOOD' AND Ref_Prod_Location = 'Gallup' 
        THEN 'GAL873-AnalyticReports@andeavor.com'
    WHEN uedc_run_bit = 'GOOD' AND Ref_Prod_Location = :Ref_Prod_Location 
        THEN 'EPA650-AnalyticReports@andeavor.com'
    WHEN FINAL.uedc_run_bit = 'BAD'
        THEN 'Blake.Larsen@andeavor.com; Gene.J.Fiore@andeavor.com; David.A.Brand@andeavor.com;Satheesh.Joseph@andeavor.com'
    End AS ToAddresses
    
    ,CASE WHEN uedc_run_bit = 'GOOD' AND Ref_Prod_Location = 'Gallup' 
        THEN 'UEDC-Gallup'
    WHEN uedc_run_bit = 'GOOD' AND Ref_Prod_Location = :Ref_Prod_Location
        THEN 'UEDC-El Paso'
    WHEN FINAL.uedc_run_bit = 'BAD' AND Ref_Prod_Location = 'Gallup' 
        THEN 'ERROR! Insufficient data to generate UEDC-Gallup report'
    WHEN FINAL.uedc_run_bit = 'BAD' AND Ref_Prod_Location = :Ref_Prod_Location 
        THEN 'ERROR! Insufficient data to generate UEDC-El Paso report'
    End AS SubjectLine
    
    ,CASE WHEN FINAL.uedc_run_bit = 'GOOD'
        THEN 'Any questions or comments? Contact Steven.M.Hord@andeavor.com'
    WHEN FINAL.uedc_run_bit = 'BAD' 
         THEN 'ERROR. Business users NOT e-mailed. Resolve matter and resend report.'
    End AS EmailComment
    
    ,'Steven.M.Hord@andeavor.com; Aaron.F.DeLaRiva@andeavor.com; Satheesh.Joseph@andeavor.com;David.A.Brand@andeavor.com' AS CCAddresses
    
    FROM
    (
    SELECT         cur_date, :Ref_Prod_Location AS Ref_Prod_Location, ZEROIFNULL(RecNullSumTmp) AS RecNullSum, RecAvg, ZEROIFNULL(RecSumTmp) AS RecSum,
                            CASE 
                                WHEN RecNullSum > (0.8*RecAvg) THEN 'BAD'
                                WHEN RecSum < (0.8*RecAvg) THEN 'BAD'
                                WHEN RecAvg IS NULL THEN 'BAD'
                                ELSE 'GOOD'
                            END AS UEDC_RUN_BIT
    FROM prod_edw_base_views.cur_date
    LEFT OUTER JOIN
                            (
                            SELECT        Trans_Source AS Source_Name , CAST(COUNT(tag_id) AS INTEGER) AS RecNullSumTmp
                            FROM           prod_edw_base_views.PI
                            WHERE trans_date = CURRENT_DATE-1
                                                    AND ref_prod_location = :Ref_Prod_Location
                                                    AND trans_source = :Trans_Source
                                                    AND tag_value IS NULL
                            GROUP BY Source_Name
                            ) AS tmpDailyNullSum
    ON tmpDailyNullSum.Source_Name = :Trans_Source
    LEFT OUTER JOIN
                            (
                            SELECT         Source_Name, CAST(SUM(RECORD_CT) AS INTEGER) AS RecSumTmp
                            FROM           prod_edw_base_views.TABLE_EFF_DATE_COUNTS
                            WHERE eff_date = CURRENT_DATE-1
                                                    AND TABLE_NAME = 'PI'
                                                    AND location = :Ref_Prod_Location
                                                    AND source_name = :Trans_Source
                            GROUP BY Source_Name
                            ) AS tmpDailySum
    ON tmpDailySum.Source_Name = :Trans_Source
    LEFT OUTER JOIN
                            (
                            SELECT         Source_Name, CAST(AVG(RECORD_CT) AS INTEGER) AS RecAvg
                            FROM           prod_edw_base_views.TABLE_EFF_DATE_COUNTS
                            WHERE eff_date BETWEEN CURRENT_DATE-7 AND CURRENT_DATE-1
                            AND TABLE_NAME = 'PI'
                            AND location = :Ref_Prod_Location
                            AND source_name = :Trans_Source
                            GROUP BY Source_Name
                            ) AS tmpDailyAvg
    ON tmpDailyAvg.Source_Name = :Trans_Source
    WHERE cur_date = CURRENT_DATE-1
    ) AS FINAL;
    
);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_UEDC_SPP (Begin_Date DATE, End_Date DATE) AS
    (

SELECT ref_prod_location, trans_date
  ,CAST((No1_Crude_Rate_Act_UEDC+No2_Crude_Rate_Act_UEDC+No1_Vacuum_Rate_Act_UEDC+No2_Vacuum_Rate_Act_UEDC+Desulf_Rate_Act_UEDC+
        Isom_Rate_Act_UEDC+NHT1_Rate_Act_UEDC+Ref1_Rate_Act_UEDC+NHT2_Rate_Act_UEDC+Ref2_Rate_Act_UEDC+
        KHT_Rate_Act_UEDC+DHT_Rate_Act_UEDC+GOHT_Rate_Act_UEDC+FCC_Rate_Act_UEDC+HFAlky_Rate_Act_UEDC+
        SRU_Rate_Act_UEDC+Asphalt_Rate_Act_UEDC) AS DECIMAL(10,0)) AS "Total_Rate_Act_UEDC"
                
  ,CAST((No1_Crude_Rate_Plan_UEDC+No2_Crude_Rate_Plan_UEDC+No1_Vacuum_Rate_Plan_UEDC+No2_Vacuum_Rate_Plan_UEDC+Desulf_Rate_Plan_UEDC+
        Isom_Rate_Plan_UEDC+NHT1_Rate_Plan_UEDC+Ref1_Rate_Plan_UEDC+NHT2_Rate_Plan_UEDC+Ref2_Rate_Plan_UEDC+
        KHT_Rate_Plan_UEDC+DHT_Rate_Plan_UEDC+GOHT_Rate_Plan_UEDC+FCC_Rate_Plan_UEDC+HFAlky_Rate_Plan_UEDC+
        SRU_Rate_Plan_UEDC+Asphalt_Rate_Plan_UEDC) AS DECIMAL(10,0)) AS "Total_Rate_Plan_UEDC"

    ,CAST((Total_Rate_Act_UEDC - Total_Rate_Plan_UEDC)/Total_Rate_Plan_UEDC AS DECIMAL(10,4)) AS "Total_Process_Unit__P", 
            CAST(MAVG("Total_Process_Unit__P", 365,trans_date) AS DECIMAL(10,4)) AS "Total_Process_Unit__P_MAvg"                

    ,CAST(No1_Crude_Rate_Act AS INTEGER) AS No1_Crude_Rate_Act,
        CAST(No1_Crude_Rate_Plan AS INTEGER) AS No1_Crude_Rate_Plan,
        No1_Crude_Factor, 
        CASE WHEN No1_Crude_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((No1_Crude_Rate_Act - No1_Crude_Rate_Plan)/No1_Crude_Rate_Plan AS DECIMAL(10,4))
        END AS "No1_Crude_UEDC__P",
        CAST(MAVG("No1_Crude_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "No1_Crude_UEDC__P_MAvg",
        CAST(No1_Crude_Rate_Act*No1_Crude_Factor AS INTEGER) AS "No1_Crude_Rate_Act_UEDC", 
        CAST(No1_Crude_Rate_Plan*No1_Crude_Factor AS INTEGER) AS "No1_Crude_Rate_Plan_UEDC"
                
    ,CAST(No2_Crude_Rate_Act AS INTEGER) AS No2_Crude_Rate_Act,
        CAST(No2_Crude_Rate_Plan AS INTEGER) AS No2_Crude_Rate_Plan,
        No2_Crude_Factor, 
        CASE WHEN No2_Crude_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((No2_Crude_Rate_Act - No2_Crude_Rate_Plan)/No2_Crude_Rate_Plan AS DECIMAL(10,4))
        END AS "No2_Crude_UEDC__P",
        CAST(MAVG("No2_Crude_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "No2_Crude_UEDC__P_MAvg",
        CAST(No2_Crude_Rate_Act*No2_Crude_Factor AS INTEGER) AS "No2_Crude_Rate_Act_UEDC", 
        CAST(No2_Crude_Rate_Plan*No2_Crude_Factor AS INTEGER) AS "No2_Crude_Rate_Plan_UEDC"

    ,CAST(No1_Vacuum_Rate_Act AS INTEGER) AS No1_Vacuum_Rate_Act,
        CAST(No1_Vacuum_Rate_Plan AS INTEGER) AS No1_Vacuum_Rate_Plan,
        No1_Vacuum_Factor, 
        CASE WHEN No1_Vacuum_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((No1_Vacuum_Rate_Act - No1_Vacuum_Rate_Plan)/No1_Vacuum_Rate_Plan AS DECIMAL(10,4))
        END AS "No1_Vacuum_UEDC__P",
        CAST(MAVG("No1_Vacuum_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "No1_Vacuum_UEDC__P_MAvg",
        CAST(No1_Vacuum_Rate_Act*No1_Vacuum_Factor AS INTEGER) AS "No1_Vacuum_Rate_Act_UEDC", 
        CAST(No1_Vacuum_Rate_Plan*No1_Vacuum_Factor AS INTEGER) AS "No1_Vacuum_Rate_Plan_UEDC"

    ,CAST(No2_Vacuum_Rate_Act AS INTEGER) AS No2_Vacuum_Rate_Act,
        CAST(No2_Vacuum_Rate_Plan AS INTEGER) AS No2_Vacuum_Rate_Plan,
        No2_Vacuum_Factor, 
        CASE WHEN No2_Vacuum_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((No2_Vacuum_Rate_Act - No2_Vacuum_Rate_Plan)/No2_Vacuum_Rate_Plan AS DECIMAL(10,4))
        END AS "No2_Vacuum_UEDC__P",
        CAST(MAVG("No2_Vacuum_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "No2_Vacuum_UEDC__P_MAvg",
        CAST(No2_Vacuum_Rate_Act*No2_Vacuum_Factor AS INTEGER) AS "No2_Vacuum_Rate_Act_UEDC", 
        CAST(No2_Vacuum_Rate_Plan*No2_Vacuum_Factor AS INTEGER) AS "No2_Vacuum_Rate_Plan_UEDC"          

    ,CAST(Desulf_Rate_Act AS INTEGER) AS Desulf_Rate_Act,
        CAST(Desulf_Rate_Plan AS INTEGER) AS Desulf_Rate_Plan,
        Desulf_Factor, 
        CASE WHEN Desulf_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((Desulf_Rate_Act - Desulf_Rate_Plan)/Desulf_Rate_Plan AS DECIMAL(10,4))
        END AS "Desulf_UEDC__P",
        CAST(MAVG("Desulf_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "Desulf_UEDC__P_MAvg",
        CAST(Desulf_Rate_Act*Desulf_Factor AS INTEGER) AS "Desulf_Rate_Act_UEDC", 
        CAST(Desulf_Rate_Plan*Desulf_Factor AS INTEGER) AS "Desulf_Rate_Plan_UEDC"                                

    ,CAST(Isom_Rate_Act AS INTEGER) AS Isom_Rate_Act,
        CAST(Isom_Rate_Plan AS INTEGER) AS Isom_Rate_Plan,
        Isom_Factor, 
        CASE WHEN Isom_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((Isom_Rate_Act - Isom_Rate_Plan)/Isom_Rate_Plan AS DECIMAL(10,4))
        END AS "Isom_UEDC__P",
        CAST(MAVG("Isom_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "Isom_UEDC__P_MAvg",
        CAST(Isom_Rate_Act*Isom_Factor AS INTEGER) AS "Isom_Rate_Act_UEDC", 
        CAST(Isom_Rate_Plan*Isom_Factor AS INTEGER) AS "Isom_Rate_Plan_UEDC"

    ,CAST(NHT1_Rate_Act AS INTEGER) AS NHT1_Rate_Act,
        CAST(NHT1_Rate_Plan AS INTEGER) AS NHT1_Rate_Plan,
        NHT1_Factor, 
        CASE WHEN NHT1_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((NHT1_Rate_Act - NHT1_Rate_Plan)/NHT1_Rate_Plan AS DECIMAL(10,4))
        END AS "NHT1_UEDC__P",
        CAST(MAVG("NHT1_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "NHT1_UEDC__P_MAvg",
        CAST(NHT1_Rate_Act*NHT1_Factor AS INTEGER) AS "NHT1_Rate_Act_UEDC", 
        CAST(NHT1_Rate_Plan*NHT1_Factor AS INTEGER) AS "NHT1_Rate_Plan_UEDC"
        
    ,CAST(Ref1_Rate_Act AS INTEGER) AS Ref1_Rate_Act,
        CAST(Ref1_Rate_Plan AS INTEGER) AS Ref1_Rate_Plan,
        Ref1_Factor, 
        CASE WHEN Ref1_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((Ref1_Rate_Act - Ref1_Rate_Plan)/Ref1_Rate_Plan AS DECIMAL(10,4))
        END AS "Ref1_UEDC__P",
        CAST(MAVG("Ref1_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "Ref1_UEDC__P_MAvg",
        CAST(Ref1_Rate_Act*Ref1_Factor AS INTEGER) AS "Ref1_Rate_Act_UEDC", 
        CAST(Ref1_Rate_Plan*Ref1_Factor AS INTEGER) AS "Ref1_Rate_Plan_UEDC"        

    ,CAST(NHT2_Rate_Act AS INTEGER) AS NHT2_Rate_Act,
        CAST(NHT2_Rate_Plan AS INTEGER) AS NHT2_Rate_Plan,
        NHT2_Factor, 
        CASE WHEN NHT2_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((NHT2_Rate_Act - NHT2_Rate_Plan)/NHT2_Rate_Plan AS DECIMAL(10,4))
        END AS "NHT2_UEDC__P",
        CAST(MAVG("NHT2_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "NHT2_UEDC__P_MAvg",
        CAST(NHT2_Rate_Act*NHT2_Factor AS INTEGER) AS "NHT2_Rate_Act_UEDC", 
        CAST(NHT2_Rate_Plan*NHT2_Factor AS INTEGER) AS "NHT2_Rate_Plan_UEDC"

    ,CAST(Ref2_Rate_Act AS INTEGER) AS Ref2_Rate_Act,
        CAST(Ref2_Rate_Plan AS INTEGER) AS Ref2_Rate_Plan,
        Ref2_Factor, 
        CASE WHEN Ref2_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((Ref2_Rate_Act - Ref2_Rate_Plan)/Ref2_Rate_Plan AS DECIMAL(10,4))
        END AS "Ref2_UEDC__P",
        CAST(MAVG("Ref2_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "Ref2_UEDC__P_MAvg",
        CAST(Ref2_Rate_Act*Ref2_Factor AS INTEGER) AS "Ref2_Rate_Act_UEDC", 
        CAST(Ref2_Rate_Plan*Ref2_Factor AS INTEGER) AS "Ref2_Rate_Plan_UEDC"        

    ,CAST(KHT_Rate_Act AS INTEGER) AS KHT_Rate_Act,
        CAST(KHT_Rate_Plan AS INTEGER) AS KHT_Rate_Plan,
        KHT_Factor, 
        CASE WHEN KHT_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((KHT_Rate_Act - KHT_Rate_Plan)/KHT_Rate_Plan AS DECIMAL(10,4))
        END AS "KHT_UEDC__P",
        CAST(MAVG("KHT_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "KHT_UEDC__P_MAvg",
        CAST(KHT_Rate_Act*KHT_Factor AS INTEGER) AS "KHT_Rate_Act_UEDC", 
        CAST(KHT_Rate_Plan*KHT_Factor AS INTEGER) AS "KHT_Rate_Plan_UEDC"                

    ,CAST(DHT_Rate_Act AS INTEGER) AS DHT_Rate_Act,
        CAST(DHT_Rate_Plan AS INTEGER) AS DHT_Rate_Plan,
        DHT_Factor, 
        CASE WHEN DHT_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((DHT_Rate_Act - DHT_Rate_Plan)/DHT_Rate_Plan AS DECIMAL(10,4))
        END AS "DHT_UEDC__P",
        CAST(MAVG("DHT_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "DHT_UEDC__P_MAvg",
        CAST(DHT_Rate_Act*DHT_Factor AS INTEGER) AS "DHT_Rate_Act_UEDC", 
        CAST(DHT_Rate_Plan*DHT_Factor AS INTEGER) AS "DHT_Rate_Plan_UEDC"                

    ,CAST(GOHT_Rate_Act AS INTEGER) AS GOHT_Rate_Act,
        CAST(GOHT_Rate_Plan AS INTEGER) AS GOHT_Rate_Plan,
        GOHT_Factor, 
        CASE WHEN GOHT_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((GOHT_Rate_Act - GOHT_Rate_Plan)/GOHT_Rate_Plan AS DECIMAL(10,4))
        END AS "GOHT_UEDC__P",
        CAST(MAVG("GOHT_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "GOHT_UEDC__P_MAvg",
        CAST(GOHT_Rate_Act*GOHT_Factor AS INTEGER) AS "GOHT_Rate_Act_UEDC", 
        CAST(GOHT_Rate_Plan*GOHT_Factor AS INTEGER) AS "GOHT_Rate_Plan_UEDC"                

    ,CAST(FCC_Rate_Act AS INTEGER) AS FCC_Rate_Act,
        CAST(FCC_Rate_Plan AS INTEGER) AS FCC_Rate_Plan,
        FCC_Factor, 
        CASE WHEN FCC_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((FCC_Rate_Act - FCC_Rate_Plan)/FCC_Rate_Plan AS DECIMAL(10,4))
        END AS "FCC_UEDC__P",
        CAST(MAVG("FCC_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "FCC_UEDC__P_MAvg",
        CAST(FCC_Rate_Act*FCC_Factor AS INTEGER) AS "FCC_Rate_Act_UEDC", 
        CAST(FCC_Rate_Plan*FCC_Factor AS INTEGER) AS "FCC_Rate_Plan_UEDC"                
        
    ,CAST(HFAlky_Rate_Act AS INTEGER) AS HFAlky_Rate_Act,
        CAST(HFAlky_Rate_Plan AS INTEGER) AS HFAlky_Rate_Plan,
        HFAlky_Factor, 
        CASE WHEN HFAlky_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((HFAlky_Rate_Act - HFAlky_Rate_Plan)/HFAlky_Rate_Plan AS DECIMAL(10,4))
        END AS "HFAlky_UEDC__P",
        CAST(MAVG("HFAlky_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "HFAlky_UEDC__P_MAvg",
        CAST(HFAlky_Rate_Act*HFAlky_Factor AS INTEGER) AS "HFAlky_Rate_Act_UEDC", 
        CAST(HFAlky_Rate_Plan*HFAlky_Factor AS INTEGER) AS "HFAlky_Rate_Plan_UEDC"                
        
    ,CAST(SRU_Rate_Act AS INTEGER) AS SRU_Rate_Act,
        CAST(SRU_Rate_Plan AS INTEGER) AS SRU_Rate_Plan,
        SRU_Factor, 
        CASE WHEN SRU_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((SRU_Rate_Act - SRU_Rate_Plan)/SRU_Rate_Plan AS DECIMAL(10,4))
        END AS "SRU_UEDC__P",
        CAST(MAVG("SRU_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "SRU_UEDC__P_MAvg",
        CAST(SRU_Rate_Act*SRU_Factor AS INTEGER) AS "SRU_Rate_Act_UEDC", 
        CAST(SRU_Rate_Plan*SRU_Factor AS INTEGER) AS "SRU_Rate_Plan_UEDC"
        
    ,CAST(Asphalt_Rate_Act AS INTEGER) AS Asphalt_Rate_Act,
        CAST(Asphalt_Rate_Plan AS INTEGER) AS Asphalt_Rate_Plan,
        Asphalt_Factor, 
        CASE WHEN Asphalt_Rate_Plan = 0 
                        THEN CAST(0 AS DECIMAL(10,4))
        ELSE
                        CAST((Asphalt_Rate_Act - Asphalt_Rate_Plan)/Asphalt_Rate_Plan AS DECIMAL(10,4))
        END AS "Asphalt_UEDC__P",
        CAST(MAVG("Asphalt_UEDC__P", 365,trans_date) AS DECIMAL(10,4)) AS "Asphalt_UEDC__P_MAvg",
        CAST(Asphalt_Rate_Act*Asphalt_Factor AS INTEGER) AS "Asphalt_Rate_Act_UEDC", 
        CAST(Asphalt_Rate_Plan*Asphalt_Factor AS INTEGER) AS "Asphalt_Rate_Plan_UEDC"                        

    
FROM    
    (
    SELECT ref_prod_location, trans_date, 
        MAX(CASE WHEN tag_id = '1fc1.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "No1_Crude_Rate_Act",
        MAX(CASE WHEN tag_id = '1fc1.pv' THEN UEDC_Plan END) AS "No1_Crude_Rate_Plan",
        MAX(CASE WHEN tag_id = '1fc1.pv' THEN UEDC_Factor END) AS "No1_Crude_Factor",
        MAX(CASE WHEN tag_id = '2fc4.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "No2_Crude_Rate_Act",
        MAX(CASE WHEN tag_id = '2fc4.pv' THEN UEDC_Plan END) AS "No2_Crude_Rate_Plan",
        MAX(CASE WHEN tag_id = '2fc4.pv' THEN UEDC_Factor END) AS "No2_Crude_Factor",
        MAX(CASE WHEN tag_id = '1cf71p.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "No1_Vacuum_Rate_Act",
        MAX(CASE WHEN tag_id = '1cf71p.pv' THEN UEDC_Plan END) AS "No1_Vacuum_Rate_Plan",
        MAX(CASE WHEN tag_id = '1cf71p.pv' THEN UEDC_Factor END) AS "No1_Vacuum_Factor",
        MAX(CASE WHEN tag_id = '5cf79p.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "No2_Vacuum_Rate_Act",
        MAX(CASE WHEN tag_id = '5cf79p.pv' THEN UEDC_Plan END) AS "No2_Vacuum_Rate_Plan",
        MAX(CASE WHEN tag_id = '5cf79p.pv' THEN UEDC_Factor END) AS "No2_Vacuum_Factor",
        MAX(CASE WHEN tag_id = '10CF1.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "Desulf_Rate_Act",
        MAX(CASE WHEN tag_id = '10CF1.pv' THEN UEDC_Plan END) AS "Desulf_Rate_Plan",
        MAX(CASE WHEN tag_id = '10CF1.pv' THEN UEDC_Factor END) AS "Desulf_Factor",
        MAX(CASE WHEN tag_id = '35fc20.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "Isom_Rate_Act",
        MAX(CASE WHEN tag_id = '35fc20.pv' THEN UEDC_Plan END) AS "Isom_Rate_Plan",
        MAX(CASE WHEN tag_id = '35fc20.pv' THEN UEDC_Factor END) AS "Isom_Factor",
        MAX(CASE WHEN tag_id = '3cf19.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "NHT1_Rate_Act",
        MAX(CASE WHEN tag_id = '3cf19.pv' THEN UEDC_Plan END) AS "NHT1_Rate_Plan",
        MAX(CASE WHEN tag_id = '3cf19.pv' THEN UEDC_Factor END) AS "NHT1_Factor",
        MAX(CASE WHEN tag_id = '3fc30.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "Ref1_Rate_Act",
        MAX(CASE WHEN tag_id = '3fc30.pv' THEN UEDC_Plan END) AS "Ref1_Rate_Plan",
        MAX(CASE WHEN tag_id = '3fc30.pv' THEN UEDC_Factor END) AS "Ref1_Factor",
        MAX(CASE WHEN tag_id = '36fc2.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "NHT2_Rate_Act",
        MAX(CASE WHEN tag_id = '36fc2.pv' THEN UEDC_Plan END) AS "NHT2_Rate_Plan",
        MAX(CASE WHEN tag_id = '36fc2.pv' THEN UEDC_Factor END) AS "NHT2_Factor",
        MAX(CASE WHEN tag_id = '36fc11.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "Ref2_Rate_Act",
        MAX(CASE WHEN tag_id = '36fc11.pv' THEN UEDC_Plan END) AS "Ref2_Rate_Plan",
        MAX(CASE WHEN tag_id = '36fc11.pv' THEN UEDC_Factor END) AS "Ref2_Factor",
        MAX(CASE WHEN tag_id = '29fc21.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "KHT_Rate_Act",
        MAX(CASE WHEN tag_id = '29fc21.pv' THEN UEDC_Plan END) AS "KHT_Rate_Plan",
        MAX(CASE WHEN tag_id = '29fc21.pv' THEN UEDC_Factor END) AS "KHT_Factor",
        MAX(CASE WHEN tag_id = '37cf23.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "DHT_Rate_Act",
        MAX(CASE WHEN tag_id = '37cf23.pv' THEN UEDC_Plan END) AS "DHT_Rate_Plan",
        MAX(CASE WHEN tag_id = '37cf23.pv' THEN UEDC_Factor END) AS "DHT_Factor",
        MAX(CASE WHEN tag_id = '32fi32.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "GOHT_Rate_Act",
        MAX(CASE WHEN tag_id = '32fi32.pv' THEN UEDC_Plan END) AS "GOHT_Rate_Plan",
        MAX(CASE WHEN tag_id = '32fi32.pv' THEN UEDC_Factor END) AS "GOHT_Factor",
        MAX(CASE WHEN tag_id = '8fi5.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "FCC_Rate_Act",
        MAX(CASE WHEN tag_id = '8fi5.pv' THEN UEDC_Plan END) AS "FCC_Rate_Plan",
        MAX(CASE WHEN tag_id = '8fi5.pv' THEN UEDC_Factor END) AS "FCC_Factor",
        MAX(CASE WHEN tag_id = '28fi16.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "HFAlky_Rate_Act",
        MAX(CASE WHEN tag_id = '28fi16.pv' THEN UEDC_Plan END) AS "HFAlky_Rate_Plan",
        MAX(CASE WHEN tag_id = '28fi16.pv' THEN UEDC_Factor END) AS "HFAlky_Factor",
        MAX(CASE WHEN tag_id = '41cn1.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "SRU_Rate_Act",
        MAX(CASE WHEN tag_id = '41cn1.pv' THEN UEDC_Plan END) AS "SRU_Rate_Plan",
        MAX(CASE WHEN tag_id = '41cn1.pv' THEN UEDC_Factor END) AS "SRU_Factor",
        MAX(CASE WHEN tag_id = '1FI75.pv' THEN ZEROIFNULL(AvgTagValue) END) AS "Asphalt_Rate_Act",
        MAX(CASE WHEN tag_id = '1FI75.pv' THEN UEDC_Plan END) AS "Asphalt_Rate_Plan",
        MAX(CASE WHEN tag_id = '1FI75.pv' THEN UEDC_Factor END) AS "Asphalt_Factor"
        FROM
            (
            SELECT PI.Ref_Prod_Location, Trans_Date, pi.Tag_ID, unit
                ,MAX(uedc_plan) UEDC_Plan, MAX(complex_factor) UEDC_Factor, AVG(Tag_Value) AvgTagValue
            FROM prod_edw_base_views.PI
            INNER JOIN prod_edw_base_views.refops_uedc
                ON pi.ref_prod_location = refops_uedc.ref_prod_location
                AND pi.tag_id = refops_uedc.tag_id
                AND pi.trans_date = refops_uedc.eff_date
            WHERE trans_date BETWEEN :Begin_Date AND :End_Date
                AND PI.Ref_Prod_Location = 'StPaulPark Refinery'
            GROUP BY PI.Ref_Prod_Location, Trans_Date, pi.Tag_ID, unit
            ) AS tmpRateData1
    GROUP BY ref_prod_location, trans_date) AS tmpRateData2
ORDER BY Ref_Prod_Location, Trans_Date;

);
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_UnitDown1 (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20)) as
	(
	SELECT	Unit
		,sum(Unit_Down_Points) AS "Minutes Down"
		,sum(cast(Unit_Down_Points as decimal(10,2)))/60 AS "Hours Down"
		,count(quadrant) AS "Quadrants Down"
	FROM	prod_edw_base_views.ENVIRONMENTAL_UNITDOWN
	WHERE trans_date BETWEEN :Begin_Date AND :End_Date
	AND Ref_Prod_Location = :Ref_Prod_Location
	AND Unit_Down = 'Y'
	GROUP BY unit
	ORDER BY unit
	;)
;
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_UnitDown2 (Begin_Date date, End_Date date, Ref_Prod_Location varchar(20), Unit varchar(20)) as
	(
	SELECT	Unit, trans_date, trans_hour, quadrant
		,sum(Unit_Down_Points) AS "Minutes Down"
	FROM	prod_edw_base_views.ENVIRONMENTAL_UNITDOWN
	WHERE trans_date BETWEEN :Begin_Date AND :End_Date
	AND Ref_Prod_Location = :Ref_Prod_Location
	AND Unit = :Unit
	AND Unit_Down = 'Y'
	GROUP BY unit, trans_date, trans_hour, quadrant
	ORDER BY unit, trans_date, trans_hour, quadrant
	;)
;
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_UnitDown3 (Begin_Date date, Ref_Prod_Location varchar(20), Unit varchar(20)) as
	(
	SELECT	Trans_Hour, Trans_Min, pi_corrected.Tag_ID, Tag_Value
	FROM	prod_edw_base_views.PI_CORRECTED
	INNER JOIN prod_edw_base_views.environmental_downtime
		ON pi_corrected.ref_prod_location = environmental_downtime.ref_prod_location
		AND pi_corrected.tag_id = environmental_downtime.tag_id
	WHERE analysis_type = 'Daily_Environmental'
		AND pi_corrected.ref_prod_location = :Ref_Prod_Location
		AND Unit = :Unit
		AND trans_date = :Begin_Date
	ORDER BY trans_hour, trans_min, pi_corrected.tag_id
	;)
;
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_Utilization_GAL (Begin_Date date, End_Date date) as
	(
	SELECT Eff_Date
		,(Alk_DailyPlanKedc + Crude_DailyPlanKedc + FCCU_DailyPlanKedc + Platformer_DailyPlanKedc + NHT_DailyPlanKedc + 
			KHT_DailyPlanKedc + DHT_DailyPlanKedc + Thiosolv_DailyPlanKedc + Sulferox_DailyPlanKedc + DeEthanizer_DailyPlanKedc + 
			DePropanizer_DailyPlanKedc + DeIsobutanizer_DailyPlanKedc + Steam_DailyPlanKedc + RailImp_DailyPlanKedc + 
			PipeImp_DailyPlanKedc + TruckImp_DailyPlanKedc + RailExp_DailyPlanKedc + TruckExp_DailyPlanKedc  ) AS Tot_DailyPlanKedc 
		
		,CAST( CAST( ( Tot_DailyPlanKedc ) AS DEC ( 10 , 4 )  ) / CAST( ( Alk_CapacityKedc + Crude_CapacityKedc + 
			FCCU_CapacityKedc + Platformer_CapacityKedc + NHT_CapacityKedc + KHT_CapacityKedc + DHT_CapacityKedc + 
			Thiosolv_CapacityKedc + Sulferox_CapacityKedc + DeEthanizer_CapacityKedc + DePropanizer_CapacityKedc + 
			DeIsobutanizer_CapacityKedc + Steam_CapacityKedc + RailImp_CapacityKedc + PipeImp_CapacityKedc + 
			TruckImp_CapacityKedc + RailExp_CapacityKedc + TruckExp_CapacityKedc  ) AS DEC ( 10 , 4 )  ) * 100  AS DEC ( 10 , 2 )  ) AS Percent_DailyPlanKedc 
		
		,( Alk_DailyMovAvgKedc + Crude_DailyMovAvgKedc + FCCU_DailyMovAvgKedc + Platformer_DailyMovAvgKedc + NHT_DailyMovAvgKedc + 
			KHT_DailyMovAvgKedc + DHT_DailyMovAvgKedc + Thiosolv_DailyMovAvgKedc + Sulferox_DailyMovAvgKedc + 
			DeEthanizer_DailyMovAvgKedc + DePropanizer_DailyMovAvgKedc + DeIsobutanizer_DailyMovAvgKedc + 
			Steam_DailyMovAvgKedc + RailImp_DailyMovAvgKedc + PipeImp_DailyMovAvgKedc + TruckImp_DailyMovAvgKedc + 
			RailExp_DailyMovAvgKedc + TruckExp_DailyMovAvgKedc  ) AS Tot_DailyMovAvgKedc 
			
		, CAST( CAST( ( Tot_DailyMovAvgKedc ) AS DEC ( 10 , 4 )  ) / CAST( ( Alk_CapacityKedc + Crude_CapacityKedc + 
			FCCU_CapacityKedc + Platformer_CapacityKedc + NHT_CapacityKedc + KHT_CapacityKedc + DHT_CapacityKedc + 
			Thiosolv_CapacityKedc + Sulferox_CapacityKedc + DeEthanizer_CapacityKedc + DePropanizer_CapacityKedc + 
			Deisobutanizer_CapacityKedc + Steam_CapacityKedc + RailImp_CapacityKedc + PipeImp_CapacityKedc + 
			TruckImp_CapacityKedc + RailExp_CapacityKedc + TruckExp_CapacityKedc  ) AS DEC ( 10 , 4 )  ) * 100  AS DEC ( 10 , 2 )  ) AS Percent_DailyAvgKedc 
			
		,Alk_Capacity , Alk_ComplexFactor , Alk_CapacityKedc , Alk_DailyPlanRate 
			, CAST( ( Alk_ComplexFactor * Alk_DailyPlanRate  ) AS INT ) AS Alk_DailyPlanKedc 
			, Alk_DailyAvg 
			, CAST( MAVG ( Alk_DailyAvg , 365 , eff_date )  AS INT ) AS Alk_DailyMovAvg 
			, CAST( ( Alk_ComplexFactor * Alk_DailyAvg  ) AS INT ) AS Alk_DailyAvgKedc 
			, CAST( ( Alk_ComplexFactor * Alk_DailyMovAvg  ) AS INT ) AS Alk_DailyMovAvgKedc 
			, CAST( ( Alk_DailyAvgKedc - Alk_DailyPlanKedc  ) AS INT ) AS Alk_DeltaKedc 
			
		, Crude_Capacity , Crude_ComplexFactor , Crude_CapacityKedc , Crude_DailyPlanRate 
			, CAST( ( Crude_ComplexFactor * Crude_DailyPlanRate  ) AS INT ) AS Crude_DailyPlanKedc 
			, Crude_DailyAvg 
			, CAST( MAVG ( Crude_DailyAvg , 365 , eff_date )  AS INT ) AS Crude_DailyMovAvg 
			, CAST( ( Crude_ComplexFactor * Crude_DailyAvg  ) AS INT ) AS Crude_DailyAvgKedc 
			, CAST( ( Crude_ComplexFactor * Crude_DailyMovAvg  ) AS INT ) AS Crude_DailyMovAvgKedc 
			, CAST( ( Crude_DailyAvgKedc - Crude_DailyPlanKedc  ) AS INT ) AS Crude_DeltaKedc 
			
		, FCCU_Capacity , FCCU_ComplexFactor , FCCU_CapacityKedc , FCCU_DailyPlanRate 
			, CAST( ( FCCU_ComplexFactor * FCCU_DailyPlanRate  ) AS INT ) AS FCCU_DailyPlanKedc 
			, FCCU_DailyAvg 
			, CAST( MAVG ( FCCU_DailyAvg , 365 , eff_date )  AS INT ) AS FCCU_DailyMovAvg 
			, CAST( ( FCCU_ComplexFactor * FCCU_DailyAvg  ) AS INT ) AS FCCU_DailyAvgKedc 
			, CAST( ( FCCU_ComplexFactor * FCCU_DailyMovAvg  ) AS INT ) AS FCCU_DailyMovAvgKedc 
			, CAST( ( FCCU_DailyAvgKedc - FCCU_DailyPlanKedc  ) AS INT ) AS FCCU_DeltaKedc 
			
		, Platformer_Capacity , Platformer_ComplexFactor , Platformer_CapacityKedc , Platformer_DailyPlanRate 
			, CAST( ( Platformer_ComplexFactor * Platformer_DailyPlanRate  ) AS INT ) AS Platformer_DailyPlanKedc 
			, Platformer_DailyAvg 
			, CAST( MAVG ( Platformer_DailyAvg , 365 , eff_date )  AS INT ) AS Platformer_DailyMovAvg 
			, CAST( ( Platformer_ComplexFactor * Platformer_DailyAvg  ) AS INT ) AS Platformer_DailyAvgKedc 
			, CAST( ( Platformer_ComplexFactor * Platformer_DailyMovAvg  ) AS INT ) AS Platformer_DailyMovAvgKedc 
			, CAST( ( Platformer_DailyAvgKedc - Platformer_DailyPlanKedc  ) AS INT ) AS Platformer_DeltaKedc 
			
		, NHT_Capacity , NHT_ComplexFactor , NHT_CapacityKedc , NHT_DailyPlanRate 
			, CAST( ( NHT_ComplexFactor * NHT_DailyPlanRate  ) AS INT ) AS NHT_DailyPlanKedc 
			, NHT_DailyAvg 
			, CAST( MAVG ( NHT_DailyAvg , 365 , eff_date )  AS INT ) AS NHT_DailyMovAvg 
			, CAST( ( NHT_ComplexFactor * NHT_DailyAvg  ) AS INT ) AS NHT_DailyAvgKedc 
			, CAST( ( NHT_ComplexFactor * NHT_DailyMovAvg  ) AS INT ) AS NHT_DailyMovAvgKedc 
			, CAST( ( NHT_DailyAvgKedc - NHT_DailyPlanKedc  ) AS INT ) AS NHT_DeltaKedc 
			
		, KHT_Capacity , KHT_ComplexFactor , KHT_CapacityKedc , KHT_DailyPlanRate , 
			CAST( ( KHT_ComplexFactor * KHT_DailyPlanRate  ) AS INT ) AS KHT_DailyPlanKedc 
			, KHT_DailyAvg 
			, CAST( MAVG ( KHT_DailyAvg , 365 , eff_date )  AS INT ) AS KHT_DailyMovAvg 
			, CAST( ( KHT_ComplexFactor * KHT_DailyAvg  ) AS INT ) AS KHT_DailyAvgKedc 
			, CAST( ( KHT_ComplexFactor * KHT_DailyMovAvg  ) AS INT ) AS KHT_DailyMovAvgKedc 
			, CAST( ( KHT_DailyAvgKedc - KHT_DailyPlanKedc  ) AS INT ) AS KHT_DeltaKedc 
			
		, DHT_Capacity , DHT_ComplexFactor , DHT_CapacityKedc , DHT_DailyPlanRate 
			, CAST( ( DHT_ComplexFactor * DHT_DailyPlanRate  ) AS INT ) AS DHT_DailyPlanKedc 
			, DHT_DailyAvg 
			, CAST( MAVG ( DHT_DailyAvg , 365 , eff_date )  AS INT ) AS DHT_DailyMovAvg 
			, CAST( ( DHT_ComplexFactor * DHT_DailyAvg  ) AS INT ) AS DHT_DailyAvgKedc 
			, CAST( ( DHT_ComplexFactor * DHT_DailyMovAvg  ) AS INT ) AS DHT_DailyMovAvgKedc 
			, CAST( ( DHT_DailyAvgKedc - DHT_DailyPlanKedc  ) AS INT ) AS DHT_DeltaKedc 
			
		, Thiosolv_Capacity , Thiosolv_ComplexFactor , Thiosolv_CapacityKedc , Thiosolv_DailyPlanRate 
			, CAST( ( Thiosolv_ComplexFactor * Thiosolv_DailyPlanRate  ) AS INT ) AS Thiosolv_DailyPlanKedc 
			, Thiosolv_DailyAvg 
			, CAST( MAVG ( Thiosolv_DailyAvg , 365 , eff_date )  AS DEC ( 10 , 1 )  ) AS Thiosolv_DailyMovAvg 
			, CAST( ( Thiosolv_ComplexFactor * Thiosolv_DailyAvg  ) AS INT ) AS Thiosolv_DailyAvgKedc 
			, CAST( ( Thiosolv_ComplexFactor * Thiosolv_DailyMovAvg  ) AS INT ) AS Thiosolv_DailyMovAvgKedc 
			, CAST( ( Thiosolv_DailyAvgKedc - Thiosolv_DailyPlanKedc  ) AS INT ) AS Thiosolv_DeltaKedc 
			
		, Sulferox_Capacity , Sulferox_ComplexFactor , Sulferox_CapacityKedc , Sulferox_DailyPlanRate 
			, CAST( ( Sulferox_ComplexFactor * Sulferox_DailyPlanRate  ) AS INT ) AS Sulferox_DailyPlanKedc 
			, Sulferox_DailyAvg 
			, CAST( MAVG ( Sulferox_DailyAvg , 365 , eff_date )  AS DEC ( 10 , 2 )  ) AS Sulferox_DailyMovAvg 
			, CAST( ( Sulferox_ComplexFactor * Sulferox_DailyAvg  ) AS INT ) AS Sulferox_DailyAvgKedc 
			, CAST( ( Sulferox_ComplexFactor * Sulferox_DailyMovAvg  ) AS INT ) AS Sulferox_DailyMovAvgKedc 
			, CAST( ( Sulferox_DailyAvgKedc - Sulferox_DailyPlanKedc  ) AS INT ) AS Sulferox_DeltaKedc 
			
		, DeEthanizer_Capacity , DeEthanizer_ComplexFactor , DeEthanizer_CapacityKedc , DeEthanizer_DailyPlanRate 
			, CAST( ( DeEthanizer_ComplexFactor * DeEthanizer_DailyPlanRate  ) AS INT ) AS DeEthanizer_DailyPlanKedc 
			, DeEthanizer_DailyAvg 
			, CAST( MAVG ( DeEthanizer_DailyAvg , 365 , eff_date )  AS INT ) AS DeEthanizer_DailyMovAvg 
			, CAST( ( DeEthanizer_ComplexFactor * DeEthanizer_DailyAvg  ) AS INT ) AS DeEthanizer_DailyAvgKedc 
			, CAST( ( DeEthanizer_ComplexFactor * DeEthanizer_DailyMovAvg  ) AS INT ) AS DeEthanizer_DailyMovAvgKedc 
			, CAST( ( DeEthanizer_DailyAvgKedc - DeEthanizer_DailyPlanKedc  ) AS INT ) AS DeEthanizer_DeltaKedc 
			
		, DePropanizer_Capacity , DePropanizer_ComplexFactor , DePropanizer_CapacityKedc , DePropanizer_DailyPlanRate 
			, CAST( ( DePropanizer_ComplexFactor * DePropanizer_DailyPlanRate  ) AS INT ) AS DePropanizer_DailyPlanKedc 
			, DePropanizer_DailyAvg 
			, CAST( MAVG ( DePropanizer_DailyAvg , 365 , eff_date )  AS INT ) AS DePropanizer_DailyMovAvg 
			, CAST( ( DePropanizer_ComplexFactor * DePropanizer_DailyAvg  ) AS INT ) AS DePropanizer_DailyAvgKedc 
			, CAST( ( DePropanizer_ComplexFactor * DePropanizer_DailyMovAvg  ) AS INT ) AS DePropanizer_DailyMovAvgKedc 
			, CAST( ( DePropanizer_DailyAvgKedc - DePropanizer_DailyPlanKedc  ) AS INT ) AS DePropanizer_DeltaKedc 
			
		, DeIsobutanizer_Capacity , DeIsobutanizer_ComplexFactor , DeIsobutanizer_CapacityKedc , DeIsobutanizer_DailyPlanRate 
			, CAST( ( DeIsobutanizer_ComplexFactor * DeIsobutanizer_DailyPlanRate  ) AS INT ) AS DeIsobutanizer_DailyPlanKedc 
			, DeIsobutanizer_DailyAvg 
			, CAST( MAVG ( DeIsobutanizer_DailyAvg , 365 , eff_date )  AS INT ) AS DeIsobutanizer_DailyMovAvg 
			, CAST( ( DeIsobutanizer_ComplexFactor * DeIsobutanizer_DailyAvg  ) AS INT ) AS DeIsobutanizer_DailyAvgKedc 
			, CAST( ( DeIsobutanizer_ComplexFactor * DeIsobutanizer_DailyMovAvg  ) AS INT ) AS DeIsobutanizer_DailyMovAvgKedc 
			, CAST( ( DeIsobutanizer_DailyAvgKedc - DeIsobutanizer_DailyPlanKedc  ) AS INT ) AS DeIsobutanizer_DeltaKedc 
			
		, Steam_Capacity , Steam_ComplexFactor , Steam_CapacityKedc , Steam_DailyPlanRate 
			, CAST( ( Steam_ComplexFactor * Steam_DailyPlanRate  ) AS INT ) AS Steam_DailyPlanKedc 
			, Steam_DailyAvg 
			, CAST( MAVG ( Steam_DailyAvg , 365 , eff_date )  AS INT ) AS Steam_DailyMovAvg 
			, CAST( ( Steam_ComplexFactor * Steam_DailyAvg  ) AS INT ) AS Steam_DailyAvgKedc 
			, CAST( ( Steam_ComplexFactor * Steam_DailyMovAvg  ) AS INT ) AS Steam_DailyMovAvgKedc 
			, CAST( ( Steam_DailyAvgKedc - Steam_DailyPlanKedc  ) AS INT ) AS Steam_DeltaKedc 
			
		, RailImp_Capacity , RailImp_ComplexFactor , RailImp_CapacityKedc , RailImp_DailyPlanRate 
			, CAST( ( RailImp_ComplexFactor * RailImp_DailyPlanRate  ) AS INT ) AS RailImp_DailyPlanKedc 
			, ZEROIFNULL ( RailImp_DailyAvg ) AS RailImpDailyAvg 
			, CAST( MAVG ( ZEROIFNULL ( RailImp_DailyAvg ) , 365 , eff_date )  AS INT ) AS RailImp_DailyMovAvg 
			, CAST( ( RailImp_ComplexFactor * ZEROIFNULL ( RailImp_DailyAvg )  ) AS INT ) AS RailImp_DailyAvgKedc 
			, CAST( ( RailImp_ComplexFactor * RailImp_DailyMovAvg  ) AS INT ) AS RailImp_DailyMovAvgKedc 
			, CAST( ( RailImp_DailyAvgKedc - RailImp_DailyPlanKedc  ) AS INT ) AS RailImp_DeltaKedc 
			
		, PipeImp_Capacity , PipeImp_ComplexFactor , PipeImp_CapacityKedc , PipeImp_DailyPlanRate 
			, CAST( ( PipeImp_ComplexFactor * PipeImp_DailyPlanRate  ) AS INT ) AS PipeImp_DailyPlanKedc 
			, ZEROIFNULL ( PipeImp_DailyAvg ) AS PipeImpDailyAvg 
			, CAST( MAVG ( ZEROIFNULL ( PipeImp_DailyAvg ) , 365 , eff_date )  AS INT ) AS PipeImp_DailyMovAvg 
			, CAST( ( PipeImp_ComplexFactor * ZEROIFNULL ( PipeImp_DailyAvg )  ) AS INT ) AS PipeImp_DailyAvgKedc 
			, CAST( ( PipeImp_ComplexFactor * PipeImp_DailyMovAvg  ) AS INT ) AS PipeImp_DailyMovAvgKedc 
			, CAST( ( PipeImp_DailyAvgKedc - PipeImp_DailyPlanKedc  ) AS INT ) AS PipeImp_DeltaKedc 
			
		, TruckImp_Capacity , TruckImp_ComplexFactor , TruckImp_CapacityKedc , TruckImp_DailyPlanRate 
			, CAST( ( TruckImp_ComplexFactor * TruckImp_DailyPlanRate  ) AS INT ) AS TruckImp_DailyPlanKedc 
			, ZEROIFNULL ( TruckImp_DailyAvg ) AS TruckImpDailyAvg 
			, CAST( MAVG ( ZEROIFNULL ( TruckImp_DailyAvg ) , 365 , eff_date )  AS INT ) AS TruckImp_DailyMovAvg 
			, CAST( ( TruckImp_ComplexFactor * ZEROIFNULL ( TruckImp_DailyAvg )  ) AS INT ) AS TruckImp_DailyAvgKedc 
			, CAST( ( TruckImp_ComplexFactor * TruckImp_DailyMovAvg  ) AS INT ) AS TruckImp_DailyMovAvgKedc 
			, CAST( ( TruckImp_DailyAvgKedc - TruckImp_DailyPlanKedc  ) AS INT ) AS TruckImp_DeltaKedc 
			
		, RailExp_Capacity , RailExp_ComplexFactor , RailExp_CapacityKedc , RailExp_DailyPlanRate 
			, CAST( ( RailExp_ComplexFactor * RailExp_DailyPlanRate  ) AS INT ) AS RailExp_DailyPlanKedc 
			, ZEROIFNULL ( RailExp_DailyAvg ) AS RailExpDailyAvg 
			, CAST( MAVG ( ZEROIFNULL ( RailExp_DailyAvg ) , 365 , eff_date )  AS INT ) AS RailExp_DailyMovAvg 
			, CAST( ( RailExp_ComplexFactor * ZEROIFNULL ( RailExp_DailyAvg )  ) AS INT ) AS RailExp_DailyAvgKedc 
			, CAST( ( RailExp_ComplexFactor * RailExp_DailyMovAvg  ) AS INT ) AS RailExp_DailyMovAvgKedc 
			, CAST( ( RailExp_DailyAvgKedc - RailExp_DailyPlanKedc  ) AS INT ) AS RailExp_DeltaKedc 
			
		, TruckExp_Capacity , TruckExp_ComplexFactor , TruckExp_CapacityKedc , TruckExp_DailyPlanRate 
			, CAST( ( TruckExp_ComplexFactor * TruckExp_DailyPlanRate  ) AS INT ) AS TruckExp_DailyPlanKedc 
			, ZEROIFNULL ( TruckExp_DailyAvg ) AS TruckExpDailyAvg 
			, CAST( MAVG ( ZEROIFNULL ( TruckExp_DailyAvg ) , 365 , eff_date )  AS INT ) AS TruckExp_DailyMovAvg 
			, CAST( ( TruckExp_ComplexFactor * ZEROIFNULL ( TruckExp_DailyAvg )  ) AS INT ) AS TruckExp_DailyAvgKedc 
			, CAST( ( TruckExp_ComplexFactor * TruckExp_DailyMovAvg  ) AS INT ) AS TruckExp_DailyMovAvgKedc 
			, CAST( ( TruckExp_DailyAvgKedc - TruckExp_DailyPlanKedc  ) AS INT ) AS TruckExp_DeltaKedc 
		
	FROM 
		( 
		SELECT Eff_date 
			, max ( CASE WHEN Unit = 'Alkylate Production' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS Alk_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Alkylate Production' THEN CAST( ( Capacity ) AS INT ) END ) AS Alk_Capacity 
				, max ( CASE WHEN Unit = 'Alkylate Production' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS Alk_ComplexFactor 
				, max ( CASE WHEN Unit = 'Alkylate Production' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS Alk_CapacityKedc 
				, max ( CASE WHEN Unit = 'Alkylate Production' THEN CAST( ( A_FI_146 ) AS INT ) END ) AS Alk_DailyAvg 
			, max ( CASE WHEN Unit = 'Crude Feed' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS Crude_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Crude Feed' THEN CAST( ( Capacity ) AS INT ) END ) AS Crude_Capacity 
				, max ( CASE WHEN Unit = 'Crude Feed' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS Crude_ComplexFactor 
				, max ( CASE WHEN Unit = 'Crude Feed' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS Crude_CapacityKedc 
				, max ( CASE WHEN Unit = 'Crude Feed' THEN CAST( ( CRFC102 ) AS INT ) END ) AS Crude_DailyAvg 
			, max ( CASE WHEN Unit = 'FCC Unit' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS FCCU_DailyPlanRate 
				, max ( CASE WHEN Unit = 'FCC Unit' THEN CAST( ( Capacity ) AS INT ) END ) AS FCCU_Capacity 
				, max ( CASE WHEN Unit = 'FCC Unit' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS FCCU_ComplexFactor 
				, max ( CASE WHEN Unit = 'FCC Unit' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS FCCU_CapacityKedc 
				, max ( CASE WHEN Unit = 'FCC Unit' THEN CAST( ( FCFC401 ) AS INT ) END ) AS FCCU_DailyAvg 
			, max ( CASE WHEN Unit = 'Platformer' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS Platformer_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Platformer' THEN CAST( ( Capacity ) AS INT ) END ) AS Platformer_Capacity 
				, max ( CASE WHEN Unit = 'Platformer' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS Platformer_ComplexFactor 
				, max ( CASE WHEN Unit = 'Platformer' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS Platformer_CapacityKedc 
				, max ( CASE WHEN Unit = 'Platformer' THEN CAST( ( P_FIC009 ) AS INT ) END ) AS Platformer_DailyAvg 
			, max ( CASE WHEN Unit = 'NHT Feed' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS NHT_DailyPlanRate 
				, max ( CASE WHEN Unit = 'NHT Feed' THEN CAST( ( Capacity ) AS INT ) END ) AS NHT_Capacity 
				, max ( CASE WHEN Unit = 'NHT Feed' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS NHT_ComplexFactor 
				, max ( CASE WHEN Unit = 'NHT Feed' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS NHT_CapacityKedc 
				, max ( CASE WHEN Unit = 'NHT Feed' THEN CAST( ( NHFC221 ) AS INT ) END ) AS NHT_DailyAvg 
			, max ( CASE WHEN Unit = 'KHT Feed' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS KHT_DailyPlanRate 
				, max ( CASE WHEN Unit = 'KHT Feed' THEN CAST( ( Capacity ) AS INT ) END ) AS KHT_Capacity 
				, max ( CASE WHEN Unit = 'KHT Feed' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS KHT_ComplexFactor 
				, max ( CASE WHEN Unit = 'KHT Feed' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS KHT_CapacityKedc 
				, max ( CASE WHEN Unit = 'KHT Feed' THEN CAST( ( D_FIC105 ) AS INT ) END ) AS KHT_DailyAvg 
			, max ( CASE WHEN Unit = 'DHT Feed' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS DHT_DailyPlanRate 
				, max ( CASE WHEN Unit = 'DHT Feed' THEN CAST( ( Capacity ) AS INT ) END ) AS DHT_Capacity 
				, max ( CASE WHEN Unit = 'DHT Feed' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS DHT_ComplexFactor 
				, max ( CASE WHEN Unit = 'DHT Feed' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS DHT_CapacityKedc 
				, max ( CASE WHEN Unit = 'DHT Feed' THEN CAST( ( D_FI_550 ) AS INT ) END ) AS DHT_DailyAvg 
			, max ( CASE WHEN Unit = 'Thiosolv' THEN CAST( ( UEDC_Plan ) AS DEC ( 10 , 1 )  ) END ) AS Thiosolv_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Thiosolv' THEN CAST( ( Capacity ) AS DEC ( 10 , 1 )  ) END ) AS Thiosolv_Capacity 
				, max ( CASE WHEN Unit = 'Thiosolv' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS Thiosolv_ComplexFactor 
				, max ( CASE WHEN Unit = 'Thiosolv' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS Thiosolv_CapacityKedc 
				, max ( CASE WHEN Unit = 'Thiosolv' THEN CAST( ( 0.012 * TV_FT_182  ) AS DEC ( 10 , 1 )  ) END ) AS Thiosolv_DailyAvg 
			, max ( CASE WHEN Unit = 'Sulferox' THEN CAST( ( UEDC_Plan ) AS DEC ( 10 , 1 )  ) END ) AS Sulferox_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Sulferox' THEN CAST( ( Capacity ) AS DEC ( 10 , 1 )  ) END ) AS Sulferox_Capacity 
				, max ( CASE WHEN Unit = 'Sulferox' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS Sulferox_ComplexFactor 
				, max ( CASE WHEN Unit = 'Sulferox' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS Sulferox_CapacityKedc 
				, max ( CASE WHEN Unit = 'Sulferox' THEN CAST( ( AM_FI_161* 0.029369681 ) AS DEC ( 10 , 2 )  ) END ) AS Sulferox_DailyAvg 
			, max ( CASE WHEN Unit = 'DeEthanizer' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS DeEthanizer_DailyPlanRate 
				, max ( CASE WHEN Unit = 'DeEthanizer' THEN CAST( ( Capacity ) AS INT ) END ) AS DeEthanizer_Capacity 
				, max ( CASE WHEN Unit = 'DeEthanizer' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS DeEthanizer_ComplexFactor 
				, max ( CASE WHEN Unit = 'DeEthanizer' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS DeEthanizer_CapacityKedc 
				, max ( CASE WHEN Unit = 'DeEthanizer' THEN CAST( ( SAFC116 ) AS INT ) END ) AS DeEthanizer_DailyAvg 
			, max ( CASE WHEN Unit = 'DePropanizer' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS DePropanizer_DailyPlanRate 
				, max ( CASE WHEN Unit = 'DePropanizer' THEN CAST( ( Capacity ) AS INT ) END ) AS DePropanizer_Capacity 
				, max ( CASE WHEN Unit = 'DePropanizer' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS DePropanizer_ComplexFactor 
				, max ( CASE WHEN Unit = 'DePropanizer' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS DePropanizer_CapacityKedc 
				, max ( CASE WHEN Unit = 'DePropanizer' THEN CAST( ( SAFI133 ) AS INT ) END ) AS DePropanizer_DailyAvg 
			, max ( CASE WHEN Unit = 'DeIsobutanizer' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS DeIsobutanizer_DailyPlanRate 
				, max ( CASE WHEN Unit = 'DeIsobutanizer' THEN CAST( ( Capacity ) AS INT ) END ) AS DeIsobutanizer_Capacity 
				, max ( CASE WHEN Unit = 'DeIsobutanizer' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS DeIsobutanizer_ComplexFactor 
				, max ( CASE WHEN Unit = 'DeIsobutanizer' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS DeIsobutanizer_CapacityKedc 
				, max ( CASE WHEN Unit = 'DeIsobutanizer' THEN CAST( ( SAFI142 + SAFI141  ) AS INT ) END ) AS DeIsobutanizer_DailyAvg 
			, max ( CASE WHEN Unit = 'Steam Generation' THEN CAST( ( UEDC_Plan ) AS INT ) END ) AS Steam_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Steam Generation' THEN CAST( ( Capacity ) AS INT ) END ) AS Steam_Capacity 
				, max ( CASE WHEN Unit = 'Steam Generation' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS Steam_ComplexFactor 
				, max ( CASE WHEN Unit = 'Steam Generation' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS Steam_CapacityKedc 
				, max ( CASE WHEN Unit = 'Steam Generation' THEN CAST( ( "81_FI_502" + "81_FI_402" + "81MFI106" + "81MFI211" + FCFC718  ) / 1000  AS INT ) END ) AS Steam_DailyAvg 
			, max ( CASE WHEN Unit = 'Rail Imports' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS RailImp_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Rail Imports' THEN CAST( ( Capacity ) AS INT ) END ) AS RailImp_Capacity 
				, max ( CASE WHEN Unit = 'Rail Imports' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS RailImp_ComplexFactor 
				, max ( CASE WHEN Unit = 'Rail Imports' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS RailImp_CapacityKedc 
				, max ( CASE WHEN Unit = 'Rail Imports' THEN CAST( ( RawMatRecRail ) AS INT ) END ) AS RailImp_DailyAvg 
			, max ( CASE WHEN Unit = 'Pipeline Imports' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS PipeImp_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Pipeline Imports' THEN CAST( ( Capacity ) AS INT ) END ) AS PipeImp_Capacity 
				, max ( CASE WHEN Unit = 'Pipeline Imports' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS PipeImp_ComplexFactor 
				, max ( CASE WHEN Unit = 'Pipeline Imports' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS PipeImp_CapacityKedc 
				, max ( CASE WHEN Unit = 'Pipeline Imports' THEN CAST( ( RawMatRecPipe ) AS INT ) END ) AS PipeImp_DailyAvg 
				, max ( CASE WHEN Unit = 'Truck Imports' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS TruckImp_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Truck Imports' THEN CAST( ( Capacity ) AS INT ) END ) AS TruckImp_Capacity 
				, max ( CASE WHEN Unit = 'Truck Imports' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS TruckImp_ComplexFactor 
				, max ( CASE WHEN Unit = 'Truck Imports' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS TruckImp_CapacityKedc 
				, max ( CASE WHEN Unit = 'Truck Imports' THEN CAST( ( RawMatRecTruck ) AS INT ) END ) AS TruckImp_DailyAvg 
			, max ( CASE WHEN Unit = 'Rail Exports' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS RailExp_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Rail Exports' THEN CAST( ( Capacity ) AS INT ) END ) AS RailExp_Capacity 
				, max ( CASE WHEN Unit = 'Rail Exports' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS RailExp_ComplexFactor 
				, max ( CASE WHEN Unit = 'Rail Exports' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS RailExp_CapacityKedc 
				, max ( CASE WHEN Unit = 'Rail Exports' THEN CAST( ( ProdShipRail ) AS INT ) END ) AS RailExp_DailyAvg 
			, max ( CASE WHEN Unit = 'Truck Exports' THEN CAST( ( UEDC_Plan * 1000  ) AS INT ) END ) AS TruckExp_DailyPlanRate 
				, max ( CASE WHEN Unit = 'Truck Exports' THEN CAST( ( Capacity ) AS INT ) END ) AS TruckExp_Capacity 
				, max ( CASE WHEN Unit = 'Truck Exports' THEN CAST( ( Complex_Factor ) AS DEC ( 10 , 2 )  ) END ) AS TruckExp_ComplexFactor 
				, max ( CASE WHEN Unit = 'Truck Exports' THEN CAST( ( Total_Capacity_Kedc ) AS INT ) END ) AS TruckExp_CapacityKedc 
				, max ( CASE WHEN Unit = 'Truck Exports' THEN CAST( ( ProdShipTruck ) AS INT ) END ) AS TruckExp_DailyAvg 
			
		FROM prod_edw_base_views.refops_uedc 
		INNER JOIN 
			(
			SELECT ref_prod_location , trans_date 
				, max ( CASE WHEN tag_id = 'CRFC102.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "CRFC102" 
				, max ( CASE WHEN tag_id = 'FCFC401.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "FCFC401" 
				, max ( CASE WHEN tag_id = 'P_FIC009.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "P_FIC009" 
				, max ( CASE WHEN tag_id = 'A_FI_146.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "A_FI_146" 
				, max ( CASE WHEN tag_id = 'NHFC221.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "NHFC221" 
				, max ( CASE WHEN tag_id = 'D_FIC105.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "D_FIC105" 
				, max ( CASE WHEN tag_id = 'D_FI_550.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "D_FI_550" 
				, max ( CASE WHEN tag_id = 'TV_FT_182.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "TV_FT_182" 
				, max ( CASE WHEN tag_id = 'AM_FI_161.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "AM_FI_161" 
				, max ( CASE WHEN tag_id = 'SAFC116.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "SAFC116" 
				, max ( CASE WHEN tag_id = 'SAFI133.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "SAFI133" 
				, max ( CASE WHEN tag_id = 'SAFI142.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "SAFI142" 
				, max ( CASE WHEN tag_id = 'SAFI141.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "SAFI141" 
				, max ( CASE WHEN tag_id = '81_FI_502.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "81_FI_502" 
				, max ( CASE WHEN tag_id = '81_FI_402.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "81_FI_402" 
				, max ( CASE WHEN tag_id = '81MFI106.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "81MFI106" 
				, max ( CASE WHEN tag_id = '81MFI211.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "81MFI211" 
				, max ( CASE WHEN tag_id = 'FCFC718.PV' THEN ZEROIFNULL ( AvgTagValue ) END ) AS "FCFC718" 
			
			FROM 
				(
				SELECT PI.Ref_Prod_Location , Trans_Date , pi.Tag_ID , AVG ( Tag_Value ) AS AvgTagValue 
				FROM prod_edw_base_views.PI 
				WHERE trans_date BETWEEN :Begin_Date AND :End_Date
					AND PI.Ref_Prod_Location = 'Gallup' 
					AND PI.Tag_ID IN ( 'CRFC102.pv' , 'FCFC401.pv' , 'P_FIC009.pv' , 'A_FI_146.pv' , 'NHFC221.pv' , 'D_FIC105.pv' , 'D_FI_550.pv' 
						, 'TV_FT_182.pv' , 'AM_FI_161.pv' , 'SAFC116.pv' , 'SAFI133.pv ' , 'SAFI142.pv' , 'SAFI141.pv' , '81_FI_502.pv' , '81_FI_402.pv' 
						, '81MFI106.pv' , '81MFI211.pv' , 'FCFC718.PV' ) 
				GROUP BY PI.Ref_Prod_Location , Trans_Date , pi.Tag_ID 
				) AS tmpPI2 
			
			GROUP BY ref_prod_location , trans_date 
			) AS TmpPI 
		
		ON refops_uedc.ref_prod_location = tmpPI.ref_prod_location AND refops_uedc.eff_date = tmpPI.trans_date 
		
		INNER JOIN 
			(
			SELECT lifting.Ref_Prod_Location , Eff_Date AS Trans_Date 
				, SUM ( CASE WHEN Source_Desc = 'Rec Rail' AND Yield_Type = 1 THEN Net_Quantity END ) AS RawMatRecRail 
				, SUM ( CASE WHEN Source_Desc = 'Rec Truck' AND Yield_Type = 1 THEN Net_Quantity END ) AS RawMatRecTruck 
				, SUM ( CASE WHEN Source_Desc IN ( 'Rec Pipe Bisti' , 'Rec Pipe Hospah' , 'Rec Pipe' ) AND Yield_Type = 1 THEN Net_Quantity END ) AS RawMatRecPipe 
				, SUM ( CASE WHEN Dest_Desc = 'Ship Truck' AND Yield_Type = 2 THEN Net_Quantity END ) AS ProdShipTruck 
				, SUM ( CASE WHEN Dest_Desc = 'Ship Rail' AND Yield_Type = 2 THEN Net_Quantity END ) AS ProdShipRail 
			FROM PROD_EDW_BASE_VIEWS.LIFTING 
			INNER JOIN prod_edw_base_views.ref_product 
			ON lifting.ref_prod_location = ref_product.ref_prod_location 
				AND lifting.prod_id = ref_product.product_id 
			INNER JOIN PROD_EDW_BASE_VIEWS.ref_product_sitespecific 
			ON ref_product.ref_prod_location = ref_product_sitespecific.ref_prod_location 
				AND ref_product.product_id = ref_product_sitespecific.product_id 
			INNER JOIN PROD_EDW_BASE_VIEWS.Ref_Prod_Group 
			ON ref_product_sitespecific.ref_prod_location = ref_prod_group.ref_prod_location 
				AND ref_product_sitespecific.product_group_id = ref_prod_group.product_group_id 
			LEFT OUTER JOIN prod_edw_base_views.movement 
			ON lifting.ref_prod_location = movement.ref_prod_location 
				AND lifting.movement_code = movement.movement_code 
			INNER JOIN 
				( 
				SELECT ref_prod_location , master_id , master_code AS Source_Desc 
				FROM prod_edw_base_views.master 
				) AS tmpMasterSource 
			ON lifting.ref_prod_location = tmpMasterSource.ref_prod_location 
				AND movement.source_id = tmpMasterSource.master_id 
			INNER JOIN 
				( 
				SELECT ref_prod_location , master_id , master_code AS Dest_Desc 
				FROM prod_edw_base_views.master 
				) AS tmpMasterDest 
			ON lifting.ref_prod_location = tmpMasterDest.ref_prod_location 
			AND movement.destination_id = tmpMasterDest.master_id 
			WHERE report_desc = 'Inventory' 
				AND balance_type IN ( 'receipts' , 'shipments' ) 
				AND lifting.ref_prod_location = 'gallup' 
				AND eff_date BETWEEN :Begin_Date AND :End_Date
			GROUP BY lifting.Ref_Prod_Location , Eff_Date 
			) AS tmpPPL 
		ON refops_uedc.ref_prod_location = tmpPPL.ref_prod_location 
			AND refops_uedc.eff_date = tmpPPL.trans_date 
		GROUP BY Eff_Date 
		) AS TmpUtilization 
	
	ORDER BY Eff_Date DESC
	
;);
--------------------------------------------------------------------------------

REPLACE MACRO prod_edw_base_views.M_ValeroEthanol(Start_Date DATE, End_Date DATE, Start_Volume INTEGER) AS
 	 (
    SELECT movement_start, 'BBL' AS Units
	        ,CAST(CASE 
            WHEN movement_start = :Start_Date THEN :Start_Volume
            ELSE SUM(ClosingVol) OVER (ORDER BY Movement_Start ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
        END AS INTEGER) AS ValeroOpeningVol
        ,CAST(SumReceipts AS INTEGER) AS Receipts
        ,CAST(SumShipments AS INTEGER) AS Shipments
        ,CAST(ClosingVol AS INTEGER) AS ValeroClosingVol
		,CAST((Net_Quantity)-ValeroClosingVol AS INTEGER) AS WNRClosingVol
    FROM
        (
        SELECT Ref_Prod_Location, Movement_Start
            , ZEROIFNULL(SUM(shipments)) AS SumShipments, ZEROIFNULL(SUM(receipts)) AS SumReceipts
            ,:Start_Volume
                -SUM(SumShipments) OVER (ORDER BY Movement_Start ROWS UNBOUNDED PRECEDING)
                +SUM(SumReceipts) OVER (ORDER BY Movement_Start ROWS UNBOUNDED PRECEDING) AS ClosingVol
        FROM
            (
            SELECT    Ref_Prod_Location, Movement_ID, PPL_Product_Desc,
                    Movement_Code, 
                    Movement_Start, Movement_End, 
                    Source_Code, Destination_Code,
                    Volume_Estimated AS Shipments, NULL AS Receipts,
                    Ticket_Number, Comments
            FROM prod_edw_base_views.MOVEMENT
            WHERE Source_Code = 'Ship Truck Ethanol' 
                AND movement_start BETWEEN :Start_Date AND :End_Date
                AND ppl_product_desc = 'Ethanol'
				AND ref_prod_location = 'El Paso Refinery'
            UNION ALL
            SELECT    Ref_Prod_Location, Movement_ID, PPL_Product_Desc,
                    Movement_Code, 
                    Movement_Start, Movement_End, 
                    Source_Code, Destination_Code,
                    NULL AS Shipments, Volume_Estimated AS Receipts,
                    Ticket_Number, Comments
            FROM prod_edw_base_views.MOVEMENT
            WHERE destination_code = 'T0509'
                AND comments NOT LIKE '%biourja'
                AND movement_start BETWEEN :Start_Date AND :End_Date
				AND ref_prod_location = 'El Paso Refinery'
				AND source_code NOT IN ('Rec Truck')
            ) AS tmpMovements
        GROUP BY ref_prod_location, movement_start
        ) AS tmpMovements2

INNER JOIN prod_edw_base_views.tank
ON tmpMovements2.ref_prod_location = tank.ref_prod_location
	AND tmpMovements2.movement_start = tank.eff_date
	AND tank.tank_id = 383;
    )
;
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_WCPF_Price_List_BMs (In_Price_Eff_Date date) as
(
select cast(401 as integer) as sort_ord,  cast('Benchmarks Set 1' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('AADDP00','AAEIZ00','AAEJB00','AAEJH00','AAFIE00','AAIKS00','AAITF00','AAJKK00','AAJMU00','AAJMV00','AAJMW00','AAJUH00','AAKWL00','AAKYJ00','AAKYL00','AALPG00','AALPI00','AALRR00','AALSF00','AALWD00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--21
union
select cast(402 as integer) as sort_ord,  cast('Benchmarks Set 2' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('AAMBR00','AAMCA00','AAMFB00','AAMGV00','AAMGY00','AAMHJ00','AAMHM00','AAMIT00','AAMNG00','AAMNK00','AAMNN00','AAMPF00','AAPPN00','AARQU00','AASLJ00','AASLK00','AASNL00','AASOK00','AASRU00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--19
union
select cast(403 as integer) as sort_ord,  cast('Benchmarks Set 3' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('AATGJ00','AATGX00','AATGY00','AATGZ00','AATHB00','AAUHA00','AAVJX00','AAVTI00','AAVTK00','AAVTL00','AAWTY00','AAXIX00','PAAAC00','PCAAD00','PCAAS00','PCABC00','PCABN00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--17
union
select cast(404 as integer) as sort_ord,  cast('Benchmarks Set 4' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('PCACG00','PCACH00','PCACJ00','PCACK00','PCACZ00','PCADE00','PCADI00','PCADJ00','PCAEE00','PCAEU00','PCAFD00','PCAGC00','PCAGH00','PCAGI00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--14
union
select cast(405 as integer) as sort_ord,  cast('Benchmarks Set 5' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('PGAAY00','PGAAZ00','PGABD00','PGABG00','PGACT00','PGACU00','PGAIX00','PGAJB00','PJAAI00','PJAAP00','PJAAW00','PJABJ00','PJABM00','PJABN00','PJABO00','PJABP00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--16
union
select cast(406 as integer) as sort_ord,  cast('Benchmarks Set 6' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('PKAAO00','PKAAQ00','PKAAS00','PMAAA00','PMAAB00','PMAAD00','PMAAI00','PMAAQ00','PMAAT00','PMAAY00','PMABY05','POAAK00','POAED00','POAEE00','POAEG00','POAET00','PPXDJ00','PUAAH00','PUAAI00','PUAAO00','PUAAU00','PUAAX00','PUAFZ00','PUBDM00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--24
union
select cast(407 as integer) as sort_ord,  cast('Benchmarks Set 7' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code =  'PHAAO00' and price_type='Close' and Price_Eff_Date between (:In_Price_Eff_Date-7) and :In_Price_Eff_Date
--1
union
select cast(408 as integer) as sort_ord,  cast('Benchmarks Set 8' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in  ('PCAAO00','PCADB10')  and Price_Eff_Date between (:In_Price_Eff_Date-7) and :In_Price_Eff_Date
--2
union
select cast(409 as integer) as sort_ord,  cast('Benchmarks Set 9' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, 'Avg' as Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date,  avg(Price) as Price, avg(Price) as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code =  'PHAWU04' and price_type in('High','Low') and Price_Eff_Date between (:In_Price_Eff_Date-7) and :In_Price_Eff_Date group by pricing_code, pricing_desc, Pricing_Group, Pricing_Location,  Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date
--1
union
select cast(410 as integer) as sort_ord,  cast('Benchmarks Set 10' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('AASFH00','PFAHD10','PFAHK10','PFAHX10','PFAJL10','PFAKE10','PFALT10','PFANY00','PFAOA00','PFAOP00','PFAOU00') and Price_Eff_Date=:In_Price_Eff_Date
--11
union
select cast(411 as integer) as sort_ord,  cast('Benchmarks Set 11' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('IGBAD21','IGBBL21','IGBCH21') and price_type='Midpoint' and Price_Eff_Date=:In_Price_Eff_Date
union
select 		cast(412 as integer) as sort_ord,  cast('Benchmarks Set 12' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price 
from 		prod_edw_base_views.COMBINED_PRICING a,
				(
						select			max(Price_Eff_Date) as Max_Price_Eff_Date
						from 			prod_edw_base_views.COMBINED_PRICING 
						where 		pricing_code = 'AAJIB00'  and 
											Price_Type='Close' and 
											Price_Eff_Date <= :In_Price_Eff_Date 
				) b
where 	a.pricing_code = 'AAJIB00' and 
				a.price_type='Close' and
				a.Price_Eff_Date = b.Max_Price_Eff_Date
--1
--Below are the summer winter logic ones per discussions with Tom Dowing
union
select cast(413 as integer) as sort_ord,  cast('Benchmarks Set 13' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date,  Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('AASOB00','PGAAB00','PGAAF00','PGAJH00 ','PGAAC00','PGAAG00','PGAJF00','AARQU00','PGACT00','PGAAY00','PGAJB00','PGACU00','PGAAZ00','PGAIX00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
union
select 		cast(414 as integer) as sort_ord,  cast('Benchmarks Set 14' as varchar(100)) as WCPF_Desc, 'AASOC00_WC' as pricing_code, 'USGC CBOB 93 Winter Calc' as pricing_desc, 'Mogas' as Pricing_Group, 'USGC' as Pricing_Location, 'Close' as Price_Type, 'PLATTS' as Price_Source, '' as Gross_Net_Status,  :In_Price_Eff_Date, cast(null as date) as Future_Price_Date, a.PGAJB00_Price-b.PGACT00_Price+c.AARQU00_Price as Price, a.PGAJB00_Price-b.PGACT00_Price+c.AARQU00_Price as WCPF_Price
from		(select price as  PGAJB00_Price, 99 as JK  from prod_edw_base_views.COMBINED_PRICING where pricing_code = 'PGAJB00' and price_type='Close' and Price_Eff_Date =  :In_Price_Eff_Date ) a,
				(select price as PGACT00_Price, 99 as JK from prod_edw_base_views.COMBINED_PRICING where pricing_code = 'PGACT00' and price_type='Close' and Price_Eff_Date =  :In_Price_Eff_Date ) b,
				(select price as AARQU00_Price, 99 as JK from 	prod_edw_base_views.COMBINED_PRICING where pricing_code = 'AARQU00' and price_type='Close' and Price_Eff_Date = :In_Price_Eff_Date ) c
where		a.JK=b.JK and
				a.JK=c.JK
union
select 		cast(415 as integer) as sort_ord,  cast('Benchmarks Set 15' as varchar(100)) as WCPF_Desc, 'AASOC00_SC' as pricing_code, 'USGC CBOB 93 Summer Calc' as pricing_desc, 'Mogas' as Pricing_Group, 'USGC' as Pricing_Location, 'Close' as Price_Type, 'PLATTS' as Price_Source, '' as Gross_Net_Status,  :In_Price_Eff_Date, cast(null as date) as Future_Price_Date, a.PGAJH00_Price-b.PGAAB00_Price+ c.AASOB00_Price as Price, a.PGAJH00_Price-b.PGAAB00_Price+ c.AASOB00_Price as WCPF_Price
from		(select price as  PGAJH00_Price, 99 as JK  from prod_edw_base_views.COMBINED_PRICING where pricing_code = 'PGAJH00' and price_type='Close' and Price_Eff_Date =  :In_Price_Eff_Date ) a,
				(select price as PGAAB00_Price, 99 as JK from prod_edw_base_views.COMBINED_PRICING where pricing_code = 'PGAAB00' and price_type='Close' and Price_Eff_Date =  :In_Price_Eff_Date ) b,
				(select price as  AASOB00_Price, 99 as JK from 	prod_edw_base_views.COMBINED_PRICING where pricing_code = 'AASOB00' and price_type='Close' and Price_Eff_Date = :In_Price_Eff_Date ) c
where		a.JK=b.JK and
				a.JK=c.JK
--Minimum 137 in Winter it can be higher (145 or so) in Summer
union
select cast(416 as integer) as sort_ord,  cast('Benchmarks Set 16' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code =  'AAJNY00' and price_type='Unspecified' and Price_Eff_Date = :In_Price_Eff_Date;
)
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_WCPF_Price_List_CH_etc (In_Price_Eff_Date date) as
--Change 3201
(
select cast(801 as integer) as sort_ord,  cast('Chicago Prices' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('AAREL00','AATHA00','AAUEU00','OPSPT00424','OPSPT00744','OPSPT00745','OPSPT00746','OPSPT00747','OPSPT00749','OPSPT00750','OPSPT00754','OPSPT00755','OPSPT00757','OPSPT00758','PGAAX00','PGACR00','PJAAF00','PJAAI00','PPARH00','PPASQ00') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--21
union
select cast(802 as integer) as sort_ord,  cast('Northern Natural Gas' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, Price as WCPF_Price from prod_edw_base_views.COMBINED_PRICING where pricing_code in ('IGBDV00') and price_type='Unspecified' and Price_Eff_Date=:In_Price_Eff_Date;
)
--------------------------------------------------------------------------------

Create Macro prod_edw_base_views.M_WCPF_Price_List_Futrs (In_Price_Eff_Date date) as
(
--Ethanol 30,60,90,120,150,180 day future
select 			cast(301 as integer) as sort_ord,  cast('CME Ethanol 30 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 46) = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(302 as integer) as sort_ord,  cast('CME Ethanol 60 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 46) = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(303 as integer) as sort_ord,  cast('CME Ethanol 90 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 46) = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(304 as integer) as sort_ord,  cast('CME Ethanol 120 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 46) = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(305 as integer) as sort_ord,  cast('CME Ethanol 150 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 46) = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(306 as integer) as sort_ord,  cast('CME Ethanol 180 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 46) = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date
union
--Propane 30,60,90,120,150,180 day future
select 			cast(307 as integer) as sort_ord,  cast('CME Propane 30 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 50) = 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(308 as integer) as sort_ord,  cast('CME Propane 60 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 50) = 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(309 as integer) as sort_ord,  cast('CME Propane 90 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 50) = 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(310 as integer) as sort_ord,  cast('CME Propane 120 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 50) = 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(311 as integer) as sort_ord,  cast('CME Propane 150 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 50) = 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(312 as integer) as sort_ord,  cast('CME Propane 180 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 50) = 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date
union					
--Brent 30,60,90,120,150,180 day future
select 			cast(313 as integer) as sort_ord,  cast('CME Brent 30 Day Future' as varchar(100)) as WCPF_Desc, oreplace(a.pricing_code,'/','') as pricing_code, a.pricing_desc,a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, a.Price,  a.Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a,
					(
						select			max(Price_Eff_Date) as Max_Price_Eff_Date, min(Future_Price_Date) as Min_Future_Price_Date
						from 			prod_edw_base_views.COMBINED_PRICING 
						where 		substring(Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
											Price_Type='Close' and 
											Price_Eff_Date between ((:In_Price_Eff_Date- extract(day from :In_Price_Eff_Date))+1) and  :In_Price_Eff_Date and
											Future_Price_Date=ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) 
					) b
where 		substring(a.Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
					a.Price_Type='Close' and 
					a.Future_Price_Date = b.Min_Future_Price_Date and
					a.Price_Eff_Date = b.Max_Price_Eff_Date	
union
select 			cast(313 as integer) as sort_ord,  cast('CME Brent 30 Day Future' as varchar(100)) as WCPF_Desc, oreplace(a.pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(314 as integer) as sort_ord,  cast('CME Brent 60 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(315 as integer) as sort_ord,  cast('CME Brent 90 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(316 as integer) as sort_ord,  cast('CME Brent 120 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(317 as integer) as sort_ord,  cast('CME Brent 150 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(318 as integer) as sort_ord,  cast('CME Brent 180 Day Future' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substring(Pricing_Desc from 1 for 39) = 'NYMEX Brent Crude Oil Futures Clearport' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date;
)
--------------------------------------------------------------------------------

Create Macro prod_edw_base_views.M_WCPF_Price_List_Fut_NYX_PA1 (In_Price_Eff_Date date) as
(
--futurecrude1close 30,60,90,120,150,180 day future
select 			cast(101 as integer) as sort_ord,  cast('futurecrude1close 30 day' as varchar(100)) as WCPF_Desc, oreplace(a.pricing_code,'/','') as pricing_code, a.pricing_desc,a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, a.Price,  a.Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a,
					(
						select			max(Price_Eff_Date) as Max_Price_Eff_Date, min(Future_Price_Date) as Min_Future_Price_Date
						from 			prod_edw_base_views.COMBINED_PRICING 
						where 		Pricing_Desc = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
											Price_Type='Close' and 
											Price_Eff_Date between ((:In_Price_Eff_Date- extract(day from :In_Price_Eff_Date))+1) and  :In_Price_Eff_Date and
											Future_Price_Date=ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) 
					) b
where 		a.Pricing_Desc  = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
					a.Price_Type='Close' and 
					a.Future_Price_Date = b.Min_Future_Price_Date and
					a.Price_Eff_Date = b.Max_Price_Eff_Date	
union
select 			cast(101 as integer) as sort_ord,  cast('futurecrude1close 30 day' as varchar(100)) as WCPF_Desc, oreplace(a.pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(102 as integer) as sort_ord,  cast('futurecrude1close 60 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(103 as integer) as sort_ord,  cast('futurecrude1close 90 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(104 as integer) as sort_ord,  cast('futurecrude1close 120 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(105 as integer) as sort_ord,  cast('futurecrude1close 150 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(106 as integer) as sort_ord,  cast('futurecrude1close 180 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Light Sweet Crude Oil (WTI) Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date
union					
--futureunleaded1close 30,60,90,120,150,180 day future
select 			cast(107 as integer) as sort_ord,  cast('futureunleaded1close 30 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX RBOB Gasoline Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(108 as integer) as sort_ord,  cast('futureunleaded1close 60 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX RBOB Gasoline Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(109 as integer) as sort_ord,  cast('futureunleaded1close 90 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX RBOB Gasoline Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(110 as integer) as sort_ord,  cast('futureunleaded1close 120 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX RBOB Gasoline Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(111 as integer) as sort_ord,  cast('futureunleaded1close 150 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX RBOB Gasoline Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(112 as integer) as sort_ord,  cast('futureunleaded1close 180 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX RBOB Gasoline Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date
union
--futureheatingoil1close 30,60,90,120,150,180 day future
select 			cast(113 as integer) as sort_ord,  cast('futureheatingoil1close 30 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX NY Harbor ULSD Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(114 as integer) as sort_ord,  cast('futureheatingoil1close 60 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX NY Harbor ULSD Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date					
union
select 			cast(115 as integer) as sort_ord,  cast('futureheatingoil1close 90 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX NY Harbor ULSD Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date					
union
select 			cast(116 as integer) as sort_ord,  cast('futureheatingoil1close 120 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX NY Harbor ULSD Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date					
union
select 			cast(117 as integer) as sort_ord,  cast('futureheatingoil1close 150 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX NY Harbor ULSD Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date					
union
select 			cast(118 as integer) as sort_ord,  cast('futureheatingoil1close 180 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX NY Harbor ULSD Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date	;
)
--------------------------------------------------------------------------------

Create Macro prod_edw_base_views.M_WCPF_Price_List_Fut_NYX_PA2 (In_Price_Eff_Date date) as
(
--futurePropane1close 30,60,90,120,150,180 day future
select 			cast(219 as integer) as sort_ord,  cast('futurePropane1close 30 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substr(Pricing_Desc,1,50)= 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(220 as integer) as sort_ord,  cast('futurePropane1close 60 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substr(Pricing_Desc,1,50)= 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select			cast(221 as integer) as sort_ord,  cast('futurePropane1close 90 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substr(Pricing_Desc,1,50)= 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(222 as integer) as sort_ord,  cast('futurePropane1close 120 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substr(Pricing_Desc,1,50)= 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(223 as integer) as sort_ord,  cast('futurePropane1close 150 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substr(Pricing_Desc,1,50)= 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(224 as integer) as sort_ord,  cast('futurePropane1close 180 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		substr(Pricing_Desc,1,50)= 'NYMEX Mont Belvieu LDH Propane (OPIS) Futures Clea' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date
union
--futureNaturalGas1close 30,60,90,120,150,180 day future
select 			cast(225 as integer) as sort_ord,  cast('futureNaturalGas1close 30 day' as varchar(100)) as WCPF_Desc, oreplace(a.pricing_code,'/','') as pricing_code, a.pricing_desc,a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, a.Price,  a.Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a,
					(
						select			max(Price_Eff_Date) as Max_Price_Eff_Date, min(Future_Price_Date) as Min_Future_Price_Date
						from 			prod_edw_base_views.COMBINED_PRICING 
						where 		Pricing_Desc = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
											Price_Type='Close' and 
											Price_Eff_Date between ((:In_Price_Eff_Date- extract(day from :In_Price_Eff_Date))+1) and  :In_Price_Eff_Date and
											Future_Price_Date=ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) 
					) b
where 		a.Pricing_Desc  = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
					a.Price_Type='Close' and 
					a.Future_Price_Date = b.Min_Future_Price_Date and
					a.Price_Eff_Date = b.Max_Price_Eff_Date	
union					
select 			cast(225 as integer) as sort_ord,  cast('futureNaturalGas1close 30 day' as varchar(100)) as WCPF_Desc, oreplace(a.pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(226 as integer) as sort_ord,  cast('futureNaturalGas1close 60 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(227 as integer) as sort_ord,  cast('futureNaturalGas1close 90 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(228 as integer) as sort_ord,  cast('futureNaturalGas1close 120 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(229 as integer) as sort_ord,  cast('futureNaturalGas1close 150 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(230 as integer) as sort_ord,  cast('futureNaturalGas1close 180 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'NYMEX Henry Hub Natural Gas Futures Pit' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date
union					
--futureETOH 30,60,90,120,150,180 day future
select 			cast(231 as integer) as sort_ord,  cast('futureETOH 30 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),1) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(232 as integer) as sort_ord,  cast('futureETOH 60 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),2) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(233 as integer) as sort_ord,  cast('futureETOH 90 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),3) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(234 as integer) as sort_ord,  cast('futureETOH 120 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),4) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(235 as integer) as sort_ord,  cast('futureETOH 150 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),5) and
					Price_Eff_Date = :In_Price_Eff_Date
union
select 			cast(236 as integer) as sort_ord,  cast('futureETOH 180 day' as varchar(100)) as WCPF_Desc, oreplace(pricing_code,'/','') as pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price,  Price as WCPF_Price
from 			prod_edw_base_views.COMBINED_PRICING a
where 		Pricing_Desc = 'CBOT Denatured Fuel Ethanol Futures Electronic' and 
					Price_Type='Close' and 
					Future_Price_Date = ADD_MONTHS(( :In_Price_Eff_Date-EXTRACT(DAY FROM  :In_Price_Eff_Date)+1),6) and
					Price_Eff_Date = :In_Price_Eff_Date;
)
--------------------------------------------------------------------------------

replace Macro PROD_EDW_BASE_views.M_WCPF_Price_List_LM (In_Price_Eff_Date date) as
(
select cast(501 as integer) as sort_ord,  cast('ABQ Spot Unleaded Regular' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE,  Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='18UWRW486G' and PRICE_EFF_DATE=:In_Price_Eff_Date  group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(502 as integer) as sort_ord,  cast('ABQ Spot Unleaded Premium' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE,  Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='18UWRW491G' and PRICE_EFF_DATE=:In_Price_Eff_Date  group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(503 as integer) as sort_ord,  cast('ABQ Spot ULSD' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='18UWRW201G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(504 as integer) as sort_ord,  cast('Tucson Spot Unleaded Regular' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='04UWRW487G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(505 as integer) as sort_ord,  cast('Tucson Spot Unleaded Premium' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='04UWRW491G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(506 as integer) as sort_ord,  cast('Tucson Spot ULSD' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='04UWRW201G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(507 as integer) as sort_ord,  cast('Phoenix Spot Unleaded Regular' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='03UWRW487G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(508 as integer) as sort_ord,  cast('Phoenix Spot Unleaded Premium' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='03UWRW491G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(509 as integer) as sort_ord,  cast('Phoenix Spot CBG' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='03UWRW701G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(510 as integer) as sort_ord,  cast('Phoenix Spot CBG Premium' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='03UWRW703G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(511 as integer) as sort_ord,  cast('Phoenix Spot ULSD' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='03UWRW201G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(512 as integer) as sort_ord,  cast('El Paso Spot Unleaded Regular' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='06UWRW487G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(513 as integer) as sort_ord,  cast('El Paso Spot Unleaded Premium' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='06UWRW491G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(514 as integer) as sort_ord,  cast('El Paso ULSD' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='06UWRW201G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
--new code on 2016/05/10
union
select cast(515 as integer) as sort_ord,  cast('El Paso Gasoline' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='06UWRW7491G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(516 as integer) as sort_ord,  cast('El Paso Gasoline' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='06UWRW486G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date
union
select cast(517 as integer) as sort_ord,  cast('El Paso Gasoline' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status,  PRICE_EFF_DATE, Future_Price_Date, avg(Price) as Price,  avg(Price) as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where price_source =  'WESTERN/GIANT' and pricing_code='06UWRW7486G' and PRICE_EFF_DATE=:In_Price_Eff_Date group by pricing_code, pricing_desc,Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, PRICE_EFF_DATE, Future_Price_Date;
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_views.M_WCPF_Price_List_OP (In_Price_Eff_Date date) as
(
select cast(601 as integer) as sort_ord,  cast('Opis Compliance Tags 1' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, Price as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where pricing_code in ('OPSPT00791','OPSPT00792','OPSPT00793','OPSPT00794','OPSPT00795','OPSPT00796','OPSPT00798','OPSPT00799','OPSPT00800','OPSPT00801','OPSPT00967','OPSPT00968','OPSPT00969','OPSPT00971','OPSPT00797') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--Compliance Tags Missing ones OPSPT00795, OPSPT00796, OPSPT00801
union
select cast(602 as integer) as sort_ord,  cast('Opis Compliance Tags 2' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, Price as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where pricing_code in ('OPFS00010') and price_type='Average' and Price_Eff_Date=:In_Price_Eff_Date
--Compliance Tags Missing ones OPSPT00795, OPSPT00796, OPSPT00801
union
select cast(603 as integer) as sort_ord,  cast('OPIS Distillate Tags' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where pricing_code in ('OPSPT00647','OPSPT00653','OPSPT00660','OPSPT00673','OPSPT00674','OPSPT00725','OPSPT00732','OPSPT00759','OPSPT00685') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--Distillate OPSPT00759 missing
union
select cast(604 as integer) as sort_ord,  cast('OPIS Ethanol Tags' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price from PROD_EDW_BASE_views.COMBINED_PRICING where pricing_code in ('OPSPT00659','OPSPT00686','OPSPT00692','OPSPT00749','OPSPT00771') and price_type='Close' and Price_Eff_Date=:In_Price_Eff_Date
--Ethanol Good
union
select 		cast(605 as integer) as sort_ord,  cast('OPIS Gasoline Tags' as varchar(100)) as WCPF_Desc, pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date, Future_Price_Date, Price, Price as WCPF_Price 
from 		PROD_EDW_BASE_views.COMBINED_PRICING 
where 		pricing_code in 
				('OPSPT00003','OPSPT00004','OPSPT00005','OPSPT00009','OPSPT00010','OPSPT00021','OPSPT00029','OPSPT00030','OPSPT00036','OPSPT00037','OPSPT00042','OPSPT00074','OPSPT00152','OPSPT00184','OPSPT00194',
				'OPSPT00201','OPSPT00203','OPSPT00205','OPSPT00207','OPSPT00208','OPSPT00215','OPSPT00222','OPSPT00227','OPSPT00228','OPSPT00229','OPSPT00230','OPSPT00231','OPSPT00232','OPSPT00235','OPSPT00238','OPSPT00239',
				'OPSPT00243','OPSPT00256','OPSPT00257','OPSPT00261','OPSPT00275','OPSPT00276','OPSPT00287','OPSPT00289','OPSPT00291','OPSPT00292','OPSPT00294','OPSPT00307','OPSPT00308','OPSPT00309','OPSPT00310','OPSPT00316',
				'OPSPT00650','OPSPT00651','OPSPT00652','OPSPT00656','OPSPT00657','OPSPT00668','OPSPT00676','OPSPT00677','OPSPT00683','OPSPT00684','OPSPT00689','OPSPT00724','OPSPT00802','OPSPT00834','OPSPT00837','OPSPT00840',
				'OPSPT00842','OPSPT00844','OPSPT00851','OPSPT00853','OPSPT00855','OPSPT00857','OPSPT00858','OPSPT00865','OPSPT00867','OPSPT00872','OPSPT00877','OPSPT00878','OPSPT00879','OPSPT00880','OPSPT00881',
				'OPSPT00882','OPSPT00885','OPSPT00886','OPSPT00888','OPSPT00889','OPSPT00893','OPSPT00906','OPSPT00907','OPSPT00911','OPSPT00914','OPSPT00917','OPSPT00918','OPSPT00925','OPSPT00926','OPSPT00937',
				'OPSPT00938','OPSPT00939','OPSPT00940','OPSPT00941','OPSPT00942','OPSPT00944','OPSPT00957','OPSPT00958','OPSPT00959','OPSPT00960','OPSPT00965','OPSPT00966','OPSPT00974','OPSPT00994'
				) and 
				price_type='Close' and 
				Price_Eff_Date=:In_Price_Eff_Date;
--Gasoline Tags 6 missing 'OPSPT00881','OPSPT00882','OPSPT00888','OPSPT00937','OPSPT00958','OPSPT00960'
)
--------------------------------------------------------------------------------

Replace Macro prod_edw_base_views.M_WCPF_Price_List_TRSFR (In_Price_Eff_Date date) as
--Change 3222
(
select 	cast(701 as integer) as sort_ord,  cast('Tucson Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('TCSGAS' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as Price, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(701 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1)	) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQU00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(701 as integer) as sort_ord,  cast('Tucson Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('TCSGAS' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as Price, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(701 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday') b
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQU00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(702 as integer) as sort_ord,  cast('Tucson Premium Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('TCSGASP' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as Price, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(702 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1)	) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQV00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(702 as integer) as sort_ord,  cast('Tucson Premium Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('TCSGASP' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as Price, (((a.Price+7.5)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(702 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday') b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQV00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(703 as integer) as sort_ord,  cast('Tucson Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('TCSULSD' as varchar(30))as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price * 100)-4+6) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13468'and price_type='2 LOW AVG' and Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(703 as integer) as sort_ord,  cast('Tucson Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('TCSULSD' as varchar(30))as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price * 100)-4+6) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13468'and price_type='2 LOW AVG' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(704 as integer) as sort_ord,  cast('El Paso Gasoline Transfer Winter' as varchar(100)) as WCPF_Desc, cast ('EPGASW' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as Price, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(704 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1)	) b
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQU00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(704 as integer) as sort_ord,  cast('El Paso Gasoline Transfer Winter' as varchar(100)) as WCPF_Desc, cast ('EPGASW' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as Price, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(704 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday') b
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQU00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(705 as integer) as sort_ord,  cast('El Paso Premium Gasoline Transfer Winter' as varchar(100)) as WCPF_Desc, cast ('EPGASPW' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as Price, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(705 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1)	) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQV00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-1)
---Imp to add the code for El Paso April 15-Sept 15(summer)  per Tom Downing on 1/13/2016 Wait till April
union
--Mondays pickup Friday Prices
select 	cast(705 as integer) as sort_ord,  cast('El Paso Premium Gasoline Transfer Winter' as varchar(100)) as WCPF_Desc, cast ('EPGASPW' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as Price, (((a.Price+4.5)*.9)+((b.price+15)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(705 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'	) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AARQV00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(706 as integer) as sort_ord,  cast('El Paso Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('EPULSD' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, (Price+4) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='AATGY00'and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(706 as integer) as sort_ord,  cast('El Paso Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('EPULSD' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, (Price+4) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='AATGY00'and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(707 as integer) as sort_ord,  cast('Phoenix CBG Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('PHXCBGGAS' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price*100)-8.5)  as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13190'and price_type='AVG' and Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(707 as integer) as sort_ord,  cast('Phoenix CBG Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('PHXCBGGAS' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price*100)-8.5)  as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13190'and price_type='AVG' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(708 as integer) as sort_ord,  cast('Phoenix CBG Premium Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('PHXCBGGASP' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price * 100)-8.5) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13364'and price_type='AVG' and Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(708 as integer) as sort_ord,  cast('Phoenix CBG Premium Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('PHXCBGGASP' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price * 100)-8.5) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13364'and price_type='AVG' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(709 as integer) as sort_ord,  cast('Phoenix Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('PHXULSD' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price * 100) - 4)as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13468'and price_type='2 LOW AVG' and Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(709 as integer) as sort_ord,  cast('Phoenix Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('PHXULSD' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, ((Price * 100) - 4)as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='COMP13468'and price_type='2 LOW AVG' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(710 as integer) as sort_ord,  cast('Albuquerque Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('ABQGAS' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4)*.9)+((b.price+20)*.1)) as Price, (((a.Price+4)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(710 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1)	) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AAXIX00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(710 as integer) as sort_ord,  cast('Albuquerque Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('ABQGAS' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4)*.9)+((b.price+20)*.1)) as Price, (((a.Price+4)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(710 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'	) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'AAXIX00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(711 as integer) as sort_ord,  cast('Albuquerque Premium Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('ABQGASP' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4)*.9)+((b.price+20)*.1)) as Price, (((a.Price+4)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(711 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1) ) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'PGABD00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(711 as integer) as sort_ord,  cast('Albuquerque Premium Gasoline Transfer' as varchar(100)) as WCPF_Desc, cast ('ABQGASP' as varchar(30)) as pricing_code, a.pricing_desc, a.Pricing_Group, a.Pricing_Location, a.Price_Type, a.Price_Source, a.Gross_Net_Status, a.Price_Eff_Date, a.Future_Price_Date, (((a.Price+4)*.9)+((b.price+20)*.1)) as Price, (((a.Price+4)*.9)+((b.price+20)*.1)) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING a,
			(select cast(711 as integer) as j_sort_ord, Price from prod_edw_base_views.COMBINED_PRICING where  pricing_code = 'OPSPT00749' and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday' ) b	
where 	sort_ord=b.j_sort_ord and a.pricing_code = 'PGABD00' and a.price_type='Close' and a.Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday'
union
select 	cast(712 as integer) as sort_ord,  cast('Albuquerque Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('ABQULSD' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, (Price+2) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='AATHB00'and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-1)
union
--Mondays pickup Friday Prices
select 	cast(712 as integer) as sort_ord,  cast('Albuquerque Diesel Transfer' as varchar(100)) as WCPF_Desc, cast ('ABQULSD' as varchar(30)) as pricing_code, pricing_desc, Pricing_Group, Pricing_Location, Price_Type, Price_Source, Gross_Net_Status, Price_Eff_Date,  Future_Price_Date, Price, (Price+2) as WCPF_Price 
from 	prod_edw_base_views.COMBINED_PRICING 
where 	pricing_code='AATHB00'and price_type='Close' and Price_Eff_Date=(:In_Price_Eff_Date-3) and CAST(CAST(:In_Price_Eff_Date AS FORMAT 'E4') AS VARCHAR(20))='Monday';
)
--------------------------------------------------------------------------------

replace macro PROD_EDW_BASE_VIEWS.m_WSALE_LOAD_RA_COMBINED as 
(
-- Current Month -2
-- Purch Side
	-- Delete from Purch Table where Period = Current_Month -2
 	Delete from PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP WHERE JDEAccountingPeriod = CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -2))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -2))(FORMAT '99'))as INTEGER);
 	-- Load Purch Table for Current_Month -2, real and dummy
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -2))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -2))(FORMAT '99'))as INTEGER));
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -2))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -2))(FORMAT '99'))as INTEGER));
	
-- Prev Sales Side
	-- Delete from Prev Sales table where Period = Current Month -2
 	Delete from PROD_EDW_BASE.WSALE_RA_PREV_SLS_GRP WHERE JDEAccountingPeriod = CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -2))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -2))(FORMAT '99'))as INTEGER);
	-- Load Prev Sales Table for Current Month -2
	EXEC PROD_EDW_BASE_VIEWS.m_Load_RA_PREV_SLS_GRP (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -2))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -2))(FORMAT '99'))as INTEGER));
	
 -- Run RA load for current_month -2
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -2))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -2))(FORMAT '99'))as INTEGER));
 

-- Current Month -1
-- Purch Side
	-- Delete from Purch Table where Period = Current_Month -1
 	Delete from PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP WHERE JDEAccountingPeriod = CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -1))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -1))(FORMAT '99'))as INTEGER);
 	-- Load Purch Table for Current_Month -1, real and dummy
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -1))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -1))(FORMAT '99'))as INTEGER));
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -1))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -1))(FORMAT '99'))as INTEGER));
 
 -- Prev Sales Side
	-- Delete from Prev Sales table where Period = Current Month -2
 	Delete from PROD_EDW_BASE.WSALE_RA_PREV_SLS_GRP WHERE JDEAccountingPeriod = CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -1))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -1))(FORMAT '99'))as INTEGER);
	-- Load Prev Sales Table for Current Month -2
	EXEC PROD_EDW_BASE_VIEWS.m_Load_RA_PREV_SLS_GRP (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -1))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -1))(FORMAT '99'))as INTEGER));
	
 -- Run RA load for current_month -1
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -1))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -1))(FORMAT '99'))as INTEGER));
 
 
 -- Current_Month
-- Purch Side
	-- Delete from Purch Table where Period = Current_Month
 	Delete from PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP WHERE JDEAccountingPeriod = CAST(TRIM(EXTRACT(YEAR from Current_Date)) || TRIM(EXTRACT(MONTH From Current_Date)(FORMAT '99')) as INTEGER);
 	-- Load Purch Table for Current_Month , real and dummy
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Salesdat_PURCH_GRP (CAST(TRIM(EXTRACT(YEAR from Current_Date)) || TRIM(EXTRACT(MONTH From Current_Date)(FORMAT '99')) as INTEGER));
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Purch_With_Dummy (CAST(TRIM(EXTRACT(YEAR from Current_Date)) || TRIM(EXTRACT(MONTH From Current_Date)(FORMAT '99')) as INTEGER));

-- Prev Sales Side
	-- Delete from Prev Sales table where Period = Current Month -2
 	Delete from PROD_EDW_BASE.WSALE_RA_PREV_SLS_GRP WHERE JDEAccountingPeriod = CAST(TRIM(EXTRACT(YEAR from Current_Date)) || TRIM(EXTRACT(MONTH From Current_Date)(FORMAT '99')) as INTEGER);
	-- Load Prev Sales Table for Current Month -2
	EXEC PROD_EDW_BASE_VIEWS.m_Load_RA_PREV_SLS_GRP (CAST(TRIM(EXTRACT(YEAR from Current_Date)) || TRIM(EXTRACT(MONTH From Current_Date)(FORMAT '99')) as INTEGER));
	
 -- Run RA load for current_month
 	EXEC PROD_EDW_BASE_VIEWS.m_Load_Salesdat_RA_Month (CAST(TRIM(EXTRACT(YEAR from Current_Date)) || TRIM(EXTRACT(MONTH From Current_Date)(FORMAT '99')) as INTEGER));
	
	
-- Update All Salesman
Update PROD_EDW_BASE.WSALE_RA_SALESDAT_SUM_ITD 
FROM PROD_EDW_BASE_VIEWS.WSale_CRM_CustMast b
SET Current_SalesmanCode = b.TerritoryNum
WHERE ShipToJDEAddrBookNumber = b.JDEAccountNum
and Current_SalesmanCode <> b.TerritoryNum;
 
-- Combined Salesdat
DELETE FROM PROD_EDW_BASE.WSALE_COMBINED_SALESDAT;

EXEC PROD_EDW_BASE_VIEWS.m_Load_Combined_Salesdat;


-- Sales Analysis
	-- Cur Month - 2
EXEC PROD_EDW_BASE_VIEWS.m_Load_Comb_Cust_Prod_Sales (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -2))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -2))(FORMAT '99'))as INTEGER));
 
	-- Cur Month - 1
EXEC PROD_EDW_BASE_VIEWS.m_Load_Comb_Cust_Prod_Sales (CAST(TRIM(EXTRACT(YEAR from Add_Months(Current_Date, -1))) || TRIM(EXTRACT(MONTH From ADD_MONTHS(Current_Date, -1))(FORMAT '99'))as INTEGER));
	
	-- Cur Month 
EXEC PROD_EDW_BASE_VIEWS.m_Load_Comb_Cust_Prod_Sales (CAST(TRIM(EXTRACT(YEAR from Current_Date)) || TRIM(EXTRACT(MONTH From Current_Date)(FORMAT '99')) as INTEGER));

-- Update All Salesman

);
--------------------------------------------------------------------------------

--Change 2991
Replace Macro PROD_EDW_BASE_VIEWS.m_WSALE_Update_BO 
as (



--1 Update Comments with ConcatCmtTxt
Update PROD_EDW_BASE.WSALE_BO_Backorders
FROM   PROD_EDW_BASE_Views.WSALE_BO_COMMENTS_FLTD_PVT b
SET Comments = b.ConcatCmtTxt
,SnpSht_Update_Dttm = Current_Date
WHERE PROD_EDW_BASE.WSALE_BO_Backorders.backorderid = b.backorderid
and ( SnpSht_Update_Dttm is NULL  OR Cast(SnpSht_Update_Dttm as Date) = Current_Date)
;

--2 Update ABCClass with SC03
UPDATE PROD_EDW_BASE.WSALE_BO_Backorders 
FROM PROD_EDW_BASE_VIEWS.WSALE_PDS_Prodware b
SET ABCClass = b.SC03, ReorderPoint = b.RO_PT, ReorderQuantity = b.RO_Qty
,SnpSht_Update_Dttm = Current_Date
WHERE warehousecode||prodpack = b.wh||b.prod_code||b.pak
and ( SnpSht_Update_Dttm is NULL  OR Cast(SnpSht_Update_Dttm as Date) = Current_Date)
;


-- 3 Update count of Open Orders 
UPDATE PROD_EDW_BASE.WSale_BO_Backorders
FROM 
(
	SELECT  BackOrderID, ProdPack, COUNT(INV_num) AS OpenOrders
	FROM   PROD_EDW_BASE_VIEWS.WSale_BO_Backorders a
	LEFT JOIN PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_COMB b
	ON a.warehousecode||a.prodpack = CAST(b.wh AS VARCHAR(3))||TRIM(b.product)||TRIM(b.pack)
	WHERE ord_status = 'open'
	GROUP BY BackOrderID, ProdPack, warehousecode
) PDS_Orders
SET CurrentOpenOrders = OpenOrders
,SnpSht_Update_Dttm = Current_Date
WHERE PROD_EDW_BASE.WSALE_BO_Backorders.BackOrderID = PDS_Orders.BackOrderID
and ( SnpSht_Update_Dttm is NULL  OR Cast(SnpSht_Update_Dttm as Date) = Current_Date);


-- 4 Update Total Inventory
UPDATE PROD_EDW_BASE.WSale_BO_Backorders
FROM 
(
	SELECT  BackOrderID, ProdPack, warehousecode,SUM(quantity) AS TotalInv
	FROM   PROD_EDW_BASE_VIEWS.WSale_BO_Backorders
	LEFT JOIN PROD_EDW_BASE_VIEWS.WSale_WMS_BinLocat
	ON warehousecode||prodpack = CAST(warehouse AS VARCHAR(3))||TRIM(product)
	GROUP BY BackOrderID, ProdPack, warehousecode
	WHERE resolutionuser IS NULL
) OnHand
SET CurrentOnHandInventory = OnHand.TotalInv
,SnpSht_Update_Dttm = Current_Date
WHERE PROD_EDW_BASE.WSale_BO_Backorders.BackOrderID = OnHand.BackOrderID
and ( SnpSht_Update_Dttm is NULL  OR Cast(SnpSht_Update_Dttm as Date) = Current_Date);

-- Update 6 Week Trends
UPDATE PROD_EDW_BASE.WSALE_BO_Backorders
FROM (
	SELECT backorderid, invoicenumber, trnd.wh, trnd.product, trnd.pack, TRIM( trnd.wh) || TRIM(trnd.product) || TRIM(trnd.pack) as WHProdPack, --concatenated product and pack for easy reference to Backorder Table
	CASE WHEN TLWK = 0 THEN 0 ELSE 
		CAST(SUM(COALESCE(wkd1,0) + COALESCE(wkd2,0) + COALESCE(wkd3,0) + COALESCE(wkd4,0) + COALESCE(wkd5,0)) AS DECIMAL(10,2))/COALESCE(TLWK,1) END AS SalesTrend6Week,
			COALESCE(TLWK,0)/6 AS SalesAverage6Week, COALESCE(OrderAverage6Week,0) AS OrderAverage6Week
	FROM (SELECT wh, product, pack, SUM(wk2 - wk1) AS wkd1, SUM(wk3 - wk2) AS wkd2, SUM(wk4 - wk3) AS wkd3, SUM(wk5 - wk4) AS wkd4, SUM(wk6 -wk1) AS wkd5 --perform caluculation for weekly sales differences
	FROM (SELECT wh,product,pack , SUM(week1) AS wk1, SUM(week2) AS wk2, SUM(week3) AS wk3, SUM(week4) AS wk4, SUM(week5) AS wk5, SUM(week6) AS wk6 --pivot weekly sales values into single records
			FROM (SELECT	WH,PRODUCT,PACK,   --sum delivery quantities by week
				COALESCE(CASE WHEN DELDT  > DATE - 8 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Week6,
				COALESCE(CASE WHEN DELDT  BETWEEN DATE - 14 AND  DATE - 8 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Week5,
				COALESCE(CASE WHEN DELDT  BETWEEN DATE - 21 AND  DATE - 15 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Week4,
				COALESCE(CASE WHEN DELDT  BETWEEN DATE - 28 AND DATE - 22 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Week3,
				COALESCE(CASE WHEN DELDT  BETWEEN DATE - 35 AND  DATE - 29 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Week2,
				COALESCE(CASE WHEN DELDT  BETWEEN DATE - 42 AND  DATE - 36 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Week1
				FROM	PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_COMB
				WHERE pcat BETWEEN 7 AND 26 AND deldt > DATE - 43	--constrained pcat to eliminate fuel and equipment products
				GROUP BY WH,PRODUCT,PACK,   deldt, ord_status)piv	
		GROUP BY WH,PRODUCT,PACK) trnds
	GROUP BY wh, product, pack)trnd
	LEFT JOIN (SELECT warehouse_code, product, pack, COALESCE(CAST(COUNT(invoice_number) AS DECIMAL(10,2))/6,0) AS OrderAverage6Week --weekly order count
					FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Header                                                                                                                                              
					LEFT JOIN PROD_EDW_BASE_VIEWS.wsale_pds_orders_comb
					ON invoice_number = inv_num
					WHERE pcat BETWEEN 7 AND 26 AND deldt > DATE - 43 AND invoice_status = 'posted'                                                                                                                                	
					GROUP BY warehouse_code,PRODUCT,PACK, invoice_status) ord
	ON ord.warehouse_code||ord.product||ord.pack = trnd.wh||trnd.product||trnd.pack
	LEFT JOIN (SELECT wh,product,pack , CAST(SUM(QTY_DEL) AS DECIMAL(10,2))/6 AS wksaavg, SUM(qty_del) AS TlWk --weekly sales average                    	
					FROM	PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_COMB                                                                                                                                              
					WHERE pcat BETWEEN 7 AND 26 AND deldt > DATE - 43 AND ord_status = 'posted'                                                                                                                                                                                          	
					GROUP BY WH,PRODUCT,PACK, ord_status) SAvg   	
	ON SAvg.wh||SAvg.product||SAvg.pack = trnd.wh||trnd.product||trnd.pack
	INNER JOIN PROD_EDW_BASE_VIEWS.WSale_BO_Backorders --join WSALE_BO_Backorders (must cast warehouse code to integer)
	ON CAST(warehousecode AS INTEGER)||prodpack = trnd.wh||trnd.product||trnd.pack
	GROUP BY  trnd.wh, trnd.product, trnd.pack,TLWK,OrderAverage6Week,backorderid,invoicenumber
) SixWeekTrendTBL
SET SalesTrend6Week = SixWeekTrendTBL.SalesTrend6Week
,SalesAverage6Month= SixWeekTrendTBL.OrderAverage6Week
,SnpSht_Update_Dttm = Current_Date
WHERE PROD_EDW_BASE.WSALE_BO_Backorders.BackOrderID = SixWeekTrendTBL.BackOrderID
and ( SnpSht_Update_Dttm is NULL  OR Cast(SnpSht_Update_Dttm as Date) = Current_Date);


-- Update 6 Month
UPDATE PROD_EDW_BASE.WSALE_BO_Backorders
FROM (
	SELECT backorderid, invoicenumber, trnd.wh, trnd.product, trnd.pack, TRIM( trnd.wh) || TRIM(trnd.product) || TRIM(trnd.pack) as WHProdPack,--concatenated product and pack for easy reference to Backorder Table
		CASE WHEN TlMth = 0 THEN 0 ELSE 
			CAST(SUM(COALESCE(mthd1,0) + COALESCE(mthd2,0) + COALESCE(mthd3,0) + COALESCE(mthd4,0) + COALESCE(mthd5,0)) AS DECIMAL(10,2))/COALESCE(TlMth,1) END AS SalesTrend6Month,
		COALESCE(TlMth,0)/6 AS SalesAverage6Month, COALESCE(ord.OrderAverage6Month,0) AS cOrderAverage6Month
FROM (SELECT wh, product, pack, SUM(mth2 - mth1) AS mthd1, SUM(mth3 - mth2) AS mthd2, SUM(mth4 - mth3) AS mthd3, SUM(mth5 - mth4) AS mthd4, SUM(mth6 -mth5) AS mthd5 --perform caluculation for weekly sales differences
FROM (SELECT wh,product,pack , SUM(Month1) AS mth1, SUM(Month2) AS mth2, SUM(Month3) AS mth3, SUM(Month4) AS mth4, SUM(Month5) AS mth5, SUM(Month6) AS mth6 --pivot monthly sales values into single records
		FROM (SELECT	WH,PRODUCT,PACK,   --sum delivery quantities by month
			COALESCE(CASE WHEN DELDT  > DATE - 29 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Month6,
			COALESCE(CASE WHEN DELDT  BETWEEN DATE - 56 AND  DATE - 29 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Month5,
			COALESCE(CASE WHEN DELDT  BETWEEN DATE - 84 AND  DATE - 57 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Month4,
			COALESCE(CASE WHEN DELDT  BETWEEN DATE - 112 AND DATE - 85 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Month3,
			COALESCE(CASE WHEN DELDT  BETWEEN DATE - 140 AND  DATE - 113 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Month2,
			COALESCE(CASE WHEN DELDT  BETWEEN DATE - 168 AND  DATE - 141 AND ord_status = 'posted' THEN SUM(QTY_DEL) END,0) AS Month1
			FROM	PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_COMB
			WHERE pcat BETWEEN 7 AND 26 AND deldt > DATE - 169	--constrained pcat to eliminate fuel and equipment products
			GROUP BY WH,PRODUCT,PACK,   deldt, ord_status)piv	
	GROUP BY WH,PRODUCT,PACK) trnds
GROUP BY wh, product, pack)trnd
LEFT JOIN (SELECT warehouse_code, product, pack, COALESCE(CAST(COUNT(invoice_number) AS DECIMAL(10,2))/6,0) AS OrderAverage6Month --monthly order count
				FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Header                                                                                                                                              
				LEFT JOIN PROD_EDW_BASE_VIEWS.wsale_pds_orders_comb
				ON invoice_number = inv_num
				WHERE pcat BETWEEN 7 AND 26 AND deldt > DATE - 169 AND invoice_status = 'posted'                                                                                                                                	
				GROUP BY warehouse_code,PRODUCT,PACK, invoice_status) ord
ON ord.warehouse_code||ord.product||ord.pack = trnd.wh||trnd.product||trnd.pack
LEFT JOIN (SELECT wh,product,pack , CAST(SUM(QTY_DEL) AS DECIMAL(10,2))/6 AS wksaavg, SUM(qty_del) AS TlMth --weekly sales average                    	
				FROM	PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_COMB                                                                                                                                              
				WHERE pcat BETWEEN 7 AND 26 AND deldt > DATE - 169 AND ord_status = 'posted'                                                                                                                                                                                          	
				GROUP BY WH,PRODUCT,PACK, ord_status) SAvg   	
ON SAvg.wh||SAvg.product||SAvg.pack = trnd.wh||trnd.product||trnd.pack
INNER JOIN PROD_EDW_BASE_VIEWS.WSale_BO_Backorders --join WSALE_BO_Backorders (must cast warehouse code to integer)
ON CAST(warehousecode AS INTEGER)||prodpack = trnd.wh||trnd.product||trnd.pack
GROUP BY  trnd.wh, trnd.product, trnd.pack,tlmth,cOrderAverage6month,backorderid,invoicenumber
) SixMonthTrendTBL
SET SalesTrend6Month = SixMonthTrendTBL.SalesTrend6Month
,OrderAverage6Month= SixMonthTrendTBL.cOrderAverage6Month
,SnpSht_Update_Dttm = Current_Date
WHERE warehousecode||prodpack = WHProdPack
AND PROD_EDW_BASE.WSALE_BO_Backorders.BackorderID = SixMonthTrendTBL.BackOrderID
AND PROD_EDW_BASE.WSALE_BO_Backorders.InvoiceNumber =  SixMonthTrendTBL.InvoiceNumber
and ( SnpSht_Update_Dttm is NULL  OR Cast(SnpSht_Update_Dttm as Date) = Current_Date);
);
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_ARGUS_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='ARGUS PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_ARGUS_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='ARGUS PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('ARGUS PRICES',current_date,(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_ARGUS_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_ARGUS_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.ARGUS_PRICING WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='ARGUS PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CALJET_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='CALJET INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_CALJET_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='CALJET INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('CALJET INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_CALJET_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CALJET_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_CALJET_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='CALJET INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CANADA_PRICE_AUD_SRC()
BEGIN

DECLARE RowCount integer;

IF EXISTS (SELECT * FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='CANADA CRUDE PRICES' AND ETLRunDate=current_date) THEN

 	SELECT SourceRecCount INTO RowCount FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='CANADA CRUDE PRICES' AND ETLRunDate=current_date;
 
        UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
        SET SourceRecCount=RowCount + (SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.PRICE_CANA_CRD_STG),last_update_dttm=current_timestamp(0)
        WHERE DataSourceProvider='CANADA CRUDE PRICES' AND ETLRunDate=current_date;

ELSE

        INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
        VALUES('CANADA CRUDE PRICES',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.PRICE_CANA_CRD_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
END;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CANADA_PRICE_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICE_CANA_CRD_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='CANADA CRUDE PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CATO_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='CATO INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_CATO_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='CATO INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('CATO INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_CATO_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CATO_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_CATO_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='CATO INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CHESAPEAKE_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='CHESAPEAKE INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_ALLIED_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='CHESAPEAKE INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('CHESAPEAKE INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_ALLIED_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_CHESAPEAKE_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='CHESAPEAKE INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_COMPETITOR616_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='COMPETITOR616 PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.COMPETITOR_PRICE_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='COMPETITOR616 PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('COMPETITOR616 PRICES',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.COMPETITOR_PRICE_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_COMPETITOR616_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.COMPETITOR_PRICING WHERE Price_Source='COMPETITOR' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='COMPETITOR616 PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_COMPETITOR617_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='COMPETITOR617 PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.COMPETITOR617_PRICE_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='COMPETITOR617 PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('COMPETITOR617 PRICES',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.COMPETITOR617_PRICE_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_COMPETITOR617_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.COMPETITOR_PRICING WHERE Price_Source='COMPETITOR617' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='COMPETITOR617 PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_COMPETITORMD_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICE_COMP_MD WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='COMPETITOR MIDDAY PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_COOLIDGE_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='COOLIDGE INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_COOLIDGE_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='COOLIDGE INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('COOLIDGE INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_COOLIDGE_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_COOLIDGE_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_COOLIDGE_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='COOLIDGE INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE PROCEDURE PROD_EDW_BASE_VIEWS.SP_DBQL_30DayClean ()


BEGIN


--************** Cull Compressed Tables back to audit retention requirements for TD14 tables
DELETE FROM DBQL.DBC_dbqlexplaintbl_14 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY);

DELETE 
FROM DBQL.DBC_dbqlogtbl_14 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY)
	AND USERNAME IN ('ETLADMPROD','ETLADMDEV','ABU_USER','BAR_USER','CRASHDUMPS','DM_CONTROL'
		,'STATS_USER','SYSTEMFE','UDM_READ','UDM_WRITE1','UDM_WRITE2','UDM_WRITE3','UDM_WRITE4'
		,'UDM_WRITE5','VIEWPOINT');
DELETE FROM DBQL.DBC_dbqlogtbl_14 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '365' DAY);

DELETE FROM DBQL.DBC_DBQLSQLTbl_14 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY)
AND QueryId NOT IN 
	(SELECT QueryId 
	FROM DBQL.DBC_DBQLogTbl_14
	WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY));
DELETE FROM DBQL.DBC_DBQLSQLTbl_14 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '365' DAY);

DELETE FROM DBQL.DBC_DBQLOBJTbl_14 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY)
AND QueryId NOT IN 
	(SELECT QueryId 
	FROM DBQL.DBC_DBQLogTbl_14
	WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY));
DELETE FROM DBQL.DBC_DBQLOBJTbl_14 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '365' DAY);

DELETE FROM DBQL.DBC_eventlog_14 WHERE datefld < CURRENT_DATE-30
	AND USERNAME IN ('ETLADMPROD','ETLADMDEV','ABU_USER','BAR_USER','CRASHDUMPS','DM_CONTROL'
		,'STATS_USER','SYSTEMFE','UDM_READ','UDM_WRITE1','UDM_WRITE2','UDM_WRITE3','UDM_WRITE4'
		,'UDM_WRITE5','VIEWPOINT');
DELETE FROM DBQL.DBC_eventlog_14 WHERE datefld < CURRENT_DATE-365;



--************** Cull Compressed Tables back to audit retention requirements for TD15 tables
DELETE FROM DBQL.DBC_dbqlexplaintbl_15 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY);

DELETE 
FROM DBQL.DBC_dbqlogtbl_15 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY)
	AND USERNAME IN ('ETLADMPROD','ETLADMDEV','ABU_USER','BAR_USER','CRASHDUMPS','DM_CONTROL'
		,'STATS_USER','SYSTEMFE','UDM_READ','UDM_WRITE1','UDM_WRITE2','UDM_WRITE3','UDM_WRITE4'
		,'UDM_WRITE5','VIEWPOINT');
DELETE FROM DBQL.DBC_dbqlogtbl_15 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '365' DAY);

DELETE FROM DBQL.DBC_DBQLSQLTbl_15 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY)
AND QueryId NOT IN 
	(SELECT QueryId 
	FROM DBQL.DBC_DBQLogTbl_15
	WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY));
DELETE FROM DBQL.DBC_DBQLSQLTbl_15 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '365' DAY);

DELETE FROM DBQL.DBC_DBQLOBJTbl_15 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY)
AND QueryId NOT IN 
	(SELECT QueryId 
	FROM DBQL.DBC_DBQLogTbl_15
	WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY));
DELETE FROM DBQL.DBC_DBQLOBJTbl_15 WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '365' DAY);

DELETE FROM DBQL.DBC_eventlog_15 WHERE datefld < CURRENT_DATE-30
	AND USERNAME IN ('ETLADMPROD','ETLADMDEV','ABU_USER','BAR_USER','CRASHDUMPS','DM_CONTROL'
		,'STATS_USER','SYSTEMFE','UDM_READ','UDM_WRITE1','UDM_WRITE2','UDM_WRITE3','UDM_WRITE4'
		,'UDM_WRITE5','VIEWPOINT');
DELETE FROM DBQL.DBC_eventlog_15 WHERE datefld < CURRENT_DATE-365;



--************** Move Data from DBC to TD15 Compressed Tables

MERGE INTO DBQL.dbc_dbqlogtbl_15
USING (SELECT * FROM dbc.dbqlogtbl) AS dbqlogtbl
ON
	(
	dbc_dbqlogtbl_15.procid = dbqlogtbl.procid
		AND dbc_dbqlogtbl_15.collecttimestamp = dbqlogtbl.collecttimestamp
		AND dbc_dbqlogtbl_15.queryid = dbqlogtbl.queryid
		AND dbc_dbqlogtbl_15.zoneid = dbqlogtbl.zoneid
	)
WHEN MATCHED THEN 
UPDATE SET
	UserID = dbqlogtbl.UserID
	,AcctString = dbqlogtbl.AcctString
	,ExpandAcctString = dbqlogtbl.ExpandAcctString
	,SessionId = dbqlogtbl.SessionID
	,LogicalHostID = dbqlogtbl.LogicalHostID
	,RequestNum = dbqlogtbl.RequestNum
	,InternalRequestNum = dbqlogtbl.InternalRequestNum
	,LogonDateTime = dbqlogtbl.LogonDateTime
	,AcctStringTime = dbqlogtbl.AcctStringTime
	,AcctStringHour = dbqlogtbl.AcctStringHour
	,AcctStringDate = dbqlogtbl.AcctStringDate
	,LogonSource = dbqlogtbl.LogonSource
	,AppID = dbqlogtbl.AppID
	,ClientID = dbqlogtbl.ClientID
	,ClientAddr = dbqlogtbl.ClientAddr
	,QueryBand = dbqlogtbl.QueryBand
	,ProfileID = dbqlogtbl.ProfileID
	,StartTime = dbqlogtbl.StartTime
	,FirstStepTime = dbqlogtbl.FirstStepTime
	,FirstRespTime = dbqlogtbl.FirstRespTime
	,LastStateChange = dbqlogtbl.LastStateChange
	,NumSteps = dbqlogtbl.NumSteps
	,NumStepswPar = dbqlogtbl.NumStepswPar
	,MaxStepsInPar = dbqlogtbl.MaxStepsInPar
	,NumResultRows = dbqlogtbl.NumResultRows
	,TotalIOCount = dbqlogtbl.TotalIOCount
	,AMPCPUTime = dbqlogtbl.AMPCPUTime
	,ParserCPUTime = dbqlogtbl.ParserCPUTime
	,UtilityByteCount = dbqlogtbl.UtilityByteCount
	,UtilityRowCount = dbqlogtbl.UtilityRowCount
	,ERRORCODE = dbqlogtbl.ERRORCODE
	,ErrorText = dbqlogtbl.ErrorText
	,WarningOnly = dbqlogtbl.WarningOnly
	,DelayTime = dbqlogtbl.DelayTime
	,AbortFlag = dbqlogtbl.AbortFlag
	,CacheFlag = dbqlogtbl.CacheFlag
	,StatementType = dbqlogtbl.StatementType
	,QueryText = dbqlogtbl.QueryText
	,NumOfActiveAMPs = dbqlogtbl.NumOfActiveAMPs
	,MaxAMPCPUTime = dbqlogtbl.MaxAMPCPUTime
	,MaxCPUAmpNumber = dbqlogtbl.MaxCPUAmpNumber
	,MinAmpCPUTime = dbqlogtbl.MinAmpCPUTime
	,MaxAmpIO = dbqlogtbl.MaxAmpIO
	,MaxIOAmpNumber = dbqlogtbl.MaxIOAmpNumber
	,MinAmpIO = dbqlogtbl.MinAmpIO
	,SpoolUsage = dbqlogtbl.SpoolUsage
	,WDID = dbqlogtbl.WDID
	,OPEnvID = dbqlogtbl.OpEnvID
	,SysConID = dbqlogtbl.SysConID
	,LSN = dbqlogtbl.LSN
	,NoClassification = dbqlogtbl.NoClassification
	,WDOverride = dbqlogtbl.WDOverride
	,ResponseTimeMet = dbqlogtbl.ResponseTimeMet
	,ExceptionValue = dbqlogtbl.ExceptionValue
	,FinalWDID = dbqlogtbl.FinalWDID
	,TDWMEstMaxRows = dbqlogtbl.TDWMEstMaxRows
	,TDWMEstLastRows = dbqlogtbl.TDWMEstLastRows
	,TDWMEstTotalTime = dbqlogtbl.TDWMEstTotalTime
	,TDWMAllAmpFlag = dbqlogtbl.TDWMAllAmpFlag
	,TDWMConfLevelUsed = dbqlogtbl.TDWMConfLevelUsed
	,TDWMRuleID = dbqlogtbl.TDWMRuleID
	,USERNAME = dbqlogtbl.USERNAME
	,DefaultDatabase = dbqlogtbl.DefaultDatabase
	,AMPCPUTimeNorm = dbqlogtbl.AMPCPUTimeNorm
	,ParserCPUTimeNorm = dbqlogtbl.ParserCPUTimeNorm
	,MaxAMPCPUTimeNorm = dbqlogtbl.MaxAMPCPUTimeNorm
	,MaxCPUAmpNumberNorm = dbqlogtbl.MaxCPUAmpNumberNorm
	,MinAmpCPUTimeNorm = dbqlogtbl.MinAmpCPUTimeNorm
	,EstResultRows = dbqlogtbl.EstResultRows
	,EstProcTime = dbqlogtbl.EstProcTime
	,EstMaxRowCount = dbqlogtbl.EstMaxRowCount
	,ProxyUser = dbqlogtbl.ProxyUser
	,ProxyRole = dbqlogtbl.ProxyRole
	,StatementGroup = dbqlogtbl.StatementGroup
	,SessionTemporalQualifier = dbqlogtbl.SessionTemporalQualifier
	,CalendarName = dbqlogtbl.CalendarName
	,SessionWDID = dbqlogtbl.SessionWDID
	,DataCollectAlg = dbqlogtbl.DataCollectAlg
	,ParserExpReq = dbqlogtbl.ParserExpReq
	,CallNestingLevel = dbqlogtbl.CallNestingLevel
	,NumRequestCtx = dbqlogtbl.NumRequestCtx
	,KeepFlag = dbqlogtbl.KeepFlag
	,QueryRedriven = dbqlogtbl.QueryRedriven
	,ReDriveKind = dbqlogtbl.ReDriveKind
	,CPUDecayLevel = dbqlogtbl.CPUDecayLevel
	,IODecayLevel = dbqlogtbl.IODecayLevel
	,TacticalCPUException = dbqlogtbl.TacticalCPUException
	,TacticalIOException = dbqlogtbl.TacticalIOException
	,SeqRespTime = dbqlogtbl.SeqRespTime
	,ReqIOKB = dbqlogtbl.ReqIOKB
	,ReqPhysIO = dbqlogtbl.ReqPhysIO
	,ReqPhysIOKB = dbqlogtbl.ReqPhysIOKB
	,NumFragments = dbqlogtbl.NumFragments
	,CheckpointNum = dbqlogtbl.CheckpointNum
	,UnityTime = dbqlogtbl.UnityTime
	,LockDelay = dbqlogtbl.LockDelay
	,LastRespTime = dbqlogtbl.LastRespTime
	,DisCPUTime = dbqlogtbl.DisCPUTime
	,Statements = dbqlogtbl.Statements
	,DisCPUTimeNorm = dbqlogtbl.DisCPUTimeNorm
	,TxnMode = dbqlogtbl.TxnMode
	,RequestMode = dbqlogtbl.RequestMode
	,UtilityInfoAvailable = dbqlogtbl.UtilityInfoAvailable
	,UnitySQL = dbqlogtbl.UnitySQL
	,ThrottleBypassed = dbqlogtbl.ThrottleBypassed
	,DBQLStatus = dbqlogtbl.DBQLStatus
	,IterationCount = dbqlogtbl.IterationCount
	,VHLogicalIO = dbqlogtbl.VHLogicalIO
	,VHPhysIO = dbqlogtbl.VHPhysIO
	,VHLogicalIOKB = dbqlogtbl.VHLogicalIOKB
	,VHPhysIOKB = dbqlogtbl.VHPhysIOKB
	,TDWMEstMemUsage = dbqlogtbl.TDWMEstMemUsage
	,MaxStepMemory = dbqlogtbl.MaxStepMemory
	,TotalServerByteCount = dbqlogtbl.TotalServerByteCount
	,ProxyUserID = dbqlogtbl.ProxyUserID
	,TxnUniq = dbqlogtbl.TxnUniq
	,LockLevel = dbqlogtbl.LockLevel
	,TTGRANULARITY = dbqlogtbl.TTGRANULARITY
	,ExtraField1 = dbqlogtbl.ExtraField1
	,ExtraField2 = dbqlogtbl.ExtraField2
	,ExtraField3 = dbqlogtbl.ExtraField3
	,ExtraField4 = dbqlogtbl.ExtraField4
	,ExtraField5 = dbqlogtbl.ExtraField5
	,ExtraField6 = dbqlogtbl.ExtraField6
	,ExtraField7 = dbqlogtbl.ExtraField7
	,ExtraField8 = dbqlogtbl.ExtraField8
	,ExtraField9 = dbqlogtbl.ExtraField9
	,ExtraField10 = dbqlogtbl.ExtraField10
	,ExtraField11 = dbqlogtbl.ExtraField11
	,ExtraField12 = dbqlogtbl.ExtraField12
	,ExtraField13 = dbqlogtbl.ExtraField13
	,ExtraField14 = dbqlogtbl.ExtraField14
	,ExtraField15 = dbqlogtbl.ExtraField15
	,ExtraField16 = dbqlogtbl.ExtraField16
	,ExtraField17 = dbqlogtbl.ExtraField17
	,ExtraField18 = dbqlogtbl.ExtraField18
	,ExtraField19 = dbqlogtbl.ExtraField19
	,ExtraField20 = dbqlogtbl.ExtraField20
	,ExtraField21 = dbqlogtbl.ExtraField21
	,ExtraField22 = dbqlogtbl.ExtraField22
	,ExtraField23 = dbqlogtbl.ExtraField23
	,ExtraField24 = dbqlogtbl.ExtraField24
	,ExtraField25 = dbqlogtbl.ExtraField25
	,ExtraField26 = dbqlogtbl.ExtraField26
	,ExtraField27 = dbqlogtbl.ExtraField27
	,ExtraField28 = dbqlogtbl.ExtraField28
	,ExtraField29 = dbqlogtbl.ExtraField29
	,ExtraField30 = dbqlogtbl.ExtraField30
	,ExtraField31 = dbqlogtbl.ExtraField31
	,ExtraField32 = dbqlogtbl.ExtraField32
	,ExtraField33 = dbqlogtbl.ExtraField33
	,ExtraField34 = dbqlogtbl.ExtraField34
	,ExtraField35 = dbqlogtbl.ExtraField35
	,ExtraField36 = dbqlogtbl.ExtraField36
	,ExtraField37 = dbqlogtbl.ExtraField37
	,ExtraField38 = dbqlogtbl.ExtraField38
	,ExtraField39 = dbqlogtbl.ExtraField39
	,ExtraField40 = dbqlogtbl.ExtraField40
	,ExtraField41 = dbqlogtbl.ExtraField41
	,ExtraField42 = dbqlogtbl.ExtraField42
	,ExtraField43 = dbqlogtbl.ExtraField43
	,ExtraField44 = dbqlogtbl.ExtraField44
	,ExtraField45 = dbqlogtbl.ExtraField45
	,ExtraField46 = dbqlogtbl.ExtraField46
	,ExtraField47 = dbqlogtbl.ExtraField47
	,ExtraField48 = dbqlogtbl.ExtraField48
	,ExtraField49 = dbqlogtbl.ExtraField49
	,ExtraField50 = dbqlogtbl.ExtraField50
	,ExtraField51 = dbqlogtbl.ExtraField51
	,ExtraField52 = dbqlogtbl.ExtraField52
	,ExtraField53 = dbqlogtbl.ExtraField53
	,ExtraField54 = dbqlogtbl.ExtraField54
	
WHEN NOT MATCHED THEN
INSERT
	(
dbc_dbqlogtbl_15.ProcID, dbc_dbqlogtbl_15.CollectTimeStamp, dbc_dbqlogtbl_15.QueryID, dbc_dbqlogtbl_15.ZoneId
	,dbc_dbqlogtbl_15.UserID,dbc_dbqlogtbl_15.AcctString,dbc_dbqlogtbl_15.ExpandAcctString,dbc_dbqlogtbl_15.SessionID
	,dbc_dbqlogtbl_15.LogicalHostID,dbc_dbqlogtbl_15.RequestNum,dbc_dbqlogtbl_15.InternalRequestNum,dbc_dbqlogtbl_15.LogonDateTime
	,dbc_dbqlogtbl_15.AcctStringTime,dbc_dbqlogtbl_15.AcctStringHour,dbc_dbqlogtbl_15.AcctStringDate,dbc_dbqlogtbl_15.LogonSource
	,dbc_dbqlogtbl_15.AppID,dbc_dbqlogtbl_15.ClientID,dbc_dbqlogtbl_15.ClientAddr,dbc_dbqlogtbl_15.QueryBand,dbc_dbqlogtbl_15.ProfileID
	,dbc_dbqlogtbl_15.StartTime,dbc_dbqlogtbl_15.FirstStepTime,dbc_dbqlogtbl_15.FirstRespTime,dbc_dbqlogtbl_15.LastStateChange
	,dbc_dbqlogtbl_15.NumSteps,dbc_dbqlogtbl_15.NumStepswPar,dbc_dbqlogtbl_15.MaxStepsInPar,dbc_dbqlogtbl_15.NumResultRows
	,dbc_dbqlogtbl_15.TotalIOCount,dbc_dbqlogtbl_15.AMPCPUTime,dbc_dbqlogtbl_15.ParserCPUTime,dbc_dbqlogtbl_15.UtilityByteCount
	,dbc_dbqlogtbl_15.UtilityRowCount,dbqlogtbl.ERRORCODE,dbc_dbqlogtbl_15.ErrorText,dbc_dbqlogtbl_15.WarningOnly,dbc_dbqlogtbl_15.DelayTime
	,dbc_dbqlogtbl_15.AbortFlag,dbc_dbqlogtbl_15.CacheFlag
	,dbc_dbqlogtbl_15.StatementType,dbc_dbqlogtbl_15.QueryText,dbc_dbqlogtbl_15.NumOfActiveAMPs,dbc_dbqlogtbl_15.MaxAMPCPUTime
	,dbc_dbqlogtbl_15.MaxCPUAmpNumber,dbc_dbqlogtbl_15.MinAmpCPUTime,dbc_dbqlogtbl_15.MaxAmpIO,dbc_dbqlogtbl_15.MaxIOAmpNumber
	,dbc_dbqlogtbl_15.MinAmpIO,dbc_dbqlogtbl_15.SpoolUsage,dbc_dbqlogtbl_15.WDID,dbc_dbqlogtbl_15.OpEnvID,dbc_dbqlogtbl_15.SysConID
	,dbc_dbqlogtbl_15.LSN,dbc_dbqlogtbl_15.NoClassification,dbc_dbqlogtbl_15.WDOverride,dbc_dbqlogtbl_15.ResponseTimeMet
	,dbc_dbqlogtbl_15.ExceptionValue,dbc_dbqlogtbl_15.FinalWDID,dbc_dbqlogtbl_15.TDWMEstMaxRows,dbc_dbqlogtbl_15.TDWMEstLastRows
	,dbc_dbqlogtbl_15.TDWMEstTotalTime,dbc_dbqlogtbl_15.TDWMAllAmpFlag,dbc_dbqlogtbl_15.TDWMConfLevelUsed,dbc_dbqlogtbl_15.TDWMRuleID
	,dbc_dbqlogtbl_15.USERNAME,dbc_dbqlogtbl_15.DefaultDatabase,dbc_dbqlogtbl_15.AMPCPUTimeNorm,dbc_dbqlogtbl_15.ParserCPUTimeNorm
	,dbc_dbqlogtbl_15.MaxAMPCPUTimeNorm,dbc_dbqlogtbl_15.MaxCPUAmpNumberNorm,dbc_dbqlogtbl_15.MinAmpCPUTimeNorm
	,dbc_dbqlogtbl_15.EstResultRows,dbc_dbqlogtbl_15.EstProcTime,dbc_dbqlogtbl_15.EstMaxRowCount,dbc_dbqlogtbl_15.ProxyUser
	,dbc_dbqlogtbl_15.ProxyRole,dbc_dbqlogtbl_15.StatementGroup,dbc_dbqlogtbl_15.SessionTemporalQualifier,dbc_dbqlogtbl_15.CalendarName
	,dbc_dbqlogtbl_15.SessionWDID,dbc_dbqlogtbl_15.DataCollectAlg,dbc_dbqlogtbl_15.ParserExpReq,dbc_dbqlogtbl_15.CallNestingLevel
	,dbc_dbqlogtbl_15.NumRequestCtx,dbc_dbqlogtbl_15.KeepFlag,dbc_dbqlogtbl_15.QueryRedriven,dbc_dbqlogtbl_15.ReDriveKind
	,dbc_dbqlogtbl_15.CPUDecayLevel,dbc_dbqlogtbl_15.IODecayLevel,dbc_dbqlogtbl_15.TacticalCPUException,dbc_dbqlogtbl_15.TacticalIOException
	,dbc_dbqlogtbl_15.SeqRespTime,dbc_dbqlogtbl_15.ReqIOKB,dbc_dbqlogtbl_15.ReqPhysIO,dbc_dbqlogtbl_15.ReqPhysIOKB
	,dbc_dbqlogtbl_15.NumFragments, dbc_dbqlogtbl_15.CheckpointNum, dbc_dbqlogtbl_15.UnityTime, dbc_dbqlogtbl_15.LockDelay, dbc_dbqlogtbl_15.LastRespTime
	,dbc_dbqlogtbl_15.DisCPUTime, dbc_dbqlogtbl_15.Statements, dbc_dbqlogtbl_15.DisCPUTimeNorm, dbc_dbqlogtbl_15.TxnMode, dbc_dbqlogtbl_15.RequestMode
	,dbc_dbqlogtbl_15.UtilityInfoAvailable, dbc_dbqlogtbl_15.UnitySQL, dbc_dbqlogtbl_15.ThrottleBypassed, dbc_dbqlogtbl_15.DBQLStatus, dbc_dbqlogtbl_15.IterationCount
	,dbc_dbqlogtbl_15.VHLogicalIO, dbc_dbqlogtbl_15.VHPhysIO, dbc_dbqlogtbl_15.VHLogicalIOKB, dbc_dbqlogtbl_15.VHPhysIOKB, dbc_dbqlogtbl_15.TDWMEstMemUsage
	,dbc_dbqlogtbl_15.MaxStepMemory, dbc_dbqlogtbl_15.TotalServerByteCount, dbc_dbqlogtbl_15.ProxyUserID, dbc_dbqlogtbl_15.TxnUniq, dbc_dbqlogtbl_15.LockLevel
	,dbc_dbqlogtbl_15.TTGRANULARITY
	,dbc_dbqlogtbl_15.ExtraField1
	,dbc_dbqlogtbl_15.ExtraField2,dbc_dbqlogtbl_15.ExtraField3,dbc_dbqlogtbl_15.ExtraField4,dbc_dbqlogtbl_15.ExtraField5,dbc_dbqlogtbl_15.ExtraField6
	,dbc_dbqlogtbl_15.ExtraField7,dbc_dbqlogtbl_15.ExtraField8,dbc_dbqlogtbl_15.ExtraField9,dbc_dbqlogtbl_15.ExtraField10,dbc_dbqlogtbl_15.ExtraField11
	,dbc_dbqlogtbl_15.ExtraField12,dbc_dbqlogtbl_15.ExtraField13,dbc_dbqlogtbl_15.ExtraField14,dbc_dbqlogtbl_15.ExtraField15,dbc_dbqlogtbl_15.ExtraField16
	,dbc_dbqlogtbl_15.ExtraField17,dbc_dbqlogtbl_15.ExtraField18,dbc_dbqlogtbl_15.ExtraField19,dbc_dbqlogtbl_15.ExtraField20,dbc_dbqlogtbl_15.ExtraField21
	,dbc_dbqlogtbl_15.ExtraField22,dbc_dbqlogtbl_15.ExtraField23,dbc_dbqlogtbl_15.ExtraField24,dbc_dbqlogtbl_15.ExtraField25,dbc_dbqlogtbl_15.ExtraField26
	,dbc_dbqlogtbl_15.ExtraField27,dbc_dbqlogtbl_15.ExtraField28,dbc_dbqlogtbl_15.ExtraField29,dbc_dbqlogtbl_15.ExtraField30,dbc_dbqlogtbl_15.ExtraField31
	,dbc_dbqlogtbl_15.ExtraField32,dbc_dbqlogtbl_15.ExtraField33,dbc_dbqlogtbl_15.ExtraField34,dbc_dbqlogtbl_15.ExtraField35,dbc_dbqlogtbl_15.ExtraField36
	,dbc_dbqlogtbl_15.ExtraField37,dbc_dbqlogtbl_15.ExtraField38,dbc_dbqlogtbl_15.ExtraField39
	,dbc_dbqlogtbl_15.ExtraField40, dbc_dbqlogtbl_15.ExtraField41, dbc_dbqlogtbl_15.ExtraField42, dbc_dbqlogtbl_15.ExtraField43, dbc_dbqlogtbl_15.ExtraField44
	,dbc_dbqlogtbl_15.ExtraField45, dbc_dbqlogtbl_15.ExtraField46, dbc_dbqlogtbl_15.ExtraField47, dbc_dbqlogtbl_15.ExtraField48, dbc_dbqlogtbl_15.ExtraField49
	,dbc_dbqlogtbl_15.ExtraField50, dbc_dbqlogtbl_15.ExtraField51, dbc_dbqlogtbl_15.ExtraField52, dbc_dbqlogtbl_15.ExtraField53, dbc_dbqlogtbl_15.ExtraField54
	)
VALUES
	(
dbqlogtbl.ProcID, dbqlogtbl.CollectTimeStamp, dbqlogtbl.QueryID, dbqlogtbl.ZoneId
	,dbqlogtbl.UserID,dbqlogtbl.AcctString,dbqlogtbl.ExpandAcctString,dbqlogtbl.SessionID
	,dbqlogtbl.LogicalHostID,dbqlogtbl.RequestNum,dbqlogtbl.InternalRequestNum,dbqlogtbl.LogonDateTime
	,dbqlogtbl.AcctStringTime,dbqlogtbl.AcctStringHour,dbqlogtbl.AcctStringDate,dbqlogtbl.LogonSource
	,dbqlogtbl.AppID,dbqlogtbl.ClientID,dbqlogtbl.ClientAddr,dbqlogtbl.QueryBand,dbqlogtbl.ProfileID
	,dbqlogtbl.StartTime,dbqlogtbl.FirstStepTime,dbqlogtbl.FirstRespTime,dbqlogtbl.LastStateChange
	,dbqlogtbl.NumSteps,dbqlogtbl.NumStepswPar,dbqlogtbl.MaxStepsInPar,dbqlogtbl.NumResultRows
	,dbqlogtbl.TotalIOCount,dbqlogtbl.AMPCPUTime,dbqlogtbl.ParserCPUTime,dbqlogtbl.UtilityByteCount
	,dbqlogtbl.UtilityRowCount,dbqlogtbl.ERRORCODE,dbqlogtbl.ErrorText,dbqlogtbl.WarningOnly,dbqlogtbl.DelayTime
	,dbqlogtbl.AbortFlag,dbqlogtbl.CacheFlag
	,dbqlogtbl.StatementType,dbqlogtbl.QueryText,dbqlogtbl.NumOfActiveAMPs,dbqlogtbl.MaxAMPCPUTime
	,dbqlogtbl.MaxCPUAmpNumber,dbqlogtbl.MinAmpCPUTime,dbqlogtbl.MaxAmpIO,dbqlogtbl.MaxIOAmpNumber
	,dbqlogtbl.MinAmpIO,dbqlogtbl.SpoolUsage,dbqlogtbl.WDID,dbqlogtbl.OpEnvID,dbqlogtbl.SysConID
	,dbqlogtbl.LSN,dbqlogtbl.NoClassification,dbqlogtbl.WDOverride,dbqlogtbl.ResponseTimeMet
	,dbqlogtbl.ExceptionValue,dbqlogtbl.FinalWDID,dbqlogtbl.TDWMEstMaxRows,dbqlogtbl.TDWMEstLastRows
	,dbqlogtbl.TDWMEstTotalTime,dbqlogtbl.TDWMAllAmpFlag,dbqlogtbl.TDWMConfLevelUsed,dbqlogtbl.TDWMRuleID
	,dbqlogtbl.USERNAME,dbqlogtbl.DefaultDatabase,dbqlogtbl.AMPCPUTimeNorm,dbqlogtbl.ParserCPUTimeNorm
	,dbqlogtbl.MaxAMPCPUTimeNorm,dbqlogtbl.MaxCPUAmpNumberNorm,dbqlogtbl.MinAmpCPUTimeNorm
	,dbqlogtbl.EstResultRows,dbqlogtbl.EstProcTime,dbqlogtbl.EstMaxRowCount,dbqlogtbl.ProxyUser
	,dbqlogtbl.ProxyRole,dbqlogtbl.StatementGroup,dbqlogtbl.SessionTemporalQualifier,dbqlogtbl.CalendarName
	,dbqlogtbl.SessionWDID,dbqlogtbl.DataCollectAlg,dbqlogtbl.ParserExpReq,dbqlogtbl.CallNestingLevel
	,dbqlogtbl.NumRequestCtx,dbqlogtbl.KeepFlag,dbqlogtbl.QueryRedriven,dbqlogtbl.ReDriveKind
	,dbqlogtbl.CPUDecayLevel,dbqlogtbl.IODecayLevel,dbqlogtbl.TacticalCPUException,dbqlogtbl.TacticalIOException
	,dbqlogtbl.SeqRespTime,dbqlogtbl.ReqIOKB,dbqlogtbl.ReqPhysIO,dbqlogtbl.ReqPhysIOKB
	,dbqlogtbl.NumFragments, dbqlogtbl.CheckpointNum, dbqlogtbl.UnityTime, dbqlogtbl.LockDelay, dbqlogtbl.LastRespTime
	,dbqlogtbl.DisCPUTime, dbqlogtbl.Statements, dbqlogtbl.DisCPUTimeNorm, dbqlogtbl.TxnMode, dbqlogtbl.RequestMode
	,dbqlogtbl.UtilityInfoAvailable, dbqlogtbl.UnitySQL, dbqlogtbl.ThrottleBypassed, dbqlogtbl.DBQLStatus, dbqlogtbl.IterationCount
	,dbqlogtbl.VHLogicalIO, dbqlogtbl.VHPhysIO, dbqlogtbl.VHLogicalIOKB, dbqlogtbl.VHPhysIOKB, dbqlogtbl.TDWMEstMemUsage
	,dbqlogtbl.MaxStepMemory, dbqlogtbl.TotalServerByteCount, dbqlogtbl.ProxyUserID, dbqlogtbl.TxnUniq, dbqlogtbl.LockLevel
	,dbqlogtbl.TTGRANULARITY
	,dbqlogtbl.ExtraField1
	,dbqlogtbl.ExtraField2,dbqlogtbl.ExtraField3,dbqlogtbl.ExtraField4,dbqlogtbl.ExtraField5,dbqlogtbl.ExtraField6
	,dbqlogtbl.ExtraField7,dbqlogtbl.ExtraField8,dbqlogtbl.ExtraField9,dbqlogtbl.ExtraField10,dbqlogtbl.ExtraField11
	,dbqlogtbl.ExtraField12,dbqlogtbl.ExtraField13,dbqlogtbl.ExtraField14,dbqlogtbl.ExtraField15,dbqlogtbl.ExtraField16
	,dbqlogtbl.ExtraField17,dbqlogtbl.ExtraField18,dbqlogtbl.ExtraField19,dbqlogtbl.ExtraField20,dbqlogtbl.ExtraField21
	,dbqlogtbl.ExtraField22,dbqlogtbl.ExtraField23,dbqlogtbl.ExtraField24,dbqlogtbl.ExtraField25,dbqlogtbl.ExtraField26
	,dbqlogtbl.ExtraField27,dbqlogtbl.ExtraField28,dbqlogtbl.ExtraField29,dbqlogtbl.ExtraField30,dbqlogtbl.ExtraField31
	,dbqlogtbl.ExtraField32,dbqlogtbl.ExtraField33,dbqlogtbl.ExtraField34,dbqlogtbl.ExtraField35,dbqlogtbl.ExtraField36
	,dbqlogtbl.ExtraField37,dbqlogtbl.ExtraField38,dbqlogtbl.ExtraField39
	,dbqlogtbl.ExtraField40, dbqlogtbl.ExtraField41, dbqlogtbl.ExtraField42, dbqlogtbl.ExtraField43, dbqlogtbl.ExtraField44
	,dbqlogtbl.ExtraField45, dbqlogtbl.ExtraField46, dbqlogtbl.ExtraField47, dbqlogtbl.ExtraField48, dbqlogtbl.ExtraField49
	,dbqlogtbl.ExtraField50, dbqlogtbl.ExtraField51, dbqlogtbl.ExtraField52, dbqlogtbl.ExtraField53, dbqlogtbl.ExtraField54
	)
;

MERGE INTO  DBQL.dbc_dbqlexplaintbl_15
USING (SELECT * FROM dbc.dbqlexplaintbl) AS dbqlexplaintbl
ON
	(
	dbc_dbqlexplaintbl_15.procid = dbqlexplaintbl.procid
		AND dbc_dbqlexplaintbl_15.collecttimestamp = dbqlexplaintbl.collecttimestamp
		AND dbc_dbqlexplaintbl_15.queryid = dbqlexplaintbl.queryid
		AND dbc_dbqlexplaintbl_15.zoneid = dbqlexplaintbl.zoneid
		AND dbc_dbqlexplaintbl_15.exprowno = dbqlexplaintbl.exprowno
	)
WHEN MATCHED THEN 
UPDATE SET
	Explaintext = dbqlexplaintbl.ExplainText
	,ExtraField1 = dbqlexplaintbl.ExtraField1
	,ExtraField2 = dbqlexplaintbl.ExtraField2
WHEN NOT MATCHED THEN
INSERT
	(
	dbc_dbqlexplaintbl_15.procid, dbc_dbqlexplaintbl_15.collecttimestamp,dbc_dbqlexplaintbl_15.queryid
		,dbc_dbqlexplaintbl_15.zoneid, dbc_dbqlexplaintbl_15.exprowno, dbc_dbqlexplaintbl_15.explaintext
		,dbc_dbqlexplaintbl_15.ExtraField1, dbc_dbqlexplaintbl_15.ExtraField2
	)
VALUES
	(
		dbqlexplaintbl.procid, dbqlexplaintbl.collecttimestamp,dbqlexplaintbl.queryid,dbqlexplaintbl.zoneid
		,dbqlexplaintbl.exprowno, dbqlexplaintbl.explaintext,dbqlexplaintbl.ExtraField1, dbqlexplaintbl.ExtraField2
	)
;

MERGE INTO  DBQL.dbc_dbqlobjtbl_15
USING (SELECT * FROM dbc.dbqlobjtbl) AS dbqlobjtbl
ON
	(
	dbc_dbqlobjtbl_15.procid = dbqlobjtbl.procid
		AND dbc_dbqlobjtbl_15.collecttimestamp = dbqlobjtbl.collecttimestamp
		AND dbc_dbqlobjtbl_15.queryid = dbqlobjtbl.queryid
		AND dbc_dbqlobjtbl_15.zoneid = dbqlobjtbl.zoneid
		AND dbc_dbqlobjtbl_15.ObjectColumnName = dbqlobjtbl.ObjectColumnName
		AND dbc_dbqlobjtbl_15.ObjectID = dbqlobjtbl.ObjectID
		AND dbc_dbqlobjtbl_15.ObjectNum = dbqlobjtbl.ObjectNum
	)
WHEN MATCHED THEN 
UPDATE SET
      ObjectDatabaseName = dbqlobjtbl.ObjectDatabaseName
      ,ObjectTableName = dbqlobjtbl.ObjectTableName
      ,ObjectType = dbqlobjtbl.ObjectType
      ,FreqofUse = dbqlobjtbl.FreqofUse
      ,TypeofUse = dbqlobjtbl.TypeofUse
	  ,ExtraField1 = dbqlobjtbl.ExtraField1
      ,ExtraField2 = dbqlobjtbl.ExtraField2
      ,ExtraField3 = dbqlobjtbl.ExtraField3
      ,ExtraField4 = dbqlobjtbl.ExtraField4
      ,ExtraField5 = dbqlobjtbl.ExtraField5
WHEN NOT MATCHED THEN
INSERT
	(
	dbc_dbqlobjtbl_15.procid, dbc_dbqlobjtbl_15.collecttimestamp,dbc_dbqlobjtbl_15.queryid,dbc_dbqlobjtbl_15.zoneid
		,dbc_dbqlobjtbl_15.ObjectDatabaseName
		,dbc_dbqlobjtbl_15.ObjectTableName,dbc_dbqlobjtbl_15.ObjectColumnName, dbc_dbqlobjtbl_15.ObjectID
		,dbc_dbqlobjtbl_15.ObjectNum,dbc_dbqlobjtbl_15.ObjectType,dbc_dbqlobjtbl_15.FreqofUse,dbc_dbqlobjtbl_15.TypeofUse
	  ,dbc_dbqlobjtbl_15.ExtraField1, dbc_dbqlobjtbl_15.ExtraField2, dbc_dbqlobjtbl_15.ExtraField3, dbc_dbqlobjtbl_15.ExtraField4
      ,dbc_dbqlobjtbl_15.ExtraField5
	)
VALUES
	(
	dbqlobjtbl.procid, dbqlobjtbl.collecttimestamp,dbqlobjtbl.queryid,dbqlobjtbl.zoneid
		,dbqlobjtbl.ObjectDatabaseName
		,dbqlobjtbl.ObjectTableName,dbqlobjtbl.ObjectColumnName, dbqlobjtbl.ObjectID
		,dbqlobjtbl.ObjectNum,dbqlobjtbl.ObjectType,dbqlobjtbl.FreqofUse,dbqlobjtbl.TypeofUse
	  ,dbqlobjtbl.ExtraField1, dbqlobjtbl.ExtraField2, dbqlobjtbl.ExtraField3, dbqlobjtbl.ExtraField4
      ,dbqlobjtbl.ExtraField5
	)
;

MERGE INTO  DBQL.dbc_dbqlsqltbl_15
USING (SELECT * FROM dbc.dbqlsqltbl) AS dbqlsqltbl
ON
	(
	dbc_dbqlsqltbl_15.procid = dbqlsqltbl.procid
		AND dbc_dbqlsqltbl_15.collecttimestamp = dbqlsqltbl.collecttimestamp
		AND dbc_dbqlsqltbl_15.queryid = dbqlsqltbl.queryid
		AND dbc_dbqlsqltbl_15.zoneid = dbqlsqltbl.zoneid
		AND dbc_dbqlsqltbl_15.SqlRowNo = dbqlsqltbl.SqlRowNo
	)
WHEN MATCHED THEN 
UPDATE SET
      SQLTextInfo = dbqlsqltbl.SQLTextInfo
	  ,ExtraField1 = dbqlsqltbl.ExtraField1
	  ,ExtraField2 = dbqlsqltbl.ExtraField2
WHEN NOT MATCHED THEN
INSERT
	(
	dbc_dbqlsqltbl_15.procid, dbc_dbqlsqltbl_15.collecttimestamp,dbc_dbqlsqltbl_15.queryid,dbc_dbqlsqltbl_15.zoneid
	,dbc_dbqlsqltbl_15.SqlRowNo, dbc_dbqlsqltbl_15.SqlTextInfo,dbc_dbqlsqltbl_15.ExtraField1,dbc_dbqlsqltbl_15.ExtraField2
	)
VALUES
	(
	dbqlsqltbl.procid, dbqlsqltbl.collecttimestamp,dbqlsqltbl.queryid,dbqlsqltbl.zoneid,dbqlsqltbl.SQLRowNo
		,dbqlsqltbl.SQLTextInfo,dbqlsqltbl.ExtraField1,dbqlsqltbl.ExtraField2
	)
;


MERGE INTO  DBQL.dbc_EventLog_15
USING (SELECT * FROM dbc.EventLog) AS EventLog
ON
	(
	dbc_EventLog_15.datefld = EventLog.datefld
		AND dbc_EventLog_15.timefld = EventLog.timefld
		AND dbc_EventLog_15.sessionno = EventLog.sessionno
		AND dbc_EventLog_15.zoneid = EventLog.zoneid
	)
WHEN MATCHED THEN 
UPDATE SET
     USERNAME = EventLog.USERNAME
      ,AccountName = EventLog.AccountName
      ,Event = EventLog.Event
      ,LogicalHostId = EventLog.LogicalHostId
      ,IFPNo = EventLog.IFPNo
      ,LogonDate = EventLog.LogonDate
      ,LogonTime = EventLog.LogonTime
      ,LogonSource = EventLog.LogonSource
      ,ClientConnectionType = EventLog.ClientConnectionType
      ,ClientCoordName = EventLog.ClientCoordName
      ,ClientEnvName = EventLog.ClientEnvName
      ,ClientJobId = EventLog.ClientJobId
      ,ClientJobName = EventLog.ClientJobName
      ,ClientOsName = EventLog.ClientOsName
      ,ClientProcThreadId = EventLog.ClientProcThreadId
      ,ClientSecProdGrp = EventLog.ClientSecProdGrp
      ,ClientSecProdUserId = EventLog.ClientSecProdUserId
      ,ClientTcpPortNumber = EventLog.ClientTcpPortNumber
      ,ClientTdHostName = EventLog.ClientTdHostName
      ,ClientTerminalID = EventLog.ClientTerminalId
      ,ClientTransactionId = EventLog.ClientTransactionId
      ,ClientUserOperId = EventLog.ClientUserOperId
      ,ClientVmName = EventLog.ClientVmName
      ,ClientVmUserId = EventLog.ClientVmUserId
      ,MechanismName = EventLog.MechanismName
      ,ClientTDPReleaseId = EventLog.ClientTDPReleaseId
      ,ClientCLIv2ReleaseId = EventLog.ClientCLIv2ReleaseId
      ,ClientSessionDesc = EventLog.ClientSessionDesc
      ,ClientWorkload = EventLog.ClientWorkload
      ,ClientJobData = EventLog.ClientJobData
      ,ClientIPAddress = EventLog.ClientIpAddress
      ,ClientProgramName = EventLog.ClientProgramName
      ,ClientSystemUserId = EventLog.ClientSystemUserId
      ,AuthMethod = EventLog.AuthMethod
      ,AuthUser = EventLog.AuthUser
      ,MechanismOid = EventLog.MechanismOid
      ,RFU1 = EventLog.RFU1
      ,RFU2 = EventLog.RFU2
      ,RFU3 = EventLog.RFU3
      ,RFU4 = EventLog.RFU4
      ,RFU5 = EventLog.RFU5
      ,ErrorMsg = EventLog.ErrorMsg
      ,ClientInterfaceKind = EventLog.ClientInterfaceKind
      ,ClientInterfaceVersion = EventLog.ClientInterfaceVersion
      ,ClientAttributesEx = EventLog.ClientAttributesEx
      ,RecoverableNetworkProtocol = EventLog.RecoverableNetworkProtocol
      ,LogonRedrive = EventLog.LogonRedrive
      ,ClientIPAddrByClient = EventLog.ClientIPAddrByClient
      ,ClientPortByClient = EventLog.ClientPortByClient
      ,ServerIPAddrByClient = EventLog.ServerIPAddrByClient
      ,ServerPortByClient = EventLog.ServerPortByClient
      ,ClientIPAddrByUnity = EventLog.ClientIPAddrByUnity
      ,ClientPortByUnity = EventLog.ClientPortByUnity
      ,UnityClientSideIPAddr = EventLog.UnityClientSideIPAddr
      ,UnityClientSidePort = EventLog.UnityClientSidePort
      ,UnityServerSideIPAddr = EventLog.UnityServerSideIPAddr
      ,UnityServerSidePort = EventLog.UnityServerSidePort
      ,ServerIPAddrByUnity = EventLog.ServerIPAddrByUnity
      ,ServerPortByUnity = EventLog.ServerPortByUnity
      ,ServerIPAddrByServer = EventLog.ServerIPAddrByServer
      ,ServerPortByServer = EventLog.ServerPortByServer
      ,ClientCOPSuffixedHostName = EventLog.ClientCOPSuffixedHostName
      ,UnitySessNo = EventLog.UnitySessNo
      ,UnityVersion = EventLog.UnityVersion
      ,UnityAuthMechName = EventLog.UnityAuthMechName
      ,UnityMechanismName = EventLog.UnityMechanismName
      ,UserAuthenticatedBy = EventLog.UserAuthenticatedBy
      ,ClientTDSessionPoolName = EventLog.ClientTDSessionPoolName
      ,UnityAuthUser = EventLog.UnityAuthUser
      ,UnityTcpPortNumber = EventLog.UnityTcpPortNumber
      ,UnityIpAddress = EventLog.UnityIpAddress
      ,NegotiatingMechanismOid = EventLog.NegotiatingMechanismOid
      ,NegotiatingMechanismName = EventLog.NegotiatingMechanismName
      ,DirUserNetCompression = EventLog.DirUserNetCompression
      ,DirUserNetConfidentiality = EventLog.DirUserNetConfidentiality
      ,DirUserNetPolicyLevel = EventLog.DirUserNetPolicyLevel
      ,UnityNetCompression = EventLog.UnityNetCompression
      ,UnityNetConfidentiality = EventLog.UnityNetConfidentiality
      ,UnityNetPolicyLevel = EventLog.UnityNetPolicyLevel
      ,DirProfileNetCompression = EventLog.DirProfileNetCompression
      ,DirProfileNetConfidentiality = EventLog.DirProfileNetConfidentiality
      ,DirProfileNetPolicyLevel = EventLog.DirProfileNetPolicyLevel
      ,DirNetGroupNetCompression = EventLog.DirNetGroupNetCompression
      ,DirNetGroupNetConfidentiality = EventLog.DirNetGroupNetConfidentiality
      ,DirNetGroupNetPolicyLevel = EventLog.DirNetGroupNetPolicyLevel
      ,HostIdNetCompression = EventLog.HostIdNetCompression
      ,HostIdNetConfidentiality = EventLog.HostIdNetConfidentiality
      ,HostIdNetPolicyLevel = EventLog.HostIdNetPolicyLevel
      ,UserProfileNetCompression = EventLog.UserProfileNetCompression
      ,UserProfileNetConfidentiality = EventLog.UserProfileNetConfidentiality
      ,UserProfileNetworkConfLevel = EventLog.UserProfileNetworkConfLevel
      ,UserNetCompression= EventLog.UserNetCompression
      ,UserNetConfidentiality = EventLog.UserNetConfidentiality
      ,UserNetPolicyLevel = EventLog.UserNetPolicyLevel
      ,EffectiveSessionNetCompression = EventLog.EffectiveSessionNetCompression
      ,EffectiveSessionNetConf = EventLog.EffectiveSessionNetConf
      ,EffectiveSessionNetPolicyLevel = EventLog.EffectiveSessionNetPolicyLevel
      ,ERRORCODE = EventLog.ERRORCODE

WHEN NOT MATCHED THEN
INSERT
	(
	dbc_EventLog_15.datefld,dbc_EventLog_15.timefld,dbc_EventLog_15.sessionno,dbc_EventLog_15.USERNAME,dbc_EventLog_15.AccountName
      ,dbc_EventLog_15.Event,dbc_EventLog_15.LogicalHostId,dbc_EventLog_15.IFPNo,dbc_EventLog_15.LogonDate,dbc_EventLog_15.LogonTime
      ,dbc_EventLog_15.LogonSource,dbc_EventLog_15.ClientConnectionType,dbc_EventLog_15.ClientCoordName,dbc_EventLog_15.ClientEnvName
      ,dbc_EventLog_15.ClientJobId,dbc_EventLog_15.ClientJobName,dbc_EventLog_15.ClientOsName,dbc_EventLog_15.ClientProcThreadId
      ,dbc_EventLog_15.ClientSecProdGrp,dbc_EventLog_15.ClientSecProdUserId,dbc_EventLog_15.ClientTcpPortNumber
      ,dbc_EventLog_15.ClientTdHostName,dbc_EventLog_15.ClientTerminalId,dbc_EventLog_15.ClientTransactionId
      ,dbc_EventLog_15.ClientUserOperId,dbc_EventLog_15.ClientVmName,dbc_EventLog_15.ClientVmUserId,dbc_EventLog_15.MechanismName
      ,dbc_EventLog_15.ClientTDPReleaseId,dbc_EventLog_15.ClientCLIv2ReleaseId,dbc_EventLog_15.ClientSessionDesc
      ,dbc_EventLog_15.ClientWorkload,dbc_EventLog_15.ClientJobData,dbc_EventLog_15.ClientIpAddress,dbc_EventLog_15.ClientProgramName
      ,dbc_EventLog_15.ClientSystemUserId,dbc_EventLog_15.AuthMethod,dbc_EventLog_15.AuthUser,dbc_EventLog_15.MechanismOid
      ,dbc_EventLog_15.RFU1,dbc_EventLog_15.RFU2,dbc_EventLog_15.RFU3,dbc_EventLog_15.RFU4,dbc_EventLog_15.RFU5,dbc_EventLog_15.ErrorMsg
      ,dbc_EventLog_15.ClientInterfaceKind,dbc_EventLog_15.ClientInterfaceVersion,dbc_EventLog_15.ClientAttributesEx
      ,dbc_EventLog_15.RecoverableNetworkProtocol,dbc_EventLog_15.LogonRedrive,dbc_EventLog_15.ClientIPAddrByClient
      ,dbc_EventLog_15.ClientPortByClient,dbc_EventLog_15.ServerIPAddrByClient,dbc_EventLog_15.ServerPortByClient
      ,dbc_EventLog_15.ClientIPAddrByUnity,dbc_EventLog_15.ClientPortByUnity,dbc_EventLog_15.UnityClientSideIPAddr
      ,dbc_EventLog_15.UnityClientSidePort,dbc_EventLog_15.UnityServerSideIPAddr,dbc_EventLog_15.UnityServerSidePort
      ,dbc_EventLog_15.ServerIPAddrByUnity,dbc_EventLog_15.ServerPortByUnity,dbc_EventLog_15.ServerIPAddrByServer
      ,dbc_EventLog_15.ServerPortByServer,dbc_EventLog_15.ClientCOPSuffixedHostName,dbc_EventLog_15.UnitySessNo
      ,dbc_EventLog_15.UnityVersion,dbc_EventLog_15.UnityAuthMechName,dbc_EventLog_15.UnityMechanismName
      ,dbc_EventLog_15.UserAuthenticatedBy,dbc_EventLog_15.ClientTDSessionPoolName
   	  ,dbc_EventLog_15.UnityAuthUser, dbc_EventLog_15.UnityTcpPortNumber, EventLog.UnityIpAddress
	  ,dbc_EventLog_15.NegotiatingMechanismOid, dbc_EventLog_15.NegotiatingMechanismName
	  ,dbc_EventLog_15.DirUserNetCompression, dbc_EventLog_15.DirUserNetConfidentiality
	  ,dbc_EventLog_15.DirUserNetPolicyLevel, dbc_EventLog_15.UnityNetCompression,dbc_EventLog_15.UnityNetConfidentiality
	  ,dbc_EventLog_15.UnityNetPolicyLevel, dbc_EventLog_15.DirProfileNetCompression, dbc_EventLog_15.DirProfileNetConfidentiality
      ,dbc_EventLog_15.DirProfileNetPolicyLevel, dbc_EventLog_15.DirNetGroupNetCompression, dbc_EventLog_15.DirNetGroupNetConfidentiality
      ,dbc_EventLog_15.DirNetGroupNetPolicyLevel, dbc_EventLog_15.HostIdNetCompression, dbc_EventLog_15.HostIdNetConfidentiality
      ,dbc_EventLog_15.HostIdNetPolicyLevel, dbc_EventLog_15.UserProfileNetCompression, dbc_EventLog_15.UserProfileNetConfidentiality
      ,dbc_EventLog_15.UserProfileNetworkConfLevel, dbc_EventLog_15.UserNetCompression, dbc_EventLog_15.UserNetConfidentiality
      ,dbc_EventLog_15.UserNetPolicyLevel, dbc_EventLog_15.EffectiveSessionNetCompression, dbc_EventLog_15.EffectiveSessionNetConf
      ,dbc_EventLog_15.EffectiveSessionNetPolicyLevel, dbc_EventLog_15.ZoneId, dbc_EventLog_15.ERRORCODE
	)
VALUES
	(
	EventLog.datefld,EventLog.timefld,EventLog.sessionno,EventLog.USERNAME,EventLog.AccountName
      ,EventLog.Event,EventLog.LogicalHostId,EventLog.IFPNo,EventLog.LogonDate,EventLog.LogonTime
      ,EventLog.LogonSource,EventLog.ClientConnectionType,EventLog.ClientCoordName,EventLog.ClientEnvName
      ,EventLog.ClientJobId,EventLog.ClientJobName,EventLog.ClientOsName,EventLog.ClientProcThreadId
      ,EventLog.ClientSecProdGrp,EventLog.ClientSecProdUserId,EventLog.ClientTcpPortNumber
      ,EventLog.ClientTdHostName,EventLog.ClientTerminalId,EventLog.ClientTransactionId
      ,EventLog.ClientUserOperId,EventLog.ClientVmName,EventLog.ClientVmUserId,EventLog.MechanismName
      ,EventLog.ClientTDPReleaseId,EventLog.ClientCLIv2ReleaseId,EventLog.ClientSessionDesc
      ,EventLog.ClientWorkload,EventLog.ClientJobData,EventLog.ClientIpAddress,EventLog.ClientProgramName
      ,EventLog.ClientSystemUserId,EventLog.AuthMethod,EventLog.AuthUser,EventLog.MechanismOid
      ,EventLog.RFU1,EventLog.RFU2,EventLog.RFU3,EventLog.RFU4,EventLog.RFU5,EventLog.ErrorMsg
      ,EventLog.ClientInterfaceKind,EventLog.ClientInterfaceVersion,EventLog.ClientAttributesEx
      ,EventLog.RecoverableNetworkProtocol,EventLog.LogonRedrive,EventLog.ClientIPAddrByClient
      ,EventLog.ClientPortByClient,EventLog.ServerIPAddrByClient,EventLog.ServerPortByClient
      ,EventLog.ClientIPAddrByUnity,EventLog.ClientPortByUnity,EventLog.UnityClientSideIPAddr
      ,EventLog.UnityClientSidePort,EventLog.UnityServerSideIPAddr,EventLog.UnityServerSidePort
      ,EventLog.ServerIPAddrByUnity,EventLog.ServerPortByUnity,EventLog.ServerIPAddrByServer
      ,EventLog.ServerPortByServer,EventLog.ClientCOPSuffixedHostName,EventLog.UnitySessNo
      ,EventLog.UnityVersion,EventLog.UnityAuthMechName,EventLog.UnityMechanismName
      ,EventLog.UserAuthenticatedBy,EventLog.ClientTDSessionPoolName
	,EventLog.UnityAuthUser, EventLog.UnityTcpPortNumber, EventLog.UnityIpAddress
	,EventLog.NegotiatingMechanismOid, EventLog.NegotiatingMechanismName
	,EventLog.DirUserNetCompression, EventLog.DirUserNetConfidentiality
	,EventLog.DirUserNetPolicyLevel, EventLog.UnityNetCompression,EventLog.UnityNetConfidentiality
	,EventLog.UnityNetPolicyLevel, EventLog.DirProfileNetCompression, EventLog.DirProfileNetConfidentiality
      ,EventLog.DirProfileNetPolicyLevel, EventLog.DirNetGroupNetCompression, EventLog.DirNetGroupNetConfidentiality
      ,EventLog.DirNetGroupNetPolicyLevel, EventLog.HostIdNetCompression, EventLog.HostIdNetConfidentiality
      ,EventLog.HostIdNetPolicyLevel, EventLog.UserProfileNetCompression, EventLog.UserProfileNetConfidentiality
      ,EventLog.UserProfileNetworkConfLevel, EventLog.UserNetCompression, EventLog.UserNetConfidentiality
      ,EventLog.UserNetPolicyLevel, EventLog.EffectiveSessionNetCompression, EventLog.EffectiveSessionNetConf
      ,EventLog.EffectiveSessionNetPolicyLevel, EventLog.ZoneId, EventLog.ERRORCODE
	)
;


--*************************************************************
-- Clean out DBC tables as appropriate
DELETE FROM dbc.dbqlexplaintbl WHERE collecttimestamp < CURRENT_TIMESTAMP;
DELETE FROM dbc.dbqlogtbl WHERE collecttimestamp < CURRENT_TIMESTAMP;
DELETE FROM DBC.DBQLSQLTbl WHERE collecttimestamp < CURRENT_TIMESTAMP;
DELETE FROM DBC.DBQLOBJTbl WHERE collecttimestamp < CURRENT_TIMESTAMP;
DELETE FROM dbc.eventlog WHERE datefld < CURRENT_DATE;
DELETE FROM dbc.dbqlsteptbl WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY);
DELETE FROM dbc.dbqlsummarytbl WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY);
DELETE FROM dbc.dbqlxmltbl WHERE collecttimestamp < CURRENT_TIMESTAMP - (INTERVAL '30' DAY);
DELETE FROM dbc.acctg WHERE LENGTH(accountname)<>21;
DELETE
FROM dbc.acctg
WHERE LENGTH(accountname)=21
    AND SUBSTRING(accountname FROM LENGTH(accountname)-7 FOR 8) < 
        CAST(SUBSTRING(CURRENT_DATE-365 FROM 3 FOR 2) AS CHAR(2))||
        CAST(SUBSTRING(CURRENT_DATE-365 FROM 6 FOR 2) AS CHAR(2))||
        CAST(SUBSTRING(CURRENT_DATE-365 FROM 9 FOR 2) AS CHAR(2))||'00';
DELETE
FROM dbc.acctg
WHERE USERNAME IN ('ETLADMPROD','ETLADMDEV','ABU_USER','BAR_USER','CRASHDUMPS','DM_CONTROL'
        ,'STATS_USER','SYSTEMFE','UDM_READ','UDM_WRITE1','UDM_WRITE2','UDM_WRITE3','UDM_WRITE4'
        ,'UDM_WRITE5','VIEWPOINT')
    AND LENGTH(accountname)=21
    AND SUBSTRING(accountname FROM LENGTH(accountname)-7 FOR 8) < 
        CAST(SUBSTRING(CURRENT_DATE-30 FROM 3 FOR 2) AS CHAR(2))||
        CAST(SUBSTRING(CURRENT_DATE-30 FROM 6 FOR 2) AS CHAR(2))||
        CAST(SUBSTRING(CURRENT_DATE-30 FROM 9 FOR 2) AS CHAR(2))||'00';

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_DFI_F03B11_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_DFI_JDE_F03B11 WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='DFI JDE F03B11' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_DFI_F0411_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_DFI_JDE_F0411 WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='DFI JDE F0411' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_DFI_F0911_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_DFI_JDE_F0911 WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='DFI JDE F0911' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_DFI_SALESDAT_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_DFI_SALESDAT WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='DFI SALESDAT' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_FUTURES_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='FUTURES PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) *4 AS Source_Count FROM PROD_EDW_BASE.FUTURES_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='FUTURES PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('FUTURES PRICES',current_date,(SELECT COUNT(*) *4 AS Source_Count FROM PROD_EDW_BASE.FUTURES_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_FUTURES_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.FUTURES WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='FUTURES PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_GLOBALVIEW_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='GLOBALVIEW PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) *4 AS Source_Count FROM PROD_EDW_BASE.PRICE_GLOBAL_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='GLOBALVIEW PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('GLOBALVIEW PRICES',current_date,(SELECT COUNT(*) *4 AS Source_Count FROM PROD_EDW_BASE.PRICE_GLOBAL_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_KM_INVENTORY_AUD_SRC()
BEGIN

DECLARE RowCount integer;

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='KINDERMORGAN INVENTORY' AND ETLRunDate=current_date) THEN

                               SELECT SourceRecCount INTO RowCount FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='KINDERMORGAN INVENTORY' AND ETLRunDate=current_date;
 
                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=RowCount + (SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_KM_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='KINDERMORGAN INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('KINDERMORGAN INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_KM_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
END;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_KM_INVENTORY_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_KM_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='KINDERMORGAN INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_KM_NOM_AUD_SRC()
BEGIN

DECLARE RowCount integer;

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='KM PIPELINE NOMINATIONS' AND ETLRunDate=current_date) THEN

                              SELECT SourceRecCount INTO RowCount FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='KM PIPELINE NOMINATIONS' AND ETLRunDate=current_date;

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=RowCount + (SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PIPELINE_KM_NOM_MAIN_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='KM PIPELINE NOMINATIONS' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('KM PIPELINE NOMINATIONS',current_date,(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PIPELINE_KM_NOM_MAIN_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
END;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_KM_NOM_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PIPELINE_KM_NOM_MAIN_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='KM PIPELINE NOMINATIONS' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_KM_PIPELINE_AUD_SRC()
BEGIN

DECLARE RowCount integer;

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='KM PIPELINE TICKETS' AND ETLRunDate=current_date) THEN

                              SELECT SourceRecCount INTO RowCount FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='KM PIPELINE TICKETS' AND ETLRunDate=current_date;

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=RowCount + (SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PIPELINE_KM_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='KM PIPELINE TICKETS' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('KM PIPELINE TICKETS',current_date,(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PIPELINE_KM_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
END;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_KM_PIPELINE_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PIPELINE WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='KM PIPELINE TICKETS' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISBL_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='OPIS BOTTOMLINE PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) *2 AS Source_Count FROM PROD_EDW_BASE.PRICE_OPISBL_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='OPIS BOTTOMLINE PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('OPIS BOTTOMLINE PRICES',current_date,(SELECT COUNT(*) *2 AS Source_Count FROM PROD_EDW_BASE.PRICE_OPISBL_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISBL_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICING_OPIS_BOTTOMLINE WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='OPIS BOTTOMLINE PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISFEEDSTOCK_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='OPIS FEEDSTOCK PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) *3 AS Source_Count FROM PROD_EDW_BASE.PRICE_FSTOCK_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='OPIS FEEDSTOCK PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('OPIS FEEDSTOCK PRICES',current_date,(SELECT COUNT(*) *3 AS Source_Count FROM PROD_EDW_BASE.PRICE_FSTOCK_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISFEEDSTOCK_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICING WHERE Price_Source='OPIS FEEDSTOCKS' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='OPIS FEEDSTOCK PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISLP_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='OPIS LP PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.OPIS_LP_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='OPIS LP PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('OPIS LP PRICES',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.OPIS_LP_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISLP_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICING WHERE Price_Source='OPIS LP' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='OPIS LP PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISRACK_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='OPIS RACK PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_RACK_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='OPIS RACK PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('OPIS RACK PRICES',current_date,(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_RACK_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISRACK_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICING WHERE Price_Source='OPIS RACK' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='OPIS RACK PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISSPOT_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='OPIS SPOT PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) *4 AS Source_Count FROM PROD_EDW_BASE.PRICE_SPOT_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='OPIS SPOT PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('OPIS SPOT PRICES',current_date,(SELECT COUNT(*) *4 AS Source_Count FROM PROD_EDW_BASE.PRICE_SPOT_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_OPISSPOT_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICING WHERE Price_Source='OPIS SPOT' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='OPIS SPOT PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PDS_CUSTHIST_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_PDS_CUSTHIST WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PDS CUSTHIST' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PDS_INVENTORY_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_PDS_INVENTORY WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PDS INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PDS_INVTRANS_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_PDS_INVTRANS WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PDS INVTRANS' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PDS_ORDERS_CLSD_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_PDS_ORDERS_CLSD WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PDS ORDERS CLOSED' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PDS_ORDERS_OPEN_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_PDS_ORDERS_OPEN WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PDS ORDERS OPEN' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PDS_SALESDAT_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.WSALE_PDS_SALESDAT WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PDS SALESDAT' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

Replace Procedure PROD_EDW_BASE_VIEWS.SP_PIIDX_Create ()
Begin
	CREATE JOIN INDEX PROD_EDW_IDX.piajidx01 ,NO FALLBACK ,CHECKSUM = DEFAULT AS 
	SELECT COUNT(*)(FLOAT, NAMED CountStar ),
	PROD_edw_base.pi.ref_prod_location, PROD_edw_base.pi.Tag_ID ,
	PROD_edw_base.pi.Trans_Date ,PROD_edw_base.pi.Trans_Hour ,
	SUM(PROD_edw_base.pi.Tag_Value )(DECIMAL(38,4), NAMED tag_value ),
	COUNT(PROD_edw_base.pi.Tag_Value )(FLOAT, NAMED tag_cnt )
	FROM PROD_edw_base.pi 
	GROUP BY PROD_edw_base.pi.ref_prod_location, PROD_edw_base.pi.Tag_ID ,
	PROD_edw_base.pi.Trans_Date ,PROD_edw_base.pi.Trans_Hour 
	PRIMARY INDEX ( Ref_Prod_Location, Tag_ID ,Trans_Date ,Trans_Hour )
	PARTITION BY RANGE_N(PROD_EDW_base.pi.Trans_Date  BETWEEN 
	'2001-01-01' AND '2020-12-31' EACH INTERVAL '1' DAY ,
	NO RANGE);
	collect stats on PROD_edw_idx.piajidx01 column ref_prod_location;
	collect stats on PROD_edw_idx.piajidx01 column tag_id;
	collect stats on PROD_edw_idx.piajidx01 column trans_date;
	collect stats on PROD_edw_idx.piajidx01 column trans_hour;
	collect stats on PROD_edw_idx.piajidx01;
End;
--------------------------------------------------------------------------------

Replace Procedure prod_edw_BASE_VIEWS.SP_PIIDX_Drop ()
Begin 
lock prod_edw_IDX.piajidx01 exclusive nowait
drop join index prod_edw_idx.piajidx01;
End;
--------------------------------------------------------------------------------

Replace Procedure PROD_EDW_BASE_VIEWS.SP_PISTG_TO_PI()
begin

--call PROD_EDW_BASE_VIEWS.SP_PIIDX_Drop();

merge into PROD_EDW_BASE.PI as t using (select trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag1_ID, max(Tag1_Value) as Tag1_Value, max(Create_Dttm) as Create_Dttm, max(Last_Update_Dttm) as Last_Update_Dttm from PROD_EDW_BASE_VIEWS.PISTG_TO_PI_XFORM group by trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour, Trans_Min, Tag1_ID)  as s
on t.trans_Source = s.trans_Source and t.Ref_Prod_Location = s.Ref_Prod_Location and t.Trans_Date = s.Trans_Date and t.Trans_Hour = s.Trans_Hour and t.Trans_Min = s.Trans_Min and t.Tag_ID = s.Tag1_ID
when matched then update set Tag_Value  = s.Tag1_Value, Last_Update_Dttm = s.Last_Update_Dttm 
when not matched then insert values (s.trans_Source, s.Ref_Prod_Location, s.Trans_Date, s.Trans_Hour, s.Trans_Min, s.Tag1_ID, s.Tag1_Value, current_timestamp(0), s.Last_Update_Dttm);

--call PROD_EDW_BASE_VIEWS.SP_PIIDX_Create();

end;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PlattsPriceType_Modify ()

Begin

DELETE FROM prod_edw_base.pricing
WHERE (pricing.pricing_code, pricing.price_eff_date,pricing.price_type)
IN (
	SELECT pricing_code, price_eff_date, 'Midpoint' as price_type
	  FROM
	    (SELECT pricing.pricing_code, pricing.price_eff_date,pricing.price_type
		FROM prod_edw_base.pricing
		INNER JOIN prod_edw_base.price_plattstype_special_dcd
			ON pricing.pricing_code = price_plattstype_special_dcd.price_code
			AND pricing.price_type = price_plattstype_special_dcd.price_type_raw
		INNER JOIN
			(SELECT pricing_code, price_eff_date
			FROM prod_edw_base.pricing
			INNER JOIN prod_edw_base.price_plattstype_special_dcd
				ON pricing.pricing_code = price_plattstype_special_dcd.Price_Code
			WHERE pricing.price_type = ('Midpoint')) as tmpPlattsPriceMidpoint1
		ON pricing.pricing_code = tmpPLattsPriceMidpoint1.pricing_code 
			AND pricing.price_eff_date = tmpPlattsPriceMidpoint1.price_eff_date
			AND pricing.price_type = 'Unspecified') as tmpPlattsPriceMidpoint
		)
;

UPDATE prod_edw_base.pricing
FROM
(SELECT price_code,price_type_raw,price_type_processed
	FROM prod_edw_base.price_plattstype_special_dcd) tmpSpecial
SET price_type=tmpSpecial.price_type_processed
WHERE pricing.pricing_code = tmpSpecial.price_code
	and pricing.price_type = tmpSpecial.price_type_raw;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PLATTS_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='PLATTS PRICES' AND ETLRunDate=current_date) THEN
                               
                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_PLATTS_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='PLATTS PRICES' AND ETLRunDate=current_date;

ELSE

                               INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('PLATTS PRICES',current_date,(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_PLATTS_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PLATTS_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICING WHERE Price_Source='PLATTS' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PLATTS PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_POTEN_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='POTEN PRICES' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_POTEN_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='POTEN PRICES' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('POTEN PRICES',current_date,(SELECT COUNT(*) AS Source_Count FROM PROD_EDW_BASE.PRICE_POTEN_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_POTEN_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICING WHERE Price_Source='POTEN' AND Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='POTEN PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PPL_MASTER_AUD(source_count integer)

IF NOT EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='PPL MASTER' AND ETLRunDate=current_date) THEN

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('PPL MASTER',current_date,source_count,(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.MASTER WHERE Last_Update_Dttm=current_date),current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PPL_MOVEMENT_AUD(source_count integer)

IF NOT EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='PPL MOVEMENT' AND ETLRunDate=current_date) THEN

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('PPL MOVEMENT',current_date,source_count,(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.MOVEMENT WHERE Last_Update_Dttm=current_date),current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PPL_TANK_AUD(source_count integer)

IF NOT EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='PPL TANK' AND ETLRunDate=current_date) THEN

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('PPL TANK',current_date,source_count,(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TANK WHERE Last_Update_Dttm=current_date),current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

replace procedure PROD_EDW_BASE_VIEWS.SP_PRICE_AUD_RUN() 
begin
--Secehdule Tuesday - Saturday after pricining ETL (No run on Mondays because we don't get pricing data on Sundays)

--CNV Spot A Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT  'MPR Report',   'CNV Spot A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
'OPSPT00235','OPSPT00885'
) and Price_eff_date = CURRENT_DATE-1;

--CNV Spot B Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT  'MPR Report',   'CNV Spot B Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  ('OPSPT00042','OPSPT00689') and Price_eff_date = CURRENT_DATE-1;

--CNV Spot C Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'CNV Spot C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  ('OPSPT00021','OPSPT00668') and Price_eff_date = CURRENT_DATE-1;


--RBOB Spot A Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'RBOB Spot A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00029','OPSPT00676'
) and Price_eff_date = CURRENT_DATE-1;


--RBOB Spot C Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'RBOB Spot C Codes Daily Check ', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00009','OPSPT00656'
) and Price_eff_date = CURRENT_DATE-1;

--ULSD Spot A Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'ULSD Spot A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00082','OPSPT00732'
) and Price_eff_date = CURRENT_DATE-1;

--ULSD Spot B Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'ULSD Spot B Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00038','OPSPT00685'
) and Price_eff_date = CURRENT_DATE-1;

--ULSD Spot C Codes Daily Check 
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'ULSD Spot C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00013','OPSPT00660'
) and Price_eff_date = CURRENT_DATE-1;

--Rack Low Versus GC CBOB A Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Rack Low Versus GC CBOB A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'COMP03290','COMP24966'
) and Price_eff_date = CURRENT_DATE-1;

--Rack Low Versus GC CBOB B Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Rack Low Versus GC CBOB B Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'COMP12852','COMP27188'
) and Price_eff_date = CURRENT_DATE-1;

--Rack Low Versus GC CBOB C Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Rack Low Versus GC CBOB C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00021','OPSPT00668'
) and Price_eff_date = CURRENT_DATE-1;

--Rack Low versus GC ULSD A Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Rack Low versus GC ULSD A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'COMP03602'
) and Price_eff_date = CURRENT_DATE-1;

--Rack Low versus GC ULSD B Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Rack Low versus GC ULSD B Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'COMP13470'
) and Price_eff_date = CURRENT_DATE-1;

--Rack Low versus GC ULSD C Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Rack Low versus GC ULSD C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00013','OPSPT00660'
) and Price_eff_date = CURRENT_DATE-1;

--Cracks A Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Cracks A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00021','OPSPT00668'
) and Price_eff_date = CURRENT_DATE-1;

--Cracks B Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Cracks B Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00013','OPSPT00660'
) and Price_eff_date = CURRENT_DATE-1;

--Cracks C Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Cracks C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'FUT0002'
) and Price_eff_date = CURRENT_DATE-1;

--RINS A Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'RINS A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00149','OPSPT00799'
) and Price_eff_date = CURRENT_DATE-1;

--RINS C Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'RINS C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00150','OPSPT00800'
) and Price_eff_date = CURRENT_DATE-1;

--Brent Diff. to WTI A Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Brent Diff. to WTI A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'PCAAQ00'
) and Price_eff_date = CURRENT_DATE-1;

--Brent Diff. to WTI C Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'Brent Diff. to WTI C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'PCACG00'
) and Price_eff_date = CURRENT_DATE-1;

--LLS Diff. to WTI A Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'LLS Diff. to WTI A Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'PCABN00'
) and Price_eff_date = CURRENT_DATE-1;

--LLS Diff. to WTI C Codes Daily Check
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'MPR Report',   'LLS Diff. to WTI C Codes Daily Check', 1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'PCACG00'
) and Price_eff_date = CURRENT_DATE-1;

--Crude Codes
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'Argus Price Comparison',  'Crude Codes',  15, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'AASRW00'
	,'AAGWB00'
	,'AASRW00'
	,'PA0002668'
	,'PA0000245'
	,'PA0003911'
	,'PA0002353'
	,'PA0002809'
	,'PA0009012'
) and Price_eff_date = CURRENT_DATE-1;

--Regular Unleaded Codes
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'Argus Price Comparison',  'Regular Unleaded Codes',  4, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'PGACT00'                  
	,'OPSPT00689'               
	,'OPSPT00676'    
	,'COMP24970'             
	,'COMP06394'
	,'COMP26776'
	,'COMP27192'
	,'COMP22795'	
) and Price_eff_date = CURRENT_DATE-1;

--Premium Unleaded Codes
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'Argus Price Comparison',  'Premium Unleaded Codes',  1, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00802'
	,'OPSPT00677'
	,'COMP25052'
	,'COMP06574'    
	,'COMP26900'    
	,'COMP27262'
	,'COMP22853'
) and Price_eff_date = CURRENT_DATE-1;

--Premium Diesel Codes
insert PROD_EDW_BASE.DAT_AUD_RUN_LOG (AUD_REP_NAME, AUD_RULE_NAME, EXPECTED_MIN_VALUE, DATE_TIME_RUN, ACTUAL_VALUE, AUD_CHK_STAT, create_dttm, last_update_dttm)  
SELECT 'Argus Price Comparison',  'Premium Diesel Codes',  4, CURRENT_TIMESTAMP(0),coalesce(count(*),0),null,CURRENT_TIMESTAMP(0),CURRENT_TIMESTAMP(0) from PROD_EDW_BASE_VIEWS.COMBINED_PRICING a where a.pricing_code in  (
	'OPSPT00660'
	,'COMP03610'
	,'COMP06880'
	,'COMP14624'
	,'COMP13478'
	,'OPSPT00685'
	,'COMP23234'
) and Price_eff_date = CURRENT_DATE-1;

update         PROD_EDW_BASE.DAT_AUD_RUN_LOG
set                AUD_CHK_STAT='S'
where          ACTUAL_VALUE>=EXPECTED_MIN_VALUE;

update         PROD_EDW_BASE.DAT_AUD_RUN_LOG
set                AUD_CHK_STAT='F'
where          ACTUAL_VALUE < EXPECTED_MIN_VALUE;

end;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PROPET_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='PRO PETROLEUM INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_PROPET_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='PRO PETROLEUM INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('PRO PETROLEUM INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_PROPET_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PROPET_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_PROPET_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='PRO PETROLEUM INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_PUMPERSLOG_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.REFOPS_PUMPERSLOG WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='REFOPS PUMPERSLOG' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

replace PROCEDURE PROD_EDW_BASE_VIEWS.SP_PURGE_COMM_TRADES
( IN 		iFile_Name	VARCHAR(100))
BEGIN
delete from PROD_EDW_BASE.COMM_TRADES where File_Name=iFile_Name;
END;
--------------------------------------------------------------------------------

REPLACE PROCEDURE PROD_EDW_BASE_VIEWS.SP_PURGE_PIPELINE_SCHED()
BEGIN
DELETE FROM PROD_EDW_BASE.pipeline_sched
WHERE EXISTS
    (
    SELECT ref_prod_location, eff_date, origination_number
    FROM
        (
        SELECT DISTINCT ref_prod_location, eff_date, origination_number 
        FROM PROD_EDW_BASE.pipeline_sched_magalb_stg
        UNION ALL
        SELECT DISTINCT ref_prod_location, eff_date, origination_number 
        FROM PROD_EDW_BASE.pipeline_sched_magjz_stg
        ) AS tmpDistinctStage    
    WHERE pipeline_sched.ref_prod_location = tmpDistinctStage.Ref_Prod_Location
        AND pipeline_sched.eff_date = tmpDistinctStage.eff_date
        AND pipeline_sched.movement_id = tmpDistinctStage.Origination_Number
    );
END;
--------------------------------------------------------------------------------

replace PROCEDURE PROD_EDW_BASE_VIEWS.SP_PURGE_RINS_DETAILS
( IN 		iFile_Name	VARCHAR(100))
BEGIN
delete from PROD_EDW_BASE.RINS_DETAILS where File_Name=iFile_Name;
END;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_RUN_HORSE_AUD_SRC()

IF EXISTS (SELECT * FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='RUNNING HORSE INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_RUNNING_HORSE_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='RUNNING HORSE INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('RUNNING HORSE INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_RUNNING_HORSE_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_RUN_HORSE_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_RUNNING_HORSE_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='RUNNING HORSE INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_SOUTHWEST_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='SOUTHWEST INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_SW_STG),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='SOUTHWEST INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('SOUTHWEST INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_SW_STG),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_SOUTHWEST_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_SW_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='SOUTHWEST INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_SPPR_INVENTORY_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
SET TargetRecCount=(SELECT COUNT(*)  AS Target_Count FROM PROD_EDW_BASE.TERMINAL_SPPR_STG),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='SPPR INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_SPP_RACK_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICE_SPP_RACK WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='SPP RACK PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_STL_ASPH_AUD_SRC()
IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='STL ASPHALT INVENTORY' AND ETLRunDate=current_date) THEN
          UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
          SET SourceRecCount=(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_STL_ASPH_STG),last_update_dttm=current_timestamp(0)
          WHERE DataSourceProvider='STL ASPHALT INVENTORY' AND ETLRunDate=current_date;
ELSE
          INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
          VALUES('STL ASPHALT INVENTORY',current_date,(SELECT COUNT(*)  AS Source_Count FROM PROD_EDW_BASE.TERMINAL_STL_ASPH_STG),0,current_timestamp(0),current_timestamp(0));
END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_STL_ASPH_AUD_TGT()
Begin
          UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
          SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_STL_ASPH_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
          WHERE DataSourceProvider='STL ASPHALT INVENTORY' AND ETLRunDate=current_date;
End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_WESTERN_RA_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.PRICE_WEST_GIANT_RACK WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='WESTERN/GIANT PRICES' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_YORKTOWN_AUD_SRC()

IF EXISTS (SELECT *  FROM PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT WHERE DataSourceProvider='YORKTOWN INVENTORY' AND ETLRunDate=current_date) THEN

                               UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT
                               SET SourceRecCount=(select count(*) as Source_Count from (select distinct eff_date,input_tank,input_transaction_type from PROD_EDW_BASE.TERMINAL_YORKTOWN_STG) a),last_update_dttm=current_timestamp(0)
                               WHERE DataSourceProvider='YORKTOWN INVENTORY' AND ETLRunDate=current_date;

ELSE

                                INSERT INTO PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
                                VALUES('YORKTOWN INVENTORY',current_date,(select count(*) as sourcecount from (select distinct eff_date,input_tank,input_transaction_type from PROD_EDW_BASE.TERMINAL_YORKTOWN_STG) a),0,current_timestamp(0),current_timestamp(0));

END IF;
--------------------------------------------------------------------------------

REPLACE Procedure PROD_EDW_BASE_VIEWS.SP_YORKTOWN_AUD_TGT()
Begin

UPDATE PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT 
SET TargetRecCount=(SELECT COUNT(*) AS Target_Count FROM PROD_EDW_BASE.TERMINAL_YORKTOWN_RAW WHERE Last_Update_Dttm=current_date),last_update_dttm=current_timestamp(0)
WHERE DataSourceProvider='YORKTOWN INVENTORY' AND ETLRunDate=current_date;

End;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_atorionproductfeeds AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_atorionunitproducts;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_atorionunitfeeds AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_atorionunitfeeds;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_crdruns (Ref_Prod_Location, ID, PROP, Date_, Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm)
AS LOCKING ROW ACCESS
SELECT Ref_Prod_Location, ID, PROP, Date_, CAST(DATE_ AS DATE) AS Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm FROM prod_edw_base.aps_crdruns;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_crudes AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_crudes;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_events AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.aps_events;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_event_dest_tanks AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.aps_event_dest_tanks;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_event_source_tanks AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.aps_event_source_tanks;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_ev_daily AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_ev_daily;
--------------------------------------------------------------------------------

REPLACE VIEW  prod_edw_base_VIEWS.aps_km_fwdshipments
AS LOCKING ROW ACCESS
SELECT	*
FROM	prod_edw_base.aps_km_fwdshipments;
--------------------------------------------------------------------------------

REPLACE VIEW  PROD_EDW_BASE_VIEWS.aps_km_inventory
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.aps_km_inventory;
--------------------------------------------------------------------------------

REPLACE VIEW  PROD_EDW_BASE_VIEWS.aps_km_receipts
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.aps_km_receipts;
--------------------------------------------------------------------------------

REPLACE VIEW  PROD_EDW_BASE_VIEWS.aps_km_shipments
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.aps_km_shipments;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_pl AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.aps_pl;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_pl_pipeline AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.aps_pl_pipeline;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_pl_pipeline_comp AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.aps_pl_pipeline_comp;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_pl_pipeline_dest AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.aps_pl_pipeline_dest;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_streams AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_streams;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_strms (Ref_Prod_Location, ID, PROP, Date_, Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm)
AS LOCKING ROW ACCESS
SELECT Ref_Prod_Location, ID, PROP, Date_, CAST(DATE_ AS DATE) AS Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm FROM prod_edw_base.aps_strms;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.aps_tanks (Ref_Prod_Location, ID, PROP, Date_, Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm)
AS LOCKING ROW ACCESS
SELECT Ref_Prod_Location, ID, PROP, Date_, CAST(DATE_ AS DATE) AS Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm FROM prod_edw_base.aps_tanks;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_tanks_main AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_tanks_main;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_tran_modes AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_tran_modes;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_units AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.aps_units;
--------------------------------------------------------------------------------

REPLACE VIEW  PROD_EDW_BASE_VIEWS.aps_vfp_route
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.aps_vfp_route;
--------------------------------------------------------------------------------

REPLACE VIEW  PROD_EDW_BASE_VIEWS.aps_vfp_xref
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.aps_vfp_xref;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_views.aps_ztanks (Ref_Prod_Location, ID, PROP, Date_, Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm)
AS LOCKING ROW ACCESS
SELECT Ref_Prod_Location, ID, PROP, Date_, CAST(DATE_ AS DATE) AS Eff_Date, VALUE_, CASE_, Create_Dttm,
		Last_Update_Dttm FROM PROD_EDW_BASE.aps_ztanks;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Area ( Area_ID,Area_Code,Area_Description,
		Trans_Dttm,Trans_Update_Dttm,Create_dttm,Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Area.Area_ID,PROD_EDW_BASE.Area.Area_Code,
		PROD_EDW_BASE.Area.Area_Description,PROD_EDW_BASE.Area.Trans_Dttm,
		PROD_EDW_BASE.Area.Trans_Update_Dttm,PROD_EDW_BASE.Area.Create_dttm,
		PROD_EDW_BASE.Area.Last_update_dttm
		FROM PROD_EDW_BASE.Area;
--------------------------------------------------------------------------------

Replace	VIEW PROD_EDW_BASE_VIEWS.ARGUS_PRICING ( Code, Code2, Pricing_Desc, Pricing_Group, Pricing_Location, Pricing_Type,
		Price_Eff_Date, Price,Fwd_Period, Diff_Base_Roll, Price_Eff_Year,
		Cont_Fwd, Price_Source, Delivery_Type, Timestamp_desc, Currency,
		Record_Status, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT 
		Code,
		CASE 
			WHEN  Cont_Fwd is null then
				CASE 
					WHEN Fwd_Period IS NULL THEN Trim(Code)
					WHEN Fwd_Period < 2000 THEN Trim(Code)
					ELSE Trim(Code) || '_' || Trim(Fwd_Period)
				END 
			WHEN  Cont_Fwd = '0' then
				CASE 
					WHEN Fwd_Period IS NULL THEN Trim(Code)
					WHEN Fwd_Period < 2000 THEN Trim(Code)
					ELSE Trim(Code) || '_' || Trim(Fwd_Period)
				END
			WHEN  Cont_Fwd = '1' then
				CASE 
					WHEN Fwd_Period IS NULL THEN Trim(Code)
					WHEN Fwd_Period < 2000 THEN Trim(Code)
					ELSE Trim(Code) || '_' || Trim(Fwd_Period)
			END 	 	
			ELSE	
				CASE 
					WHEN Fwd_Period IS NULL THEN Trim(Code) || '_' || Cont_Fwd
					WHEN Fwd_Period < 2000 THEN Trim(Code)  || '_' || Cont_Fwd
					ELSE Trim(Code) || '_' || Trim(Fwd_Period)  || '_' || Cont_Fwd
				END 
		END	
				as Code2,
		Pricing_Desc, Pricing_Group,
	    Pricing_Location,Pricing_Type,
		Price_Eff_Date,Price,
		Fwd_Period,Diff_Base_Roll,
		Price_Eff_Year,Cont_Fwd,
		Price_Source,Delivery_Type,
		Timestamp_desc,Currency,
		Record_Status,
		Create_Dttm,Last_Update_Dttm
		FROM PROD_EDW_BASE.ARGUS_PRICING where Pricing_Location in ('US Colonial pipeline') 
		union
			SELECT 
		Code,
		CASE 
			WHEN Fwd_Period IS NULL THEN Trim(Code)
			WHEN Fwd_Period < 2000 THEN Trim(Code)
			ELSE Trim(Code) || '_' || Trim(Fwd_Period)
		END as Code2,
		Pricing_Desc, Pricing_Group,
	    Pricing_Location,Pricing_Type,
		Price_Eff_Date,Price,
		Fwd_Period,Diff_Base_Roll,
		Price_Eff_Year,Cont_Fwd,
		Price_Source,Delivery_Type,
		Timestamp_desc,Currency,
		Record_Status,
		Create_Dttm,Last_Update_Dttm
		FROM PROD_EDW_BASE.ARGUS_PRICING where  Pricing_Location not in ('US Colonial pipeline') ;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BACKCAST
	(
	Ref_Prod_Location, Eff_Date, Moving_Count
		,prod_group_subcat1 ,prod_group_subcat2 ,prod_group_subcat3,prod_group_subcat4
		,Actual_Production, Actual_Production_MTD, Actual_Production_MTD_Avg
		,Planned_Production	, Planned_Production_MTD
		,Planned_Price, Production_Diff_MTD, Price_Diff_MTD
	) AS LOCKING ROW ACCESS
	SELECT
		Ref_Prod_Location
		,Eff_Date
		,COUNT(Eff_Date) OVER (PARTITION BY ref_prod_location,prod_group_subcat1,prod_group_subcat2,prod_group_subcat3,prod_group_subcat4,TRUNC(ADD_MONTHS(Eff_Date,0),'mon') 
			ORDER BY eff_date ROWS UNBOUNDED PRECEDING) AS Moving_Count
		,prod_group_subcat1
		,prod_group_subcat2
		,prod_group_subcat3
		,prod_group_subcat4
		,SUM(Production) AS Actual_Production
		,SUM(Actual_Production) OVER (PARTITION BY  ref_prod_location,prod_group_subcat1,prod_group_subcat2,prod_group_subcat3,prod_group_subcat4, TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
			ORDER BY eff_date ROWS UNBOUNDED PRECEDING) AS Actual_Production_MTD
		,Actual_Production_MTD/Moving_Count AS Actual_Production_MTD_Avg
		
		,SUM(planned_production_tmp)/EXTRACT(DAY FROM LAST_DAY(Eff_date)) AS Planned_Production
		,SUM(planned_production_tmp)/EXTRACT(DAY FROM LAST_DAY(Eff_date))*Moving_Count AS Planned_Production_MTD
		
		,CASE WHEN prod_group_subcat1 = 'Feedstocks' 
			THEN MAX(planned_price_tmp)*(-1)
			ELSE MAX(planned_price_tmp)
		END AS Planned_Price
		,Actual_Production_MTD - Planned_Production_MTD AS Production_Diff_MTD
		,Production_Diff_MTD * Planned_Price AS Price_Diff_MTD
	FROM
		(
		SELECT	
			prod_hier.ref_prod_location
			,Eff_Date
			,prod_hier.prod_group_subcat1
			,prod_hier.prod_group_subcat2
			,prod_hier.prod_group_subcat3
			,prod_hier.prod_group_subcat4
			,prod_hier.product_id
			,Production
			,CAST(planned_volume AS DECIMAL(15,4)) AS planned_production_tmp
			,ZEROIFNULL(planned_price) AS planned_price_tmp
		FROM	prod_edw_base_views.PRODUCTION
		INNER JOIN prod_edw_base_views.prod_hier
			ON production.ref_prod_location = prod_hier.ref_prod_location
			AND production.product_id = prod_hier.product_id
			AND report_desc = 'refops'
		LEFT OUTER JOIN prod_edw_base_views.refops_plan_production
			ON refops_plan_production.planned_month = TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
			AND refops_plan_production.product_id = prod_hier.product_id
		LEFT OUTER JOIN prod_edw_base_views.refops_plan_price
			ON refops_plan_price.planned_month = TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
			AND refops_plan_price.product_id = prod_hier.product_id
			
		) AS tmpProduction
	
	GROUP BY 
		ref_prod_location
		,prod_group_subcat1
		,prod_group_subcat2
		,prod_group_subcat3
		,prod_group_subcat4
		,Eff_Date
;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BACKCAST_LVR
	(Ref_Prod_Location, Eff_date	 ,Moving_Count
		,Actual_Production_Prod, Actual_Production_Feed, Gain_Loss_LVR, Percent_LVR
		,Actual_Production_Prod_MTD_Avg, Actual_Production_Feed_MTD_Avg, Gain_Loss_LVR_MTD_Avg, Percent_LVR_MTD_Avg
	) AS LOCKING ROW ACCESS
	SELECT Ref_Prod_Location, Eff_date
		,COUNT(Eff_Date) OVER (PARTITION BY ref_prod_location,TRUNC(ADD_MONTHS(Eff_Date,0),'mon') 
			ORDER BY eff_date ROWS UNBOUNDED PRECEDING) AS Moving_Count
		,MAX(Actual_Production_Prod_tmp) AS Actual_Production_Prod
		,MAX(Actual_Production_Feed_tmp) AS Actual_Production_Feed
		,Actual_Production_Prod - Actual_Production_Feed AS Gain_Loss_LVR
		,Actual_Production_Prod/COALESCE(NULLIFZERO(Actual_Production_Feed),1)*100 AS Percent_LVR
		,SUM(Actual_Production_Prod) OVER (PARTITION BY  ref_prod_location,TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
			ORDER BY eff_date ROWS UNBOUNDED PRECEDING)/Moving_Count AS Actual_Production_Prod_MTD_Avg
		,SUM(Actual_Production_Feed) OVER (PARTITION BY  ref_prod_location,TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
			ORDER BY eff_date ROWS UNBOUNDED PRECEDING)/Moving_Count AS Actual_Production_Feed_MTD_Avg
		,SUM(Gain_Loss_LVR) OVER (PARTITION BY  ref_prod_location,TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
			ORDER BY eff_date ROWS UNBOUNDED PRECEDING)/Moving_Count AS Gain_Loss_LVR_MTD_Avg
		,Actual_Production_Prod_MTD_Avg/COALESCE(NULLIFZERO(Actual_Production_Feed_MTD_Avg),1)*100 AS Percent_LVR_MTD_Avg
	FROM
		(
		SELECT	
			prod_hier.Ref_prod_Location, prod_hier.prod_group_subcat1, Eff_Date
			,CASE WHEN prod_hier.prod_group_subcat1 = 'Feedstocks'
				THEN SUM(Production)
			END AS Actual_Production_Feed_tmp
			,CASE WHEN prod_hier.prod_group_subcat1 = 'Products'
				THEN SUM(Production)
			END AS Actual_Production_Prod_tmp
		FROM	prod_edw_base_views.PRODUCTION
		INNER JOIN prod_edw_base_views.prod_hier
			ON production.ref_prod_location = prod_hier.ref_prod_location
			AND production.product_id = prod_hier.product_id
			AND report_desc = 'refops'
		LEFT OUTER JOIN prod_edw_base_views.refops_plan_production
			ON refops_plan_production.planned_month = TRUNC(ADD_MONTHS(Eff_Date,0),'mon')
			AND refops_plan_production.product_id = prod_hier.product_id
		GROUP BY prod_hier.ref_prod_location, prod_hier.prod_group_subcat1, eff_date
		) AS tmpLVR
	
	GROUP BY Ref_Prod_Location, Eff_Date
;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Blend (BlendID, BlendNum, BlendDate, TankID, ProductID, BlendTOV,
		HeelVol, OpenGaugeDate, OpenGaugeTime, OpenGauger, OpenGauge,
		OpenGaugeFt, OpenGaugeIn, OpenGaugeFr, OpenTOV, OpenTemp, OpenAPI,
		CloseGaugeDate, CloseGaugeTime, CloseGauger, CloseGauge, CloseGaugeFt,
		CloseGaugeIn, CloseGaugeFr, CloseTOV, CloseTemp, CloseAPI, OpenGaugeDateAct,
		OpenGaugeTimeAct, CloseGaugeDateAct, CloseGaugeTimeAct, Ref_Prod_Location,
		Create_Dttm, Last_Update_Dttm) AS 
	LOCKING ROW
	ACCESS
SELECT	BlendID, BlendNum, BlendDate, TankID, ProductID, BlendTOV,
		HeelVol, OpenGaugeDate, OpenGaugeTime, OpenGauger, OpenGauge,
		OpenGaugeFt, OpenGaugeIn, OpenGaugeFr, OpenTOV, OpenTemp, OpenAPI,
		CloseGaugeDate, CloseGaugeTime, CloseGauger, CloseGauge, CloseGaugeFt,
		CloseGaugeIn, CloseGaugeFr, CloseTOV, CloseTemp, CloseAPI, OpenGaugeDateAct,
		OpenGaugeTimeAct, CloseGaugeDateAct, CloseGaugeTimeAct, Ref_Prod_Location,
		Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.BLEND
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.BlendRecipe (TID, BlendID, TankID, ProductID, RecipePercent, RecipeVolume,
		ActualVolume, OpenGaugeDate, OpenGaugeTime, OpenGauge, OpenGaugeFt,
		OpenGaugeIn, OpenGaugeFr, OpenTOV, OpenTemp, OpenAPI, CloseGaugeDate,
		CloseGaugeTime, CloseGauge, CloseGaugeFt, CloseGaugeIn, CloseGaugeFr,
		CloseTOV, CloseTemp, CloseAPI, LogCount, Ref_Prod_Location, Create_Dttm,
		Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT	TID, BlendID, TankID, ProductID, RecipePercent, RecipeVolume,
		ActualVolume, OpenGaugeDate, OpenGaugeTime, OpenGauge, OpenGaugeFt,
		OpenGaugeIn, OpenGaugeFr, OpenTOV, OpenTemp, OpenAPI, CloseGaugeDate,
		CloseGaugeTime, CloseGauge, CloseGaugeFt, CloseGaugeIn, CloseGaugeFr,
		CloseTOV, CloseTemp, CloseAPI, LogCount, Ref_Prod_Location, Create_Dttm,
		Last_Update_Dttm
FROM	PROD_EDW_BASE.BLENDRECIPE
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Blend_AZ AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.BLEND_AZ
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Blend_AZ_Decoder AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.BLEND_AZ_DECODER
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Blend_C2P
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Blend_C2P;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Blend_CAA AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.BLEND_CAA
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_VIEWS.Blend_Crew AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	prod_edw_base.Blend_Crew;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.BLEND_GAL_ETOHUPLIFT AS LOCKING ROW ACCESS
SELECT Job_Name, Tank
	,Date_Sampled
	,SUBSTR(Product,1,7) AS ProductCode
	,MAX(CASE WHEN SUBSTR(Product,CHARACTER(product),1)='M'  THEN BlendTOV END) AS Volume_Neat
	,MAX(CASE WHEN SUBSTR(Product,CHARACTER(product),1)='E'  THEN BlendTOV END) AS Volume_Eth
	,MAX(CASE WHEN SUBSTR(Product,CHARACTER(product),1)='M'  THEN Results_Value END) AS RM_2_Neat
	,MAX(CASE WHEN SUBSTR(Product,CHARACTER(product),1)='E'  THEN Results_Value END) AS RM_2_Eth
	,MAX(CASE 
		WHEN SUBSTR(Product,CHARACTER(product),1)='M'  AND SUBSTR(Product,1,2)='89' THEN '89'
		WHEN SUBSTR(Product,CHARACTER(product),1)='M'  AND SUBSTR(Product,1,2)='83' THEN '83' 
	END) AS RM_2_Min_Neat
	,MAX(CASE 
		WHEN SUBSTR(Product,CHARACTER(product),1)='E'  AND SUBSTR(Product,1,2)='89' THEN '91' 
		WHEN SUBSTR(Product,CHARACTER(product),1)='E'  AND SUBSTR(Product,1,2)='83' THEN '86' 
	END) AS RM_2_Min_Eth
FROM	PROD_EDW_BASE_VIEWS.LAB_RESULTS
LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.blend
	ON lab_results.ref_prod_location = blend.ref_prod_location
		AND lab_results.job_name = blend.blendnum 
WHERE lab_results.ref_prod_location = 'gallup'
	--AND date_sampled BETWEEN '2017/01/01' AND '2017/02/15'
	AND sample_type = 'mogasfinal'
	AND component_name = 'Road_Octane_(R+M)/2'
	AND samplestatus = 'A'
GROUP BY job_name, tank, date_sampled, productcode
--ORDER BY date_sampled DESC
;
--------------------------------------------------------------------------------

--*********************************


REPLACE VIEW PROD_EDW_BASE_VIEWS.BLEND_GAL_RVPOCTANE_PCTR AS LOCKING ROW ACCESS
SELECT	Job_Name, Tank, Date_Sampled, Product
		,SUBSTR(product,3,2) AS Volatility_Class		
		,CASE WHEN SUBSTR(product,1,2)='83' THEN 'Regular' ELSE 'Premium' END AS Blend_Grade
		,CASE WHEN SUBSTR(product,8,1) = 'E' THEN 'Ethanol' ELSE 'Neat' END AS Blend_Type
		,MAX(RVP_Min_Raw) AS RVP_Min, MAX(RVP_Max_Raw) AS RVP_Max, MAX(RVP_Raw) AS RVP, MAX(Octane_Raw) AS Octane
		,MAX(RVP_Max_Raw - RVP_Raw) AS RVP_Giveaway
		,CAST(MAX(BlendTOV) AS INTEGER) AS Blend_Volume
		,RVP_Giveaway*MAX(BlendTOV) AS RVP_Giveaway_BBL
		,CAST(MAX(AARQU00_Raw) AS DECIMAL(10,2)) AS AARQU00
		,CAST(MAX(PMAAI00_Raw) AS DECIMAL(10,2)) AS PMAAI00
		,CAST(MAX(AARQURV_Raw) AS DECIMAL(10,2)) AS AARQURV
		,RVP_Giveaway_BBL*(((MAX(AARQU00_Raw)-MAX(PMAAI00_Raw))+((91.5-84)*4))/((60**1.25-MAX(AARQURV_Raw)**1.25)**0.8)/100*42) AS RVP_Giveaway_Dol
		,MAX(Octane_Raw - Octane_Min_Raw) AS Octane_Giveaway
		,Octane_Giveaway*MAX(BlendTOV) AS Octane_Giveaway_BBL
		,(Octane_Giveaway_BBL*4/100*42) AS Octane_Giveaway_Dol_Neat
		,MAX(D86_10) AS D86_10
		,MAX(D86_10_Max) AS D86_10_Max
		,MAX(D86_50) AS D86_50
		,MAX(D86_50_Min) AS D86_50_Min
		,MAX(D86_50_Max) AS D86_50_Max
		,MAX(D86_90) AS D86_90
		,MAX(D86_90_Max) AS D86_90_Max
		,MAX(RM_2) AS RM2
		,CASE
			WHEN product = '89D4NNM' THEN 89
			WHEN product = '83D4NNME' THEN 86
			WHEN product = '89D4NNME' THEN 91
			ELSE 83
		END AS RM2_Min
		--,MAX(RM_2_Min) AS RM2_Min
		,MAX(Benzene) AS Benzene
		,MAX(Benzene_Max) AS Benzene_Max
		,MAX(DI) AS DI
		,MAX(DI_Max) AS DI_Max
		,MAX(FBP) AS FBP
		,MAX(FBP_Max) AS FBP_Max
		,MAX(RVP_Lower) AS RVP_Lower
		,MAX(RVP_Lower_Max) AS RVP_Lower_Max
		,MAX(Sulfur) AS Sulfur
		,MAX(Sulfur_Max) AS Sulfur_Max
		,CAST(MAX(VL_Ratio_Raw) AS INTEGER) AS VL_Ratio
		,MAX(VL_Ratio_Min_Raw) AS VL_Ratio_Min
		,CAST(MAX(VL_Ratio_Min_Raw)-MAX(VL_Ratio_Raw) AS INTEGER) AS VL_Giveaway
		
	FROM
	(
		SELECT Job_Name, Tank
			,Date_Sampled
			,Product,SUBSTR(Product,1,2) AS OctaneSpec
			,SUBSTR(Product,CHARACTER(product),1) AS Neat_Eth
			,CASE WHEN component_name = 'RVP' THEN Results_Value END AS RVP_Raw
			,CASE WHEN component_name = 'RVP' THEN Min_Limit END AS RVP_Min_Raw
			,CASE WHEN component_name = 'RVP' THEN Max_Limit END AS RVP_Max_Raw
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2' THEN Results_Value END AS Octane_Raw
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2' THEN Min_Limit END AS Octane_Min_Raw
			,BlendTOV
			,CASE WHEN component_name = '10%' THEN Results_Value END AS D86_10
			,CASE WHEN component_name = '10%' THEN Min_Limit END AS D86_10_Min
			,CASE WHEN component_name = '10%' THEN Max_Limit END AS D86_10_Max
			,CASE WHEN component_name = '50%' THEN Results_Value END AS D86_50
			,CASE WHEN component_name = '50%' THEN Min_Limit END AS D86_50_Min
			,CASE WHEN component_name = '50%' THEN Max_Limit END AS D86_50_Max
			,CASE WHEN component_name = '90%' THEN Results_Value END AS D86_90
			,CASE WHEN component_name = '90%' THEN Min_Limit END AS D86_90_Min
			,CASE WHEN component_name = '90%' THEN Max_Limit END AS D86_90_Max
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2'  THEN Results_Value END AS RM_2
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2'  THEN Min_Limit END AS RM_2_Min
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2'  THEN Max_Limit END AS RM_2_Max
			,CASE WHEN component_name = 'Benzene_%vol'  THEN Results_Value END AS Benzene
			,CASE WHEN component_name = 'Benzene_%vol'  THEN Min_Limit END AS Benzene_Min
			,CASE WHEN component_name = 'Benzene_%vol'  THEN Max_Limit END AS Benzene_Max
			,CASE WHEN component_name = 'Drivability_Index'THEN Results_Value END AS DI
			,CASE WHEN component_name = 'Drivability_Index' THEN Min_Limit END AS DI_Min
			,CASE WHEN component_name = 'Drivability_Index' THEN Max_Limit END AS DI_Max
			,CASE WHEN component_name = 'FBP' THEN Results_Value END AS FBP
			,CASE WHEN component_name = 'FBP' THEN Min_Limit END AS FBP_Min
			,CASE WHEN component_name = 'FBP' THEN Max_Limit END AS FBP_Max
			,CASE WHEN component_name = 'RVP_Lower' THEN Results_Value END AS RVP_Lower
			,CASE WHEN component_name = 'RVP_Lower' THEN Min_Limit END AS RVP_Lower_Min
			,CASE WHEN component_name = 'RVP_Lower' THEN Max_Limit END AS RVP_Lower_Max
			,CASE WHEN component_name = 'Sulfur_ppm' THEN Results_Value END AS Sulfur
			,CASE WHEN component_name = 'Sulfur_ppm' THEN Min_Limit END AS Sulfur_Min
			,CASE WHEN component_name = 'Sulfur_ppm' THEN Max_Limit END AS Sulfur_Max
			,CASE WHEN component_name = 'VL_Ratio_Oxygenated' THEN Results_Value END AS VL_Ratio_Raw
			,CASE WHEN component_name = 'VL_Ratio_Oxygenated' THEN Min_Limit END AS VL_Ratio_Min_Raw
			,CASE WHEN component_name = 'VL_Ratio_Oxygenated' THEN Max_Limit END AS VL_Ratio_Max_Raw
			
		FROM	PROD_EDW_BASE_VIEWS.LAB_RESULTS
		LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.blend_pctr
			ON lab_results.ref_prod_location = blend_pctr.ref_prod_location
			AND lab_results.job_name = blend_pctr.blendnum 
		WHERE lab_results.ref_prod_location = 'gallup'
			--AND date_sampled BETWEEN '2016/05/01' AND '2016/05/13'
			AND sample_type = 'mogasfinal'
			AND component_name IN ('RVP','Road_Octane_(R+M)/2'
			,'10%','50%','90%','Benzene_%vol','Drivability_Index','FBP','RVP_Lower','Sulfur_ppm','VL_Ratio_Oxygenated'
			)
		AND samplestatus = 'A'
	) AS tmpGalRVPOctane

	INNER JOIN
		(SELECT	Cur_Date,
			MAX(CASE WHEN pricing_code = 'AARQU00' THEN price end) AS AARQU00_Raw,
			MAX(CASE WHEN pricing_code = 'AARQURV' THEN price end) AS AARQURV_Raw,
			MAX(CASE WHEN pricing_code = 'PMAAI00' THEN price end) AS PMAAI00_Raw 
		FROM	PROD_EDW_BASE_VIEWS.COMBINED_PRICING
		INNER JOIN
			(SELECT cur_date, MAX(price_eff_date) AS PriceDate
			FROM	PROD_EDW_BASE_VIEWS.Cur_Date
			INNER JOIN PROD_EDW_BASE_VIEWS.combined_pricing
				ON cur_date.cur_date >= combined_pricing.price_eff_date
					AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
					AND combined_pricing.price_type IN ('Close','Unspecified')
			GROUP BY cur_date) AS tmpPriceDate
			ON combined_pricing.price_eff_date = tmpPriceDate.PriceDate
				AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
				AND combined_pricing.price_type IN ('Close','Unspecified')
		GROUP BY Cur_Date) AS tmpPrice
		ON tmpGalRVPOctane.date_sampled = tmpPrice.Cur_Date

	GROUP BY Job_Name, Tank, Date_Sampled, Volatility_Class, Blend_Grade, Blend_Type, Product
	--ORDER BY date_sampled DESC, job_name, blend_type;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.BLEND_GAL_RVPOCTANE_PPL AS LOCKING ROW ACCESS
SELECT	Job_Name, Tank, Date_Sampled, Product
		,SUBSTR(product,3,2) AS Volatility_Class		
		,CASE WHEN SUBSTR(product,1,2)='83' THEN 'Regular' ELSE 'Premium' END AS Blend_Grade
		,CASE WHEN SUBSTR(product,8,1) = 'E' THEN 'Ethanol' ELSE 'Neat' END AS Blend_Type
		,MAX(RVP_Min_Raw) AS RVP_Min, MAX(RVP_Max_Raw) AS RVP_Max, MAX(RVP_Raw) AS RVP, MAX(Octane_Raw) AS Octane
		,MAX(RVP_Max_Raw - RVP_Raw) AS RVP_Giveaway
		,CAST(MAX(BlendTOV) AS INTEGER) AS Blend_Volume
		,RVP_Giveaway*MAX(BlendTOV) AS RVP_Giveaway_BBL
		,CAST(MAX(AARQU00_Raw) AS DECIMAL(10,2)) AS AARQU00
		,CAST(MAX(PMAAI00_Raw) AS DECIMAL(10,2)) AS PMAAI00
		,CAST(MAX(AARQURV_Raw) AS DECIMAL(10,2)) AS AARQURV
		,RVP_Giveaway_BBL*(((MAX(AARQU00_Raw)-MAX(PMAAI00_Raw))+((91.5-84)*4))/((60**1.25-MAX(AARQURV_Raw)**1.25)**0.8)/100*42) AS RVP_Giveaway_Dol
		,MAX(Octane_Raw - Octane_Min_Raw) AS Octane_Giveaway
		,Octane_Giveaway*MAX(BlendTOV) AS Octane_Giveaway_BBL
		,(Octane_Giveaway_BBL*4/100*42) AS Octane_Giveaway_Dol_Neat
		,MAX(D86_10) AS D86_10
		,MAX(D86_10_Max) AS D86_10_Max
		,MAX(D86_50) AS D86_50
		,MAX(D86_50_Min) AS D86_50_Min
		,MAX(D86_50_Max) AS D86_50_Max
		,MAX(D86_90) AS D86_90
		,MAX(D86_90_Max) AS D86_90_Max
		,MAX(RM_2) AS RM2
		,CASE
			WHEN product = '89D4NNM' THEN 89
			WHEN product = '83D4NNME' THEN 86
			WHEN product = '89D4NNME' THEN 91
			ELSE 83
		END AS RM2_Min
		--,MAX(RM_2_Min) AS RM2_Min
		,MAX(Benzene) AS Benzene
		,MAX(Benzene_Max) AS Benzene_Max
		,MAX(DI) AS DI
		,MAX(DI_Max) AS DI_Max
		,MAX(FBP) AS FBP
		,MAX(FBP_Max) AS FBP_Max
		,MAX(RVP_Lower) AS RVP_Lower
		,MAX(RVP_Lower_Max) AS RVP_Lower_Max
		,MAX(Sulfur) AS Sulfur
		,MAX(Sulfur_Max) AS Sulfur_Max
		,CAST(MAX(VL_Ratio_Raw) AS INTEGER) AS VL_Ratio
		,MAX(VL_Ratio_Min_Raw) AS VL_Ratio_Min
		,CAST(MAX(VL_Ratio_Min_Raw)-MAX(VL_Ratio_Raw) AS INTEGER) AS VL_Giveaway
		
	FROM
	(
		SELECT Job_Name, Tank
			,Date_Sampled
			,Product,SUBSTR(Product,1,2) AS OctaneSpec
			,SUBSTR(Product,CHARACTER(product),1) AS Neat_Eth
			,CASE WHEN component_name = 'RVP' THEN Results_Value END AS RVP_Raw
			,CASE WHEN component_name = 'RVP' THEN Min_Limit END AS RVP_Min_Raw
			,CASE WHEN component_name = 'RVP' THEN Max_Limit END AS RVP_Max_Raw
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2' THEN Results_Value END AS Octane_Raw
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2' THEN Min_Limit END AS Octane_Min_Raw
			,BlendTOV
			,CASE WHEN component_name = '10%' THEN Results_Value END AS D86_10
			,CASE WHEN component_name = '10%' THEN Min_Limit END AS D86_10_Min
			,CASE WHEN component_name = '10%' THEN Max_Limit END AS D86_10_Max
			,CASE WHEN component_name = '50%' THEN Results_Value END AS D86_50
			,CASE WHEN component_name = '50%' THEN Min_Limit END AS D86_50_Min
			,CASE WHEN component_name = '50%' THEN Max_Limit END AS D86_50_Max
			,CASE WHEN component_name = '90%' THEN Results_Value END AS D86_90
			,CASE WHEN component_name = '90%' THEN Min_Limit END AS D86_90_Min
			,CASE WHEN component_name = '90%' THEN Max_Limit END AS D86_90_Max
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2'  THEN Results_Value END AS RM_2
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2'  THEN Min_Limit END AS RM_2_Min
			,CASE WHEN component_name = 'Road_Octane_(R+M)/2'  THEN Max_Limit END AS RM_2_Max
			,CASE WHEN component_name = 'Benzene_%vol'  THEN Results_Value END AS Benzene
			,CASE WHEN component_name = 'Benzene_%vol'  THEN Min_Limit END AS Benzene_Min
			,CASE WHEN component_name = 'Benzene_%vol'  THEN Max_Limit END AS Benzene_Max
			,CASE WHEN component_name = 'Drivability_Index'THEN Results_Value END AS DI
			,CASE WHEN component_name = 'Drivability_Index' THEN Min_Limit END AS DI_Min
			,CASE WHEN component_name = 'Drivability_Index' THEN Max_Limit END AS DI_Max
			,CASE WHEN component_name = 'FBP' THEN Results_Value END AS FBP
			,CASE WHEN component_name = 'FBP' THEN Min_Limit END AS FBP_Min
			,CASE WHEN component_name = 'FBP' THEN Max_Limit END AS FBP_Max
			,CASE WHEN component_name = 'RVP_Lower' THEN Results_Value END AS RVP_Lower
			,CASE WHEN component_name = 'RVP_Lower' THEN Min_Limit END AS RVP_Lower_Min
			,CASE WHEN component_name = 'RVP_Lower' THEN Max_Limit END AS RVP_Lower_Max
			,CASE WHEN component_name = 'Sulfur_ppm' THEN Results_Value END AS Sulfur
			,CASE WHEN component_name = 'Sulfur_ppm' THEN Min_Limit END AS Sulfur_Min
			,CASE WHEN component_name = 'Sulfur_ppm' THEN Max_Limit END AS Sulfur_Max
			,CASE WHEN component_name = 'VL_Ratio_Oxygenated' THEN Results_Value END AS VL_Ratio_Raw
			,CASE WHEN component_name = 'VL_Ratio_Oxygenated' THEN Min_Limit END AS VL_Ratio_Min_Raw
			,CASE WHEN component_name = 'VL_Ratio_Oxygenated' THEN Max_Limit END AS VL_Ratio_Max_Raw
			
		FROM	PROD_EDW_BASE_VIEWS.LAB_RESULTS
		LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.blend
			ON lab_results.ref_prod_location = blend.ref_prod_location
			AND lab_results.job_name = blend.blendnum 
		WHERE lab_results.ref_prod_location = 'gallup'
			--AND date_sampled BETWEEN '2016/05/01' AND '2016/05/13'
			AND sample_type = 'mogasfinal'
			AND component_name IN ('RVP','Road_Octane_(R+M)/2'
			,'10%','50%','90%','Benzene_%vol','Drivability_Index','FBP','RVP_Lower','Sulfur_ppm','VL_Ratio_Oxygenated'
			)
		AND samplestatus = 'A'
	) AS tmpGalRVPOctane

	INNER JOIN
		(SELECT	Cur_Date,
			MAX(CASE WHEN pricing_code = 'AARQU00' THEN price end) AS AARQU00_Raw,
			MAX(CASE WHEN pricing_code = 'AARQURV' THEN price end) AS AARQURV_Raw,
			MAX(CASE WHEN pricing_code = 'PMAAI00' THEN price end) AS PMAAI00_Raw 
		FROM	PROD_EDW_BASE_VIEWS.COMBINED_PRICING
		INNER JOIN
			(SELECT cur_date, MAX(price_eff_date) AS PriceDate
			FROM	PROD_EDW_BASE_VIEWS.Cur_Date
			INNER JOIN PROD_EDW_BASE_VIEWS.combined_pricing
				ON cur_date.cur_date >= combined_pricing.price_eff_date
					AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
					AND combined_pricing.price_type IN ('Close','Unspecified')
			GROUP BY cur_date) AS tmpPriceDate
			ON combined_pricing.price_eff_date = tmpPriceDate.PriceDate
				AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
				AND combined_pricing.price_type IN ('Close','Unspecified')
		GROUP BY Cur_Date) AS tmpPrice
		ON tmpGalRVPOctane.date_sampled = tmpPrice.Cur_Date

	GROUP BY Job_Name, Tank, Date_Sampled, Volatility_Class, Blend_Grade, Blend_Type, Product
	--ORDER BY date_sampled DESC, job_name, blend_type;
--------------------------------------------------------------------------------

--*******************************************

REPLACE VIEW prod_edw_base_views.BLEND_JETGIVEAWAY_EPA AS LOCKING ROW ACCESS

SELECT product_code, FromTank, ToTank
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder, lab_results.Job_Name
            ,MAX(CASE WHEN component_name = 'Flash_Avg' THEN Results_Value END) AS FlashPoint
            ,MAX(CASE WHEN component_name = 'Flash_Avg' THEN Min_Limit END) AS FlashPointMin
            ,MAX(CASE WHEN component_name = 'HOLD' THEN Results_Value END) AS Aromaticity
            ,MAX(CASE WHEN component_name = 'HOLD' THEN Max_Limit END) AS AromaticityMax
            ,MAX(CASE WHEN component_name = '10%_Avg' THEN Results_Value END) AS DistillationT10
            ,MAX(CASE WHEN component_name = '10%_Avg' THEN Max_Limit END) AS DistillationT10Max
            ,MAX(CASE WHEN component_name = '90%_Avg' THEN Results_Value END) AS DistillationT90
            ,MAX(CASE WHEN component_name = '90%_Avg' THEN Min_Limit END) AS DistillationT90Min
            ,MAX(CASE WHEN component_name = '90%_Avg' THEN Max_Limit END) AS DistillationT90Max
            ,MAX(CASE WHEN component_name = 'Sulfur_%wt' THEN Results_Value END) AS Sulfur
            ,MAX(CASE WHEN component_name = 'Sulfur_%wt' THEN Max_Limit END) AS SulfurMax
            ,MAX(CASE WHEN component_name = 'Gravity_Average' THEN Results_Value END) AS APIGravity
            ,MAX(CASE WHEN component_name = 'Gravity_Average' THEN Min_Limit END) AS APIGravityMin
            ,MAX(CASE WHEN component_name = 'Copper_Corrosion_Strip_(2h,_100_deg_C)' THEN Results_Text END) AS CopperCorrosion
            ,MAX(CASE WHEN component_name = 'Copper_Corrosion_Strip_(2h,_100_deg_C)' THEN Max_Limit END) AS CopperCorrosionMax
            ,MAX(CASE WHEN component_name = 'Viscosity' THEN Results_Value END) AS Viscocity
            ,MAX(CASE WHEN component_name = 'Viscosity' THEN Min_Limit END) AS ViscocityMin
            ,MAX(CASE WHEN component_name = 'Viscosity' THEN Max_Limit END) AS ViscocityMax
            ,MAX(CASE WHEN component_name = 'Residue_Avg' THEN Results_Value END) AS CarbonResidue
            ,MAX(CASE WHEN component_name = 'Residue_Avg' THEN Max_Limit END) AS CarbonResidueMax
            ,CAST(From_OpenGaugeTime AS DATE) AS From_OpenGaugeDate
            ,CAST(To_CloseGaugeTime AS DATE) AS To_CloseGaugeDate
FROM prod_edw_base_views.lab_results

INNER JOIN
    (
    SELECT    ref_product.ref_prod_location, product_code
            ,m1.master_code AS FromTank, m2.master_code AS ToTank
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder, MAX(Job_Name) AS MaxJobName
    FROM prod_edw_base_views.Refops_PumpersLog
    INNER JOIN prod_edw_base_views.ref_product
        ON refops_pumperslog.ref_prod_location = ref_product.ref_prod_location
            AND refops_pumperslog.productid = ref_product.product_id
    INNER JOIN prod_edw_base_views.master m1
        ON refops_pumperslog.ref_prod_location = m1.ref_prod_location
            AND refops_pumperslog.from_tankid = m1.master_id
    INNER JOIN prod_edw_base_views.master m2
        ON refops_pumperslog.ref_prod_location = m2.ref_prod_location
            AND refops_pumperslog.to_tankid = m2.master_id
    INNER JOIN prod_edw_base_views.lab_results
        ON refops_pumperslog.ref_prod_location = lab_results.ref_prod_location
            AND m1.master_code = CASE WHEN SUBSTR(lab_results.tank,1,2)='40' THEN 'T'||Lab_Results.Tank ELSE 'T0'||SUBSTR(lab_results.Tank,2,3) END
            AND refops_pumperslog.From_OpenGaugeTime > CAST(lab_results.date_sampled AS TIMESTAMP(0)) + (lab_results.time_sampled - TIME '00:00:00' HOUR TO SECOND)
    WHERE ref_product.ref_prod_location = 'el paso refinery'
        AND ref_product.product_id = 99
        AND ToTank IN ('Ship Pipe','Ship Truck')
        AND job_name LIKE '30%'
    GROUP BY ref_product.ref_prod_location, product_code
            ,m1.master_code, m2.master_code
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder
    ) AS tmpLabResultsMax
    ON lab_results.ref_prod_location = tmpLabResultsMax.ref_prod_location
        AND lab_results.Job_Name = tmpLabResultsMax.MaxJobName

GROUP BY product_code, FromTank, ToTank
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder, lab_results.Job_Name
--ORDER BY from_opengaugetime DESC
;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Blend_Lims_XRef_Dcd AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.BLEND_LIMS_XREF_DCD
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Blend_Octane_Diff AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM PROD_EDW_BASE.BLEND_OCTANE_DIFF
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Blend_Pctr
	AS LOCKING ROW ACCESS
SELECT* FROM	PROD_EDW_BASE.BLEND_PCTR;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.BLEND_PREDICTEDVALUE
	(Ref_prod_location, Blend_Number, Blend_Type, Blend_Date,
		Tank, Product, Component_Name_Blend, Component_Name_LIMS, Specification,
		Spec_Min, Spec_Max, Predicted_Value, Calc_Include, Volatility_Class, 
		DON_Giveaway_Type, DON_Giveaway_Cause, RVP_Giveaway_Type, RVP_Giveaway_Cause,
		Create_dttm, Last_update_dttm)
AS 
	LOCKING ROW
	ACCESS
SELECT	Ref_prod_location, Blend_Number, Blend_Type, Blend_Date
		,Tank, Product, Component_Name_Blend, Component_Name_LIMS
		,CASE WHEN Spec_Min IS NOT NULL AND Spec_Max IS NOT NULL THEN
						 TRIM(spec_min (FORMAT 'ZZZZZ9.99') (VARCHAR(10)))||' Min - '||TRIM(spec_max (FORMAT 'ZZZZZ9.99') (VARCHAR(10)))||' Max'
					WHEN Spec_Min IS NOT NULL AND Spec_Max IS NULL THEN TRIM(spec_min (FORMAT 'ZZZZZ9.99') (VARCHAR(10)))||' Min'
					WHEN Spec_Min IS NULL AND Spec_Max IS NOT NULL THEN TRIM(spec_max (FORMAT 'ZZZZZ9.99') (VARCHAR(10)))||' Max'
					WHEN Spec_Min IS NULL AND Spec_Max IS NULL THEN Specification
		END AS Specification
		,Spec_Min, Spec_Max, Predicted_Value, Calc_Include, Volatility_Class
		,DON_Giveaway_Type, DON_Giveaway_Cause, RVP_Giveaway_Type, RVP_Giveaway_Cause
		,Create_dttm, Last_update_dttm
FROM	PROD_EDW_BASE.BLEND_PREDICTEDVALUE;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BLEND_ULSDGIVEAWAY_EPA AS LOCKING ROW ACCESS

SELECT product_code, FromTank, ToTank
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder, lab_results.Job_Name
             ,MAX(CASE WHEN lab_results.component_name = 'Flash_Pensky_Martens' THEN Results_Value END) AS FlashPoint
            ,MAX(CASE WHEN lab_results.component_name = 'Flash_Pensky_Martens' THEN Min_Limit END) AS FlashPointMin
            ,MAX(CASE WHEN lab_results.component_name = 'Cetane_Diesel' THEN Results_Value END) AS CetaneIndex
            ,MAX(CASE WHEN lab_results.component_name = 'Cetane_Diesel' THEN Min_Limit END) AS CetaneIndexMin
            ,MAX(CASE WHEN lab_results.component_name = 'HOLD' THEN Results_Value END) AS Aromaticity
            ,MAX(CASE WHEN lab_results.component_name = 'HOLD' THEN Max_Limit END) AS AromaticityMax
            ,MAX(CASE WHEN lab_results.component_name = '10%' THEN Results_Value END) AS DistillationT10
            ,MAX(CASE WHEN lab_results.component_name = '10%' THEN Max_Limit END) AS DistillationT10Max
            ,MAX(CASE WHEN lab_results.component_name = '90%' THEN Results_Value END) AS DistillationT90
            ,MAX(CASE WHEN lab_results.component_name = '90%' THEN Min_Limit END) AS DistillationT90Min
            ,MAX(CASE WHEN lab_results.component_name = '90%' THEN Max_Limit END) AS DistillationT90Max
            ,MAX(CASE WHEN lab_results.component_name = 'Sulfur_ppm_wt' THEN Results_Value END) AS Sulfur
            ,MAX(CASE WHEN lab_results.component_name = 'Sulfur_ppm_wt' THEN Max_Limit END) AS SulfurMax
            ,MAX(CASE WHEN lab_results.component_name = 'Gravity_TB_Average' THEN Results_Value END) AS APIGravity
            ,MAX(CASE WHEN lab_results.component_name = 'Gravity_TB_Average' THEN Min_Limit END) AS APIGravityMin
            ,MAX(CASE WHEN lab_results.component_name = 'Copper_Corrosion_Strip_(3h,_50_deg_C)' THEN Results_Text END) AS CopperCorrosion
            ,MAX(CASE WHEN lab_results.component_name = 'Copper_Corrosion_Strip_(3h,_50_deg_C)' THEN Max_Limit END) AS CopperCorrosionMax
            ,MAX(CASE WHEN lab_results.component_name = 'Viscosity_cst' THEN Results_Value END) AS Viscocity
            ,MAX(CASE WHEN lab_results.component_name = 'Viscosity_cst' THEN Min_Limit END) AS ViscocityMin
            ,MAX(CASE WHEN lab_results.component_name = 'Viscosity_cst' THEN Max_Limit END) AS ViscocityMax
            ,MAX(CASE WHEN lab_results.component_name = 'Wax_Cloud' THEN Results_Value END) AS CloudPoint
            ,MAX(CASE WHEN lab_results.component_name = 'Wax_Cloud' THEN Max_Limit END) AS CloudPointMax    
            ,MAX(CASE WHEN lab_results.component_name = 'Pour_Point' THEN Results_Value END) AS PourPoint    
            ,MAX(CASE WHEN lab_results.component_name = 'Pour_Point' THEN Max_Limit END) AS PourPointMax
            ,MAX(CASE WHEN lab_results.component_name = 'CFPP' THEN Results_Value END) AS ColdFilterPourPoint
            ,MAX(CASE WHEN lab_results.component_name = 'CFPP' THEN Max_Limit END) AS ColdFilterPourPointMax
            ,CAST(From_OpenGaugeTime AS DATE) AS From_OpenGaugeDate
            ,CAST(To_CloseGaugeTime AS DATE) AS To_CloseGaugeDate
FROM prod_edw_base_views.lab_results

INNER JOIN
    (
    SELECT    ref_product.ref_prod_location, product_code
            ,m1.master_code AS FromTank, m2.master_code AS ToTank
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder, MAX(Job_Name) AS MaxJobName
    FROM prod_edw_base_views.Refops_PumpersLog
    INNER JOIN prod_edw_base_views.ref_product
        ON refops_pumperslog.ref_prod_location = ref_product.ref_prod_location
            AND refops_pumperslog.productid = ref_product.product_id
    INNER JOIN prod_edw_base_views.master m1
        ON refops_pumperslog.ref_prod_location = m1.ref_prod_location
            AND refops_pumperslog.from_tankid = m1.master_id
    INNER JOIN prod_edw_base_views.master m2
        ON refops_pumperslog.ref_prod_location = m2.ref_prod_location
            AND refops_pumperslog.to_tankid = m2.master_id
    INNER JOIN prod_edw_base_views.lab_results
        ON refops_pumperslog.ref_prod_location = lab_results.ref_prod_location
            AND m1.master_code = CASE WHEN SUBSTR(lab_results.tank,1,2)='46' THEN 'T'||Lab_Results.Tank ELSE 'T0'||SUBSTR(lab_results.Tank,2,3) END
            AND refops_pumperslog.From_OpenGaugeTime > CAST(lab_results.date_sampled AS TIMESTAMP(0)) + (lab_results.time_sampled - TIME '00:00:00' HOUR TO SECOND)
    WHERE ref_product.ref_prod_location = 'el paso refinery'
        AND ref_product.product_id = 188
        AND ToTank IN ('Ship Pipe','Ship Truck')
        AND job_name LIKE '50%'
    GROUP BY ref_product.ref_prod_location, product_code
            ,m1.master_code, m2.master_code
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder
    ) AS tmpLabResultsMax
    ON lab_results.ref_prod_location = tmpLabResultsMax.ref_prod_location
        AND lab_results.Job_Name = tmpLabResultsMax.MaxJobName

GROUP BY product_code, FromTank, ToTank
            ,From_OpenGaugeTime, To_CloseGaugeTime, From_BarrelsNet
            ,Comments, PumpOrder, lab_results.Job_Name
--ORDER BY from_opengaugetime DESC

;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BLEND_ULSDGIVEAWAY_GAL AS LOCKING ROW ACCESS

SELECT    Job_Name, Date_Sampled, Time_Sampled, Product, Tank
        ,MAX(CASE WHEN component_name = 'cetane_diesel' THEN results_value END) AS Cetane
        ,MAX(CASE WHEN component_name = 'cetane_diesel' THEN units END) AS Cetane_Units
        ,MAX(CASE WHEN component_name = 'cetane_diesel' THEN min_limit END) AS Cetane_MinSpec
        ,MAX(CASE WHEN component_name = 'cetane_diesel' THEN max_limit END) AS Cetane_MaxSpec
        ,MAX(CASE WHEN component_name = 'Viscosity_cSt' THEN results_value END) AS Viscocity
        ,MAX(CASE WHEN component_name = 'Viscosity_cSt' THEN units END) AS Viscocity_Units
        ,MAX(CASE WHEN component_name = 'Viscosity_cSt' THEN min_limit END) AS Viscocity_MinSpec
        ,MAX(CASE WHEN component_name = 'Viscosity_cSt' THEN max_limit END) AS Viscocity_MaxSpec
        ,MAX(CASE WHEN component_name = '90%' THEN results_value END) AS D86_90
        ,MAX(CASE WHEN component_name = '90%' THEN units END) AS D86_90_Units
        ,MAX(CASE WHEN component_name = '90%' THEN min_limit END) AS D86_90_MinSpec
        ,MAX(CASE WHEN component_name = '90%' THEN max_limit END) AS D86_90_MaxSpec
        ,MAX(CASE WHEN component_name = 'Wax_Cloud' THEN results_value END) AS Cloud
        ,MAX(CASE WHEN component_name = 'Wax_Cloud' THEN units END) AS Cloud_Units
        ,MAX(CASE WHEN component_name = 'Wax_Cloud' THEN min_limit END) AS Cloud_MinSpec
		,CASE
			WHEN product = 'ULSD20' THEN CAST(20 AS DECIMAL(10,1))
			WHEN product = 'ULSD24' THEN CAST(24 AS DECIMAL(10,1))
			WHEN product = 'ULSD36' THEN CAST(36 AS DECIMAL(10,1))
			WHEN product = 'ULSD10' THEN CAST(10 AS DECIMAL(10,1))
			WHEN product = 'ULSD16' THEN CAST(16 AS DECIMAL(10,1))
			ELSE MAX(CASE WHEN component_name = 'Wax_Cloud' THEN max_limit END) 
		END AS Cloud_MaxSpec
        ,MAX(CASE WHEN component_name = 'Pour_Point' THEN results_value END) AS PourPoint
        ,MAX(CASE WHEN component_name = 'Pour_Point' THEN units END) AS PourPoint_Units
        ,MAX(CASE WHEN component_name = 'Pour_Point' THEN min_limit END) AS PourPoint_MinSpec
		,CASE
			WHEN product = 'ULSD20' THEN CAST(0 AS DECIMAL(10,1))
			WHEN product = 'ULSD24' THEN CAST(5 AS DECIMAL(10,1))
			WHEN product = 'ULSD36' THEN CAST(16 AS DECIMAL(10,1))
			WHEN product = 'ULSD10' THEN CAST(-10 AS DECIMAL(10,1))
			WHEN product = 'ULSD16' THEN CAST(-5 AS DECIMAL(10,1))
			ELSE MAX(CASE WHEN component_name = 'Pour_Point' THEN max_limit END) 
		END AS PourPoint_MaxSpec
        ,MAX(CASE WHEN component_name = 'Flash_Pensky_Martens' THEN results_value END) AS FlashPoint
        ,MAX(CASE WHEN component_name = 'Flash_Pensky_Martens' THEN units END) AS FlashPoint_Units
        ,MAX(CASE WHEN component_name = 'Flash_Pensky_Martens' THEN min_limit END) AS FlashPoint_MinSpec
        ,MAX(CASE WHEN component_name = 'Flash_Pensky_Martens' THEN max_limit END) AS FlashPoint_MaxSpec
        ,MAX(CASE WHEN component_name = 'Sulfur_ppm' THEN results_value END) AS Sulfur
        ,MAX(CASE WHEN component_name = 'Sulfur_ppm' THEN units END) AS Sulfur_Units
        ,MAX(CASE WHEN component_name = 'Sulfur_ppm' THEN min_limit END) AS Sulfur_MinSpec
        ,MAX(CASE WHEN component_name = 'Sulfur_ppm' THEN max_limit END) AS Sulfur_MaxSpec
FROM prod_edw_base_views.LAB_RESULTS
WHERE ref_prod_location = 'gallup'
AND product LIKE 'ulsd%'
AND product <> 'ULSDSTATIO'
AND component_name IN ('Cetane_Diesel','Viscosity_cSt','90%','Wax_Cloud','Pour_Point','Sulfur_ppm','Flash_Pensky_Martens')
GROUP BY Job_Name, Date_Sampled, Time_Sampled, Product, Tank
--ORDER BY Date_Sampled DESC, Time_Sampled DESC
;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BLEND_V5 AS LOCKING ROW ACCESS

-- Final display select
SELECT Blend.Ref_Prod_Location,Blend.BlendNum AS BlendNumber, Blend.BlendDate, Ref_Product.product_desc AS ProductDescription, calc_include, volatility_class, master_code AS Blend_Tank
	-- Determine if blend was the one shipped by making sure there are no following blends 
	,CASE
		WHEN SUBSTR(blend.blendnum,8,1) <> '' AND SUBSTR(MAX(blend.Blendnum) OVER (ORDER BY blend.Blendnum ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING),8,1) <> '' THEN 0
		WHEN SUBSTR(blend.blendnum,8,1) = '' AND SUBSTR(MAX(blend.Blendnum) OVER (ORDER BY blend.Blendnum ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING),8,1) <> '' THEN 0
		ELSE 1
	END AS Shipped
	-- Look for 'A'' blends to determine if there was a reblend
	,CASE WHEN SUBSTR(Blend.BlendNum,8,1) = 'A' THEN 1 ELSE 0 END AS Reblend

	,CAST(BlendVolume AS INTEGER) AS BlendVolume, CAST(HeelVol AS INTEGER) AS HeelVolume, CAST(BlendVolume+HeelVolume AS INTEGER) AS TotalVolume
	,CAST(LCC AS INTEGER) AS LCCVolume, CAST(IsoButane AS INTEGER) AS ISOBUTANEVolume, CAST(NormalButane AS INTEGER) AS NBUTANEVolume, CAST(MixedButane AS INTEGER) AS MBUTANEVolume
	,CAST(WREF AS INTEGER) AS WREFVolume, CAST(HREF AS INTEGER) AS HREFVolume, CAST(LREF AS INTEGER) AS LREFVolume, CAST(LOALKY AS INTEGER) AS LOALKYVolume
	,CAST(Hydrobate AS INTEGER) AS HYDROBATEVolume, CAST(Toluene AS INTEGER) AS TOLUENEVolume, CAST(Olefins AS INTEGER) AS OLEFINSVolume, CAST(LSR AS INTEGER) AS LSRVolume
	,CAST(TransferVol AS INTEGER) AS TRANSFERVolume

	,CAST(CASE WHEN (RM2_Actual - Blend_Octane_Diff.Octane) > 0 THEN ((RM2_Actual - Blend_Octane_Diff.Octane)*ZEROIFNULL(BlendVolume))
		ELSE 0
	END AS INTEGER) AS "Octane_GA_WV"
	,CAST(CASE WHEN (RVP_SpecMax - RVP_Actual)>0 THEN (((RVP_SpecMax - RVP_Actual)**1.2) *ZEROIFNULL(BlendVolume))
		ELSE 0
	END AS INTEGER) AS "RVI_GA_WV"
	,AARQU00, 'USC/GAL' AS AARQU00_Units, AARQURV, 'PSI' AS AARQURV_Units, PMAAI00, 'USC/GAL' AS PMAAI00_Units

	,API_Actual, API_Predicted, API_ETH_Actual, API_Final_Actual
	,RVP_Actual, RVP_Predicted, RVP_SpecMin, RVP_SpecMax, RVP_ETH_Actual, RVP_ETH_Predicted, RVP_ETH_SpecMin, RVP_ETH_SpecMax, RVP_Final_Actual
		,RVP_Final_Predicted, RVP_Final_SpecMin, RVP_Final_SpecMax
		,RVP_LCC_Actual, RVP_ALK_Actual, RVP_HREF_Actual, RVP_LSR_Actual, RVP_REF_Actual, RVP_MBUT_Actual, RVP_HSR_Actual, RVP_TOL_Actual, RVP_LREF_Actual
		,RVP_Heel
	,RM2_Actual, RM2_Predicted, RM2_SpecMin, RM2_ETH_Actual, RM2_ETH_Predicted, RM2_ETH_SpecMin, RM2_Final_Actual, RM2_Final_Predicted, RM2_Final_SpecMin
	,RON_Actual, RON_Predicted, RON_SpecMin, RON_ETH_Actual, RON_ETH_Predicted, RON_ETH_SpecMin, RON_Final_Actual, RON_Final_Predicted, RON_Final_SpecMin
		,RON_LCC_Actual, RON_ALK_Actual, RON_HREF_Actual, RON_LSR_Actual, RON_REF_Actual, RON_MBUT_Actual, RON_HSR_Actual, RON_TOL_Actual, RON_LREF_Actual
		,RON_Heel
	,MON_Actual, MON_Predicted, MON_SpecMin, MON_ETH_Actual, MON_ETH_Predicted, MON_ETH_SpecMin, MON_Final_Actual, MON_Final_Predicted, MON_Final_SpecMin
		,MON_LCC_Actual, MON_ALK_Actual, MON_HREF_Actual, MON_LSR_Actual, MON_REF_Actual, MON_MBUT_Actual, MON_HSR_Actual, MON_TOL_Actual, MON_LREF_Actual
		,MON_Heel
	,TVLF_Actual, TVLF_Predicted, TVLF_SpecMin, TVLF_ETH_Actual, TVLF_ETH_Predicted, TVLF_ETH_SpecMin, TVLF_Final_Actual, TVLF_Final_Predicted, TVLF_Final_SpecMin
	,DI_Actual, DI_Predicted, DI_SpecMax, DI_ETH_Actual, DI_ETH_Predicted, DI_ETH_SpecMax
	,Benzene_Actual, Benzene_Predicted, Benzene_SpecMax, Benzene_ETH_Actual, Benzene_ETH_Predicted, Benzene_ETH_SpecMax, Benzene_Final_Actual
		,Benzene_Final_Predicted, Benzene_Final_SpecMax
	,Sulfur_Actual, Sulfur_Predicted, Sulfur_SpecMax, Sulfur_ETH_Actual, Sulfur_ETH_Predicted, Sulfur_ETH_SpecMax, Sulfur_Final_Actual, Sulfur_Final_Predicted, Sulfur_Final_SpecMax
	,Aromatics_Actual, Aromatics_Predicted, Aromatics_SpecMax, Aromatics_ETH_Actual, Aromatics_ETH_Predicted, Aromatics_ETH_SpecMax,Aromatics_Final_Actual
		,Aromatics_Final_Predicted, Aromatics_Final_SpecMax
	,Olefins_Actual, Olefins_Predicted, Olefins_SpecMax, Olefins_ETH_Actual, Olefins_ETH_Predicted, Olefins_ETH_SpecMax, Olefins_Final_Actual, Olefins_Final_Predicted, Olefins_Final_SpecMax
	,E200_Actual, E200_Predicted, E200_SpecMin, E200_SpecMax, E200_ETH_Actual, E200_ETH_Predicted, E200_ETH_SpecMIN, E200_ETH_SpecMAX, E300_Actual
		,E300_Predicted, E300_SpecMin, E300_SpecMax, E300_ETH_Actual, E300_ETH_Predicted, E300_ETH_SpecMIN, E300_ETH_SpecMAX
	,IBP_Actual, IBP_Predicted, IBP_SpecMin, IBP_SpecMax, IBP_ETH_Actual, IBP_ETH_Predicted, IBP_ETH_SpecMIN, IBP_ETH_SpecMAX
		,IBP_LCC_Actual, IBP_ALK_Actual, IBP_HREF_Actual, IBP_LSR_Actual, IBP_REF_Actual, IBP_MBUT_Actual, IBP_HSR_Actual, IBP_TOL_Actual, IBP_LREF_Actual
		,IBP_Heel
	,FBP_Actual, FBP_Predicted, FBP_SpecMin, FBP_SpecMax, FBP_ETH_Actual, FBP_ETH_Predicted, FBP_ETH_SpecMIN, FBP_ETH_SpecMAX
		,FBP_LCC_Actual, FBP_ALK_Actual, FBP_HREF_Actual, FBP_LSR_Actual, FBP_REF_Actual, FBP_MBUT_Actual, FBP_HSR_Actual, FBP_TOL_Actual, FBP_LREF_Actual
		,FBP_Heel
	,D8610F_Actual, D8610F_Predicted, D8610F_SpecMin, D8610F_SpecMax, D8610F_ETH_Actual, D8610F_ETH_Predicted, D8610F_ETH_SpecMin, D8610F_ETH_SpecMax
		,D8610F_Final_Actual, D8610F_Final_Predicted, D8610F_Final_SpecMin, D8610F_Final_SpecMax
		,D8610F_LCC_Actual, D8610F_ALK_Actual, D8610F_HREF_Actual, D8610F_LSR_Actual, D8610F_REF_Actual, D8610F_MBUT_Actual, D8610F_HSR_Actual, D8610F_TOL_Actual
		,D8610F_LREF_Actual, D8610F_Heel
	,D8630F_Actual, D8630F_Predicted, D8630F_SpecMax, D8630F_ETH_Actual, D8630F_ETH_Predicted, D8630F_ETH_SpecMax
		,D8630F_LCC_Actual, D8630F_ALK_Actual, D8630F_HREF_Actual, D8630F_LSR_Actual, D8630F_REF_Actual, D8630F_MBUT_Actual, D8630F_HSR_Actual, D8630F_TOL_Actual
		,D8630F_LREF_Actual, D8630F_Heel
	,D8650F_Actual, D8650F_Predicted, D8650F_SpecMin, D8650F_SpecMax, D8650F_ETH_Actual, D8650F_ETH_Predicted, D8650F_ETH_SpecMin, D8650F_ETH_SpecMax
		,D8650F_Final_Actual, D8650F_Final_Predicted, D8650F_Final_SpecMin, D8650F_Final_SpecMax
		,D8650F_LCC_Actual, D8650F_ALK_Actual, D8650F_HREF_Actual, D8650F_LSR_Actual, D8650F_REF_Actual, D8650F_MBUT_Actual, D8650F_HSR_Actual, D8650F_TOL_Actual
		,D8650F_LREF_Actual, D8650F_Heel
	,D8670F_Actual, D8670F_Predicted, D8670F_SpecMax, D8670F_ETH_Actual, D8670F_ETH_Predicted, D8670F_ETH_SpecMax
		,D8670F_LCC_Actual, D8670F_ALK_Actual, D8670F_HREF_Actual, D8670F_LSR_Actual, D8670F_REF_Actual, D8670F_MBUT_Actual, D8670F_HSR_Actual, D8670F_TOL_Actual
		,D8670F_LREF_Actual, D8670F_Heel
	,D8690F_Actual, D8690F_Predicted, D8690F_SpecMin, D8690F_SpecMax, D8690F_ETH_Actual, D8690F_ETH_Predicted, D8690F_ETH_SpecMin, D8690F_ETH_SpecMax
		,D8690F_Final_Actual, D8690F_Final_Predicted, D8690F_Final_SpecMin, D8690F_Final_SpecMax
		,D8690F_LCC_Actual, D8690F_ALK_Actual, D8690F_HREF_Actual, D8690F_LSR_Actual, D8690F_REF_Actual, D8690F_MBUT_Actual, D8690F_HSR_Actual, D8690F_TOL_Actual
		,D8690F_LREF_Actual, D8690F_Heel
	,Oxygen_Actual, Oxygen_Predicted, Oxygen_SpecMin, Oxygen_SpecMax, Oxygen_ETH_Actual, Oxygen_ETH_Predicted, Oxygen_ETH_SpecMIN, Oxygen_ETH_SpecMAX
	,Ethanol_Actual, Ethanol_Predicted, Ethanol_SpecMin, Ethanol_SpecMax, Ethanol_ETH_Actual, Ethanol_ETH_Predicted, Ethanol_ETH_SpecMIN, Ethanol_ETH_SpecMAX

FROM prod_edw_base_views.Blend

INNER JOIN prod_edw_base_views.ref_product
ON blend.ref_prod_location = ref_product.ref_prod_location
	AND blend.productid = ref_product.product_id

INNER JOIN prod_edw_base_views.master
ON blend.ref_prod_location = master.ref_prod_location
	AND blend.tankid = master.master_id

LEFT OUTER JOIN 
	(
	SELECT DISTINCT Ref_prod_location, Blend_Number, Calc_Include, Volatility_Class
	FROM prod_edw_base_views.BLEND_PREDICTEDVALUE
	) AS tmpBlend_PredictedValue
ON blend.ref_prod_location = tmpBlend_PredictedValue.ref_prod_location
	AND blend.BlendNum = tmpBlend_PredictedValue.Blend_Number

LEFT OUTER JOIN
	(
	-- Pull in component volumes
	SELECT ref_prod_location, BlendNum, ZEROIFNULL(SUM(Volume)) AS BlendVolume
		,ZEROIFNULL(SUM(LCC)) AS LCC, ZEROIFNULL(SUM(Isobutane)) AS Isobutane, ZEROIFNULL(SUM(NormalButane)) AS NormalButane
		,ZEROIFNULL(SUM(MixedButane)) AS MixedButane,ZEROIFNULL(SUM(WREF)) AS WREF, ZEROIFNULL(SUM(HREF)) AS HREF
		,ZEROIFNULL(SUM(LREF)) AS LREF, ZEROIFNULL(SUM(LOALKY)) AS LOALKY, ZEROIFNULL(SUM(Hydrobate)) AS Hydrobate, ZEROIFNULL(SUM(Toluene)) AS Toluene
		,ZEROIFNULL(SUM(Olefins)) AS Olefins, ZEROIFNULL(SUM(LSR)) AS LSR
		,ZEROIFNULL(SUM(Trans1))+ZEROIFNULL(SUM(Trans2))+ZEROIFNULL(SUM(Trans3))+ZEROIFNULL(SUM(Trans4))+ZEROIFNULL(SUM(Trans5))+ZEROIFNULL(SUM(Trans6))+
			ZEROIFNULL(SUM(Trans7))+ZEROIFNULL(SUM(Trans8))+ZEROIFNULL(SUM(Trans9))+ZEROIFNULL(SUM(Trans10))+ZEROIFNULL(SUM(Trans11)) AS TransferVol
	FROM
		(
		SELECT
			ref_prod_location, BlendNum, volume,
			CASE WHEN FeedProduct = 'Cat Gasoline' THEN volume END AS LCC,
			CASE WHEN FeedProduct = 'Iso Butane' THEN volume END AS IsoButane,
			CASE WHEN FeedProduct = 'Normal Butane' THEN volume END AS NormalButane,
			CASE WHEN FeedProduct = 'Mixed Butane' THEN volume END AS MixedButane,
			CASE WHEN FeedProduct = 'Reformate' THEN volume END AS WREF,
			CASE WHEN FeedProduct = 'Heavy Reformate' THEN volume END AS HREF,
			CASE WHEN FeedProduct = 'Light Reformate' THEN volume END AS LREF,
			CASE WHEN FeedProduct = 'Alkylate' THEN volume END AS LOALKY,
			CASE WHEN FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN volume END AS HYDROBATE,
			CASE WHEN FeedProduct = 'Toluene' THEN volume END AS TOLUENE,
			CASE WHEN FeedProduct = 'Olefins' THEN volume END AS OLEFINS,
			CASE WHEN FeedProduct = 'Light Straight Run' THEN volume END AS LSR,
			CASE WHEN FeedProduct = 'Albuquerque Sub Unleaded' THEN volume END AS TRANS1,
			CASE WHEN FeedProduct = 'CBG Premium' THEN volume END AS TRANS2,
			CASE WHEN FeedProduct = 'CBG Unlead' THEN volume END AS TRANS3,
			CASE WHEN FeedProduct = 'Conv Premium' THEN volume END AS TRANS4,
			CASE WHEN FeedProduct = 'Conv Unlead' THEN volume END AS TRANS5,
			CASE WHEN FeedProduct = 'Pemex Premium' THEN volume END AS TRANS6,
			CASE WHEN FeedProduct = 'Pemex Unleaded' THEN volume END AS TRANS7,
			CASE WHEN FeedProduct = 'Tucson Subgrade Unleaded' THEN volume END AS TRANS8,
			CASE WHEN FeedProduct = 'BSU Feed' THEN volume END AS TRANS9,
			CASE WHEN FeedProduct = 'Albuquerque Sub Premium Unleaded' THEN volume END AS TRANS10,
			CASE WHEN FeedProduct = 'Tucson Sub Premium Unleaded' THEN volume END AS TRANS11
		FROM
			/* Allocate volumes per blend recipe */
			(
			SELECT 
			Blend.ref_prod_location, Blend.BlendNum, FeedProduct, SUM(actualvolume) AS Volume
			FROM    prod_edw_base_views.BLEND
			INNER JOIN prod_edw_base_views.ref_product
				ON Ref_Product.Product_ID = Blend.ProductID
					AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
			LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
				ON Blend.blendid = blendrecipe.blendid
					AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, product_id, product_desc AS FeedProduct
				FROM prod_edw_base_views.ref_product) AS tmpFeedProduct
				ON Blendrecipe.productid = tmpFeedProduct.product_id
					AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
			GROUP BY blend.ref_prod_location,blend.blendnum, FeedProduct
			) AS tmpVolumes3
		) AS tmpVolumes2
	GROUP BY ref_prod_location, blendnum
	) AS tmpVolumes
ON blend.ref_prod_location = tmpVolumes.ref_prod_location
	AND blend.blendnum = tmpVolumes.blendnum 

LEFT OUTER JOIN
	(
	-- Pull in predcited values, actual values and specs
	SELECT tmpLab2.ref_prod_location, job_name, product_desc
		,MAX(API) AS API_Actual, MAX(API_ETH) AS API_ETH_Actual, MAX(API_PRED) AS API_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN API_Actual ELSE API_ETH_Actual END AS API_Final_Actual
		,MAX(RVP) AS RVP_Actual, MAX(RVP_PRED) AS RVP_Predicted, MAX(RVP_SPEC_MIN) AS RVP_SpecMin, MAX(RVP_SPEC_MAX) AS RVP_SpecMax
			,MAX(RVP_ETH) AS RVP_ETH_Actual, MAX(RVP_ETH_PRED) AS RVP_ETH_Predicted
			,MAX(RVP_ETH_SPEC_MIN) AS RVP_ETH_SpecMin, MAX(RVP_ETH_SPEC_MAX) AS RVP_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_Actual ELSE RVP_ETH_Actual END AS RVP_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_Predicted ELSE RVP_ETH_Predicted END AS RVP_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_SpecMin ELSE RVP_ETH_SpecMin END AS RVP_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_SpecMax ELSE RVP_ETH_SpecMax END AS RVP_Final_SpecMax
		,MAX(RM2) AS RM2_Actual, MAX(RM2_PRED) AS RM2_Predicted, MAX(RM2_SPEC_MIN) AS RM2_SpecMin
			,MAX(RM2_ETH) AS RM2_ETH_Actual, MAX(RM2_ETH_PRED) AS RM2_ETH_Predicted,MAX(RM2_ETH_SPEC_MIN) AS RM2_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RM2_Actual ELSE RM2_ETH_Actual END AS RM2_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RM2_Predicted ELSE RM2_ETH_Predicted END AS RM2_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RM2_SpecMin ELSE RM2_ETH_SpecMin END AS RM2_Final_SpecMin
		,MAX(RON) AS RON_Actual, MAX(RON_PRED) AS RON_Predicted, MAX(RON_SPEC_MIN) AS RON_SpecMin
			,MAX(RON_ETH) AS RON_ETH_Actual, MAX(RON_ETH_PRED) AS RON_ETH_Predicted, MAX(RON_ETH_SPEC_MIN) AS RON_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RON_Actual ELSE RON_ETH_Actual END AS RON_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RON_Predicted ELSE RON_ETH_Predicted END AS RON_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RON_SpecMin ELSE RON_ETH_SpecMin END AS RON_Final_SpecMin
		,MAX(MON) AS MON_Actual, MAX(MON_PRED) AS MON_Predicted, MAX(MON_SPEC_MIN) AS MON_SpecMin
			,MAX(MON_ETH) AS MON_ETH_Actual, MAX(MON_ETH_PRED) AS MON_ETH_Predicted, MAX(MON_ETH_SPEC_MIN) AS MON_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN MON_Actual ELSE MON_ETH_Actual END AS MON_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN MON_Predicted ELSE MON_ETH_Predicted END AS MON_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN MON_SpecMin ELSE MON_ETH_SpecMin END AS MON_Final_SpecMin
		,MAX(TVLF) AS TVLF_Actual, MAX(TVLF_PRED) AS TVLF_Predicted, MAX(TVLF_SPEC_MIN) AS TVLF_SpecMin
			,MAX(TVLF_ETH) AS TVLF_ETH_Actual, MAX(TVLF_ETH_PRED) AS TVLF_ETH_Predicted, MAX(TVLF_ETH_SPEC_MIN) AS TVLF_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN TVLF_Actual ELSE TVLF_ETH_Actual END AS TVLF_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN TVLF_Predicted ELSE TVLF_ETH_Predicted END AS TVLF_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN TVLF_SpecMin ELSE TVLF_ETH_SpecMin END AS TVLF_Final_SpecMin
		,MAX(DI) AS DI_Actual, MAX(DI_PRED) AS DI_Predicted, MAX(DI_SPEC_MAX) AS DI_SpecMax
			,MAX(DI_ETH) AS DI_ETH_Actual, MAX(DI_ETH_PRED) AS DI_ETH_Predicted, MAX(DI_ETH_SPEC_MAX) AS DI_ETH_SpecMax
		,MAX(Benzene) AS Benzene_Actual, MAX(Benzene_PRED) AS Benzene_Predicted, MAX(Benzene_SPEC_MAX) AS Benzene_SpecMax
			,MAX(Benzene_ETH) AS Benzene_ETH_Actual, MAX(Benzene_ETH_PRED) AS Benzene_ETH_Predicted, MAX(Benzene_ETH_SPEC_MAX) AS Benzene_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Benzene_Actual ELSE Benzene_ETH_Actual END AS Benzene_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Benzene_Predicted ELSE Benzene_ETH_Predicted END AS Benzene_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Benzene_SpecMax ELSE Benzene_ETH_SpecMax END AS Benzene_Final_SpecMax	
		,MAX(Sulfur) AS Sulfur_Actual, MAX(Sulfur_PRED) AS Sulfur_Predicted, MAX(Sulfur_SPEC_MAX) AS Sulfur_SpecMax
			,MAX(Sulfur_ETH) AS Sulfur_ETH_Actual, MAX(Sulfur_ETH_PRED) AS Sulfur_ETH_Predicted, MAX(Sulfur_ETH_SPEC_MAX) AS Sulfur_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Sulfur_Actual ELSE Sulfur_ETH_Actual END AS Sulfur_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Sulfur_Predicted ELSE Sulfur_ETH_Predicted END AS Sulfur_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Sulfur_SpecMax ELSE Sulfur_ETH_SpecMax END AS Sulfur_Final_SpecMax	
		,MAX(Aromatics) AS Aromatics_Actual, MAX(Aromatics_PRED) AS Aromatics_Predicted, MAX(Aromatics_SPEC_MAX) AS Aromatics_SpecMax
			,MAX(Aromatics_ETH) AS Aromatics_ETH_Actual, MAX(Aromatics_ETH_PRED) AS Aromatics_ETH_Predicted, MAX(Aromatics_ETH_SPEC_MAX) AS Aromatics_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Aromatics_Actual ELSE Aromatics_ETH_Actual END AS Aromatics_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Aromatics_Predicted ELSE Aromatics_ETH_Predicted END AS Aromatics_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Aromatics_SpecMax ELSE Aromatics_ETH_SpecMax END AS Aromatics_Final_SpecMax			
		,MAX(Olefins) AS Olefins_Actual, MAX(Olefins_PRED) AS Olefins_Predicted, MAX(Olefins_SPEC_MAX) AS Olefins_SpecMax
			,MAX(Olefins_ETH) AS Olefins_ETH_Actual, MAX(Olefins_ETH_PRED) AS Olefins_ETH_Predicted, MAX(Olefins_ETH_SPEC_MAX) AS Olefins_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Olefins_Actual ELSE Olefins_ETH_Actual END AS Olefins_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Olefins_Predicted ELSE Olefins_ETH_Predicted END AS Olefins_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Olefins_SpecMax ELSE Olefins_ETH_SpecMax END AS Olefins_Final_SpecMax			
		,MAX(E200) AS E200_Actual, MAX(E200_PRED) AS E200_Predicted, MAX(E200_SPEC_MIN) AS E200_SpecMin, MAX(E200_SPEC_MAX) AS E200_SpecMax
			,MAX(E200_ETH) AS E200_ETH_Actual, MAX(E200_ETH_PRED) AS E200_ETH_Predicted
			,MAX(E200_ETH_SPEC_MIN) AS E200_ETH_SpecMIN, MAX(E200_ETH_SPEC_MAX) AS E200_ETH_SpecMAX
		,MAX(E300) AS E300_Actual, MAX(E300_PRED) AS E300_Predicted, MAX(E300_SPEC_MIN) AS E300_SpecMin, MAX(E300_SPEC_MAX) AS E300_SpecMax
			,MAX(E300_ETH) AS E300_ETH_Actual, MAX(E300_ETH_PRED) AS E300_ETH_Predicted
			,MAX(E300_ETH_SPEC_MIN) AS E300_ETH_SpecMIN, MAX(E300_ETH_SPEC_MAX) AS E300_ETH_SpecMAX
		,MAX(IBP) AS IBP_Actual, MAX(IBP_PRED) AS IBP_Predicted, MAX(IBP_SPEC_MIN) AS IBP_SpecMin, MAX(IBP_SPEC_MAX) AS IBP_SpecMax
			,MAX(IBP_ETH) AS IBP_ETH_Actual, MAX(IBP_ETH_PRED) AS IBP_ETH_Predicted
			,MAX(IBP_ETH_SPEC_MIN) AS IBP_ETH_SpecMIN, MAX(IBP_ETH_SPEC_MAX) AS IBP_ETH_SpecMAX
		,MAX(FBP) AS FBP_Actual, MAX(FBP_PRED) AS FBP_Predicted, MAX(FBP_SPEC_MIN) AS FBP_SpecMin, MAX(FBP_SPEC_MAX) AS FBP_SpecMax
			,MAX(FBP_ETH) AS FBP_ETH_Actual, MAX(FBP_ETH_PRED) AS FBP_ETH_Predicted
			,MAX(FBP_ETH_SPEC_MIN) AS FBP_ETH_SpecMIN, MAX(FBP_ETH_SPEC_MAX) AS FBP_ETH_SpecMAX
		,MAX(D8610F) AS D8610F_Actual, MAX(D8610F_PRED) AS D8610F_Predicted, MAX(D8610F_SPEC_MIN) AS D8610F_SpecMin, MAX(D8610F_SPEC_MAX) AS D8610F_SpecMax
			,MAX(D8610F_ETH) AS D8610F_ETH_Actual, MAX(D8610F_ETH_PRED) AS D8610F_ETH_Predicted
			,MAX(D8610F_ETH_SPEC_MIN) AS D8610F_ETH_SpecMin, MAX(D8610F_ETH_SPEC_MAX) AS D8610F_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_Actual ELSE D8610F_ETH_Actual END AS D8610F_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_Predicted ELSE D8610F_ETH_Predicted END AS D8610F_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_SpecMin ELSE D8610F_ETH_SpecMin END AS D8610F_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_SpecMax ELSE D8610F_ETH_SpecMax END AS D8610F_Final_SpecMax
		,MAX(D8630F) AS D8630F_Actual, MAX(D8630F_PRED) AS D8630F_Predicted, MAX(D8630F_SPEC_MAX) AS D8630F_SpecMax
			,MAX(D8630F_ETH) AS D8630F_ETH_Actual, MAX(D8630F_ETH_PRED) AS D8630F_ETH_Predicted, MAX(D8630F_ETH_SPEC_MAX) AS D8630F_ETH_SpecMax
		,MAX(D8650F) AS D8650F_Actual, MAX(D8650F_PRED) AS D8650F_Predicted, MAX(D8650F_SPEC_MIN) AS D8650F_SpecMin, MAX(D8650F_SPEC_MAX) AS D8650F_SpecMax
			,MAX(D8650F_ETH) AS D8650F_ETH_Actual, MAX(D8650F_ETH_PRED) AS D8650F_ETH_Predicted
			,MAX(D8650F_ETH_SPEC_MIN) AS D8650F_ETH_SpecMin, MAX(D8650F_ETH_SPEC_MAX) AS D8650F_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_Actual ELSE D8650F_ETH_Actual END AS D8650F_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_Predicted ELSE D8650F_ETH_Predicted END AS D8650F_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_SpecMin ELSE D8650F_ETH_SpecMin END AS D8650F_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_SpecMax ELSE D8650F_ETH_SpecMax END AS D8650F_Final_SpecMax
		,MAX(D8670F) AS D8670F_Actual, MAX(D8670F_PRED) AS D8670F_Predicted, MAX(D8670F_SPEC_MAX) AS D8670F_SpecMax
			,MAX(D8670F_ETH) AS D8670F_ETH_Actual, MAX(D8670F_ETH_PRED) AS D8670F_ETH_Predicted, MAX(D8670F_ETH_SPEC_MAX) AS D8670F_ETH_SpecMax
		,MAX(D8690F) AS D8690F_Actual, MAX(D8690F_PRED) AS D8690F_Predicted, MAX(D8690F_SPEC_MIN) AS D8690F_SpecMin, MAX(D8690F_SPEC_MAX) AS D8690F_SpecMax
			,MAX(D8690F_ETH) AS D8690F_ETH_Actual, MAX(D8690F_ETH_PRED) AS D8690F_ETH_Predicted
			,MAX(D8690F_ETH_SPEC_MIN) AS D8690F_ETH_SpecMin, MAX(D8690F_ETH_SPEC_MAX) AS D8690F_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_Actual ELSE D8690F_ETH_Actual END AS D8690F_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_Predicted ELSE D8690F_ETH_Predicted END AS D8690F_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_SpecMin ELSE D8690F_ETH_SpecMin END AS D8690F_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_SpecMax ELSE D8690F_ETH_SpecMax END AS D8690F_Final_SpecMax
		,MAX(Oxygen) AS Oxygen_Actual, MAX(Oxygen_PRED) AS Oxygen_Predicted, MAX(Oxygen_SPEC_MIN) AS Oxygen_SpecMin, MAX(Oxygen_SPEC_MAX) AS Oxygen_SpecMax
			,MAX(Oxygen_ETH) AS Oxygen_ETH_Actual, MAX(Oxygen_ETH_PRED) AS Oxygen_ETH_Predicted
			,MAX(Oxygen_ETH_SPEC_MIN) AS Oxygen_ETH_SpecMIN, MAX(Oxygen_ETH_SPEC_MAX) AS Oxygen_ETH_SpecMAX
		,MAX(Ethanol) AS Ethanol_Actual, MAX(Ethanol_PRED) AS Ethanol_Predicted, MAX(Ethanol_SPEC_MIN) AS Ethanol_SpecMin, MAX(Ethanol_SPEC_MAX) AS Ethanol_SpecMax
			,MAX(Ethanol_ETH) AS Ethanol_ETH_Actual, MAX(Ethanol_ETH_PRED) AS Ethanol_ETH_Predicted
			,MAX(Ethanol_ETH_SPEC_MIN) AS Ethanol_ETH_SpecMIN, MAX(Ethanol_ETH_SPEC_MAX) AS Ethanol_ETH_SpecMAX
	FROM
		(
		SELECT ref_prod_location, tank, job_name, component_name, product, units,
			CASE WHEN Component_Name = 'Gravity_Average' THEN results_value END AS "API",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN results_value END AS "RM2",
			CASE WHEN Component_Name = 'RVP_Average' THEN results_value END AS "RVP",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN results_value END AS "RON",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN results_value END AS "MON",
			CASE WHEN Component_Name = 'VL_Ratio' THEN results_value END AS "TVLF",
			CASE WHEN Component_Name = 'Drivability_Index' THEN results_value END AS "DI",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN results_value END AS "Benzene",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN results_value END AS "Sulfur",
			CASE WHEN Component_Name = 'Aromatics_D5769' THEN results_value END AS "Aromatics",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN results_value END AS "Olefins",
			CASE WHEN Component_Name = 'E200' THEN results_value END AS "E200",
			CASE WHEN Component_Name = 'IBP' THEN results_value END AS "E300",
			CASE WHEN Component_Name = 'IBP' THEN results_value END AS "IBP",
			CASE WHEN Component_Name = 'FBP' THEN results_value END AS "FBP",
			CASE WHEN Component_Name = '10%' THEN results_value END AS "D8610F",
			CASE WHEN Component_Name = '50%' THEN results_value END AS "D8650F",
			CASE WHEN Component_Name = '90%' THEN results_value END AS "D8690F",
			CASE WHEN Component_Name = '30%' THEN results_value END AS "D8630F",
			CASE WHEN Component_Name = '70%' THEN results_value END AS "D8670F",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN results_value END AS "Oxygen",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN results_value END AS "Ethanol",
			
			CASE WHEN Component_Name = 'Gravity_Average' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "API_PRED",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "RM2_PRED",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "RVP_PRED",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "RON_PRED",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "MON_PRED",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "TVLF_PRED",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "DI_PRED",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "Benzene_PRED",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "Sulfur_PRED",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "Aromatics_PRED",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "Olefins_PRED",
			CASE WHEN Component_Name = 'E200' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "E200_PRED",
			CASE WHEN Component_Name = 'E300' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "E300_PRED",
			CASE WHEN Component_Name = 'IBP' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "IBP_PRED",
			CASE WHEN Component_Name = 'FBP' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "FBP_PRED",
			CASE WHEN Component_Name = '10%' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "D8610F_PRED",
			CASE WHEN Component_Name = '50%' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "D8650F_PRED",
			CASE WHEN Component_Name = '90%' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "D8690F_PRED",
			CASE WHEN Component_Name = '30%' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "D8630F_PRED",
			CASE WHEN Component_Name = '70%' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "D8670F_PRED",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "Oxygen_PRED",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST (predicted_value AS DECIMAL(10,1))END AS "Ethanol_PRED",

			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "RM2_SPEC_MIN",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "RVP_SPEC_MIN",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "RON_SPEC_MIN",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "MON_SPEC_MIN",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "TVLF_SPEC_MIN",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_min AS DECIMAL(10,1))END AS "E200_SPEC_MIN",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_min AS DECIMAL(10,1))END AS "E300_SPEC_MIN",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_min AS DECIMAL(10,1))END AS "IBP_SPEC_MIN",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_min AS DECIMAL(10,1))END AS "FBP_SPEC_MIN",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "D8610F_SPEC_MIN",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "D8650F_SPEC_MIN",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "D8690F_SPEC_MIN",			
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "Oxygen_SPEC_MIN",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "Ethanol_SPEC_MIN",

			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "RVP_SPEC_MAX",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "DI_SPEC_MAX",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST(spec_max AS DECIMAL(10,1))END AS "Benzene_SPEC_MAX",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN CAST(spec_max AS DECIMAL(10,1))END AS "Sulfur_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST(spec_max AS DECIMAL(10,1))END AS "Aromatics_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST(spec_max AS DECIMAL(10,1))END AS "Olefins_SPEC_MAX",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_max AS DECIMAL(10,1))END AS "E200_SPEC_MAX",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_max AS DECIMAL(10,1))END AS "E300_SPEC_MAX",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_max AS DECIMAL(10,1))END AS "IBP_SPEC_MAX",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_max AS DECIMAL(10,1))END AS "FBP_SPEC_MAX",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_max AS DECIMAL(10,1))END AS "D8610F_SPEC_MAX",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_max AS DECIMAL(10,1))END AS "D8650F_SPEC_MAX",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_max AS DECIMAL(10,1))END AS "D8690F_SPEC_MAX",					
			CASE WHEN Component_Name = '30%' THEN CAST(spec_max AS DECIMAL(10,1))END AS "D8630F_SPEC_MAX",
			CASE WHEN Component_Name = '70%' THEN CAST(spec_max AS DECIMAL(10,1))END AS "D8670F_SPEC_MAX",					
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_max AS DECIMAL(10,1))END AS "Oxygen_SPEC_MAX",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_max AS DECIMAL(10,1))END AS "Ethanol_SPEC_MAX",
			
			CASE WHEN Component_Name = 'Gravity_10%' THEN results_value_ethanol END AS "API_ETH",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN results_value_ethanol END AS "RM2_ETH",
			CASE WHEN Component_Name IN ('RVP','RVP_ASTM') THEN results_value_ethanol END AS "RVP_ETH",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN results_value_ethanol END AS "RON_ETH",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN results_value_ethanol END AS "MON_ETH",
			CASE WHEN Component_Name IN ('VL_Ratio_ASTM','VL_Ratio_Oxygenated') THEN results_value_ethanol END AS "TVLF_ETH",
			CASE WHEN Component_Name = 'Drivability_Index_10%' THEN results_value_ethanol END AS "DI_ETH",
			CASE WHEN Component_Name = '10%_Benzene' THEN results_value_ethanol END AS "Benzene_ETH",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN results_value_ethanol END AS "Sulfur_ETH",
			CASE WHEN Component_Name = '10%_Total_Aromatics_%lv' THEN results_value_ethanol END AS "Aromatics_ETH",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN results_value_ethanol END AS "Olefins_ETH",
			CASE WHEN Component_Name = 'E200' THEN results_value_ethanol END AS "E200_ETH",
			CASE WHEN Component_Name = 'E300' THEN results_value_ethanol END AS "E300_ETH",
			CASE WHEN Component_Name = 'IBP' THEN results_value_ethanol END AS "IBP_ETH",
			CASE WHEN Component_Name = 'FBP' THEN results_value_ethanol END AS "FBP_ETH",
			CASE WHEN Component_Name = '10%' THEN results_value_ethanol END AS "D8610F_ETH",
			CASE WHEN Component_Name = '50%' THEN results_value_ethanol END AS "D8650F_ETH",
			CASE WHEN Component_Name = '90%' THEN results_value_ethanol END AS "D8690F_ETH",
			CASE WHEN Component_Name = '30%' THEN results_value_ethanol END AS "D8630F_ETH",
			CASE WHEN Component_Name = '70%' THEN results_value_ethanol END AS "D8670F_ETH",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN results_value_ethanol END AS "Oxygen_ETH",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN results_value_ethanol END AS "Ethanol_ETH",

			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "RM2_ETH_PRED",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "RVP_ETH_PRED",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "RON_ETH_PRED",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "MON_ETH_PRED",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "TVLF_ETH_PRED",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "DI_ETH_PRED",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "Benzene_ETH_PRED",
			CASE WHEN Component_Name= 'Sulfur_ppm' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "Sulfur_ETH_PRED",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "Aromatics_ETH_PRED",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "Olefins_ETH_PRED",
			CASE WHEN Component_Name = 'E200' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "E200_ETH_PRED",
			CASE WHEN Component_Name = 'E300' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "E300_ETH_PRED",
			CASE WHEN Component_Name = 'IBP' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "IBP_ETH_PRED",
			CASE WHEN Component_Name = 'FBP' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "FBP_ETH_PRED",
			CASE WHEN Component_Name = '10%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "D8610F_ETH_PRED",
			CASE WHEN Component_Name = '50%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "D8650F_ETH_PRED",
			CASE WHEN Component_Name = '90%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "D8690F_ETH_PRED",
			CASE WHEN Component_Name = '30%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "D8630F_ETH_PRED",
			CASE WHEN Component_Name = '70%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "D8670F_ETH_PRED",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "Oxygen_ETH_PRED",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "Ethanol_ETH_PRED",

			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "RM2_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "RVP_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "RON_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "MON_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "TVLF_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "E200_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "E300_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "IBP_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "FBP_ETH_SPEC_MIN",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "D8610F_ETH_SPEC_MIN",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "D8650F_ETH_SPEC_MIN",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "D8690F_ETH_SPEC_MIN",			
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "Oxygen_ETH_SPEC_MIN",			
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1))END AS "Ethanol_ETH_SPEC_MIN",	

			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "RVP_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "DI_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "Benzene_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "Sulfur_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "Aromatics_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "Olefins_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "E200_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "E300_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "IBP_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "FBP_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "D8610F_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "D8650F_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "D8690F_ETH_SPEC_MAX",					
			CASE WHEN Component_Name = '30%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "D8630F_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '70%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "D8670F_ETH_SPEC_MAX",					
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "Oxygen_ETH_SPEC_MAX",					
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1))END AS "Ethanol_ETH_SPEC_MAX"
			
		FROM
			(
			-- Pull in actual lab values from LIMS.  Use last value and break into Neat or Ethanol
			SELECT tmpLabResults.Ref_Prod_Location, Tank, Job_Name, Component_Name, Product, Units
				,MAX(Results_Value) AS Results_Value, MAX(Results_Value_Ethanol) AS Results_Value_Ethanol
				,MAX(Predicted_Value) AS Predicted_Value, MAX(Spec_Min) AS Spec_Min, MAX(Spec_Max) AS Spec_Max
				,MAX(Predicted_Value_Ethanol) AS Predicted_Value_Ethanol, MAX(Spec_Min_Ethanol) AS Spec_Min_Ethanol, MAX(Spec_Max_Ethanol) AS Spec_Max_Ethanol
			FROM
				(
				SELECT	Lab_Results.Ref_prod_location, Tank, Lab_Results.Job_Name
					,Lab_Results.Test_Number, Lab_Results.Component_Name
					,CASE WHEN test3 = 'Neat' THEN product
						ELSE SUBSTRING(Lab_Results.Product FROM 1 FOR 8) 
					END AS Product
					,CASE WHEN test3 = 'Neat' THEN Results_Value END AS Results_Value
					,CASE WHEN test3 = 'Ethanol' THEN Results_Value END AS Results_Value_Ethanol
					, Units
				FROM	prod_edw_base_views.LAB_RESULTS
				INNER JOIN 
					/* Select of Actual lab results from LIMS data */
					(
					SELECT ref_prod_location, job_name, test3, component_name, MAX(test_number) AS test_number
					FROM
						(
						SELECT ref_prod_location, job_name
							,CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 1) = '_' 
								OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-2 FOR 1)= '_')
							THEN 
								CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product) FOR 1) = '1' 
									OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 2)= '10')
									THEN 'Ethanol' 
								ELSE 'Extra'
								END
							ELSE 'Neat' 
							END AS test3					
							,component_name
							,MAX(test_number) AS Test_Number
						FROM prod_edw_base_views.LAB_RESULTS
						/* Include only lab samples with a sample status of Complete, Available or Authorized */					
						WHERE Lab_Results.SampleStatus IN ('C','V','A')
						GROUP BY ref_prod_location, test3, job_name, component_name
						) AS tmpRecentTest2
					WHERE test3 IN ('Ethanol','Neat')
					GROUP BY ref_prod_location, test3, job_name, component_name
					) AS tmpRecentTest
				ON Lab_Results.ref_prod_location = tmpRecentTest.ref_prod_location
					AND Lab_Results.job_name = tmpRecentTest.job_name
					AND Lab_Results.component_name = tmpRecentTest.component_name
					AND Lab_Results.test_number = tmpRecentTest.test_number
				) AS tmpLabResults
			LEFT OUTER JOIN 
				(
				-- Pull in predicted valuesand specs from MBO
				SELECT ref_prod_location, Blend_Number, Component_Name_Lims
					,MAX(Predicted_Value) AS Predicted_Value, MAX(Spec_Min) AS Spec_Min, MAX(Spec_Max) AS Spec_Max
					,MAX(Predicted_Value_Ethanol) AS Predicted_Value_Ethanol, MAX(Spec_Min_Ethanol) AS Spec_Min_Ethanol, MAX(Spec_Max_Ethanol) AS Spec_Max_Ethanol
				FROM
					(	
					SELECT Blend_PredictedValue.ref_prod_location, Blend_Number, Component_Name_LIMS
						,CASE WHEN Blend_Type = 'Neat' THEN Predicted_Value END AS Predicted_Value
						,CASE WHEN Blend_Type = 'Neat' THEN Spec_Min END AS Spec_Min
						,CASE WHEN Blend_Type = 'Neat' THEN Spec_Max END AS Spec_Max
						,CASE WHEN Blend_Type = '10 Percent Ethanol' THEN Predicted_Value END AS Predicted_Value_Ethanol
						,CASE WHEN Blend_Type = '10 Percent Ethanol' THEN Spec_Min END AS Spec_Min_Ethanol
						,CASE WHEN Blend_Type = '10 Percent Ethanol' THEN Spec_Max END AS Spec_Max_Ethanol
					FROM prod_edw_base_views.Blend_PredictedValue
					) AS trmpBlend_PredictedValue2
					GROUP BY ref_prod_location, Blend_Number, Component_Name_Lims
				) AS tmpBlend_PredictedValue
			ON tmpLabResults.ref_prod_location = tmpBlend_PredictedValue.ref_prod_location
				AND tmpLabResults.job_name = tmpBlend_PredictedValue.Blend_Number
				AND tmpLabResults.component_name = tmpBlend_PredictedValue.Component_Name_LIMS
			GROUP BY tmpLabResults.Ref_Prod_Location, Tank, Job_Name, Component_Name, Product, Units
			) AS tmpLab3
		) AS tmpLab2
	INNER JOIN
		(
		SELECT Blend.ref_prod_location, BlendNum, Product_Desc
		FROM    prod_edw_base_views.BLEND
		INNER JOIN prod_edw_base_views.ref_product
			ON Ref_Product.Product_ID = Blend.ProductID
			AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
		) AS tmpProductDesc
	ON tmpLab2.ref_prod_location = tmpProductDesc.Ref_Prod_Location
		AND tmpLab2.Job_Name = tmpProductDesc.BlendNum
	GROUP BY tmpLab2.ref_prod_location, job_name, product_desc
	) AS tmpLab
ON blend.ref_prod_location = tmpLab.ref_prod_location
	AND blend.blendnum = tmpLab.job_Name 	



INNER JOIN
	(
	-- Pull in pricing
	SELECT	Cur_Date,
		CAST(MAX(CASE WHEN pricing_code = 'AARQU00' THEN price end) AS DECIMAL(10,2)) AS "AARQU00" ,
		CAST(MAX(CASE WHEN pricing_code = 'AARQURV' THEN price end) AS DECIMAL(10,2))AS "AARQURV" ,
		CAST(MAX(CASE WHEN pricing_code = 'PMAAI00' THEN price end) AS DECIMAL(10,2)) AS "PMAAI00" 
	FROM	prod_edw_base_views.COMBINED_PRICING
	INNER JOIN
		(SELECT cur_date, MAX(price_eff_date) AS PriceDate
		FROM	prod_edw_base_views.Cur_Date
		INNER JOIN prod_edw_base_views.combined_pricing
			ON cur_date.cur_date >= combined_pricing.price_eff_date
				AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
				AND combined_pricing.price_type IN ('Close','Unspecified')
		GROUP BY cur_date) AS tmpPriceDate
		ON combined_pricing.price_eff_date = tmpPriceDate.PriceDate
			AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
			AND combined_pricing.price_type IN ('Close','Unspecified')
	GROUP BY Cur_Date
	) AS tmpPrice
ON Blend.BlendDate = tmpPrice.Cur_Date

INNER JOIN prod_edw_base_views.Blend_Octane_Diff
ON Blend.Ref_Prod_Location = Blend_Octane_Diff.Ref_Prod_Location
	AND Ref_Product.Product_Desc = Blend_Octane_Diff.Blend_Desc

LEFT OUTER JOIN
	(
	-- Pull in analyses of source tanks
	SELECT ref_prod_location, blendnum
		,MAX(RVP_LCC_Actual) AS RVP_LCC_Actual, MAX(RVP_ALK_Actual) AS RVP_ALK_Actual, MAX(RVP_HREF_Actual) AS RVP_HREF_Actual
		,MAX(RVP_LSR_Actual) AS RVP_LSR_Actual, MAX(RVP_REF_Actual) AS RVP_REF_Actual, MAX(RVP_MBUT_Actual) AS RVP_MBUT_Actual
		,MAX(RVP_HSR_Actual) AS RVP_HSR_Actual, MAX(RVP_TOL_Actual) AS RVP_TOL_Actual, MAX(RVP_LREF_Actual) AS RVP_LREF_Actual

		,MAX(RON_LCC_Actual) AS RON_LCC_Actual, MAX(RON_ALK_Actual) AS RON_ALK_Actual, MAX(RON_HREF_Actual) AS RON_HREF_Actual
		,MAX(RON_LSR_Actual) AS RON_LSR_Actual, MAX(RON_REF_Actual) AS RON_REF_Actual, MAX(RON_MBUT_Actual) AS RON_MBUT_Actual
		,MAX(RON_HSR_Actual) AS RON_HSR_Actual, MAX(RON_TOL_Actual) AS RON_TOL_Actual, MAX(RON_LREF_Actual) AS RON_LREF_Actual

		,MAX(MON_LCC_Actual) AS MON_LCC_Actual, MAX(MON_ALK_Actual) AS MON_ALK_Actual, MAX(MON_HREF_Actual) AS MON_HREF_Actual
		,MAX(MON_LSR_Actual) AS MON_LSR_Actual, MAX(MON_REF_Actual) AS MON_REF_Actual, MAX(MON_MBUT_Actual) AS MON_MBUT_Actual
		,MAX(MON_HSR_Actual) AS MON_HSR_Actual, MAX(MON_TOL_Actual) AS MON_TOL_Actual, MAX(MON_LREF_Actual) AS MON_LREF_Actual

		,MAX(IBP_LCC_Actual) AS IBP_LCC_Actual, MAX(IBP_ALK_Actual) AS IBP_ALK_Actual, MAX(IBP_HREF_Actual) AS IBP_HREF_Actual
		,MAX(IBP_LSR_Actual) AS IBP_LSR_Actual, MAX(IBP_REF_Actual) AS IBP_REF_Actual, MAX(IBP_MBUT_Actual) AS IBP_MBUT_Actual
		,MAX(IBP_HSR_Actual) AS IBP_HSR_Actual, MAX(IBP_TOL_Actual) AS IBP_TOL_Actual, MAX(IBP_LREF_Actual) AS IBP_LREF_Actual

		,MAX(FBP_LCC_Actual) AS FBP_LCC_Actual, MAX(FBP_ALK_Actual) AS FBP_ALK_Actual, MAX(FBP_HREF_Actual) AS FBP_HREF_Actual
		,MAX(FBP_LSR_Actual) AS FBP_LSR_Actual, MAX(FBP_REF_Actual) AS FBP_REF_Actual, MAX(FBP_MBUT_Actual) AS FBP_MBUT_Actual
		,MAX(FBP_HSR_Actual) AS FBP_HSR_Actual, MAX(FBP_TOL_Actual) AS FBP_TOL_Actual, MAX(FBP_LREF_Actual) AS FBP_LREF_Actual

		,MAX(T10_LCC_Actual) AS D8610F_LCC_Actual, MAX(T10_ALK_Actual) AS D8610F_ALK_Actual, MAX(T10_HREF_Actual) AS D8610F_HREF_Actual
		,MAX(T10_LSR_Actual) AS D8610F_LSR_Actual, MAX(T10_REF_Actual) AS D8610F_REF_Actual, MAX(T10_MBUT_Actual) AS D8610F_MBUT_Actual
		,MAX(T10_HSR_Actual) AS D8610F_HSR_Actual, MAX(T10_TOL_Actual) AS D8610F_TOL_Actual, MAX(T10_LREF_Actual) AS D8610F_LREF_Actual

		,MAX(T30_LCC_Actual) AS D8630F_LCC_Actual, MAX(T30_ALK_Actual) AS D8630F_ALK_Actual, MAX(T30_HREF_Actual) AS D8630F_HREF_Actual
		,MAX(T30_LSR_Actual) AS D8630F_LSR_Actual, MAX(T30_REF_Actual) AS D8630F_REF_Actual, MAX(T30_MBUT_Actual) AS D8630F_MBUT_Actual
		,MAX(T30_HSR_Actual) AS D8630F_HSR_Actual, MAX(T30_TOL_Actual) AS D8630F_TOL_Actual, MAX(T30_LREF_Actual) AS D8630F_LREF_Actual

		,MAX(T50_LCC_Actual) AS D8650F_LCC_Actual, MAX(T50_ALK_Actual) AS D8650F_ALK_Actual, MAX(T50_HREF_Actual) AS D8650F_HREF_Actual
		,MAX(T50_LSR_Actual) AS D8650F_LSR_Actual, MAX(T50_REF_Actual) AS D8650F_REF_Actual, MAX(T50_MBUT_Actual) AS D8650F_MBUT_Actual
		,MAX(T50_HSR_Actual) AS D8650F_HSR_Actual, MAX(T50_TOL_Actual) AS D8650F_TOL_Actual, MAX(T50_LREF_Actual) AS D8650F_LREF_Actual

		,MAX(T70_LCC_Actual) AS D8670F_LCC_Actual, MAX(T70_ALK_Actual) AS D8670F_ALK_Actual, MAX(T70_HREF_Actual) AS D8670F_HREF_Actual
		,MAX(T70_LSR_Actual) AS D8670F_LSR_Actual, MAX(T70_REF_Actual) AS D8670F_REF_Actual, MAX(T70_MBUT_Actual) AS D8670F_MBUT_Actual
		,MAX(T70_HSR_Actual) AS D8670F_HSR_Actual, MAX(T70_TOL_Actual) AS D8670F_TOL_Actual, MAX(T70_LREF_Actual) AS D8670F_LREF_Actual

		,MAX(T90_LCC_Actual) AS D8690F_LCC_Actual, MAX(T90_ALK_Actual) AS D8690F_ALK_Actual, MAX(T90_HREF_Actual) AS D8690F_HREF_Actual
		,MAX(T90_LSR_Actual) AS D8690F_LSR_Actual, MAX(T90_REF_Actual) AS D8690F_REF_Actual, MAX(T90_MBUT_Actual) AS D8690F_MBUT_Actual
		,MAX(T90_HSR_Actual) AS D8690F_HSR_Actual, MAX(T90_TOL_Actual) AS D8690F_TOL_Actual, MAX(T90_LREF_Actual) AS D8690F_LREF_Actual

	FROM
		(
		SELECT tmpBlend.Ref_Prod_Location
			,tmpBlend.BlendNum, tmpBlend.BlendProduct, FeedTank, BlendDate, FeedProduct, ActualVolume, MBO_Component_Name
			,CASE WHEN Date_Sampled = BlendDate THEN Results_Value ELSE MBO_Value END AS Final_Value
			
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS RVP_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Alkylate' THEN Final_Value END AS RVP_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS RVP_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS RVP_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Reformate' THEN Final_Value END AS RVP_REF_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS RVP_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS RVP_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Toluene' THEN Final_Value END AS RVP_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS RVP_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS RON_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Alkylate' THEN Final_Value END AS RON_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS RON_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS RON_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Reformate' THEN Final_Value END AS RON_REF_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS RON_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS RON_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Toluene' THEN Final_Value END AS RON_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS RON_LREF_Actual

			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS MON_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Alkylate' THEN Final_Value END AS MON_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS MON_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS MON_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Reformate' THEN Final_Value END AS MON_REF_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS MON_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS MON_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Toluene' THEN Final_Value END AS MON_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS MON_LREF_Actual

			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS IBP_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Alkylate' THEN Final_Value END AS IBP_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS IBP_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS IBP_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Reformate' THEN Final_Value END AS IBP_REF_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS IBP_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS IBP_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Toluene' THEN Final_Value END AS IBP_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS IBP_LREF_Actual

			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS FBP_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Alkylate' THEN Final_Value END AS FBP_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS FBP_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS FBP_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Reformate' THEN Final_Value END AS FBP_REF_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS FBP_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS FBP_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Toluene' THEN Final_Value END AS FBP_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS FBP_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T10_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T10_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T10_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T10_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Reformate' THEN Final_Value END AS T10_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T10_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T10_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Toluene' THEN Final_Value END AS T10_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T10_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T30_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T30_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T30_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T30_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Reformate' THEN Final_Value END AS T30_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T30_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T30_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Toluene' THEN Final_Value END AS T30_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T30_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T50_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T50_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T50_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T50_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Reformate' THEN Final_Value END AS T50_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T50_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T50_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Toluene' THEN Final_Value END AS T50_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T50_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T70_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T70_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T70_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T70_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Reformate' THEN Final_Value END AS T70_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T70_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T70_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Toluene' THEN Final_Value END AS T70_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T70_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T90_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T90_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T90_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T90_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Reformate' THEN Final_Value END AS T90_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T90_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T90_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Toluene' THEN Final_Value END AS T90_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T90_LREF_Actual
			
		FROM
			(
			SELECT blend.ref_prod_location,SUBSTR(FeedTank,2,4) AS FeedTank,MAX(BlendDate) AS BlendDate, feedproduct, actualvolume
				,BlendNum
				,BlendProduct
			FROM    prod_edw_base_views.BLEND
			LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
			ON Blend.blendid = blendrecipe.blendid
				AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, master_id, master_code AS FeedTank
				FROM prod_edw_base_views.Master) AS tmpFeedTank
				ON Blendrecipe.TANKID = tmpFeedTank.MASTER_ID
					AND Blendrecipe.Ref_Prod_Location = tmpFeedTank.Ref_Prod_Location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, product_id, product_desc AS FeedProduct
				FROM prod_edw_base_views.ref_product) AS tmpFeedProduct
			ON Blendrecipe.productid = tmpFeedProduct.product_id
				AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, product_id, product_desc AS BlendProduct
				FROM prod_edw_base_views.ref_product) AS tmpBlendProduct
			ON Blend.productid = tmpBlendProduct.product_id
				AND Blend.Ref_Prod_Location = tmpBlendProduct.Ref_Prod_Location
			GROUP BY Blend.Ref_Prod_Location, FeedTank, BlendNum, FeedProduct, ActualVolume, BlendProduct
			) AS tmpBlend

		INNER JOIN
			(
			SELECT	Ref_Prod_Location, Prop AS MBO_Component_Name, Value_Date AS MBO_Date, Tnk_Value AS MBO_Value
				,CASE WHEN CHARACTER_LENGTH(Tank_Id) = 6 THEN SUBSTR(tank_id,3,4) 
					WHEN CHARACTER_LENGTH(Tank_Id) = 5 THEN '0'||SUBSTR(tank_id,3,3) 
				END AS MBO_Tank
			FROM prod_edw_base_views.MBO_Tank_Values
			WHERE tnk_case = 'BASE'
				AND tank_id IN ('TK4052','TK4119','TK4120','TK142','TK125','TK181','TK4124'
					,'TK130','TK127','TK117','TK4121','TK4122','TK079','TK090')
				AND prop IN ('RON','MON','RVP','IBP','FBP','T10','T30','T50','T70','T90')
			) AS tmpMBO
		ON tmpBlend.Ref_Prod_Location = tmpMBO.Ref_Prod_Location
			AND tmpBlend.FeedTank = tmpMBO.MBO_Tank
			AND tmpBlend.BlendDate = tmpMBO.MBO_Date

		LEFT OUTER JOIN
			(
			SELECT	lab_results.Ref_prod_location, MAX(Sample_Number) AS sample_number
				,Tank, blendnum, Component_Name
				,CASE WHEN  lab_results.Component_Name = '10%' THEN 'T10' 
					WHEN lab_results.Component_Name = '30%' THEN 'T30'
					WHEN lab_results.Component_Name = '50%' THEN 'T50'
					WHEN lab_results.Component_Name = '70%' THEN 'T70'
					WHEN lab_results.Component_Name = '90%' THEN 'T90'
					WHEN lab_results.Component_Name = 'Research_Octane_D2699' THEN 'RON'
					WHEN lab_results.Component_Name = 'Motor_Octane_D2700' THEN 'MON'
				ELSE lab_results.Component_Name 
				END AS Component_NameAdj
			FROM prod_edw_base_views.LAB_RESULTS
			INNER JOIN
				(
				SELECT blend.ref_prod_location,SUBSTR(FeedTank,2,4) AS FeedTankAdj,MAX(BlendDate) AS BlendDate, feedproduct, actualvolume
					,BlendNum
				FROM    prod_edw_base_views.BLEND
				LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
				ON Blend.blendid = blendrecipe.blendid
					AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
				LEFT OUTER JOIN 
					(SELECT ref_prod_location, master_id, master_code AS FeedTank
						FROM prod_edw_base_views.Master) AS tmpFeedTank
				ON Blendrecipe.TANKID = tmpFeedTank.MASTER_ID
					AND Blendrecipe.Ref_Prod_Location = tmpFeedTank.Ref_Prod_Location
				LEFT OUTER JOIN 
					(SELECT ref_prod_location, product_id, product_desc AS FeedProduct
						FROM prod_edw_base_views.ref_product
					) AS tmpFeedProduct
				ON Blendrecipe.productid = tmpFeedProduct.product_id
					AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
				GROUP BY blend.ref_prod_location, FeedTankAdj, BlendNum, feedproduct, actualvolume
				) AS tmpBlendDate
			ON lab_results.ref_prod_location = tmpBlendDate.ref_prod_location
				AND lab_results.tank = tmpBlendDate.feedtankadj
				AND lab_results.date_sampled <= tmpBlendDate.BlendDate
			GROUP BY lab_results.ref_prod_location, component_name, tank, blendnum
			) AS tmpLab_Max
		ON tmpBlend.Ref_Prod_Location = tmpLab_Max.Ref_Prod_Location
			AND tmpBlend.BlendNum = tmpLab_Max.BlendNum
			AND tmpBlend.FeedTank = tmpLab_Max.Tank
			AND tmpMBO.MBO_Component_Name = tmpLab_Max.Component_NameAdj

		LEFT OUTER JOIN prod_edw_base_views.lab_results
		ON tmpLab_Max.Ref_Prod_Location = Lab_Results.Ref_Prod_Location
			AND tmpLab_Max.Sample_Number = Lab_Results.Sample_Number
			AND tmpLab_Max.Component_Name = Lab_Results.Component_Name
		) AS tmpSource2
	GROUP BY ref_prod_location, blendnum
	) AS tmpSource
ON blend.ref_prod_location = tmpSource.ref_prod_location
	AND blend.blendnum = tmpSource.blendnum

LEFT OUTER JOIN
	(
	-- Pull in analyses of heel
	SELECT blend.ref_prod_location, tank, blenddate, job_name
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(RVP)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS RVP_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(RON)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS RON_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(MON)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS MON_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(IBP)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS IBP_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(FBP)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS FBP_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8610F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8610F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8630F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8630F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8650F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8650F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8670F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8670F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8690F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8690F_Heel
	FROM
		(
		SELECT tmpLabResults.Ref_Prod_Location, Tank, Job_Name
			,CASE WHEN Component_Name = 'RVP_Average' THEN MAX(results_value) END AS "RVP"
			,CASE WHEN Component_Name = 'Research_Octane_D2699' THEN MAX(results_value) END AS "RON"
			,CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN MAX(results_value) END AS "MON"
			,CASE WHEN Component_Name = 'IBP' THEN MAX(results_value) END AS "IBP"
			,CASE WHEN Component_Name = 'FBP' THEN MAX(results_value) END AS "FBP"
			,CASE WHEN Component_Name = '10%' THEN MAX(results_value) END AS "D8610F"
			,CASE WHEN Component_Name = '30%' THEN MAX(results_value) END AS "D8630F"
			,CASE WHEN Component_Name = '50%' THEN MAX(results_value) END AS "D8650F"
			,CASE WHEN Component_Name = '70%' THEN MAX(results_value) END AS "D8670F"
			,CASE WHEN Component_Name = '90%' THEN MAX(results_value) END AS "D8690F"
		FROM
			(
			SELECT	Lab_Results.Ref_prod_location, Tank, Lab_Results.Job_Name
				,Lab_Results.Test_Number, Lab_Results.Component_Name
				,CASE WHEN test3 = 'Neat' THEN product
					ELSE SUBSTRING(Lab_Results.Product FROM 1 FOR 8) 
				END AS Product
				,CASE WHEN test3 = 'Neat' THEN Results_Value END AS Results_Value
				,CASE WHEN test3 = 'Ethanol' THEN Results_Value END AS Results_Value_Ethanol
				, Units
			FROM	prod_edw_base_views.LAB_RESULTS
			INNER JOIN 
				/* Select of Actual lab results from LIMS data */
				(
				SELECT ref_prod_location, job_name, test3, component_name, MAX(test_number) AS test_number
				FROM
					(
					SELECT ref_prod_location, job_name
						,CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 1) = '_' 
							OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-2 FOR 1)= '_')
						THEN 
							CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product) FOR 1) = '1' 
								OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 2)= '10')
								THEN 'Ethanol' 
							ELSE 'Extra'
							END
						ELSE 'Neat' 
						END AS test3					
						,component_name
						,MAX(test_number) AS Test_Number
					FROM prod_edw_base_views.LAB_RESULTS
					/* Include only lab samples with a sample status of Complete, Available or Authorized */					
					WHERE Lab_Results.SampleStatus IN ('C','V','A')
					GROUP BY ref_prod_location, test3, job_name, component_name
					) AS tmpRecentTest2
				WHERE test3 IN ('Neat')
				GROUP BY ref_prod_location, test3, job_name, component_name
				) AS tmpRecentTest
			ON Lab_Results.ref_prod_location = tmpRecentTest.ref_prod_location
				AND Lab_Results.job_name = tmpRecentTest.job_name
				AND Lab_Results.component_name = tmpRecentTest.component_name
				AND Lab_Results.test_number = tmpRecentTest.test_number
			) AS tmpLabResults
		WHERE tank <> ''
		GROUP BY tmpLabResults.Ref_Prod_Location, Tank, Job_Name, Component_Name
		) AS tmpLab
	INNER JOIN prod_edw_base_views.blend
	ON blend.ref_prod_location = tmpLab.ref_prod_location
		AND blend.blendnum = tmpLab.job_name
	GROUP BY blend.ref_prod_location, tank, blenddate, job_name
	) AS tmpHeel
ON Blend.ref_prod_location = tmpHeel.ref_prod_location
	AND Blend.blendnum = tmpHeel.job_name
WHERE blend.ref_prod_location = 'El Paso Refinery'
AND Blend.blenddate > '2014/12/31'

--ORDER BY Blend.blenddate DESC, Blend.blendnum
;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BLEND_V6 AS LOCKING ROW ACCESS

-- Final display select
SELECT Blend.Ref_Prod_Location,Blend.BlendNum AS BlendNumber, Blend.BlendDate, Ref_Product.product_desc AS ProductDescription, calc_include, volatility_class, master_code AS Blend_Tank
	-- Determine if blend was the one shipped by making sure there are no following blends 
	,CASE
		WHEN SUBSTR(blend.blendnum,8,1) <> '' AND SUBSTR(MAX(blend.Blendnum) OVER (ORDER BY blend.Blendnum ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING),8,1) <> '' THEN 0
		WHEN SUBSTR(blend.blendnum,8,1) = '' AND SUBSTR(MAX(blend.Blendnum) OVER (ORDER BY blend.Blendnum ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING),8,1) <> '' THEN 0
		ELSE 1
	END AS Shipped
	-- Look for 'A'' blends to determine if there was a reblend
	,CASE 
		WHEN SUBSTR(Blend.BlendNum,8,1) = 'A' THEN 1 
		WHEN SUBSTR(Blend.BlendNum,8,1) = 'B' THEN 1 
		WHEN SUBSTR(Blend.BlendNum,8,1) = 'C' THEN 1 
		ELSE 0 
	END AS Reblend
	,DON_Giveaway_Type, DON_Giveaway_Cause, RVP_Giveaway_Type, RVP_Giveaway_Cause

	,CAST(BlendVolume AS INTEGER) AS BlendVolume, CAST(HeelVol AS INTEGER) AS HeelVolume, CAST(BlendVolume+HeelVolume AS INTEGER) AS TotalVolume
	,CAST(LCC AS INTEGER) AS LCCVolume, CAST(IsoButane AS INTEGER) AS ISOBUTANEVolume, CAST(NormalButane AS INTEGER) AS NBUTANEVolume, CAST(MixedButane AS INTEGER) AS MBUTANEVolume
	,CAST(WREF AS INTEGER) AS WREFVolume, CAST(HREF AS INTEGER) AS HREFVolume, CAST(LREF AS INTEGER) AS LREFVolume, CAST(LOALKY AS INTEGER) AS LOALKYVolume
	,CAST(Hydrobate AS INTEGER) AS HYDROBATEVolume, CAST(Toluene AS INTEGER) AS TOLUENEVolume, CAST(Olefins AS INTEGER) AS OLEFINSVolume, CAST(LSR AS INTEGER) AS LSRVolume
	,CAST(TransferVol AS INTEGER) AS TRANSFERVolume

	,CAST(CASE WHEN (RM2_Actual - Blend_Octane_Diff.Octane) > 0 THEN ((RM2_Actual - Blend_Octane_Diff.Octane)*ZEROIFNULL(BlendVolume))
		ELSE 0
	END AS INTEGER) AS "Octane_GA_WV"
	,CAST(CASE WHEN (RVP_SpecMax - RVP_Actual)>0 THEN (((RVP_SpecMax - RVP_Actual)**1.2) *ZEROIFNULL(BlendVolume))
		ELSE 0
	END AS INTEGER) AS "RVI_GA_WV"
	,DONBBL,RVPBBL
	,AARQU00, 'USC/GAL' AS AARQU00_Units, AARQURV, 'PSI' AS AARQURV_Units, PMAAI00, 'USC/GAL' AS PMAAI00_Units

	,API_Actual
		--,API_Predicted
		,API_ETH_Actual, API_Final_Actual
	,RVP_Actual, RVP_Predicted, RVP_SpecMin, RVP_SpecMax, RVP_ETH_Actual, RVP_ETH_Predicted, RVP_ETH_SpecMin, RVP_ETH_SpecMax, RVP_Final_Actual
		,RVP_Final_Predicted, RVP_Final_SpecMin, RVP_Final_SpecMax
		,RVP_LCC_Actual, RVP_ALK_Actual, RVP_HREF_Actual, RVP_LSR_Actual, RVP_REF_Actual, RVP_MBUT_Actual, RVP_HSR_Actual, RVP_TOL_Actual, RVP_LREF_Actual
		,RVP_Heel
	,RM2_Actual, RM2_Predicted, RM2_SpecMin, RM2_ETH_Actual, RM2_ETH_Predicted, RM2_ETH_SpecMin, RM2_Final_Actual, RM2_Final_Predicted, RM2_Final_SpecMin
	,RON_Actual, RON_Predicted, RON_SpecMin, RON_ETH_Actual, RON_ETH_Predicted, RON_ETH_SpecMin, RON_Final_Actual, RON_Final_Predicted, RON_Final_SpecMin
		,RON_LCC_Actual, RON_ALK_Actual, RON_HREF_Actual, RON_LSR_Actual, RON_REF_Actual, RON_MBUT_Actual, RON_HSR_Actual, RON_TOL_Actual, RON_LREF_Actual
		,RON_Heel
	,MON_Actual, MON_Predicted, MON_SpecMin, MON_ETH_Actual, MON_ETH_Predicted, MON_ETH_SpecMin, MON_Final_Actual, MON_Final_Predicted, MON_Final_SpecMin
		,MON_LCC_Actual, MON_ALK_Actual, MON_HREF_Actual, MON_LSR_Actual, MON_REF_Actual, MON_MBUT_Actual, MON_HSR_Actual, MON_TOL_Actual, MON_LREF_Actual
		,MON_Heel
	,TVLF_Actual, TVLF_Predicted, TVLF_SpecMin, TVLF_ETH_Actual, TVLF_ETH_Predicted, TVLF_ETH_SpecMin, TVLF_Final_Actual, TVLF_Final_Predicted, TVLF_Final_SpecMin
	,DI_Actual, DI_Predicted
		--,DI_SpecMax
		,DI_ETH_Actual, DI_ETH_Predicted
		--,DI_ETH_SpecMax
	,Benzene_Actual, Benzene_Predicted, Benzene_SpecMax, Benzene_ETH_Actual, Benzene_ETH_Predicted, Benzene_ETH_SpecMax, Benzene_Final_Actual
		,Benzene_Final_Predicted, Benzene_Final_SpecMax
	,Sulfur_Actual, Sulfur_Predicted, Sulfur_SpecMax, Sulfur_ETH_Actual, Sulfur_ETH_Predicted, Sulfur_ETH_SpecMax, Sulfur_Final_Actual, Sulfur_Final_Predicted, Sulfur_Final_SpecMax
	,Aromatics_Actual, Aromatics_Predicted, Aromatics_SpecMax, Aromatics_ETH_Actual, Aromatics_ETH_Predicted, Aromatics_ETH_SpecMax,Aromatics_Final_Actual
		,Aromatics_Final_Predicted, Aromatics_Final_SpecMax
	,Olefins_Actual, Olefins_Predicted, Olefins_SpecMax, Olefins_ETH_Actual, Olefins_ETH_Predicted, Olefins_ETH_SpecMax, Olefins_Final_Actual, Olefins_Final_Predicted, Olefins_Final_SpecMax
	,E200_Actual, E200_Predicted, E200_SpecMin, E200_SpecMax, E200_ETH_Actual, E200_ETH_Predicted, E200_ETH_SpecMIN, E200_ETH_SpecMAX, E300_Actual
		,E300_Predicted, E300_SpecMin, E300_SpecMax, E300_ETH_Actual, E300_ETH_Predicted, E300_ETH_SpecMIN, E300_ETH_SpecMAX
	,IBP_Actual, IBP_Predicted, IBP_SpecMin
		--,IBP_SpecMax
		,IBP_ETH_Actual
		--,IBP_ETH_Predicted, IBP_ETH_SpecMIN, IBP_ETH_SpecMAX
		,IBP_LCC_Actual, IBP_ALK_Actual, IBP_HREF_Actual, IBP_LSR_Actual, IBP_REF_Actual, IBP_MBUT_Actual, IBP_HSR_Actual, IBP_TOL_Actual, IBP_LREF_Actual
		,IBP_Heel
	,FBP_Actual, FBP_Predicted
		--,FBP_SpecMin
		,FBP_SpecMax, FBP_ETH_Actual, FBP_ETH_Predicted, FBP_ETH_SpecMIN, FBP_ETH_SpecMAX
		,FBP_LCC_Actual, FBP_ALK_Actual, FBP_HREF_Actual, FBP_LSR_Actual, FBP_REF_Actual, FBP_MBUT_Actual, FBP_HSR_Actual, FBP_TOL_Actual, FBP_LREF_Actual
		,FBP_Heel
	,D8610F_Actual, D8610F_Predicted, D8610F_SpecMin, D8610F_SpecMax, D8610F_ETH_Actual, D8610F_ETH_Predicted, D8610F_ETH_SpecMin, D8610F_ETH_SpecMax
		,D8610F_Final_Actual, D8610F_Final_Predicted, D8610F_Final_SpecMin, D8610F_Final_SpecMax
		,D8610F_LCC_Actual, D8610F_ALK_Actual, D8610F_HREF_Actual, D8610F_LSR_Actual, D8610F_REF_Actual, D8610F_MBUT_Actual, D8610F_HSR_Actual, D8610F_TOL_Actual
		,D8610F_LREF_Actual, D8610F_Heel
	,D8630F_Actual, D8630F_Predicted
		--,D8630F_SpecMax
		,D8630F_ETH_Actual, D8630F_ETH_Predicted
		--,D8630F_ETH_SpecMax
		,D8630F_LCC_Actual, D8630F_ALK_Actual, D8630F_HREF_Actual, D8630F_LSR_Actual, D8630F_REF_Actual, D8630F_MBUT_Actual, D8630F_HSR_Actual, D8630F_TOL_Actual
		,D8630F_LREF_Actual, D8630F_Heel
	,D8650F_Actual, D8650F_Predicted, D8650F_SpecMin, D8650F_SpecMax, D8650F_ETH_Actual, D8650F_ETH_Predicted, D8650F_ETH_SpecMin, D8650F_ETH_SpecMax
		,D8650F_Final_Actual, D8650F_Final_Predicted, D8650F_Final_SpecMin, D8650F_Final_SpecMax
		,D8650F_LCC_Actual, D8650F_ALK_Actual, D8650F_HREF_Actual, D8650F_LSR_Actual, D8650F_REF_Actual, D8650F_MBUT_Actual, D8650F_HSR_Actual, D8650F_TOL_Actual
		,D8650F_LREF_Actual, D8650F_Heel
	,D8670F_Actual, D8670F_Predicted
		--,D8670F_SpecMax
		,D8670F_ETH_Actual
		--,D8670F_ETH_Predicted, D8670F_ETH_SpecMax
		,D8670F_LCC_Actual, D8670F_ALK_Actual, D8670F_HREF_Actual, D8670F_LSR_Actual, D8670F_REF_Actual, D8670F_MBUT_Actual, D8670F_HSR_Actual, D8670F_TOL_Actual
		,D8670F_LREF_Actual, D8670F_Heel
	,D8690F_Actual, D8690F_Predicted, D8690F_SpecMin, D8690F_SpecMax, D8690F_ETH_Actual, D8690F_ETH_Predicted
		--,D8690F_ETH_SpecMin
		,D8690F_ETH_SpecMax
		,D8690F_Final_Actual, D8690F_Final_Predicted
		--,D8690F_Final_SpecMin
		,D8690F_Final_SpecMax
		,D8690F_LCC_Actual, D8690F_ALK_Actual, D8690F_HREF_Actual, D8690F_LSR_Actual, D8690F_REF_Actual, D8690F_MBUT_Actual, D8690F_HSR_Actual, D8690F_TOL_Actual
		,D8690F_LREF_Actual, D8690F_Heel
	,Oxygen_Actual, Oxygen_Predicted, Oxygen_SpecMin, Oxygen_SpecMax, Oxygen_ETH_Actual, Oxygen_ETH_Predicted, Oxygen_ETH_SpecMIN, Oxygen_ETH_SpecMAX
	,Ethanol_Actual
		--,Ethanol_Predicted, Ethanol_SpecMin, Ethanol_SpecMax
		,Ethanol_ETH_Actual, Ethanol_ETH_Predicted
		--,Ethanol_ETH_SpecMIN, Ethanol_ETH_SpecMAX

FROM prod_edw_base_views.Blend

INNER JOIN prod_edw_base_views.ref_product
ON blend.ref_prod_location = ref_product.ref_prod_location
	AND blend.productid = ref_product.product_id

INNER JOIN prod_edw_base_views.master
ON blend.ref_prod_location = master.ref_prod_location
	AND blend.tankid = master.master_id

LEFT OUTER JOIN 
	(
	SELECT DISTINCT Ref_prod_location, Blend_Number, Calc_Include, Volatility_Class
		,DON_Giveaway_Type, DON_Giveaway_Cause, RVP_Giveaway_Type, RVP_Giveaway_Cause
	FROM prod_edw_base_views.BLEND_PREDICTEDVALUE
	) AS tmpBlend_PredictedValue
ON blend.ref_prod_location = tmpBlend_PredictedValue.ref_prod_location
	AND blend.BlendNum = tmpBlend_PredictedValue.Blend_Number

LEFT OUTER JOIN
	(
	-- Pull in component volumes
	SELECT ref_prod_location, BlendNum, ZEROIFNULL(SUM(Volume)) AS BlendVolume
		,ZEROIFNULL(SUM(LCC)) AS LCC, ZEROIFNULL(SUM(Isobutane)) AS Isobutane, ZEROIFNULL(SUM(NormalButane)) AS NormalButane
		,ZEROIFNULL(SUM(MixedButane)) AS MixedButane,ZEROIFNULL(SUM(WREF)) AS WREF, ZEROIFNULL(SUM(HREF)) AS HREF
		,ZEROIFNULL(SUM(LREF)) AS LREF, ZEROIFNULL(SUM(LOALKY)) AS LOALKY, ZEROIFNULL(SUM(Hydrobate)) AS Hydrobate, ZEROIFNULL(SUM(Toluene)) AS Toluene
		,ZEROIFNULL(SUM(Olefins)) AS Olefins, ZEROIFNULL(SUM(LSR)) AS LSR
		,ZEROIFNULL(SUM(Trans1))+ZEROIFNULL(SUM(Trans2))+ZEROIFNULL(SUM(Trans3))+ZEROIFNULL(SUM(Trans4))+ZEROIFNULL(SUM(Trans5))+ZEROIFNULL(SUM(Trans6))+
			ZEROIFNULL(SUM(Trans7))+ZEROIFNULL(SUM(Trans8))+ZEROIFNULL(SUM(Trans9))+ZEROIFNULL(SUM(Trans10))+ZEROIFNULL(SUM(Trans11)) AS TransferVol
	FROM
		(
		SELECT
			ref_prod_location, BlendNum, volume,
			CASE WHEN FeedProduct = 'Cat Gasoline' THEN volume END AS LCC,
			CASE WHEN FeedProduct = 'Iso Butane' THEN volume END AS IsoButane,
			CASE WHEN FeedProduct = 'Normal Butane' THEN volume END AS NormalButane,
			CASE WHEN FeedProduct = 'Mixed Butane' THEN volume END AS MixedButane,
			CASE WHEN FeedProduct = 'Reformate' THEN volume END AS WREF,
			CASE WHEN FeedProduct = 'Heavy Reformate' THEN volume END AS HREF,
			CASE WHEN FeedProduct = 'Light Reformate' THEN volume END AS LREF,
			CASE WHEN FeedProduct = 'Alkylate' THEN volume END AS LOALKY,
			CASE WHEN FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN volume END AS HYDROBATE,
			CASE WHEN FeedProduct = 'Toluene' THEN volume END AS TOLUENE,
			CASE WHEN FeedProduct = 'Olefins' THEN volume END AS OLEFINS,
			CASE WHEN FeedProduct = 'Light Straight Run' THEN volume END AS LSR,
			CASE WHEN FeedProduct = 'Albuquerque Sub Unleaded' THEN volume END AS TRANS1,
			CASE WHEN FeedProduct = 'CBG Premium' THEN volume END AS TRANS2,
			CASE WHEN FeedProduct = 'CBG Unlead' THEN volume END AS TRANS3,
			CASE WHEN FeedProduct = 'Conv Premium' THEN volume END AS TRANS4,
			CASE WHEN FeedProduct = 'Conv Unlead' THEN volume END AS TRANS5,
			CASE WHEN FeedProduct = 'Pemex Premium' THEN volume END AS TRANS6,
			CASE WHEN FeedProduct = 'Pemex Unleaded' THEN volume END AS TRANS7,
			CASE WHEN FeedProduct = 'Tucson Subgrade Unleaded' THEN volume END AS TRANS8,
			CASE WHEN FeedProduct = 'BSU Feed' THEN volume END AS TRANS9,
			CASE WHEN FeedProduct = 'Albuquerque Sub Premium Unleaded' THEN volume END AS TRANS10,
			CASE WHEN FeedProduct = 'Tucson Sub Premium Unleaded' THEN volume END AS TRANS11
		FROM
			/* Allocate volumes per blend recipe */
			(
			SELECT 
			Blend.ref_prod_location, Blend.BlendNum, FeedProduct, SUM(actualvolume) AS Volume
			FROM    prod_edw_base_views.BLEND
			INNER JOIN prod_edw_base_views.ref_product
				ON Ref_Product.Product_ID = Blend.ProductID
					AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
			LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
				ON Blend.blendid = blendrecipe.blendid
					AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, product_id, product_desc AS FeedProduct
				FROM prod_edw_base_views.ref_product) AS tmpFeedProduct
				ON Blendrecipe.productid = tmpFeedProduct.product_id
					AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
			GROUP BY blend.ref_prod_location,blend.blendnum, FeedProduct
			) AS tmpVolumes3
		) AS tmpVolumes2
	GROUP BY ref_prod_location, blendnum
	) AS tmpVolumes
ON blend.ref_prod_location = tmpVolumes.ref_prod_location
	AND blend.blendnum = tmpVolumes.blendnum 

LEFT OUTER JOIN
	(
	-- Pull in predcited values, actual values and specs
	SELECT tmpLab2.ref_prod_location, job_name, product_desc
		,MAX(API) AS API_Actual, MAX(API_ETH) AS API_ETH_Actual, MAX(API_PRED) AS API_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN API_Actual ELSE API_ETH_Actual END AS API_Final_Actual
		,MAX(RVP) AS RVP_Actual, MAX(RVP_PRED) AS RVP_Predicted, MAX(RVP_SPEC_MIN) AS RVP_SpecMin, MAX(RVP_SPEC_MAX) AS RVP_SpecMax
			,MAX(RVP_ETH) AS RVP_ETH_Actual, MAX(RVP_ETH_PRED) AS RVP_ETH_Predicted
			,MAX(RVP_ETH_SPEC_MIN) AS RVP_ETH_SpecMin, MAX(RVP_ETH_SPEC_MAX) AS RVP_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_Actual ELSE RVP_ETH_Actual END AS RVP_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_Predicted ELSE RVP_ETH_Predicted END AS RVP_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_SpecMin ELSE RVP_ETH_SpecMin END AS RVP_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RVP_SpecMax ELSE RVP_ETH_SpecMax END AS RVP_Final_SpecMax
		,MAX(RM2) AS RM2_Actual, MAX(RM2_PRED) AS RM2_Predicted, MAX(RM2_SPEC_MIN) AS RM2_SpecMin
			,MAX(RM2_ETH) AS RM2_ETH_Actual, MAX(RM2_ETH_PRED) AS RM2_ETH_Predicted,MAX(RM2_ETH_SPEC_MIN) AS RM2_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RM2_Actual ELSE RM2_ETH_Actual END AS RM2_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RM2_Predicted ELSE RM2_ETH_Predicted END AS RM2_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RM2_SpecMin ELSE RM2_ETH_SpecMin END AS RM2_Final_SpecMin
		,MAX(RON) AS RON_Actual, MAX(RON_PRED) AS RON_Predicted, MAX(RON_SPEC_MIN) AS RON_SpecMin
			,MAX(RON_ETH) AS RON_ETH_Actual, MAX(RON_ETH_PRED) AS RON_ETH_Predicted, MAX(RON_ETH_SPEC_MIN) AS RON_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RON_Actual ELSE RON_ETH_Actual END AS RON_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RON_Predicted ELSE RON_ETH_Predicted END AS RON_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN RON_SpecMin ELSE RON_ETH_SpecMin END AS RON_Final_SpecMin
		,MAX(MON) AS MON_Actual, MAX(MON_PRED) AS MON_Predicted, MAX(MON_SPEC_MIN) AS MON_SpecMin
			,MAX(MON_ETH) AS MON_ETH_Actual, MAX(MON_ETH_PRED) AS MON_ETH_Predicted, MAX(MON_ETH_SPEC_MIN) AS MON_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN MON_Actual ELSE MON_ETH_Actual END AS MON_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN MON_Predicted ELSE MON_ETH_Predicted END AS MON_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN MON_SpecMin ELSE MON_ETH_SpecMin END AS MON_Final_SpecMin
		,MAX(TVLF) AS TVLF_Actual, MAX(TVLF_PRED) AS TVLF_Predicted, MAX(TVLF_SPEC_MIN) AS TVLF_SpecMin
			,MAX(TVLF_ETH) AS TVLF_ETH_Actual, MAX(TVLF_ETH_PRED) AS TVLF_ETH_Predicted, MAX(TVLF_ETH_SPEC_MIN) AS TVLF_ETH_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN TVLF_Actual ELSE TVLF_ETH_Actual END AS TVLF_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN TVLF_Predicted ELSE TVLF_ETH_Predicted END AS TVLF_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN TVLF_SpecMin ELSE TVLF_ETH_SpecMin END AS TVLF_Final_SpecMin
		,MAX(DI) AS DI_Actual, MAX(DI_PRED) AS DI_Predicted, MAX(DI_SPEC_MAX) AS DI_SpecMax
			,MAX(DI_ETH) AS DI_ETH_Actual, MAX(DI_ETH_PRED) AS DI_ETH_Predicted, MAX(DI_ETH_SPEC_MAX) AS DI_ETH_SpecMax
		
		--Fix to handle El Paso LIMS addition of new Benzene components
		,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN
				CASE WHEN  MAX(Benzene_PMX) IS NOT NULL THEN MAX(Benzene_PMX) 
					ELSE MAX(Benzene_Old) 
				END
			ELSE
				CASE WHEN  MAX(Benzene_New) IS NOT NULL THEN MAX(Benzene_New) 
					ELSE MAX(Benzene_Old) 
				END 
			END AS Benzene_Actual
			,MAX(Benzene_PRED) AS Benzene_Predicted
			,MAX(Benzene_SPEC_MAX) AS Benzene_SpecMax
			,MAX(Benzene_ETH) AS Benzene_ETH_Actual
			,MAX(Benzene_ETH_PRED) AS Benzene_ETH_Predicted
			,MAX(Benzene_ETH_SPEC_MAX) AS Benzene_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Benzene_Actual ELSE Benzene_ETH_Actual END AS Benzene_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Benzene_Predicted ELSE Benzene_ETH_Predicted END AS Benzene_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Benzene_SpecMax ELSE Benzene_ETH_SpecMax END AS Benzene_Final_SpecMax	
		
		,MAX(Sulfur) AS Sulfur_Actual, MAX(Sulfur_PRED) AS Sulfur_Predicted, MAX(Sulfur_SPEC_MAX) AS Sulfur_SpecMax
			,MAX(Sulfur_ETH) AS Sulfur_ETH_Actual, MAX(Sulfur_ETH_PRED) AS Sulfur_ETH_Predicted, MAX(Sulfur_ETH_SPEC_MAX) AS Sulfur_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Sulfur_Actual ELSE Sulfur_ETH_Actual END AS Sulfur_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Sulfur_Predicted ELSE Sulfur_ETH_Predicted END AS Sulfur_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Sulfur_SpecMax ELSE Sulfur_ETH_SpecMax END AS Sulfur_Final_SpecMax	
		--Fix to handle El Paso LIMS addition of new Aromatics components
		,CASE WHEN MAX(Aromatics_New) IS NOT NULL THEN MAX(Aromatics_New) ELSE MAX(Aromatics_Old) end AS Aromatics_Actual
			,MAX(Aromatics_PRED) AS Aromatics_Predicted
			,MAX(Aromatics_SPEC_MAX) AS Aromatics_SpecMax
			,MAX(Aromatics_ETH) AS Aromatics_ETH_Actual
			,MAX(Aromatics_ETH_PRED) AS Aromatics_ETH_Predicted
			,MAX(Aromatics_ETH_SPEC_MAX) AS Aromatics_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Aromatics_Actual ELSE Aromatics_ETH_Actual END AS Aromatics_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Aromatics_Predicted ELSE Aromatics_ETH_Predicted END AS Aromatics_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Aromatics_SpecMax ELSE Aromatics_ETH_SpecMax END AS Aromatics_Final_SpecMax			
		,MAX(Olefins) AS Olefins_Actual, MAX(Olefins_PRED) AS Olefins_Predicted, MAX(Olefins_SPEC_MAX) AS Olefins_SpecMax
			,MAX(Olefins_ETH) AS Olefins_ETH_Actual, MAX(Olefins_ETH_PRED) AS Olefins_ETH_Predicted, MAX(Olefins_ETH_SPEC_MAX) AS Olefins_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Olefins_Actual ELSE Olefins_ETH_Actual END AS Olefins_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Olefins_Predicted ELSE Olefins_ETH_Predicted END AS Olefins_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN Olefins_SpecMax ELSE Olefins_ETH_SpecMax END AS Olefins_Final_SpecMax			
		,MAX(E200) AS E200_Actual, MAX(E200_PRED) AS E200_Predicted, MAX(E200_SPEC_MIN) AS E200_SpecMin, MAX(E200_SPEC_MAX) AS E200_SpecMax
			,MAX(E200_ETH) AS E200_ETH_Actual, MAX(E200_ETH_PRED) AS E200_ETH_Predicted
			,MAX(E200_ETH_SPEC_MIN) AS E200_ETH_SpecMIN, MAX(E200_ETH_SPEC_MAX) AS E200_ETH_SpecMAX
		,MAX(E300) AS E300_Actual, MAX(E300_PRED) AS E300_Predicted, MAX(E300_SPEC_MIN) AS E300_SpecMin, MAX(E300_SPEC_MAX) AS E300_SpecMax
			,MAX(E300_ETH) AS E300_ETH_Actual, MAX(E300_ETH_PRED) AS E300_ETH_Predicted
			,MAX(E300_ETH_SPEC_MIN) AS E300_ETH_SpecMIN, MAX(E300_ETH_SPEC_MAX) AS E300_ETH_SpecMAX
		,MAX(IBP) AS IBP_Actual, MAX(IBP_PRED) AS IBP_Predicted, MAX(IBP_SPEC_MIN) AS IBP_SpecMin, MAX(IBP_SPEC_MAX) AS IBP_SpecMax
			,MAX(IBP_ETH) AS IBP_ETH_Actual, MAX(IBP_ETH_PRED) AS IBP_ETH_Predicted
			,MAX(IBP_ETH_SPEC_MIN) AS IBP_ETH_SpecMIN, MAX(IBP_ETH_SPEC_MAX) AS IBP_ETH_SpecMAX
		,MAX(FBP) AS FBP_Actual, MAX(FBP_PRED) AS FBP_Predicted, MAX(FBP_SPEC_MIN) AS FBP_SpecMin, MAX(FBP_SPEC_MAX) AS FBP_SpecMax
			,MAX(FBP_ETH) AS FBP_ETH_Actual, MAX(FBP_ETH_PRED) AS FBP_ETH_Predicted
			,MAX(FBP_ETH_SPEC_MIN) AS FBP_ETH_SpecMIN, MAX(FBP_ETH_SPEC_MAX) AS FBP_ETH_SpecMAX
		,MAX(D8610F) AS D8610F_Actual, MAX(D8610F_PRED) AS D8610F_Predicted, MAX(D8610F_SPEC_MIN) AS D8610F_SpecMin, MAX(D8610F_SPEC_MAX) AS D8610F_SpecMax
			,MAX(D8610F_ETH) AS D8610F_ETH_Actual, MAX(D8610F_ETH_PRED) AS D8610F_ETH_Predicted
			,MAX(D8610F_ETH_SPEC_MIN) AS D8610F_ETH_SpecMin, MAX(D8610F_ETH_SPEC_MAX) AS D8610F_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_Actual ELSE D8610F_ETH_Actual END AS D8610F_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_Predicted ELSE D8610F_ETH_Predicted END AS D8610F_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_SpecMin ELSE D8610F_ETH_SpecMin END AS D8610F_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8610F_SpecMax ELSE D8610F_ETH_SpecMax END AS D8610F_Final_SpecMax
		,MAX(D8630F) AS D8630F_Actual, MAX(D8630F_PRED) AS D8630F_Predicted, MAX(D8630F_SPEC_MAX) AS D8630F_SpecMax
			,MAX(D8630F_ETH) AS D8630F_ETH_Actual, MAX(D8630F_ETH_PRED) AS D8630F_ETH_Predicted, MAX(D8630F_ETH_SPEC_MAX) AS D8630F_ETH_SpecMax
		,MAX(D8650F) AS D8650F_Actual, MAX(D8650F_PRED) AS D8650F_Predicted, MAX(D8650F_SPEC_MIN) AS D8650F_SpecMin, MAX(D8650F_SPEC_MAX) AS D8650F_SpecMax
			,MAX(D8650F_ETH) AS D8650F_ETH_Actual, MAX(D8650F_ETH_PRED) AS D8650F_ETH_Predicted
			,MAX(D8650F_ETH_SPEC_MIN) AS D8650F_ETH_SpecMin, MAX(D8650F_ETH_SPEC_MAX) AS D8650F_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_Actual ELSE D8650F_ETH_Actual END AS D8650F_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_Predicted ELSE D8650F_ETH_Predicted END AS D8650F_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_SpecMin ELSE D8650F_ETH_SpecMin END AS D8650F_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8650F_SpecMax ELSE D8650F_ETH_SpecMax END AS D8650F_Final_SpecMax
		,MAX(D8670F) AS D8670F_Actual, MAX(D8670F_PRED) AS D8670F_Predicted, MAX(D8670F_SPEC_MAX) AS D8670F_SpecMax
			,MAX(D8670F_ETH) AS D8670F_ETH_Actual, MAX(D8670F_ETH_PRED) AS D8670F_ETH_Predicted, MAX(D8670F_ETH_SPEC_MAX) AS D8670F_ETH_SpecMax
		,MAX(D8690F) AS D8690F_Actual, MAX(D8690F_PRED) AS D8690F_Predicted, MAX(D8690F_SPEC_MIN) AS D8690F_SpecMin, MAX(D8690F_SPEC_MAX) AS D8690F_SpecMax
			,MAX(D8690F_ETH) AS D8690F_ETH_Actual, MAX(D8690F_ETH_PRED) AS D8690F_ETH_Predicted
			,MAX(D8690F_ETH_SPEC_MIN) AS D8690F_ETH_SpecMin, MAX(D8690F_ETH_SPEC_MAX) AS D8690F_ETH_SpecMax
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_Actual ELSE D8690F_ETH_Actual END AS D8690F_Final_Actual
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_Predicted ELSE D8690F_ETH_Predicted END AS D8690F_Final_Predicted
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_SpecMin ELSE D8690F_ETH_SpecMin END AS D8690F_Final_SpecMin
			,CASE WHEN Product_Desc IN ('Pemex Premium','Pemex Unleaded') THEN D8690F_SpecMax ELSE D8690F_ETH_SpecMax END AS D8690F_Final_SpecMax
		,MAX(Oxygen) AS Oxygen_Actual, MAX(Oxygen_PRED) AS Oxygen_Predicted, MAX(Oxygen_SPEC_MIN) AS Oxygen_SpecMin, MAX(Oxygen_SPEC_MAX) AS Oxygen_SpecMax
			,MAX(Oxygen_ETH) AS Oxygen_ETH_Actual, MAX(Oxygen_ETH_PRED) AS Oxygen_ETH_Predicted
			,MAX(Oxygen_ETH_SPEC_MIN) AS Oxygen_ETH_SpecMIN, MAX(Oxygen_ETH_SPEC_MAX) AS Oxygen_ETH_SpecMAX
		,MAX(Ethanol) AS Ethanol_Actual, MAX(Ethanol_PRED) AS Ethanol_Predicted, MAX(Ethanol_SPEC_MIN) AS Ethanol_SpecMin, MAX(Ethanol_SPEC_MAX) AS Ethanol_SpecMax
			,MAX(Ethanol_ETH) AS Ethanol_ETH_Actual, MAX(Ethanol_ETH_PRED) AS Ethanol_ETH_Predicted
			,MAX(Ethanol_ETH_SPEC_MIN) AS Ethanol_ETH_SpecMIN, MAX(Ethanol_ETH_SPEC_MAX) AS Ethanol_ETH_SpecMAX
	FROM
		(
		SELECT ref_prod_location, tank, job_name, component_name, product, units,
			CASE WHEN Component_Name = 'Gravity_Average' THEN results_value END AS "API",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN results_value END AS "RM2",
			CASE WHEN Component_Name = 'RVP_Average' THEN results_value END AS "RVP",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN results_value END AS "RON",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN results_value END AS "MON",
			CASE WHEN Component_Name = 'VL_Ratio' THEN results_value END AS "TVLF",
			CASE WHEN Component_Name = 'Drivability_Index' THEN results_value END AS "DI",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN results_value END AS "Benzene_Old",
			CASE WHEN Component_Name = 'Benzene_Predicted_for_D3606' THEN results_value END AS "Benzene_New",
			CASE WHEN Component_Name = 'Benzene_%lv' THEN results_value END AS "Benzene_PMX",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN results_value END AS "Sulfur",
			CASE WHEN Component_Name = 'Aromatics_D5769' THEN results_value END AS "Aromatics_Old",
			CASE WHEN Component_Name = 'Aromatics_Predicted_for_D5769' THEN results_value END AS "Aromatics_New",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN results_value END AS "Olefins",
			CASE WHEN Component_Name = 'E200' THEN results_value END AS "E200",
			CASE WHEN Component_Name = 'IBP' THEN results_value END AS "E300",
			CASE WHEN Component_Name = 'IBP' THEN results_value END AS "IBP",
			CASE WHEN Component_Name = 'FBP' THEN results_value END AS "FBP",
			CASE WHEN Component_Name = '10%' THEN results_value END AS "D8610F",
			CASE WHEN Component_Name = '50%' THEN results_value END AS "D8650F",
			CASE WHEN Component_Name = '90%' THEN results_value END AS "D8690F",
			CASE WHEN Component_Name = '30%' THEN results_value END AS "D8630F",
			CASE WHEN Component_Name = '70%' THEN results_value END AS "D8670F",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN results_value END AS "Oxygen",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN results_value END AS "Ethanol",
			
			CASE WHEN Component_Name = 'Gravity_Average' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "API_PRED",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "RM2_PRED",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "RVP_PRED",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "RON_PRED",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "MON_PRED",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "TVLF_PRED",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "DI_PRED",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "Benzene_PRED",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "Sulfur_PRED",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "Aromatics_PRED",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "Olefins_PRED",
			CASE WHEN Component_Name = 'E200' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "E200_PRED",
			CASE WHEN Component_Name = 'E300' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "E300_PRED",
			CASE WHEN Component_Name = 'IBP' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "IBP_PRED",
			CASE WHEN Component_Name = 'FBP' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "FBP_PRED",
			CASE WHEN Component_Name = '10%' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "D8610F_PRED",
			CASE WHEN Component_Name = '50%' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "D8650F_PRED",
			CASE WHEN Component_Name = '90%' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "D8690F_PRED",
			CASE WHEN Component_Name = '30%' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "D8630F_PRED",
			CASE WHEN Component_Name = '70%' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "D8670F_PRED",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "Oxygen_PRED",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST (predicted_value AS DECIMAL(10,1)) END AS "Ethanol_PRED",

			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "RM2_SPEC_MIN",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "RVP_SPEC_MIN",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "RON_SPEC_MIN",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "MON_SPEC_MIN",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST(spec_min AS DECIMAL(10,1)) END AS "TVLF_SPEC_MIN",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_min AS DECIMAL(10,1))END AS "E200_SPEC_MIN",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_min AS DECIMAL(10,1))END AS "E300_SPEC_MIN",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_min AS DECIMAL(10,1))END AS "IBP_SPEC_MIN",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_min AS DECIMAL(10,1))END AS "FBP_SPEC_MIN",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "D8610F_SPEC_MIN",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "D8650F_SPEC_MIN",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "D8690F_SPEC_MIN",			
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "Oxygen_SPEC_MIN",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_min AS DECIMAL(10,1))END AS "Ethanol_SPEC_MIN",

			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "RVP_SPEC_MAX",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "DI_SPEC_MAX",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "Benzene_SPEC_MAX",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "Sulfur_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "Aromatics_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "Olefins_SPEC_MAX",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "E200_SPEC_MAX",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "E300_SPEC_MAX",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "IBP_SPEC_MAX",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "FBP_SPEC_MAX",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "D8610F_SPEC_MAX",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "D8650F_SPEC_MAX",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "D8690F_SPEC_MAX",					
			CASE WHEN Component_Name = '30%' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "D8630F_SPEC_MAX",
			CASE WHEN Component_Name = '70%' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "D8670F_SPEC_MAX",					
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "Oxygen_SPEC_MAX",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_max AS DECIMAL(10,1)) END AS "Ethanol_SPEC_MAX",
			
			CASE WHEN Component_Name = 'Gravity_10%' THEN results_value_ethanol END AS "API_ETH",
			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN results_value_ethanol END AS "RM2_ETH",
			CASE WHEN Component_Name IN ('RVP','RVP_ASTM') THEN results_value_ethanol END AS "RVP_ETH",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN results_value_ethanol END AS "RON_ETH",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN results_value_ethanol END AS "MON_ETH",
			CASE WHEN Component_Name IN ('VL_Ratio_ASTM','VL_Ratio_Oxygenated') THEN results_value_ethanol END AS "TVLF_ETH",
			CASE WHEN Component_Name = 'Drivability_Index_10%' THEN results_value_ethanol END AS "DI_ETH",
			CASE WHEN Component_Name = '10%_Benzene' THEN results_value_ethanol END AS "Benzene_ETH",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN results_value_ethanol END AS "Sulfur_ETH",
			CASE WHEN Component_Name = '10%_Total_Aromatics_%lv' THEN results_value_ethanol END AS "Aromatics_ETH",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN results_value_ethanol END AS "Olefins_ETH",
			CASE WHEN Component_Name = 'E200' THEN results_value_ethanol END AS "E200_ETH",
			CASE WHEN Component_Name = 'E300' THEN results_value_ethanol END AS "E300_ETH",
			CASE WHEN Component_Name = 'IBP' THEN results_value_ethanol END AS "IBP_ETH",
			CASE WHEN Component_Name = 'FBP' THEN results_value_ethanol END AS "FBP_ETH",
			CASE WHEN Component_Name = '10%' THEN results_value_ethanol END AS "D8610F_ETH",
			CASE WHEN Component_Name = '50%' THEN results_value_ethanol END AS "D8650F_ETH",
			CASE WHEN Component_Name = '90%' THEN results_value_ethanol END AS "D8690F_ETH",
			CASE WHEN Component_Name = '30%' THEN results_value_ethanol END AS "D8630F_ETH",
			CASE WHEN Component_Name = '70%' THEN results_value_ethanol END AS "D8670F_ETH",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN results_value_ethanol END AS "Oxygen_ETH",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN results_value_ethanol END AS "Ethanol_ETH",

			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "RM2_ETH_PRED",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "RVP_ETH_PRED",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "RON_ETH_PRED",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "MON_ETH_PRED",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "TVLF_ETH_PRED",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "DI_ETH_PRED",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "Benzene_ETH_PRED",
			CASE WHEN Component_Name= 'Sulfur_ppm' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1))END AS "Sulfur_ETH_PRED",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "Aromatics_ETH_PRED",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "Olefins_ETH_PRED",
			CASE WHEN Component_Name = 'E200' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "E200_ETH_PRED",
			CASE WHEN Component_Name = 'E300' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "E300_ETH_PRED",
			CASE WHEN Component_Name = 'IBP' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "IBP_ETH_PRED",
			CASE WHEN Component_Name = 'FBP' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "FBP_ETH_PRED",
			CASE WHEN Component_Name = '10%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "D8610F_ETH_PRED",
			CASE WHEN Component_Name = '50%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "D8650F_ETH_PRED",
			CASE WHEN Component_Name = '90%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "D8690F_ETH_PRED",
			CASE WHEN Component_Name = '30%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "D8630F_ETH_PRED",
			CASE WHEN Component_Name = '70%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "D8670F_ETH_PRED",
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "Oxygen_ETH_PRED",
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(predicted_value_ethanol AS DECIMAL(10,1)) END AS "Ethanol_ETH_PRED",

			CASE WHEN Component_Name = 'Road_Octane_(R+M)/2' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "RM2_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "RVP_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'Research_Octane_D2699' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "RON_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "MON_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'VL_Ratio' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "TVLF_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "E200_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "E300_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "IBP_ETH_SPEC_MIN",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "FBP_ETH_SPEC_MIN",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "D8610F_ETH_SPEC_MIN",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "D8650F_ETH_SPEC_MIN",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "D8690F_ETH_SPEC_MIN",			
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "Oxygen_ETH_SPEC_MIN",			
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_min_ethanol AS DECIMAL(10,1)) END AS "Ethanol_ETH_SPEC_MIN",	

			CASE WHEN Component_Name = 'RVP_Average' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "RVP_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'Drivability_Index' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "DI_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'Benzene_%vol' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "Benzene_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'Sulfur_ppm' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "Sulfur_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Aromatics' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "Aromatics_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'FIA_Olefins' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "Olefins_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'E200' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "E200_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'E300' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "E300_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'IBP' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "IBP_ETH_SPEC_MAX",
			CASE WHEN Component_Name = 'FBP' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "FBP_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '10%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "D8610F_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '50%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "D8650F_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '90%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "D8690F_ETH_SPEC_MAX",					
			CASE WHEN Component_Name = '30%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "D8630F_ETH_SPEC_MAX",
			CASE WHEN Component_Name = '70%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "D8670F_ETH_SPEC_MAX",					
			CASE WHEN Component_Name = 'total_oxygen_Wt%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "Oxygen_ETH_SPEC_MAX",					
			CASE WHEN Component_Name = 'Ethanol_LV%' THEN CAST(spec_max_ethanol AS DECIMAL(10,1)) END AS "Ethanol_ETH_SPEC_MAX"
			
		FROM
			(
			-- Pull in actual lab values from LIMS.  Use last value and break into Neat or Ethanol
			SELECT tmpLabResults.Ref_Prod_Location, Tank, Job_Name, Component_Name, Product, Units
				,MAX(Results_Value) AS Results_Value, MAX(Results_Value_Ethanol) AS Results_Value_Ethanol
				,MAX(Predicted_Value) AS Predicted_Value, MAX(Spec_Min) AS Spec_Min, MAX(Spec_Max) AS Spec_Max
				,MAX(Predicted_Value_Ethanol) AS Predicted_Value_Ethanol, MAX(Spec_Min_Ethanol) AS Spec_Min_Ethanol, MAX(Spec_Max_Ethanol) AS Spec_Max_Ethanol
			FROM
				(
				SELECT	Lab_Results.Ref_prod_location, Tank, Lab_Results.Job_Name
					,Lab_Results.Test_Number, Lab_Results.Component_Name
					,CASE WHEN test3 = 'Neat' THEN product
						ELSE SUBSTRING(Lab_Results.Product FROM 1 FOR 8) 
					END AS Product
					,CASE WHEN test3 = 'Neat' THEN Results_Value END AS Results_Value
					,CASE WHEN test3 = 'Ethanol' THEN Results_Value END AS Results_Value_Ethanol
					, Units
				FROM	prod_edw_base_views.LAB_RESULTS
				INNER JOIN 
					/* Select of Actual lab results from LIMS data */
					(
					SELECT ref_prod_location, job_name, test3, component_name, MAX(test_number) AS test_number
					FROM
						(
						SELECT ref_prod_location, job_name
							,CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 1) = '_' 
								OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-2 FOR 1)= '_')
							THEN 
								CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product) FOR 1) = '1' 
									OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 2)= '10')
									THEN 'Ethanol' 
								ELSE 'Extra'
								END
							ELSE 'Neat' 
							END AS test3					
							,component_name
							,MAX(test_number) AS Test_Number
						FROM prod_edw_base_views.LAB_RESULTS
						/* Include only lab samples with a sample status of Complete, Available or Authorized */					
						WHERE Lab_Results.SampleStatus IN ('C','V','A')
							AND Sample_type = 'MOGASFINAL'
						GROUP BY ref_prod_location, test3, job_name, component_name
						) AS tmpRecentTest2
					WHERE test3 IN ('Ethanol','Neat')
					GROUP BY ref_prod_location, test3, job_name, component_name
					) AS tmpRecentTest
				ON Lab_Results.ref_prod_location = tmpRecentTest.ref_prod_location
					AND Lab_Results.job_name = tmpRecentTest.job_name
					AND Lab_Results.component_name = tmpRecentTest.component_name
					AND Lab_Results.test_number = tmpRecentTest.test_number
				) AS tmpLabResults
			LEFT OUTER JOIN 
				(
				-- Pull in predicted valuesand specs from MBO
				SELECT ref_prod_location, Blend_Number, Component_Name_Lims
					,MAX(Predicted_Value) AS Predicted_Value, MAX(Spec_Min) AS Spec_Min, MAX(Spec_Max) AS Spec_Max
					,MAX(Predicted_Value_Ethanol) AS Predicted_Value_Ethanol, MAX(Spec_Min_Ethanol) AS Spec_Min_Ethanol, MAX(Spec_Max_Ethanol) AS Spec_Max_Ethanol
				FROM
					(	
					SELECT Blend_PredictedValue.ref_prod_location, Blend_Number, Component_Name_LIMS
						,CASE WHEN Blend_Type = 'Neat' THEN Predicted_Value END AS Predicted_Value
						,CASE WHEN Blend_Type = 'Neat' THEN Spec_Min END AS Spec_Min
						,CASE WHEN Blend_Type = 'Neat' THEN Spec_Max END AS Spec_Max
						,CASE WHEN Blend_Type = '10 Percent Ethanol' THEN Predicted_Value END AS Predicted_Value_Ethanol
						,CASE WHEN Blend_Type = '10 Percent Ethanol' THEN Spec_Min END AS Spec_Min_Ethanol
						,CASE WHEN Blend_Type = '10 Percent Ethanol' THEN Spec_Max END AS Spec_Max_Ethanol
					FROM prod_edw_base_views.Blend_PredictedValue
					) AS trmpBlend_PredictedValue2
					GROUP BY ref_prod_location, Blend_Number, Component_Name_Lims
				) AS tmpBlend_PredictedValue
			ON tmpLabResults.ref_prod_location = tmpBlend_PredictedValue.ref_prod_location
				AND tmpLabResults.job_name = tmpBlend_PredictedValue.Blend_Number
				AND tmpLabResults.component_name = tmpBlend_PredictedValue.Component_Name_LIMS
			GROUP BY tmpLabResults.Ref_Prod_Location, Tank, Job_Name, Component_Name, Product, Units
			) AS tmpLab3
		) AS tmpLab2
	INNER JOIN
		(
		SELECT Blend.ref_prod_location, BlendNum, Product_Desc
		FROM    prod_edw_base_views.BLEND
		INNER JOIN prod_edw_base_views.ref_product
			ON Ref_Product.Product_ID = Blend.ProductID
			AND Ref_Product.Ref_Prod_Location = Blend.Ref_Prod_Location
		) AS tmpProductDesc
	ON tmpLab2.ref_prod_location = tmpProductDesc.Ref_Prod_Location
		AND tmpLab2.Job_Name = tmpProductDesc.BlendNum
	GROUP BY tmpLab2.ref_prod_location, job_name, product_desc
	) AS tmpLab
ON blend.ref_prod_location = tmpLab.ref_prod_location
	AND blend.blendnum = tmpLab.job_Name 	



INNER JOIN
	(
	-- Pull in pricing
	SELECT	Cur_Date,
		CAST(MAX(CASE WHEN pricing_code = 'AARQU00' THEN price end) AS DECIMAL(10,2)) AS "AARQU00" ,
		CAST(MAX(CASE WHEN pricing_code = 'AARQURV' THEN price end) AS DECIMAL(10,2))AS "AARQURV" ,
		CAST(MAX(CASE WHEN pricing_code = 'PMAAI00' THEN price end) AS DECIMAL(10,2)) AS "PMAAI00" 
	FROM	prod_edw_base_views.COMBINED_PRICING
	INNER JOIN
		(SELECT cur_date, MAX(price_eff_date) AS PriceDate
		FROM	prod_edw_base_views.Cur_Date
		INNER JOIN prod_edw_base_views.combined_pricing
			ON cur_date.cur_date >= combined_pricing.price_eff_date
				AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
				AND combined_pricing.price_type IN ('Close','Unspecified')
		GROUP BY cur_date) AS tmpPriceDate
		ON combined_pricing.price_eff_date = tmpPriceDate.PriceDate
			AND combined_pricing.pricing_code IN ('AARQU00','PMAAI00','AARQURV')
			AND combined_pricing.price_type IN ('Close','Unspecified')
	GROUP BY Cur_Date
	) AS tmpPrice
ON Blend.BlendDate = tmpPrice.Cur_Date

INNER JOIN prod_edw_base_views.Blend_Octane_Diff
ON Blend.Ref_Prod_Location = Blend_Octane_Diff.Ref_Prod_Location
	AND Ref_Product.Product_Desc = Blend_Octane_Diff.Blend_Desc

LEFT OUTER JOIN
	(
	-- Pull in analyses of source tanks
	SELECT ref_prod_location, blendnum
		,MAX(RVP_LCC_Actual) AS RVP_LCC_Actual, MAX(RVP_ALK_Actual) AS RVP_ALK_Actual, MAX(RVP_HREF_Actual) AS RVP_HREF_Actual
		,MAX(RVP_LSR_Actual) AS RVP_LSR_Actual, MAX(RVP_REF_Actual) AS RVP_REF_Actual, MAX(RVP_MBUT_Actual) AS RVP_MBUT_Actual
		,MAX(RVP_HSR_Actual) AS RVP_HSR_Actual, MAX(RVP_TOL_Actual) AS RVP_TOL_Actual, MAX(RVP_LREF_Actual) AS RVP_LREF_Actual

		,MAX(RON_LCC_Actual) AS RON_LCC_Actual, MAX(RON_ALK_Actual) AS RON_ALK_Actual, MAX(RON_HREF_Actual) AS RON_HREF_Actual
		,MAX(RON_LSR_Actual) AS RON_LSR_Actual, MAX(RON_REF_Actual) AS RON_REF_Actual, MAX(RON_MBUT_Actual) AS RON_MBUT_Actual
		,MAX(RON_HSR_Actual) AS RON_HSR_Actual, MAX(RON_TOL_Actual) AS RON_TOL_Actual, MAX(RON_LREF_Actual) AS RON_LREF_Actual

		,MAX(MON_LCC_Actual) AS MON_LCC_Actual, MAX(MON_ALK_Actual) AS MON_ALK_Actual, MAX(MON_HREF_Actual) AS MON_HREF_Actual
		,MAX(MON_LSR_Actual) AS MON_LSR_Actual, MAX(MON_REF_Actual) AS MON_REF_Actual, MAX(MON_MBUT_Actual) AS MON_MBUT_Actual
		,MAX(MON_HSR_Actual) AS MON_HSR_Actual, MAX(MON_TOL_Actual) AS MON_TOL_Actual, MAX(MON_LREF_Actual) AS MON_LREF_Actual

		,MAX(IBP_LCC_Actual) AS IBP_LCC_Actual, MAX(IBP_ALK_Actual) AS IBP_ALK_Actual, MAX(IBP_HREF_Actual) AS IBP_HREF_Actual
		,MAX(IBP_LSR_Actual) AS IBP_LSR_Actual, MAX(IBP_REF_Actual) AS IBP_REF_Actual, MAX(IBP_MBUT_Actual) AS IBP_MBUT_Actual
		,MAX(IBP_HSR_Actual) AS IBP_HSR_Actual, MAX(IBP_TOL_Actual) AS IBP_TOL_Actual, MAX(IBP_LREF_Actual) AS IBP_LREF_Actual

		,MAX(FBP_LCC_Actual) AS FBP_LCC_Actual, MAX(FBP_ALK_Actual) AS FBP_ALK_Actual, MAX(FBP_HREF_Actual) AS FBP_HREF_Actual
		,MAX(FBP_LSR_Actual) AS FBP_LSR_Actual, MAX(FBP_REF_Actual) AS FBP_REF_Actual, MAX(FBP_MBUT_Actual) AS FBP_MBUT_Actual
		,MAX(FBP_HSR_Actual) AS FBP_HSR_Actual, MAX(FBP_TOL_Actual) AS FBP_TOL_Actual, MAX(FBP_LREF_Actual) AS FBP_LREF_Actual

		,MAX(T10_LCC_Actual) AS D8610F_LCC_Actual, MAX(T10_ALK_Actual) AS D8610F_ALK_Actual, MAX(T10_HREF_Actual) AS D8610F_HREF_Actual
		,MAX(T10_LSR_Actual) AS D8610F_LSR_Actual, MAX(T10_REF_Actual) AS D8610F_REF_Actual, MAX(T10_MBUT_Actual) AS D8610F_MBUT_Actual
		,MAX(T10_HSR_Actual) AS D8610F_HSR_Actual, MAX(T10_TOL_Actual) AS D8610F_TOL_Actual, MAX(T10_LREF_Actual) AS D8610F_LREF_Actual

		,MAX(T30_LCC_Actual) AS D8630F_LCC_Actual, MAX(T30_ALK_Actual) AS D8630F_ALK_Actual, MAX(T30_HREF_Actual) AS D8630F_HREF_Actual
		,MAX(T30_LSR_Actual) AS D8630F_LSR_Actual, MAX(T30_REF_Actual) AS D8630F_REF_Actual, MAX(T30_MBUT_Actual) AS D8630F_MBUT_Actual
		,MAX(T30_HSR_Actual) AS D8630F_HSR_Actual, MAX(T30_TOL_Actual) AS D8630F_TOL_Actual, MAX(T30_LREF_Actual) AS D8630F_LREF_Actual

		,MAX(T50_LCC_Actual) AS D8650F_LCC_Actual, MAX(T50_ALK_Actual) AS D8650F_ALK_Actual, MAX(T50_HREF_Actual) AS D8650F_HREF_Actual
		,MAX(T50_LSR_Actual) AS D8650F_LSR_Actual, MAX(T50_REF_Actual) AS D8650F_REF_Actual, MAX(T50_MBUT_Actual) AS D8650F_MBUT_Actual
		,MAX(T50_HSR_Actual) AS D8650F_HSR_Actual, MAX(T50_TOL_Actual) AS D8650F_TOL_Actual, MAX(T50_LREF_Actual) AS D8650F_LREF_Actual

		,MAX(T70_LCC_Actual) AS D8670F_LCC_Actual, MAX(T70_ALK_Actual) AS D8670F_ALK_Actual, MAX(T70_HREF_Actual) AS D8670F_HREF_Actual
		,MAX(T70_LSR_Actual) AS D8670F_LSR_Actual, MAX(T70_REF_Actual) AS D8670F_REF_Actual, MAX(T70_MBUT_Actual) AS D8670F_MBUT_Actual
		,MAX(T70_HSR_Actual) AS D8670F_HSR_Actual, MAX(T70_TOL_Actual) AS D8670F_TOL_Actual, MAX(T70_LREF_Actual) AS D8670F_LREF_Actual

		,MAX(T90_LCC_Actual) AS D8690F_LCC_Actual, MAX(T90_ALK_Actual) AS D8690F_ALK_Actual, MAX(T90_HREF_Actual) AS D8690F_HREF_Actual
		,MAX(T90_LSR_Actual) AS D8690F_LSR_Actual, MAX(T90_REF_Actual) AS D8690F_REF_Actual, MAX(T90_MBUT_Actual) AS D8690F_MBUT_Actual
		,MAX(T90_HSR_Actual) AS D8690F_HSR_Actual, MAX(T90_TOL_Actual) AS D8690F_TOL_Actual, MAX(T90_LREF_Actual) AS D8690F_LREF_Actual

	FROM
		(
		SELECT tmpBlend.Ref_Prod_Location
			,tmpBlend.BlendNum, tmpBlend.BlendProduct, FeedTank, BlendDate, FeedProduct, ActualVolume, MBO_Component_Name
			,CASE WHEN Date_Sampled = BlendDate THEN Results_Value ELSE MBO_Value END AS Final_Value
			
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS RVP_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Alkylate' THEN Final_Value END AS RVP_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS RVP_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS RVP_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Reformate' THEN Final_Value END AS RVP_REF_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS RVP_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS RVP_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Toluene' THEN Final_Value END AS RVP_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'RVP' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS RVP_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS RON_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Alkylate' THEN Final_Value END AS RON_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS RON_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS RON_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Reformate' THEN Final_Value END AS RON_REF_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS RON_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS RON_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Toluene' THEN Final_Value END AS RON_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'RON' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS RON_LREF_Actual

			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS MON_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Alkylate' THEN Final_Value END AS MON_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS MON_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS MON_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Reformate' THEN Final_Value END AS MON_REF_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS MON_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS MON_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Toluene' THEN Final_Value END AS MON_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'MON' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS MON_LREF_Actual

			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS IBP_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Alkylate' THEN Final_Value END AS IBP_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS IBP_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS IBP_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Reformate' THEN Final_Value END AS IBP_REF_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS IBP_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS IBP_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Toluene' THEN Final_Value END AS IBP_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'IBP' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS IBP_LREF_Actual

			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS FBP_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Alkylate' THEN Final_Value END AS FBP_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS FBP_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS FBP_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Reformate' THEN Final_Value END AS FBP_REF_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS FBP_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS FBP_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Toluene' THEN Final_Value END AS FBP_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'FBP' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS FBP_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T10_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T10_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T10_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T10_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Reformate' THEN Final_Value END AS T10_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T10_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T10_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Toluene' THEN Final_Value END AS T10_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T10' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T10_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T30_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T30_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T30_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T30_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Reformate' THEN Final_Value END AS T30_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T30_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T30_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Toluene' THEN Final_Value END AS T30_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T30' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T30_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T50_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T50_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T50_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T50_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Reformate' THEN Final_Value END AS T50_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T50_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T50_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Toluene' THEN Final_Value END AS T50_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T50' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T50_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T70_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T70_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T70_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T70_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Reformate' THEN Final_Value END AS T70_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T70_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T70_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Toluene' THEN Final_Value END AS T70_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T70' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T70_LREF_Actual
			
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Cat Gasoline' THEN Final_Value END AS T90_LCC_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Alkylate' THEN Final_Value END AS T90_ALK_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Heavy Reformate' THEN Final_Value END AS T90_HREF_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Light Straight Run' THEN Final_Value END AS T90_LSR_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Reformate' THEN Final_Value END AS T90_REF_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Mixed Butane' THEN Final_Value END AS T90_MBUT_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Sweet Heavy Straight Run (Hydrobate)' THEN Final_Value END AS T90_HSR_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Toluene' THEN Final_Value END AS T90_TOL_Actual
			,CASE WHEN MBO_Component_Name = 'T90' AND FeedProduct = 'Light Reformate' THEN Final_Value END AS T90_LREF_Actual
			
		FROM
			(
			SELECT blend.ref_prod_location,SUBSTR(FeedTank,2,4) AS FeedTank,MAX(BlendDate) AS BlendDate, feedproduct, actualvolume
				,BlendNum
				,BlendProduct
			FROM    prod_edw_base_views.BLEND
			LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
			ON Blend.blendid = blendrecipe.blendid
				AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, master_id, master_code AS FeedTank
				FROM prod_edw_base_views.Master) AS tmpFeedTank
				ON Blendrecipe.TANKID = tmpFeedTank.MASTER_ID
					AND Blendrecipe.Ref_Prod_Location = tmpFeedTank.Ref_Prod_Location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, product_id, product_desc AS FeedProduct
				FROM prod_edw_base_views.ref_product) AS tmpFeedProduct
			ON Blendrecipe.productid = tmpFeedProduct.product_id
				AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
			LEFT OUTER JOIN 
				(SELECT ref_prod_location, product_id, product_desc AS BlendProduct
				FROM prod_edw_base_views.ref_product) AS tmpBlendProduct
			ON Blend.productid = tmpBlendProduct.product_id
				AND Blend.Ref_Prod_Location = tmpBlendProduct.Ref_Prod_Location
			GROUP BY Blend.Ref_Prod_Location, FeedTank, BlendNum, FeedProduct, ActualVolume, BlendProduct
			) AS tmpBlend

		INNER JOIN
			(
			SELECT	Ref_Prod_Location, Prop AS MBO_Component_Name, Value_Date AS MBO_Date, Tnk_Value AS MBO_Value
				,CASE WHEN CHARACTER_LENGTH(Tank_Id) = 6 THEN SUBSTR(tank_id,3,4) 
					WHEN CHARACTER_LENGTH(Tank_Id) = 5 THEN '0'||SUBSTR(tank_id,3,3) 
				END AS MBO_Tank
			FROM prod_edw_base_views.MBO_Tank_Values
			WHERE tnk_case = 'BASE'
				AND tank_id IN ('TK4052','TK4119','TK4120','TK142','TK125','TK181','TK4124'
					,'TK130','TK127','TK117','TK4121','TK4122','TK079','TK090')
				AND prop IN ('RON','MON','RVP','IBP','FBP','T10','T30','T50','T70','T90')
			) AS tmpMBO
		ON tmpBlend.Ref_Prod_Location = tmpMBO.Ref_Prod_Location
			AND tmpBlend.FeedTank = tmpMBO.MBO_Tank
			AND tmpBlend.BlendDate = tmpMBO.MBO_Date

		LEFT OUTER JOIN
			(
			SELECT	lab_results.Ref_prod_location, MAX(Sample_Number) AS sample_number
				,Tank, blendnum, Component_Name
				,CASE WHEN  lab_results.Component_Name = '10%' THEN 'T10' 
					WHEN lab_results.Component_Name = '30%' THEN 'T30'
					WHEN lab_results.Component_Name = '50%' THEN 'T50'
					WHEN lab_results.Component_Name = '70%' THEN 'T70'
					WHEN lab_results.Component_Name = '90%' THEN 'T90'
					WHEN lab_results.Component_Name = 'Research_Octane_D2699' THEN 'RON'
					WHEN lab_results.Component_Name = 'Motor_Octane_D2700' THEN 'MON'
				ELSE lab_results.Component_Name 
				END AS Component_NameAdj
			FROM prod_edw_base_views.LAB_RESULTS
			INNER JOIN
				(
				SELECT blend.ref_prod_location,SUBSTR(FeedTank,2,4) AS FeedTankAdj,MAX(BlendDate) AS BlendDate, feedproduct, actualvolume
					,BlendNum
				FROM    prod_edw_base_views.BLEND
				LEFT OUTER JOIN prod_edw_base_views.BLENDRECIPE
				ON Blend.blendid = blendrecipe.blendid
					AND Blend.ref_prod_location = Blendrecipe.ref_prod_location
				LEFT OUTER JOIN 
					(SELECT ref_prod_location, master_id, master_code AS FeedTank
						FROM prod_edw_base_views.Master) AS tmpFeedTank
				ON Blendrecipe.TANKID = tmpFeedTank.MASTER_ID
					AND Blendrecipe.Ref_Prod_Location = tmpFeedTank.Ref_Prod_Location
				LEFT OUTER JOIN 
					(SELECT ref_prod_location, product_id, product_desc AS FeedProduct
						FROM prod_edw_base_views.ref_product
					) AS tmpFeedProduct
				ON Blendrecipe.productid = tmpFeedProduct.product_id
					AND Blendrecipe.Ref_Prod_Location = tmpFeedProduct.Ref_Prod_Location
				GROUP BY blend.ref_prod_location, FeedTankAdj, BlendNum, feedproduct, actualvolume
				) AS tmpBlendDate
			ON lab_results.ref_prod_location = tmpBlendDate.ref_prod_location
				AND lab_results.tank = tmpBlendDate.feedtankadj
				AND lab_results.date_sampled <= tmpBlendDate.BlendDate
			GROUP BY lab_results.ref_prod_location, component_name, tank, blendnum
			) AS tmpLab_Max
		ON tmpBlend.Ref_Prod_Location = tmpLab_Max.Ref_Prod_Location
			AND tmpBlend.BlendNum = tmpLab_Max.BlendNum
			AND tmpBlend.FeedTank = tmpLab_Max.Tank
			AND tmpMBO.MBO_Component_Name = tmpLab_Max.Component_NameAdj

		LEFT OUTER JOIN prod_edw_base_views.lab_results
		ON tmpLab_Max.Ref_Prod_Location = Lab_Results.Ref_Prod_Location
			AND tmpLab_Max.Sample_Number = Lab_Results.Sample_Number
			AND tmpLab_Max.Component_Name = Lab_Results.Component_Name
		) AS tmpSource2
	GROUP BY ref_prod_location, blendnum
	) AS tmpSource
ON blend.ref_prod_location = tmpSource.ref_prod_location
	AND blend.blendnum = tmpSource.blendnum

LEFT OUTER JOIN
	(
	-- Pull in analyses of heel
	SELECT blend.ref_prod_location, tank, blenddate, job_name
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(RVP)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS RVP_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(RON)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS RON_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(MON)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS MON_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(IBP)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS IBP_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(FBP)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS FBP_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8610F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8610F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8630F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8630F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8650F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8650F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8670F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8670F_Heel
		,CASE WHEN Tank = MAX(Tank) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) 
			THEN MAX(MAX(D8690F)) OVER (ORDER BY blend.ref_prod_location, Tank, Blenddate ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
			ELSE NULL
		END AS D8690F_Heel
	FROM
		(
		SELECT tmpLabResults.Ref_Prod_Location, Tank, Job_Name
			,CASE WHEN Component_Name = 'RVP_Average' THEN MAX(results_value) END AS "RVP"
			,CASE WHEN Component_Name = 'Research_Octane_D2699' THEN MAX(results_value) END AS "RON"
			,CASE WHEN Component_Name = 'Motor_Octane_D2700' THEN MAX(results_value) END AS "MON"
			,CASE WHEN Component_Name = 'IBP' THEN MAX(results_value) END AS "IBP"
			,CASE WHEN Component_Name = 'FBP' THEN MAX(results_value) END AS "FBP"
			,CASE WHEN Component_Name = '10%' THEN MAX(results_value) END AS "D8610F"
			,CASE WHEN Component_Name = '30%' THEN MAX(results_value) END AS "D8630F"
			,CASE WHEN Component_Name = '50%' THEN MAX(results_value) END AS "D8650F"
			,CASE WHEN Component_Name = '70%' THEN MAX(results_value) END AS "D8670F"
			,CASE WHEN Component_Name = '90%' THEN MAX(results_value) END AS "D8690F"
		FROM
			(
			SELECT	Lab_Results.Ref_prod_location, Tank, Lab_Results.Job_Name
				,Lab_Results.Test_Number, Lab_Results.Component_Name
				,CASE WHEN test3 = 'Neat' THEN product
					ELSE SUBSTRING(Lab_Results.Product FROM 1 FOR 8) 
				END AS Product
				,CASE WHEN test3 = 'Neat' THEN Results_Value END AS Results_Value
				,CASE WHEN test3 = 'Ethanol' THEN Results_Value END AS Results_Value_Ethanol
				, Units
			FROM	prod_edw_base_views.LAB_RESULTS
			INNER JOIN 
				/* Select of Actual lab results from LIMS data */
				(
				SELECT ref_prod_location, job_name, test3, component_name, MAX(test_number) AS test_number
				FROM
					(
					SELECT ref_prod_location, job_name
						,CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 1) = '_' 
							OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-2 FOR 1)= '_')
						THEN 
							CASE WHEN (SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product) FOR 1) = '1' 
								OR SUBSTRING(lab_results.product FROM CHARACTER_LENGTH(lab_results.product)-1 FOR 2)= '10')
								THEN 'Ethanol' 
							ELSE 'Extra'
							END
						ELSE 'Neat' 
						END AS test3					
						,component_name
						,MAX(test_number) AS Test_Number
					FROM prod_edw_base_views.LAB_RESULTS
					/* Include only lab samples with a sample status of Complete, Available or Authorized */					
					WHERE Lab_Results.SampleStatus IN ('C','V','A')					
						AND sample_type = 'MOGASFINAL'
					GROUP BY ref_prod_location, test3, job_name, component_name
					) AS tmpRecentTest2
				WHERE test3 IN ('Neat')
				GROUP BY ref_prod_location, test3, job_name, component_name
				) AS tmpRecentTest
			ON Lab_Results.ref_prod_location = tmpRecentTest.ref_prod_location
				AND Lab_Results.job_name = tmpRecentTest.job_name
				AND Lab_Results.component_name = tmpRecentTest.component_name
				AND Lab_Results.test_number = tmpRecentTest.test_number
			) AS tmpLabResults
		WHERE tank <> ''
		GROUP BY tmpLabResults.Ref_Prod_Location, Tank, Job_Name, Component_Name
		) AS tmpLab
	INNER JOIN prod_edw_base_views.blend
	ON blend.ref_prod_location = tmpLab.ref_prod_location
		AND blend.blendnum = tmpLab.job_name
	GROUP BY blend.ref_prod_location, tank, blenddate, job_name
	) AS tmpHeel
ON Blend.ref_prod_location = tmpHeel.ref_prod_location
	AND Blend.blendnum = tmpHeel.job_name

-- Add DONBBL and RVPBBL prices from Blend_C2P
LEFT OUTER JOIN
	(
	SELECT blend.blendnum
		,MAX(CASE WHEN measure_key = 'DONBBL' THEN Measure_Value END) AS "DONBBL"
		,MAX(CASE WHEN measure_key = 'RVPBBL' THEN Measure_Value END) AS "RVPBBL"
	FROM prod_edw_base_views.blend
	INNER JOIN 
		(
		SELECT	BlendNum, MAX(Measure_Date) AS MaxMeasureDate
		FROM prod_edw_base_views.Blend
		LEFT OUTER JOIN prod_edw_base_views.blend_c2p
		ON blend.blenddate >= blend_c2p.measure_date
		WHERE blend.ref_prod_location = 'el paso refinery'
		GROUP BY Blendnum
		) AS tmpMaxMeasureDate
		ON blend.blendnum = tmpMaxMeasureDate.BlendNum
	LEFT OUTER JOIN prod_edw_base_views.blend_c2p
	ON blend_c2p.measure_date = tmpMaxMeasuredate.MaxMeasureDate
		AND Measure_Key IN ('RVPBBL','DONBBL')
	GROUP BY blend.blendnum
	) AS tmpBlend_C2P
ON blend.blendnum = tmpBlend_C2P.Blendnum	

WHERE blend.ref_prod_location = 'El Paso Refinery'
	AND Blend.blenddate > '2014/12/31'

--ORDER BY Blend.blenddate DESC, Blend.blendnum;;;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.BOL_Abol (
		Ref_Prod_Location, Product_ID,
		Order_Number, Supply_Site_Number, Load_Date, Date_Out, Time_Out,
		BOLProductCode, Product_Family, Product_Code, Net_Lbs, Net_Gallons,
		Customer_Number, Carrier_Name, Carrier_Code, PO_Number, Order_Status,
		Create_dttm, Last_update_dttm) AS 
	LOCKING ROW
	ACCESS
	SELECT
		Ref_Prod_Location, Product_ID,
		Order_Number, Supply_Site_Number, Load_Date, Date_Out, Time_Out,
		BOLProductCode, Product_Family, Product_Code, Net_Lbs, Net_Gallons,
		Customer_Number, Carrier_Name, Carrier_Code, PO_Number, Order_Status,
		Create_dttm, Last_update_dttm
FROM	PROD_EDW_BASE.BOL_ABOL;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.BOL_ABOL_Customer
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_ABOL_CUSTOMER;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.BOL_ABOL_REPORT
AS LOCKING ROW ACCESS
SELECT	BA.Product_ID, 
P. Product_Desc, 
BA.Ref_Prod_Location, 
BA.Order_Number, 
BA.Supply_Site_Number,
BA.Load_Date, 
BA.Date_Out, 
BA.Time_Out, 
BA.BOLProductCode, 
BA.Product_Family,
BA.Product_Code, 
BA.Net_Lbs, 
BA.Net_Gallons,
BA.Customer_Number,
C.Customer_Name,
C.Customer_Name2,
BA.Carrier_Name,
BA.Carrier_Code, 
BA.PO_Number, 
BA.Order_Status, 
BA.Create_dttm, 
BA.Last_update_dttm
FROM	PROD_EDW_BASE_VIEWS.BOL_ABOL as BA
inner join PROD_EDW_BASE_VIEWS.BOL_PROD_LOC_DECODER as P on BA.BOLProductCode = P.BOL_Product_ID and  BA.Supply_Site_Number = P.BOL_Location_ID
inner join PROD_EDW_BASE_VIEWS.BOL_ABOL_CUSTOMER as C on BA.Customer_Number = C.Customer_Number and BA.Supply_Site_Number = C.Supply_Site_Number
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_views.BOL_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS
SELECT	'BOL' as Table_Name, 
	cast('G3' as varchar(20)) as Source_Name, 
	cast('BOL_G3' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_views.BOL_G3
Group by 4
UNION ALL
SELECT	'BOL' as Table_Name, 
	'G3W' as Source_Name, 
	cast('BOL_G3W' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_views.BOL_G3W
Group by 4
UNION ALL
SELECT	'BOL' as Table_Name, 
	'ABOL' as Source_Name, 
	cast('BOL_ABOL' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_views.BOL_Abol
Group by 4
UNION ALL
SELECT	'BOL' as Table_Name, 
	'FUELFACS' as Source_Name, 
	cast('BOL_FF' as varchar(20)) as Location,
	cast(End_Load_Time as date) as EFF_DATE, 
	count(cast(End_Load_Time as date)) as RECORD_CT
FROM	prod_edw_base_views.BOL_FF_ORDERS
Group by 4
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_BLK_MVMT_TNK_INV
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_BLK_MVMT_TNK_INV;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_BULK_ACCOUNT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_BULK_ACCOUNT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_BULK_MOVEMENT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_BULK_MOVEMENT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_BULK_PRODUCT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_BULK_PRODUCT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_CARRIER
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_CARRIER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_CARRIER_CUST
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_CARRIER_CUST;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_CUSTOMER
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_CUSTOMER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_CUSTOMER_PROD
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_CUSTOMER_PROD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_DESTINATION
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_DESTINATION;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_DRIVER
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_DRIVER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_ORDERS
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_ORDERS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_ORDRS_TNK_INV
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_ORDRS_TNK_INV;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_ORDR_DSPCH
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_ORDR_DSPCH;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_ORDR_LDED
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_ORDR_LDED;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_ORDR_RCPE
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_ORDR_RCPE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_ORDR_TRLR
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_ORDR_TRLR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_PROD_CMMT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_PROD_CMMT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_PROD_GRP
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_PROD_GRP;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_SUPLR
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_SUPLR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_SUPLR_PROD
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_SUPLR_PROD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_SUPLR_PROD_GRP
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_SUPLR_PROD_GRP;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_SUPLR_PROD_RECP
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_SUPLR_PROD_RECP;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TANK
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TANK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TANK_UF
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TANK_UF;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TRAILER
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TRAILER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TRAILER_UF
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TRAILER_UF;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TRIP
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TRIP;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TRML_HARZ_WNRG
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TRML_HARZ_WNRG;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TRML_OWNER
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TRML_OWNER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TRML_PRODUCT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TRML_PRODUCT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.BOL_FF_TRML_PROD_CMNT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.BOL_FF_TRML_PROD_CMNT;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_VIEWS.BOL_G3 AS 
	LOCKING ROW
	ACCESS
SELECT	
Product_Grouping, 
Product_Grouping_2, 
CASE WHEN Terminal_id = '6501TX' AND SUBSTR(shipper_id,1,1) = 1 THEN 'WESTERNREFINING' 
	WHEN Terminal_id = '6501TX' AND SUBSTR(shipper_id,1,1) = 2 THEN 'CHEVRON' 
	WHEN Terminal_id = '6501TX' AND SUBSTR(shipper_id,1,1) = 3 THEN 'SHELL' 
	WHEN Terminal_id = '6501TX' AND SUBSTR(shipper_id,1,1) = 4 THEN 'COP' 
	WHEN Terminal_id = '6501TX' AND SUBSTR(shipper_id,1,1) = 5 THEN 'MUSKET'
	WHEN Terminal_id = '6501TX' AND SUBSTR(shipper_id,1,1) = 8 THEN 'INDIGO'
	WHEN Terminal_id <> '6501TX' AND shipper_id = 'HOLLYF' THEN 'HOLLYFRONTIER'
	WHEN Terminal_id <> '6501TX' AND shipper_id = 'WESTER' THEN 'WESTERNREFINING'
	ELSE shipper_id
End AS Stockholder,
Terminal_ID, Terminal_Name, Station_Number,
		BOL_Number, Version, Last_Modified_Date, Last_Modified_Time,
		Order_ID, PO_Number, Contract_ID, Start_Date, Start_Time, Stop_Date,
		Stop_Time, Shipper_Account_ID, Shipper_ID, Shipper_Name, Bill_To_Account_ID,
		Bill_To_ID, Bill_To_Name, Customer_Account_ID, Customer_ID, Customer_Name,
		Carrier_Account_ID, Carrier_ID, Carrier_Name, Destination_ID,
		Destination_Name, Driver_Account_ID, Driver_ID, Driver_Name,
		Truck_ID, Trailer_ID, Railcar_ID, BOL_Line_Number, BOL_Product_ID,
		Product_ID, Product_Type_Code, Product_Description, Gross_Volume,
		Net_Volume, Gravity, Temperature, Ref_Prod_Location, Create_dttm,
		Last_update_dttm
FROM	prod_edw_base.BOL_G3;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.BOL_G3W (Terminal_ID, Terminal_Name, Station_Number, BOL_Number,
		Order_ID, PO_Number, Start_Date, Start_Time, Stop_Date, Stop_Time,
		Shipper_Account_ID, Shipper_ID, Shipper_Name, Bill_To_Account_ID,
		Bill_To_ID, Bill_To_Name, Customer_Account_ID, Customer_ID, Customer_Name,
		Carrier_Account_ID, Carrier_ID, Carrier_Name, Destination_ID,
		Destination_Name, Driver_Account_ID, Driver_ID, Driver_Name,
		Truck_ID, Trailer_ID, BOL_Line_Number, BOL_Product_ID, Product_ID,
		Product_Type_Code, Product_Description, Gross_Volume, Gross_Weight,
		Net_Volume, Net_Weight, Gravity, Temperature, Ref_Prod_Location,
		Create_dttm, Last_update_dttm) AS 
	LOCKING ROW
	ACCESS
	SELECT	Terminal_ID, Terminal_Name, Station_Number, BOL_Number,
		Order_ID, PO_Number, Start_Date, Start_Time, Stop_Date, Stop_Time,
		Shipper_Account_ID, Shipper_ID, Shipper_Name, Bill_To_Account_ID,
		Bill_To_ID, Bill_To_Name, Customer_Account_ID, Customer_ID, Customer_Name,
		Carrier_Account_ID, Carrier_ID, Carrier_Name, Destination_ID,
		Destination_Name, Driver_Account_ID, Driver_ID, Driver_Name,
		Truck_ID, Trailer_ID, BOL_Line_Number, BOL_Product_ID, Product_ID,
		Product_Type_Code, Product_Description, Gross_Volume, Gross_Weight,
		Net_Volume, Net_Weight, Gravity, Temperature, Ref_Prod_Location,
		Create_dttm, Last_update_dttm
FROM	PROD_EDW_BASE.BOL_G3W;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BOL_G3_PPLInterface
AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base_views.BOL_G3_PPLInterface_EPA
UNION ALL
SELECT * FROM prod_edw_base_views.BOL_G3_PPLInterface_BLM
UNION ALL
SELECT * FROM prod_edw_base_views.BOL_G3_PPLInterface_GAL;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BOL_G3_PPLInterface_BLM
AS LOCKING ROW ACCESS

SELECT Movement_ID, tmpDTN.Product_id, tmpDTN.Ref_Prod_Location, tmpDTN.Movement_Code
	,tmpDTN.Movement_Flags, tmpDTN.Movement_Type, tmpDTN.Movement_Status, tmpDTN.Movement_Start
	,tmpDTN.Movement_Start_Dttm, tmpDTN.Movement_End, tmpDTN.Movement_End_Dttm, tmpDTN.Source_ID
	,tmpDTN.Destination_ID, tmpDTN.Customer_ID, tmpDTN.Volume_Estimated, tmpDTN.Weight_Estimated
	,tmpDTN.Volume_Confirmed, tmpDTN.Weight_Confirmed, tmpDTN.Temperature, tmpDTN.Density, tmpDTN.Volume_Received
	,tmpDTN.Weight_Received, tmpDTN.Tolerance, tmpDTN.Ticket_Number, tmpDTN.Comments, tmpDTN.Meter_ID
	,tmpDTN.Recon_Flag, tmpDTN.Trans_Mode_ID, tmpDTN.Trans_Dttm,tmpDTN.Trans_Update_Dttm
	,tmpDTN.Create_Dttm, tmpDTN.Last_Update_Dttm
FROM
	(
	--Bloomfield Ethanol Today-1
	SELECT	CAST(23 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'013'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'014'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Bloomfield Refinery'
		AND product_description IN ('Ethanol Component')
		AND product_type_code = 'C'
	GROUP BY start_date, source_id, movement_code
	
	UNION ALL
	
	--Bloomfield Unleaded Today-1
	SELECT	CAST(18 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'015'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'016'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+58)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(58 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0200','0201','0220','0221','0230','0231','0233','0234','0240','0241','0243','0244')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Premium Today-1
	SELECT	CAST(1 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'017'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'018'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+48)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(48 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0330','0340')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield ULSD Today-1
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'019'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'020'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0412','0415','0416','0442')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Transmix Today-1
	SELECT	CAST(40 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'021'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'022'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0700')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Ethanol Today-2
	SELECT	CAST(23 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'013'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'014'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Bloomfield Refinery'
		AND product_description IN ('Ethanol Component')
		AND product_type_code = 'C'
	GROUP BY start_date, source_id, movement_code
	
	UNION ALL
	
	--Bloomfield Unleaded Today-2
	SELECT	CAST(18 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'015'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'016'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+58)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(58 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0200','0201','0220','0221','0230','0231','0233','0234','0240','0241','0243','0244')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Premium Today-2
	SELECT	CAST(1 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'017'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'018'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+48)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(48 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0330','0340')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield ULSD Today-2
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'019'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'020'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0412','0415','0416','0442')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Transmix Today-2
	SELECT	CAST(40 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'021'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'022'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0700')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Ethanol Today-3
	SELECT	CAST(23 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'013'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'014'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Bloomfield Refinery'
		AND product_description IN ('Ethanol Component')
		AND product_type_code = 'C'
	GROUP BY start_date, source_id, movement_code
	
	UNION ALL
	
	--Bloomfield Unleaded Today-3
	SELECT	CAST(18 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'015'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'016'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+58)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(58 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0200','0201','0220','0221','0230','0231','0233','0234','0240','0241','0243','0244')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Premium Today-3
	SELECT	CAST(1 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'017'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'018'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+48)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(48 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0330','0340')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
		
	--Bloomfield ULSD Today-3
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'019'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'020'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0412','0415','0416','0442')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Transmix Today-3
	SELECT	CAST(40 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'021'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'022'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0700')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Ethanol Today-4
	SELECT	CAST(23 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'013'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'014'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Bloomfield Refinery'
		AND product_description IN ('Ethanol Component')
		AND product_type_code = 'C'
	GROUP BY start_date, source_id, movement_code
	
	UNION ALL
	
	--Bloomfield Unleaded Today-4
	SELECT	CAST(18 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'015'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'016'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+58)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(58 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0200','0201','0220','0221','0230','0231','0233','0234','0240','0241','0243','0244')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Premium Today-4
	SELECT	CAST(1 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'017'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'018'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+48)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(48 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0330','0340')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield ULSD Today-4
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'019'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'020'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0412','0415','0416','0442')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Transmix Today-4
	SELECT	CAST(40 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'021'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'022'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0700')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Ethanol Today-5
	SELECT	CAST(23 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'013'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'014'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Bloomfield Refinery'
		AND product_description IN ('Ethanol Component')
		AND product_type_code = 'C'
	GROUP BY start_date, source_id, movement_code
	
	UNION ALL
	
	--Bloomfield Unleaded Today-5
	SELECT	CAST(18 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'015'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'016'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+58)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(58 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0200','0201','0220','0221','0230','0231','0233','0234','0240','0241','0243','0244')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Premium Today-5
	SELECT	CAST(1 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'017'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'018'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+48)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(48 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0330','0340')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield ULSD Today-5
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'019'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'020'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0412','0415','0416','0442')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code
	
	UNION ALL
	
	--Bloomfield Transmix Today-5
	SELECT	CAST(40 AS INTEGER) AS Product_id, 'Bloomfield' AS Ref_Prod_Location
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'021'
			WHEN shipper_id = 'WESTER' THEN 'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
				SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'022'
		END AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,CASE
			WHEN shipper_id = 'HOLLYF' THEN 133
			WHEN shipper_id = 'WESTER' THEN 131
		END AS Source_ID
		,132 AS Destination_ID
		,0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL  AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Bloomfield Refinery'
		AND bol_g3.bol_product_id IN ('0700')
		AND product_type_code IN ('B','N')
	GROUP BY start_date, source_id,movement_code

	) AS tmpDTN
LEFT OUTER JOIN prod_edw_base_views.movement
	ON movement.movement_code = tmpDTN.Movement_Code

--ORDER BY 4;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BOL_G3_PPLInterface_EPA
AS LOCKING ROW ACCESS

SELECT Movement_ID, tmpDTN.Product_id, tmpDTN.Ref_Prod_Location, tmpDTN.Movement_Code
	,tmpDTN.Movement_Flags, tmpDTN.Movement_Type, tmpDTN.Movement_Status, tmpDTN.Movement_Start
	,tmpDTN.Movement_Start_Dttm, tmpDTN.Movement_End, tmpDTN.Movement_End_Dttm, tmpDTN.Source_ID
	,tmpDTN.Destination_ID, tmpDTN.Customer_ID, tmpDTN.Volume_Estimated, tmpDTN.Weight_Estimated
	,tmpDTN.Volume_Confirmed, tmpDTN.Weight_Confirmed, tmpDTN.Temperature, tmpDTN.Density, tmpDTN.Volume_Received
	,tmpDTN.Weight_Received, tmpDTN.Tolerance, tmpDTN.Ticket_Number, tmpDTN.Comments, tmpDTN.Meter_ID
	,tmpDTN.Recon_Flag, tmpDTN.Trans_Mode_ID, tmpDTN.Trans_Dttm,tmpDTN.Trans_Update_Dttm
	,tmpDTN.Create_Dttm, tmpDTN.Last_Update_Dttm
FROM
	(
	--El Paso ULSD B5 Today-1
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'001' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B5' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV-15 ULTRA-LS#2 W/5% BIO','DYED MV15 UL-LS#2 BIO 5%')
	GROUP BY start_date

	UNION ALL

	--El Paso UNLC Today-1
	SELECT	CAST(146 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'002' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id NOT IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD B10 Today-1
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'003' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B10' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV15 ULTRA-LS#2 W/10% BIO')
	GROUP BY start_date

	UNION ALL

	--El Paso MIDC Today-1
	SELECT	CAST(110 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'004' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'MIDGRADE'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso PRMC Today-1
	SELECT	CAST(124 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'005' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'PREMIUM'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Today-1
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'006' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id NOT IN ('003001')
	GROUP BY start_date

	UNION ALL

	--El Paso JETA Today-1
	SELECT	CAST(99 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'007' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,516 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+43)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(43 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'JET'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD-DYED Today-1
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'008' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('DYED' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_description IN ('DYED MV15 ULTRA-LS #2 DSL')
	GROUP BY start_date

	UNION ALL

	--El Paso Ethanol Today-1
	SELECT	CAST(90 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'009' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,2906 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'STRAIGHT ETHANOL'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso PROPANE Today-1
	SELECT	CAST(126 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'010' AS Movement_Code
		,5 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3156 AS Source_ID
		,520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(SUM(net_weight) AS DECIMAL(12,2))/1000 AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(148 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance
		,CAST(NULL AS VARCHAR(10)) AS Ticket_Number
		,NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3W
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_description = 'PROPANE'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso SNMU Today-1
	SELECT	CAST(235 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'011' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Ship Truck Export Today-1
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'012' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3159 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('MX' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id IN ('003001')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD B5 Today-2
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'001' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B5' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV-15 ULTRA-LS#2 W/5% BIO','DYED MV15 UL-LS#2 BIO 5%')
	GROUP BY start_date

	UNION ALL

	--El Paso UNLC Today-2
	SELECT	CAST(146 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'002' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id NOT IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD B10 Today-2
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'003' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B10' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV15 ULTRA-LS#2 W/10% BIO')
	GROUP BY start_date

	UNION ALL

	--El Paso MIDC Today-2
	SELECT	CAST(110 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'004' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'MIDGRADE'
		AND product_type_code IN ('B','K','N','W')
		--AND BOL_G3.BOL_Product_Id IN ('041252','241252','141252')
	GROUP BY start_date

	UNION ALL

	--El Paso PRMC Today-2
	SELECT	CAST(124 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'005' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'PREMIUM'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Today-2
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'006' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id NOT IN ('003001')
	GROUP BY start_date

	UNION ALL

	--El Paso JETA Today-2
	SELECT	CAST(99 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'007' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,516 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+43)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(43 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'JET'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD-DYED Today-2
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'008' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('DYED' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_description IN ('DYED MV15 ULTRA-LS #2 DSL')
	--	AND BOL_G3.BOL_Product_Id IN ('003100')
	GROUP BY start_date

	UNION ALL

	--El Paso Ethanol Today-2
	SELECT	CAST(90 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'009' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,2906 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'STRAIGHT ETHANOL'
		AND product_type_code IN ('B','K','N','W')
	--	AND BOL_G3.BOL_Product_Id IN ('002900')
	GROUP BY start_date

	UNION ALL

	--El Paso PROPANE Today-2
	SELECT	CAST(126 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'010' AS Movement_Code
		,5 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3156 AS Source_ID
		,520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(SUM(net_weight) AS DECIMAL(12,2))/1000 AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(148 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance
		,CAST(NULL AS VARCHAR(10)) AS Ticket_Number
		,NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3W
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_description = 'PROPANE'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso SNMU Today-2
	SELECT	CAST(235 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'011' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Ship Truck Export Today-2
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'012' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3159 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('MX' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id IN ('003001')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD B5 Today-3
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'001' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B5' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV-15 ULTRA-LS#2 W/5% BIO','DYED MV15 UL-LS#2 BIO 5%')
	GROUP BY start_date

	UNION ALL

	--El Paso UNLC Today-3
	SELECT	CAST(146 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'002' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id NOT IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD B10 Today-3
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'003' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B10' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV15 ULTRA-LS#2 W/10% BIO')
	GROUP BY start_date

	UNION ALL

	--El Paso MIDC Today-3
	SELECT	CAST(110 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'004' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'MIDGRADE'
		AND product_type_code IN ('B','K','N','W')
		--AND BOL_G3.BOL_Product_Id IN ('041252','241252','141252')
	GROUP BY start_date

	UNION ALL

	--El Paso PRMC Today-3
	SELECT	CAST(124 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'005' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'PREMIUM'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Today-3
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'006' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id NOT IN ('003001')
	GROUP BY start_date

	UNION ALL

	--El Paso JETA Today-3
	SELECT	CAST(99 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'007' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,516 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+43)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(43 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'JET'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD-DYED Today-3
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'008' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('DYED' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_description IN ('DYED MV15 ULTRA-LS #2 DSL')
	--	AND BOL_G3.BOL_Product_Id IN ('003100')
	GROUP BY start_date

	UNION ALL

	--El Paso Ethanol Today-3
	SELECT	CAST(90 AS INTEGER) AS P2roduct_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'009' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,2906 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'STRAIGHT ETHANOL'
		AND product_type_code IN ('B','K','N','W')
	--	AND BOL_G3.BOL_Product_Id IN ('002900')
	GROUP BY start_date

	UNION ALL

	--El Paso PROPANE Today-3
	SELECT	CAST(126 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'010' AS Movement_Code
		,5 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3156 AS Source_ID
		,520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(SUM(net_weight) AS DECIMAL(12,2))/1000 AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(148 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance
		,CAST(NULL AS VARCHAR(10)) AS Ticket_Number
		,NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3W
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_description = 'PROPANE'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso SNMU Today-3
	SELECT	CAST(235 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'011' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Ship Truck Export Today-3
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'012' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3159 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('MX' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id IN ('003001')
	GROUP BY start_date

UNION ALL

	--El Paso ULSD B5 Today-4
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'001' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B5' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV-15 ULTRA-LS#2 W/5% BIO','DYED MV15 UL-LS#2 BIO 5%')
	GROUP BY start_date

	UNION ALL

	--El Paso UNLC Today-4
	SELECT	CAST(146 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'002' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id NOT IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD B10 Today-4
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'003' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B10' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV15 ULTRA-LS#2 W/10% BIO')
	GROUP BY start_date

	UNION ALL

	--El Paso MIDC Today-4
	SELECT	CAST(110 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'004' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'MIDGRADE'
		AND product_type_code IN ('B','K','N','W')
		--AND BOL_G3.BOL_Product_Id IN ('041252','241252','141252')
	GROUP BY start_date

	UNION ALL

	--El Paso PRMC Today-4
	SELECT	CAST(124 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'005' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'PREMIUM'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Today-4
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'006' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id NOT IN ('003001')
	GROUP BY start_date

	UNION ALL

	--El Paso JETA
	SELECT	CAST(99 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'007' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,516 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+43)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(43 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'JET'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD-DYED Today-4
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'008' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('DYED' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_description IN ('DYED MV15 ULTRA-LS #2 DSL')
	--	AND BOL_G3.BOL_Product_Id IN ('003100')
	GROUP BY start_date

	UNION ALL

	--El Paso Ethanol Today-4
	SELECT	CAST(90 AS INTEGER) AS P2roduct_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'009' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,2906 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'STRAIGHT ETHANOL'
		AND product_type_code IN ('B','K','N','W')
	--	AND BOL_G3.BOL_Product_Id IN ('002900')
	GROUP BY start_date

	UNION ALL

	--El Paso PROPANE Today-4
	SELECT	CAST(126 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'010' AS Movement_Code
		,5 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3156 AS Source_ID
		,520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(SUM(net_weight) AS DECIMAL(12,2))/1000 AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(148 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance
		,CAST(NULL AS VARCHAR(10)) AS Ticket_Number
		,NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3W
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_description = 'PROPANE'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso SNMU Today-4
	SELECT	CAST(235 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'011' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Ship Truck Export Today-4
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'012' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3159 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('MX' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id IN ('003001')
	GROUP BY start_date

UNION ALL

	--El Paso ULSD B5 Today-5
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'001' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B5' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV-15 ULTRA-LS#2 W/5% BIO','DYED MV15 UL-LS#2 BIO 5%')
	GROUP BY start_date

	UNION ALL

	--El Paso UNLC Today-5
	SELECT	CAST(146 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'002' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id NOT IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD B10 Today-5
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'003' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('B10' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_description IN ('MV15 ULTRA-LS#2 W/10% BIO')
	GROUP BY start_date

	UNION ALL

	--El Paso MIDC Today-5
	SELECT	CAST(110 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'004' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'MIDGRADE'
		AND product_type_code IN ('B','K','N','W')
		--AND BOL_G3.BOL_Product_Id IN ('041252','241252','141252')
	GROUP BY start_date

	UNION ALL

	--El Paso PRMC Today-5
	SELECT	CAST(124 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'005' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'PREMIUM'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Today-5
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'006' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id NOT IN ('003001')
	GROUP BY start_date

	UNION ALL

	--El Paso JETA Today-5
	SELECT	CAST(99 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'007' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,516 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+43)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(43 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'JET'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD-DYED Today-5
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'008' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,515 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('DYED' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_description IN ('DYED MV15 ULTRA-LS #2 DSL')
	--	AND BOL_G3.BOL_Product_Id IN ('003100')
	GROUP BY start_date

	UNION ALL

	--El Paso Ethanol Today-5
	SELECT	CAST(90 AS INTEGER) AS P2roduct_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'009' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,2906 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'STRAIGHT ETHANOL'
		AND product_type_code IN ('B','K','N','W')
	--	AND BOL_G3.BOL_Product_Id IN ('002900')
	GROUP BY start_date

	UNION ALL

	--El Paso PROPANE Today-5
	SELECT	CAST(126 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
		SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'010' AS Movement_Code
		,5 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3156 AS Source_ID
		,520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(SUM(net_weight) AS DECIMAL(12,2))/1000 AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature
		,CAST(148 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance
		,CAST(NULL AS VARCHAR(10)) AS Ticket_Number
		,NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3W
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_description = 'PROPANE'
		AND product_type_code IN ('B','K','N','W')
	GROUP BY start_date

	UNION ALL

	--El Paso SNMU Today-5
	SELECT	CAST(235 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'011' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,517 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+55)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(55 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(NULL AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_grouping = 'UNLEADED'
		AND product_type_code IN ('B','K','N','W')
		AND BOL_G3.BOL_Product_Id IN ('061152','061153','161152','161153','261151','261152','361152','361153','061100')
	GROUP BY start_date

	UNION ALL

	--El Paso ULSD Ship Truck Export Today-5
	SELECT	CAST(188 AS INTEGER) AS Product_id, 'El Paso Refinery' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'012' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,3159 AS Source_ID, 520 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2))AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST('MX' AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Refining'
		AND product_description IN ('CHV. MV15 ULTRA-LS #2 DSL','MV-15 ULTRA-LS #2 DIESEL','MV-15 ULTRA-LS #2 DIESEL-MEXICO')
		AND BOL_G3.bol_product_id IN ('003001')
	GROUP BY start_date

	) AS tmpDTN
LEFT OUTER JOIN prod_edw_base_views.movement
	ON movement.movement_code = tmpDTN.Movement_Code

--ORDER BY 4;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.BOL_G3_PPLInterface_GAL
AS LOCKING ROW ACCESS

SELECT Movement_ID, tmpDTN.Product_id, tmpDTN.Ref_Prod_Location, tmpDTN.Movement_Code
	,tmpDTN.Movement_Flags, tmpDTN.Movement_Type, tmpDTN.Movement_Status, tmpDTN.Movement_Start
	,tmpDTN.Movement_Start_Dttm, tmpDTN.Movement_End, tmpDTN.Movement_End_Dttm, tmpDTN.Source_ID
	,tmpDTN.Destination_ID, tmpDTN.Customer_ID, tmpDTN.Volume_Estimated, tmpDTN.Weight_Estimated
	,tmpDTN.Volume_Confirmed, tmpDTN.Weight_Confirmed, tmpDTN.Temperature, tmpDTN.Density, tmpDTN.Volume_Received
	,tmpDTN.Weight_Received, tmpDTN.Tolerance, tmpDTN.Ticket_Number, tmpDTN.Comments, tmpDTN.Meter_ID
	,tmpDTN.Recon_Flag, tmpDTN.Trans_Mode_ID, tmpDTN.Trans_Dttm,tmpDTN.Trans_Update_Dttm
	,tmpDTN.Create_Dttm, tmpDTN.Last_Update_Dttm
FROM
	(
			--Gallup Ethanol Today-1
	SELECT	CAST(6 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'201' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('914')
	GROUP BY start_date,BOL_G3.BOL_Product_ID

	UNION ALL
	
	--Gallup UNLC 1101 Today-1
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'202' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1101')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1102 Today-1
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'203' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1102')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup UNLC 1103 Today-1
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'204' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1103')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1151 Today-1
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'205' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1151')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

		--Gallup UNLC 1152 Today-1
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'206' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1152')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1902 Today-1
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'207' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1902')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup Midgrade 1201 Today-1
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'208' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1201')
	GROUP BY start_date, bol_g3.bol_product_id
	
		UNION ALL
	
	--Gallup Midgrade 1202 Today-1
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'209' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1202')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1251 Today-1
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'210' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1251')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1252 Today-1
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'211' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1252')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1301 Today-1
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'212' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1301')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1302 Today-1
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'213' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1302')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1104 Today-1
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'214' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1104')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup ULSD Dyed 720 Today-1
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'215' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0720')
	GROUP BY start_date, BOL_G3.BOL_Product_Id

	UNION ALL

	--Gallup ULSD Dyed 721 Today-1
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'216' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0721')
	GROUP BY start_date, BOL_G3.BOL_Product_Id
	
	UNION ALL
	
	--Gallup ULSD Hwy 0725 Today-1
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'217' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0725')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup ULSD Hwy 0752 Today-1
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'218' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0752')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup LCO Today-1
	SELECT	CAST(25 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'219' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5030')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Sour Naphtha Today-1
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'220' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5880')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Kerosene Today-1
	SELECT	CAST(30 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'221' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-1
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5915')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL

	--Gallup Ethanol Today-2
	SELECT	CAST(6 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'201' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('914')
	GROUP BY start_date,BOL_G3.BOL_Product_ID

	UNION ALL
	
	--Gallup UNLC 1101 Today-2
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'202' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1101')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1102 Today-2
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'203' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1102')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup UNLC 1103 Today-2
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'204' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1103')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1151 Today-2
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'205' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1151')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

		--Gallup UNLC 1152 Today-2
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'206' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1152')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1902 Today-2
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'207' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1902')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup Midgrade 1201 Today-2
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'208' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1201')
	GROUP BY start_date, bol_g3.bol_product_id
	
		UNION ALL
	
	--Gallup Midgrade 1202 Today-2
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'209' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1202')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1251 Today-2
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'210' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1251')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1252 Today-2
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'211' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1252')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1301 Today-2
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'212' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1301')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1302 Today-2
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'213' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1302')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1104 Today-2
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'214' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1104')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup ULSD Dyed 720 Today-2
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'215' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0720')
	GROUP BY start_date, BOL_G3.BOL_Product_Id

	UNION ALL

	--Gallup ULSD Dyed 721 Today-2
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'216' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0721')
	GROUP BY start_date, BOL_G3.BOL_Product_Id
	
	UNION ALL
	
	--Gallup ULSD Hwy 0725 Today-2
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'217' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0725')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup ULSD Hwy 0752 Today-2
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'218' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0752')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup LCO Today-2
	SELECT	CAST(25 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'219' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5030')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Sour Naphtha Today-2
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'220' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5880')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Kerosene Today-2
	SELECT	CAST(30 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'221' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-2
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5915')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup Ethanol Today-3
	SELECT	CAST(6 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'201' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('914')
	GROUP BY start_date,BOL_G3.BOL_Product_ID

	UNION ALL
	
	--Gallup UNLC 1101 Today-3
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'202' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1101')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1102 Today-3
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'203' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1102')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup UNLC 1103 Today-3
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'204' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1103')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1151 Today-3
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'205' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1151')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

		--Gallup UNLC 1152 Today-3
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'206' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1152')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1902 Today-3
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'207' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1902')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup Midgrade 1201 Today-3
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'208' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1201')
	GROUP BY start_date, bol_g3.bol_product_id
	
		UNION ALL
	
	--Gallup Midgrade 1202 Today-3
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'209' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1202')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1251 Today-3
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'210' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1251')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1252 Today-3
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'211' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1252')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1301 Today-3
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'212' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1301')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1302 Today-3
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'213' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1302')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1104 Today-3
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'214' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1104')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup ULSD Dyed 720 Today-3
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'215' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0720')
	GROUP BY start_date, BOL_G3.BOL_Product_Id

	UNION ALL

	--Gallup ULSD Dyed 721 Today-3
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'216' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0721')
	GROUP BY start_date, BOL_G3.BOL_Product_Id
	
	UNION ALL
	
	--Gallup ULSD Hwy 0725 Today-3
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'217' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0725')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup ULSD Hwy 0752 Today-3
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'218' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0752')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup LCO Today-3
	SELECT	CAST(25 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'219' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5030')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Sour Naphtha Today-3
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'220' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5880')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Kerosene Today-3
	SELECT	CAST(30 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'221' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-3
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5915')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup Ethanol Today-4
	SELECT	CAST(6 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'201' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('914')
	GROUP BY start_date,BOL_G3.BOL_Product_ID

	UNION ALL
	
	--Gallup UNLC 1101 Today-4
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'202' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1101')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1102 Today-4
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'203' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1102')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup UNLC 1103 Today-4
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'204' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1103')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1151 Today-4
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'205' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1151')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

		--Gallup UNLC 1152 Today-4
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'206' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1152')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1902 Today-4
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'207' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1902')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup Midgrade 1201 Today-4
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'208' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1201')
	GROUP BY start_date, bol_g3.bol_product_id
	
		UNION ALL
	
	--Gallup Midgrade 1202 Today-4
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'209' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1202')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1251 Today-4
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'210' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1251')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1252 Today-4
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'211' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1252')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1301 Today-4
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'212' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1301')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1302 Today-4
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'213' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1302')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1104 Today-4
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'214' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1104')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup ULSD Dyed 720 Today-4
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'215' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0720')
	GROUP BY start_date, BOL_G3.BOL_Product_Id

	UNION ALL

	--Gallup ULSD Dyed 721 Today-4
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'216' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0721')
	GROUP BY start_date, BOL_G3.BOL_Product_Id
	
	UNION ALL
	
	--Gallup ULSD Hwy 0725 Today-4
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'217' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0725')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup ULSD Hwy 0752 Today-4
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'218' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0752')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup LCO Today-4
	SELECT	CAST(25 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'219' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5030')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Sour Naphtha Today-4
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'220' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5880')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Kerosene Today-4
	SELECT	CAST(30 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'221' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-4
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5915')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup Ethanol Today-5
	SELECT	CAST(6 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'201' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+46)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(46 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('914')
	GROUP BY start_date,BOL_G3.BOL_Product_ID

	UNION ALL
	
	--Gallup UNLC 1101 Today-5
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'202' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1101')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1102 Today-5
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'203' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1102')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup UNLC 1103 Today-5
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'204' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1103')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1151 Today-5
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'205' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1151')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

		--Gallup UNLC 1152 Today-5
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'206' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1152')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL

	--Gallup UNLC 1902 Today-5
	SELECT	CAST(14 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'207' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1902')
	GROUP BY start_date, bol_g3.bol_product_id

	UNION ALL
	
	--Gallup Midgrade 1201 Today-5
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'208' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1201')
	GROUP BY start_date, bol_g3.bol_product_id
	
		UNION ALL
	
	--Gallup Midgrade 1202 Today-5
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'209' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1202')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1251 Today-5
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'210' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1251')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Midgrade 1252 Today-5
	SELECT	CAST(15 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'211' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1252')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1301 Today-5
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'212' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1301')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1302 Today-5
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'213' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1302')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup Premium 1104 Today-5
	SELECT	CAST(29 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'214' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+60)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(60 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_ID AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('1104')
	GROUP BY start_date, bol_g3.bol_product_id
	
	UNION ALL

	--Gallup ULSD Dyed 720 Today-5
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'215' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0720')
	GROUP BY start_date, BOL_G3.BOL_Product_Id

	UNION ALL

	--Gallup ULSD Dyed 721 Today-5
	SELECT	CAST(34 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'216' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_Product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_Product_Id IN ('0721')
	GROUP BY start_date, BOL_G3.BOL_Product_Id
	
	UNION ALL
	
	--Gallup ULSD Hwy 0725 Today-5
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'217' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0725')
	GROUP BY start_date,BOL_G3.BOL_product_Id

	UNION ALL
	
	--Gallup ULSD Hwy 0752 Today-5
	SELECT	CAST(20 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'218' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+38.5)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(38.5 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('0752')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup LCO Today-5
	SELECT	CAST(25 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'219' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5030')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Sour Naphtha Today-5
	SELECT	CAST(10 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'220' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5880')
	GROUP BY start_date,BOL_G3.BOL_product_Id
	
	UNION ALL
	
	--Gallup Kerosene Today-5
	SELECT	CAST(30 AS INTEGER) AS Product_id, 'Gallup' AS Ref_Prod_Location
		,'ATS_'||SUBSTR(CAST(movement_start AS VARCHAR(10)),6,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),9,2)||
			SUBSTR(CAST(movement_start AS VARCHAR(10)),3,2)||'221' AS Movement_Code
		,0 AS Movement_Flags, 1 AS Movement_Type, 0 AS Movement_Status
		,start_date AS Movement_Start, CAST(start_date AS TIMESTAMP(0)) AS Movement_Start_Dttm
		,start_date+1 AS Movement_End, CAST(start_date+1 AS TIMESTAMP(0)) AS Movement_End_Dttm
		,748 AS Source_ID, 747 AS Destination_ID, 0 AS Customer_ID
		,CAST(SUM(net_volume)/42 AS DECIMAL(12,2)) AS Volume_Estimated
		,CAST(Volume_Estimated*141.5/(131.5+36.3)*.349796 AS DECIMAL(12,2)) AS Weight_Estimated
		,0 AS Volume_Confirmed, 0 AS Weight_Confirmed, 60 AS Temperature, CAST(36.3 AS DECIMAL(10,1)) AS Density
		,0 AS Volume_Received,0 AS Weight_Received
		,100 AS Tolerance, CAST(BOL_G3.BOL_product_Id AS VARCHAR(10)) AS Ticket_Number, NULL AS Comments
		,0 AS Meter_ID, 1 AS Recon_Flag, 0 AS Trans_Mode_ID
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Trans_Dttm, NULL AS Trans_Update_Dttm
		,CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Create_Dttm, CAST(CURRENT_TIME AS TIMESTAMP(0)) AS Last_Update_Dttm
	FROM prod_edw_base_views.BOL_G3
	INNER JOIN
		(
		SELECT Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID, MAX(Version) AS Version
		FROM      prod_edw_base_views.BOL_G3
		GROUP BY Ref_Prod_Location, Terminal_ID, BOL_NUMBER, BOL_PRODUCT_ID
		) AS tmpMaxBOLVersion
	ON BOL_G3.Ref_Prod_Location = tmpMaxBOLVersion.Ref_Prod_Location
		AND BOL_G3.Terminal_ID = tmpMaxBOLVersion.Terminal_ID
		AND BOL_G3.BOL_Number = tmpMaxBOLVersion.BOL_Number
		AND BOL_G3.BOL_Product_ID = tmpMaxBOLVersion.BOL_Product_ID
		AND BOL_G3.Version = tmpMaxBOLVersion.Version
	WHERE start_date = CURRENT_DATE-5
		AND terminal_name = 'Western Gallup Refinery'
		AND BOL_G3.BOL_product_Id IN ('5915')
	GROUP BY start_date,BOL_G3.BOL_product_Id


	) AS tmpDTN
LEFT OUTER JOIN prod_edw_base_views.movement
	ON movement.movement_code = tmpDTN.Movement_Code

--ORDER BY 4;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.BOL_PETROEX_Raw
as Locking Row Access
Select * from PROD_EDW_BASE.BOL_PETROEX_Raw;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.BOL_PETROEX_Stg
as Locking Row Access
Select * from PROD_EDW_BASE.BOL_PETROEX_Stg;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_VIEWS.BOL_Prod_Loc_Decoder ( BOL_Product_ID, Product_ID, BOL_Location_ID, Ref_Prod_Location,
		BOL_Source, Product_Desc, Product_Grouping, Product_Grouping_2, Create_dttm, Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT	BOL_Product_ID, Product_ID, BOL_Location_ID, Ref_Prod_Location,
		BOL_Source, Product_Desc, Product_Grouping, Product_Grouping_2, Create_dttm, Last_update_dttm
FROM	prod_edw_base.BOL_PROD_LOC_DECODER;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.BOL_TABS_Raw
as Locking Row Access
Select * from PROD_EDW_BASE.BOL_TABS_RAW;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.BOL_TABS_Stg
as Locking Row Access
Select * from PROD_EDW_BASE.BOL_TABS_STG;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.CEMS_TAG_Master
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.CEMS_TAG_MASTER;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.COMBINED_PRICING (pricing_code, pricing_code2, Pricing_Desc, Pricing_Group, Pricing_Location, Price_Type, Price_Eff_Date, Price_Eff_Time, Future_Price_Date, Price_Source,Gross_Net_Status,Price, Price_Period, Brand, time_status,delivery_type, Create_dttm, Last_Update_Dttm ) AS
LOCKING ROW  FOR ACCESS
SELECT 
 CAST(pricing_code AS VARCHAR(30)) AS PRICING_CODE,
 CAST(pricing_code AS VARCHAR(30)) AS PRICING_CODE2,
Pricing_Desc,
Pricing_Group,
Pricing_Location,
Price_Type,
CAST(Price_Eff_Date AS DATE) AS Price_Eff_Date,
CAST(NULL AS TIME(6)) AS Price_Eff_Time,
CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
Price_Source,
CAST(NULL as CHAR) AS Gross_Net_Status,
CAST(Price as Decimal (15,5)) as Price ,
CAST(NULL as Integer) AS Price_Period,
CAST(NULL as CHAR(1)) AS Brand,
CAST(NULL as CHAR(2)) AS Time_Status,
CAST(Delivery_type as VARCHAR(20)) AS Delivery_Type,
Create_dttm ,
Last_Update_Dttm
FROM PROD_EDW_BASE_VIEWS.PRICING 
UNION ALL
SELECT
CAST(PRICING_CODE AS VARCHAR(30)) AS PRICING_CODE,
CAST(pricing_code AS VARCHAR(30)) AS PRICING_CODE2,
PRICING_DESC AS PRICING_DESC, 
Pricing_Desc AS PRICING_GROUP,
CAST('UNKNOWN LOCATION' AS VARCHAR(50))  AS PRICING_LOCATION,
Pricing_Type AS PRICE_TYPE,
CAST(Price_Eff_Date AS DATE) AS Price_Eff_Date,
CAST(NULL AS TIME(6)) AS Price_Eff_Time,
cast(Future_Price_Date as date FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
CAST('FUTURES' AS VARCHAR(50))   AS  Price_Source,
CAST(NULL as CHAR) AS Gross_Net_Status,
CAST(Price as Decimal (15,5)) as Price ,
CAST(NULL as Integer) AS Price_Period,
CAST(NULL as CHAR(1)) AS Brand,
CAST(NULL as CHAR(2)) AS Time_Status,
CAST(NULL as VARCHAR(20)) AS Delivery_Type,
Create_dttm ,
Last_Update_Dttm
FROM PROD_EDW_BASE_VIEWS.FUTURES
UNION ALL
SELECT  
CAST(CODE AS VARCHAR(30)) AS PRICING_CODE,
CAST(Code2 AS VARCHAR(30)) AS PRICING_CODE2,
Pricing_Desc AS PRICING_DESC,
Pricing_Group AS PRICING_GROUP,
Pricing_Location AS PRICING_LOCATION,
Pricing_Type AS PRICE_TYPE,
CAST(Price_Eff_Date AS DATE) AS Price_Eff_Date,
CAST(NULL AS TIME(6)) AS Price_Eff_Time,
CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
Price_Source AS PRICE_SOURCE,
CAST(NULL as CHAR) AS Gross_Net_Status,
CAST(Price as Decimal (15,5)) as Price , 
 Fwd_Period as PRICE_PERIOD,
CAST(NULL as CHAR(1)) AS Brand,
CAST(NULL as CHAR(2)) AS Time_Status,
CAST(Delivery_Type as VARCHAR(20)) AS Delivery_Type,
Create_dttm AS CREATE_DTTM,
Last_Update_Dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE_VIEWS.ARGUS_PRICING
UNION ALL
SELECT
CAST(Price_Code AS VARCHAR(30)) AS PRICING_CODE,
CAST(Price_Code2 AS VARCHAR(30)) AS PRICING_CODE2,
Product_Desc AS PRICING_DESC, 
PRICING_GROUP,
Location AS PRICING_LOCATION,
Price_Type AS PRICE_TYPE,
Event_Date AS PRICE_EFF_DATE,
CAST(NULL AS TIME(6)) AS Price_Eff_Time,
CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
CAST(Price_Source  as VARCHAR(50))  AS PRICE_SOURCE, 
CASE  WHEN (Gross_Net_Status = 'G') THEN 'G'
            ELSE 'N'
END AS Gross_Net_Status,
cast(Rack_Price as decimal(15,5)) AS PRICE,
CAST(NULL as Integer) AS Price_Period,
CAST(Brand as CHAR(1)) as Brand,
CAST(Time_Status as CHAR(2)) AS Time_Status,
CAST(NULL as VARCHAR(20)) AS Delivery_Type,
Create_dttm,
Last_Update_Dttm
FROM PROD_EDW_BASE_VIEWS.COMPETITOR_PRICING
UNION ALL
SELECT  
cast(PRICING_CODE AS VARCHAR(30)) AS PRICING_CODE,
CAST(Pricing_Code AS VARCHAR(30)) AS PRICING_CODE2,
Product_Desc AS PRICING_DESC, 
Pricing_Group  AS PRICING_GROUP,
Terminal_Desc AS PRICING_LOCATION,
Channel_Desc AS PRICE_TYPE,
CAST(EVENT_DTTM as DATE) AS PRICE_EFF_DATE,
CAST(NULL AS TIME(6)) AS Price_Eff_Time,
CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
CAST('WESTERN'  as VARCHAR(50))  AS PRICE_SOURCE, 
CAST(NULL as CHAR) AS Gross_Net_Status,
CAST(Rack_Price as decimal (15,5)) AS PRICE,
CAST(NULL as Integer) AS Price_Period,
CAST(NULL as CHAR(1)) AS Brand,
CAST(NULL as CHAR(2)) AS Time_Status,
CAST(NULL as VARCHAR(20)) AS Delivery_Type,
Create_dttm,
Last_Update_Dttm
FROM   PROD_EDW_BASE_VIEWS.WESTERN_PRICING
UNION ALL
SELECT 
cast(price_code as VARCHAR(30)) AS PRICE_CODE,
CAST(Price_Code AS VARCHAR(30)) AS PRICING_CODE2,
Price_Desc,
Price_Category,
CAST('UNKNOWN LOCATION' AS VARCHAR(50))  AS PRICING_LOCATION,
Price_Type,
CAST(Price_Eff_Date AS DATE) AS Price_Eff_Date,
CAST(NULL AS TIME(6)) AS Price_Eff_Time,
CAST(Price_Fut_Date AS DATE) AS Price_Fut_Date,
PRICE_SOURCE, 
CAST(NULL as CHAR) AS Gross_Net_Status,
CAST(Price as Decimal (15,5)) as Price ,
CAST(NULL as Integer) AS Price_Period,
CAST(NULL as CHAR(1)) AS Brand,
CAST(NULL as CHAR(2)) AS Time_Status,
CAST(NULL as VARCHAR(20)) AS Delivery_Type,
Create_dttm ,
Last_Update_Dttm
FROM PROD_EDW_BASE_VIEWS.GLOBAL_PRICING
UNION ALL
SELECT 
 CAST(pricing_code AS VARCHAR(30)) AS PRICING_CODE,
 CAST(pricing_code AS VARCHAR(30)) AS PRICING_CODE2,
Pricing_Desc,
Pricing_Group,
Pricing_Location,
Price_Type,
CAST(Price_Eff_Date AS DATE) AS Price_Eff_Date,
CAST(NULL AS TIME(6)) AS Price_Eff_Time,
CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
CAST('OPIS BOTTOM LINE' as VARCHAR(50)) as Price_Source,
CAST(NULL as CHAR) AS Gross_Net_Status,
CAST(Price as Decimal (15,5)) as Price ,
CAST(NULL as Integer) AS Price_Period,
CAST(BRAND as CHAR(1)) AS Brand,
CAST(NULL as CHAR(2)) AS Time_Status,
CAST(NULL as VARCHAR(20)) AS Delivery_Type,
Create_dttm ,
Last_Update_Dttm
FROM PROD_EDW_BASE_VIEWS.PRICING_OPIS_BOTTOMLINE
UNION ALL
SELECT 
CAST(price_name AS VARCHAR(30)) AS PRICING_CODE,
CAST('' AS VARCHAR(30)) AS PRICING_CODE2,
Price_Desc,
Prod_Desc,
Loc_desc,
'Western Giant Rack' AS Price_Type,
CAST(Start_Eff_Date AS DATE) AS Price_Eff_Date,
CAST(EFF_START_DT_TM AS TIME(6)) AS Price_Eff_Time,
CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
'WESTERN/GIANT' AS Price_Source,
CAST(NULL as CHAR) AS Gross_Net_Status,
CAST(Rate as Decimal (15,5)) as Price ,
CAST(NULL as Integer) AS Price_Period,
CAST(NULL as CHAR(1)) AS Brand,
CAST(NULL as CHAR(2)) AS Time_Status,
CAST(NULL as VARCHAR(20)) AS Delivery_Type,
Create_dttm ,
Last_Update_Dttm
FROM PROD_EDW_BASE_VIEWS.Price_West_Giant_Rack
union all
select	cast((substr(hub,1,25)||' '||substr(Contract, 1,4)) as varchar(30)) as pricing_code,
			cast((substr(hub,1,25)||' '||substr(Contract, 1,4)) as varchar(30)) as pricing_code2,
			cast(hub as varchar(100)) as Pricing_Desc,
			Product as Pricing_Group,
			Contract as Pricing_Location,
			cast('Close' as varchar(50)) as Price_Type,
			Trans_Date as Price_Eff_Date,
			CAST(NULL AS TIME(6)) AS Price_Eff_Time,
			cast(Strip_Date AS DATE FORMAT 'YYYY-MM-DD') as Future_Price_Date,
			cast('ICE' as varchar(50)) as Price_Source,
			cast(null as char(1)) as Gross_Net_Status,
			Settlement_Price as Price,
			cast(null as integer) as Price_Period,
			cast(null as  char(1)) as Brand,
			cast(null as char(2)) as time_status,
			cast(null as varchar(20)) as delivery_type,
			Create_Dttm,
     	 	Last_Update_Dttm
from		PROD_EDW_BASE_VIEWS.PRICE_ICE_RAW
union all
select	Price_Code as pricing_code,
			Price_Code as pricing_code2,
			Pricing_Desc,
			poster as Pricing_Group,
			Pricing_Location,
			cast('Posting' as varchar(50))  as Price_Type,
			Price_Eff_Date,
			Price_Eff_Time,
			CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
			cast('DTN' as varchar(50)) as Price_Source,
			cast(null as char(1)) as Gross_Net_Status,
			Price,
			cast(null as integer) as Price_Period,
			Brand,
			cast(null as char(2)) as time_status,
			cast(null as varchar(20)) as delivery_type,
			Create_Dttm,
     	 	Last_Update_Dttm
from		PROD_EDW_BASE_VIEWS.PRICE_DTN_Raw
union all
select	Price_Code as pricing_code,
			Price_Code as pricing_code2,
			cast(product as varchar(100)) as Pricing_Desc,
			cast(Price_Supplier as varchar(50)) as Pricing_Group,
			Price_City||', '||Price_State as Pricing_Location,
			cast('Mid Day' as varchar(50))  as Price_Type,
			Price_Eff_Date,
			Price_Eff_Time,
			CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
			cast('COMPETITOR MID DAY' as varchar(50)) as Price_Source,
			cast(null as char(1)) as Gross_Net_Status,
			Net_Price as Price,
			cast(null as integer) as Price_Period,
			Brand,
			cast(null as char(2)) as time_status,
			cast(null as varchar(20)) as delivery_type,
			Create_Dttm,
     	 	Last_Update_Dttm
from		PROD_EDW_BASE_VIEWS.PRICE_COMP_MD
union all
select 	CAST(price_name AS VARCHAR(30)) AS PRICING_CODE,
			CAST('' AS VARCHAR(30)) AS PRICING_CODE2,
			Price_Desc,
			Prod_Desc,
			Loc_desc,
			'SPP RACK' AS Price_Type,
			CAST(Start_Eff_Date AS DATE) AS Price_Eff_Date,
			CAST(EFF_START_DT_TM AS TIME(6)) AS Price_Eff_Time,
			CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
			'SPP RACK' AS Price_Source,
			CAST(NULL as CHAR) AS Gross_Net_Status,
			CAST(Rate as Decimal (15,5)) as Price ,
			CAST(NULL as Integer) AS Price_Period,
			CAST(NULL as CHAR(1)) AS Brand,
			CAST(NULL as CHAR(2)) AS Time_Status,
			CAST(NULL as VARCHAR(20)) AS Delivery_Type,
			Create_dttm ,
			Last_Update_Dttm
FROM 	PROD_EDW_BASE_VIEWS.PRICE_SPP_RACK
union all
select	Price_Code as pricing_code,
			Price_Code as pricing_code2,
			cast(product as varchar(100)) as Pricing_Desc,
			cast(null as varchar(50)) as Pricing_Group,
			cast(null as varchar(50)) as Pricing_Location,
			cast(null as varchar(50)) as Price_Type,
			Price_Eff_Date,
			CAST(NULL AS TIME(6)) AS Price_Eff_Time,
			CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
			cast('BLENDED CANADIAN CRUDES' as varchar(50)) as Price_Source,
			cast(null as char(1)) as Gross_Net_Status,
			Price,
			cast(null as integer) as Price_Period,
			cast(null as  char(1)) as Brand,
			cast(null as char(2)) as time_status,
			cast(null as varchar(20)) as delivery_type,
			Create_Dttm,
     	 	Last_Update_Dttm
from		PROD_EDW_BASE_VIEWS.PRICE_CANA_CRD_RAW
where	Price_Source='Blended'
union all
select	Price_Code as pricing_code,
			Price_Code as pricing_code2,
			cast(product as varchar(100)) as Pricing_Desc,
			cast(null as varchar(50)) as Pricing_Group,
			cast(null as varchar(50)) as Pricing_Location,
			cast(null as varchar(50)) as Price_Type,
			Price_Eff_Date,
			CAST(NULL AS TIME(6)) AS Price_Eff_Time,
			CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
			cast('SHORCAN CANADIAN CRUDES' as varchar(50)) as Price_Source,
			cast(null as char(1)) as Gross_Net_Status,
			Price,
			cast(null as integer) as Price_Period,
			cast(null as  char(1)) as Brand,
			cast(null as char(2)) as time_status,
			cast(null as varchar(20)) as delivery_type,
			Create_Dttm,
     	 	Last_Update_Dttm
from		PROD_EDW_BASE_VIEWS.PRICE_CANA_CRD_RAW
where	Price_Source='Shorcan'
union all
select	cast(PrcngNtfctnDtlID as varchar(30)) as pricing_code,
			cast(PrcngNtfctnDtlID as varchar(30)) as pricing_code2,
			cast(CurveDescription as varchar(100)) as Pricing_Desc,
			cast(Product as varchar(50)) as Pricing_Group,
			cast(Location as varchar(50)) as Pricing_Location,
			cast(InternalBA as varchar(50)) as Price_Type,
			ReferenceDate as Price_Eff_Date,
			CAST(NULL AS TIME(6)) AS Price_Eff_Time,
			CAST(NULL AS DATE FORMAT 'YYYY-MM-DD') AS Future_Price_Date,
			cast('WNR TRANSFER PRICES' as varchar(50)) as Price_Source,
			cast(null as char(1)) as Gross_Net_Status,
			PerUnitValue as Price,
			cast(null as integer) as Price_Period,
			cast(null as  char(1)) as Brand,
			cast(null as char(2)) as time_status,
			cast(null as varchar(20)) as delivery_type,
			Create_Dttm,
     	 	Last_Update_Dttm
FROM 	PROD_EDW_BASE_VIEWS.PRICE_WNR_TRANSFER;
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_views.COMMERCIAL_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS
SELECT
	CAST ('INVENTORY' AS VARCHAR(20))  AS TABLE_NAME 
	,CAST ('PROD UNION' AS VARCHAR(20))  AS SOURCE_NAME
	,CAST (LOCATION_CATEGORY AS VARCHAR(50))  AS LOCATION
	,EFF_DATE AS EFF_DATE
	,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.PROD_UNION
WHERE location_category NOT IN ('4C-All','All Refineries','East Coast Hedge Pools',
	'East Coast Marketing','East Coast Total','El Paso - All','Four Corners Refineries',
	'Legacy Giant SW Subtotal','Legacy Western Subtotal','Phoenix - ALL',
	'Salisbury - All','Southwest Hedge Pools','Southwest Marketing','Southwest Total',
	'Tucson ALL','Western Hedge Pools','Western Total')
GROUP BY 1,2,3,4
UNION ALL
SELECT 
	CAST ('PRICING' AS VARCHAR(20))  AS TABLE_NAME
	,CAST (PRICE_SOURCE AS VARCHAR(20))  AS SOURCE_NAME
	,CAST ('NONE' AS VARCHAR(20))  AS LOCATION
	,PRICE_EFF_DATE AS EFF_DATE
	,COUNT(PRICE_EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.COMBINED_PRICING
GROUP BY 1,2,3,4
UNION ALL
SELECT 
	'TRUCKS' AS TABLE_NAME, 
	CAST('MicroLoad' AS VARCHAR(20)) AS SOURCE_NAME, 
	CAST(Location AS VARCHAR(20)) AS LOCATION,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.Microload
GROUP BY 3,4;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.COMMERCIAL_VOLUMES_CURRENT_DAY (Report_Desc,
		Location_Category,Comm_Prod_Location,Ref_Prod_Location,
                                Prod_Group_Subcat1_Sort,	Prod_Group_SubCat1,
		Prod_Group_Subcat2_Sort,Prod_Group_SubCat2, Prod_Group_Subcat3_Sort,
		Prod_Group_SubCat3, 
                                Prod_Group_Subcat4_Sort,Prod_Group_SubCat4,
		Product_Target,Product_Lifo,Product_ID,Product_Desc,Net_Quantity,
		Min_Op_Qty,
                                Eff_Date,Curr_Date, Tank_ID, Terminal_ID,
		Master_Code ) AS
LOCKING	ROW  FOR ACCESS
SELECT	
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
C.Cur_Date    AS Cur_Date,
T.Tank_ID    AS Tank_ID,
CAST(0 as Integer)   AS Terminal_ID,
T.Master_Code AS Master_Code
FROM	PROD_EDW_BASE_VIEWS.PROD_HIER_TANK T
INNER JOIN PROD_EDW_BASE_VIEWS.CUR_DATE  C
	ON	T.EFF_DATE = C.CUR_DATE

UNION
 ALL

SELECT	
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
C.Cur_Date    AS Cur_Date,
CAST(0 as Integer)   AS Tank_ID,
T.Terminal_ID    AS Terminal_ID,
CAST(' '  as CHAR)  AS  MASTER_CODE
FROM	PROD_EDW_BASE_VIEWS.PROD_HIER_TERMINAL T
INNER JOIN PROD_EDW_BASE_VIEWS.CUR_DATE  C
	ON	T.EFF_DATE = C.CUR_DATE;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.COMMERCIAL_VOLUMES_LST_DAY_PM (Report_Desc,
		Location_Category,Comm_Prod_Location,Ref_Prod_Location,
                                Prod_Group_Subcat1_Sort,	Prod_Group_SubCat1,
		Prod_Group_Subcat2_Sort,Prod_Group_SubCat2, Prod_Group_Subcat3_Sort,
		Prod_Group_SubCat3, 
                                Prod_Group_Subcat4_Sort,Prod_Group_SubCat4,
		Product_Target,Product_Lifo,Product_ID,Product_Desc,Net_Quantity,
		Min_Op_Qty,
                                Eff_Date,Curr_Date, Tank_ID, Terminal_ID,
		Master_Code ) AS
LOCKING	ROW  FOR ACCESS
SELECT	
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
C.Cur_Date    AS Cur_Date,
T.Tank_ID    AS Tank_ID,
CAST(0 as Integer)   AS Terminal_ID,
T.Master_Code AS Master_Code
FROM	PROD_EDW_BASE_VIEWS.PROD_HIER_TANK T
INNER JOIN PROD_EDW_BASE_VIEWS.CUR_DATE  C
	ON	T.EFF_DATE = C.PREVIOUS_MONTH_DATE

UNION
 ALL

SELECT	
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
C.Cur_Date    AS Cur_Date,
CAST(0 as Integer)   AS Tank_ID,
T.Terminal_ID    AS Terminal_ID,
CAST(' '  as CHAR)  AS  MASTER_CODE
FROM	PROD_EDW_BASE_VIEWS.PROD_HIER_TERMINAL T
INNER JOIN PROD_EDW_BASE_VIEWS.CUR_DATE  C
	ON	T.EFF_DATE = C.PREVIOUS_MONTH_DATE;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.COMMERCIAL_VOLUMES_PRIOR_DAY (Report_Desc,
		Location_Category,Comm_Prod_Location,Ref_Prod_Location,
                                Prod_Group_Subcat1_Sort,	Prod_Group_SubCat1,
		Prod_Group_Subcat2_Sort,Prod_Group_SubCat2, Prod_Group_Subcat3_Sort,
		Prod_Group_SubCat3, 
                                Prod_Group_Subcat4_Sort,Prod_Group_SubCat4,
		Product_Target,Product_Lifo,Product_ID,Product_Desc,Net_Quantity,
		Min_Op_Qty,
                                Eff_Date,Curr_Date, Tank_ID, Terminal_ID,
		Master_Code ) AS
LOCKING	ROW  FOR ACCESS
SELECT	
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
C.Cur_Date    AS Cur_Date,
T.Tank_ID    AS Tank_ID,
CAST(0 as Integer)   AS Terminal_ID,
T.Master_Code AS Master_Code
FROM	PROD_EDW_BASE_VIEWS.PROD_HIER_TANK T
INNER JOIN PROD_EDW_BASE_VIEWS.CUR_DATE  C
ON	T.EFF_DATE = C.PREVIOUS_DAY_DATE

UNION
 ALL

SELECT	
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
C.Cur_Date    AS Cur_Date,
CAST(0 as Integer)   AS Tank_ID,
T.Terminal_ID    AS Terminal_ID,
CAST(' '  as CHAR)  AS  MASTER_CODE
FROM	PROD_EDW_BASE_VIEWS.PROD_HIER_TERMINAL T
INNER JOIN PROD_EDW_BASE_VIEWS.CUR_DATE  C
 ON	T.EFF_DATE = C.PREVIOUS_DAY_DATE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Comm_Arg_WTSWTI_Trd_Vol
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.COMM_ARG_WTSWTI_TRD_VOL;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Comm_Loc_Rep_Hierarchy ( Report_Desc,Location_Category,
		Comm_Prod_Location,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Comm_Loc_Rep_Hierarchy.Report_Desc,PROD_EDW_BASE.Comm_Loc_Rep_Hierarchy.Location_Category,
	    PROD_EDW_BASE.Comm_Loc_Rep_Hierarchy.Comm_Prod_Location,
		PROD_EDW_BASE.Comm_Loc_Rep_Hierarchy.Create_dttm,
		PROD_EDW_BASE.Comm_Loc_Rep_Hierarchy.Last_Update_Dttm
		FROM PROD_EDW_BASE.Comm_Loc_Rep_Hierarchy;
--------------------------------------------------------------------------------

REPLACE	VIEW    PROD_EDW_BASE_VIEWS.Comm_Prod_Group_Sort ( Report_Desc,Prod_Group_Subcat1_Sort,
		Prod_Group_SubCat1,Prod_Group_Subcat2_Sort,Prod_Group_SubCat2,Prod_Group_Subcat3_Sort, Prod_Group_SubCat3,Prod_Group_Subcat4_Sort,
                Prod_Group_SubCat4,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT  PROD_EDW_BASE.Comm_Prod_Group_Sort.Report_Desc,PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_Subcat1_Sort,
                PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_SubCat1,PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_Subcat2_Sort,
		PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_SubCat2,PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_Subcat3_Sort,
                PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_SubCat3,PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_Subcat4_Sort,
		PROD_EDW_BASE.Comm_Prod_Group_Sort.Prod_Group_SubCat4,PROD_EDW_BASE.Comm_Prod_Group_Sort.Create_dttm,
                PROD_EDW_BASE.Comm_Prod_Group_Sort.Last_Update_Dttm
		FROM PROD_EDW_BASE.Comm_Prod_Group_Sort;
--------------------------------------------------------------------------------

REPLACE	VIEW    PROD_EDW_BASE_VIEWS.Comm_Prod_Group_Tgt_Lifo ( Report_Desc,
		Prod_Group_SubCat1,Prod_Group_SubCat2,Prod_Group_SubCat3,Prod_Group_SubCat4,
		Product_Target,Product_Lifo,Comm_Prod_Location,Eff_Start_date,
		Eff_End_Date,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT  PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Report_Desc,
	                  PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Prod_Group_SubCat1,
		              PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Prod_Group_SubCat2,
		              PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Prod_Group_SubCat3,
		              PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Prod_Group_SubCat4,
		              PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Product_Target,
                      PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Product_Lifo,
                      PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Comm_Prod_Location,
		              PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Eff_Start_Date,
	                  PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Eff_End_Date,
	                  PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Create_dttm,
		              PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO.Last_Update_Dttm
		FROM PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Comm_Prod_Rep_Hierarchy ( Report_Desc,
		Prod_Group_SubCat1,Prod_Group_SubCat2,Prod_Group_SubCat3,Prod_Group_SubCat4,
		Product_ID,Ref_Prod_Location,Product_Desc,Comm_Prod_Location,
		Product_Percent,
		Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT  PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Report_Desc,PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Prod_Group_SubCat1,
		PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Prod_Group_SubCat2,PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Prod_Group_SubCat3,
		PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Prod_Group_SubCat4,PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Product_ID,
		PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Ref_Prod_Location,PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Product_Name,
		PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Comm_Prod_Location,PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Product_Percent,
		PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Create_dttm,PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy.Last_Update_Dttm
		FROM PROD_EDW_BASE.Comm_Prod_Rep_Hierarchy;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Comm_Trades 
AS LOCKING ROW ACCESS
SELECT 	Risk_ID,
				Eff_Date,
				Deal,
				Delivery_Period,
				Deal_Display_Date,
				Product,
				Strategy,	
				Transaction_Type,
				External_BA,
				Per_Unit_Value,
				Market_Per_Unit_Value,
				P_L,
				Trade_Position,
				Acct_End_Date,
				Broker_Account,	
				Tm_Bsd_Prc_Attr7,
				File_Name	,
				Internal_BA,
				Create_Dttm,	
				Last_Update_Dttm
FROM		PROD_EDW_BASE.COMM_TRADES;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Competitor617_Price_Raw  AS 
	LOCKING ROW
	ACCESS
	SELECT*
		FROM PROD_EDW_BASE.COMPETITOR617_PRICE_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Competitor617_Price_Stg  AS 
	LOCKING ROW
	ACCESS
	SELECT*
		FROM PROD_EDW_BASE.COMPETITOR617_PRICE_STG;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.Competitor_Price_Dcd ( Terminal_Code,
		Product_Code,Supplier_Number1,Gross_Net_Status,Time_Status,Price_Code,
		Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Terminal_Code,
		PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Product_Code,
		PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Supplier_Number1,
		PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Gross_Net_Status,
		PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Time_Status,
		PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Price_Code,
		PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Create_Dttm,
		PROD_EDW_BASE.COMPETITOR_PRICE_DCD.Last_Update_Dttm
		FROM PROD_EDW_BASE.COMPETITOR_PRICE_DCD;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Competitor_Price_Raw ( Terminal_Code,
		Product_Code,Event_Dttm,Opis_ID,Supplier_Number1,Supplier_Number2,
		Supplier_Name,Brand,Opis_Product_Group,Opis_Product_Type,Rack_Price,
		Prior_Date_Change_Amt,Gross_Net_Status,Branded_Status,Time_Status,
		Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Terminal_Code,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Product_Code,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Event_Dttm,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Opis_ID,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Supplier_Number1,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Supplier_Number2,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Supplier_Name,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Brand,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Opis_Product_Group,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Opis_Product_Type,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Rack_Price,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Prior_Date_Change_Amt,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Gross_Net_Status,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Branded_Status,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Time_Status,PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Create_Dttm,
		PROD_EDW_BASE.COMPETITOR_PRICE_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.COMPETITOR_PRICE_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Competitor_Price_Stg ( Terminal_Code,
		Product_Code,Brand,Event_Dttm,Opis_ID,Supplier_Number1,Supplier_Number2,
		Supplier_Name,Opis_Product_Group,Opis_Product_Type,Rack_Price,
		Prior_Date_Change_Amt,Branded_Status,Gross_Net_Status,Time_Status,
		Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.COMPETITOR_PRICE_STG.Terminal_Code,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Product_Code,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Brand,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Event_Dttm,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Opis_ID,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Supplier_Number1,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Supplier_Number2,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Supplier_Name,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Opis_Product_Group,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Opis_Product_Type,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Rack_Price,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Prior_Date_Change_Amt,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Branded_Status,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Gross_Net_Status,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Time_Status,PROD_EDW_BASE.COMPETITOR_PRICE_STG.Create_Dttm,
		PROD_EDW_BASE.COMPETITOR_PRICE_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.COMPETITOR_PRICE_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.COMPETITOR_PRICING ( Price_Source, Terminal_Code,
		Product_Code,Product_Desc,  Pricing_Group,Location,Brand,Event_Dttm,Event_date,Supplier_Number1,Supplier_Number2,Supplier_Name,
		Price_Type,Rack_Price, Price_Code, Price_Code2, Gross_Net_Status,Prior_Date_Change_Amt,Time_Status,
		Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT 
	Price_Source as Price_Source,
	Terminal_Code as Terminal_Code,
	Product_Code as Product_Code,
    Product_Desc as Product_Desc,
    Pricing_Group as Priciing_Group,
    Location as Location,
	Brand,
	Event_DTTM as Event_Dttm,
	Cast(Event_Dttm as DATE) as Event_Date,
	Supplier_Number1 as Supplier_Number1,
	Supplier_Number2,
	Supplier_Name,
	Price_Type,
	Rack_Price,
	cast(Price_Code as varchar(30)) as Price_Code,  
	CASE 
    	WHEN Supplier_Name = 'CALCULATED' AND substr(price_code,5,1)='B' THEN trim(Terminal_Code) || trim(Product_Code) ||  Gross_Net_Status || time_status || '_617O'
		WHEN Supplier_Name = 'CALCULATED' AND substr(price_code,5,1)<>'B' THEN trim(Terminal_Code) || trim(Product_Code) ||  Gross_Net_Status || time_status||'O'
    	WHEN Supplier_Name <> 'CALCULATED' AND substr(price_code,5,1)='B' THEN trim(Terminal_Code) || trim(Product_Code) ||  trim(Supplier_Name) || time_status || '_617O'
	    WHEN Supplier_Name <> 'CALCULATED' AND substr(price_code,5,1)<>'B' THEN trim(Terminal_Code) || trim(Product_Code) ||  trim(Supplier_Name) || time_status||'O'
    END as Price_Code2,
	Gross_Net_Status,
	Prior_Date_Change_Amt,
	Time_Status,
	Create_dttm,
	Last_Update_Dttm
	FROM PROD_EDW_BASE.COMPETITOR_PRICING
	where Price_Code  in ('COMPB27474','COMPB14625','COMPB13479','COMPB26777')
	UNION all
SELECT 
	Price_Source as Price_Source,
	Terminal_Code as Terminal_Code,
	Product_Code as Product_Code,
    Product_Desc as Product_Desc,
    Pricing_Group as Priciing_Group,
    Location as Location,
	Brand,
	Event_DTTM as Event_Dttm,
	(Cast(Event_Dttm as DATE)-7) as Event_Date,
	Supplier_Number1 as Supplier_Number1,
	Supplier_Number2,
	Supplier_Name,
	'Weekly' as Price_Type,
	Rack_Price,
	cast((Price_Code || 'W') as varchar(30)) as Price_Code, 
	CASE 
    	WHEN Supplier_Name = 'CALCULATED' AND substr(price_code,5,1)='B' THEN trim(Terminal_Code) || trim(Product_Code) ||  Gross_Net_Status || time_status || '_617'
		WHEN Supplier_Name = 'CALCULATED' AND substr(price_code,5,1)<>'B' THEN trim(Terminal_Code) || trim(Product_Code) ||  Gross_Net_Status || time_status
    	WHEN Supplier_Name <> 'CALCULATED' AND substr(price_code,5,1)='B' THEN trim(Terminal_Code) || trim(Product_Code) ||  trim(Supplier_Name) || time_status || '_617'
	    WHEN Supplier_Name <> 'CALCULATED' AND substr(price_code,5,1)<>'B' THEN trim(Terminal_Code) || trim(Product_Code) ||  trim(Supplier_Name) || time_status
    END as Price_Code2,
	Gross_Net_Status,
	Prior_Date_Change_Amt,
	Time_Status,
	Create_dttm,
	Last_Update_Dttm
	FROM PROD_EDW_BASE.COMPETITOR_PRICING
	where Price_Code  in ('COMPB27474','COMPB14625','COMPB13479','COMPB26777')
	union all
		SELECT 
	Price_Source as Price_Source,
	Terminal_Code as Terminal_Code,
	Product_Code as Product_Code,
    Product_Desc as Product_Desc,
    Pricing_Group as Priciing_Group,
    Location as Location,
	Brand,
	Event_DTTM as Event_Dttm,
	Cast(Event_Dttm as DATE) as Event_Date,
	Supplier_Number1 as Supplier_Number1,
	Supplier_Number2,
	Supplier_Name,
	Price_Type,
	Rack_Price,
	cast(Price_Code as varchar(30)) as Price_Code, 
	CASE 
    	WHEN Supplier_Name = 'CALCULATED' AND substr(price_code,5,1)='B' THEN trim(Terminal_Code) || trim(Product_Code) ||  Gross_Net_Status || time_status || '_617'
		WHEN Supplier_Name = 'CALCULATED' AND substr(price_code,5,1)<>'B' THEN trim(Terminal_Code) || trim(Product_Code) ||  Gross_Net_Status || time_status
    	WHEN Supplier_Name <> 'CALCULATED' AND substr(price_code,5,1)='B' THEN trim(Terminal_Code) || trim(Product_Code) ||  trim(Supplier_Name) || time_status || '_617'
	    WHEN Supplier_Name <> 'CALCULATED' AND substr(price_code,5,1)<>'B' THEN trim(Terminal_Code) || trim(Product_Code) ||  trim(Supplier_Name) || time_status
    END as Price_Code2,
	Gross_Net_Status,
	Prior_Date_Change_Amt,
	Time_Status,
	Create_dttm,
	Last_Update_Dttm
	FROM PROD_EDW_BASE.COMPETITOR_PRICING
	where Price_Code not in ('COMPB27474','COMPB14625','COMPB13479','COMPB26777');
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Cur_Date ( Cur_Date,Previous_Day_Date,
		Previous_Month_Date ) AS 
	SELECT PROD_EDW_BASE.CUR_DATE.Cur_Date,PROD_EDW_BASE.CUR_DATE.Previous_Day_Date,
		PROD_EDW_BASE.CUR_DATE.Previous_Month_Date
		FROM PROD_EDW_BASE.CUR_DATE;
--------------------------------------------------------------------------------

Replace view PROD_EDW_BASE_VIEWS.Dat_Aud_Run_Log as LOCKING ROW ACCESS
select * from PROD_EDW_BASE.DAT_AUD_RUN_LOG;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Environmental_Downtime AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Environmental_Downtime
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_VIEWS.Environmental_Hier AS LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.Environmental_Hier;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.ENVIRONMENTAL_REP_TAGS
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.ENVIRONMENTAL_REP_TAGS;
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_VIEWS.Environmental_UnitDown AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	prod_edw_base.Environmental_UnitDown;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Epa ( Trans_Source, Ref_Prod_Location,Trans_Date,Trans_Hour,Trans_Min,
		Tag_ID,Tag_Value,Create_dttm,Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
		SELECT 
		Trans_Source,
		Ref_Prod_Location,
	    Trans_Date,
	    Trans_Hour,
		Trans_Min,
		Tag_ID,
		Tag_Value,
		Create_dttm,
		Last_update_dttm
		FROM PROD_EDW_BASE.PI
		where trans_source in ('Tank','WasteWater','Emissions','FiringRate','Flare','FuelGas','FCCU');
--------------------------------------------------------------------------------

replace	VIEW  prod_edw_base_views.EPA_ELP_EMISSIONS ( Trans_Source,Tag_Group, Ref_Prod_Location,Trans_Date,Trans_Hour,Trans_Min,
	Tag_ID,Tag_Value,Create_dttm,Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT 
 Epa.Trans_Source,
 Epa_elp_emissions_hier.tag_group,
 Ref_Prod_Location,
 Epa.Trans_Date,
 Epa.Trans_Hour,
 Epa.Trans_Min,
 Epa.Tag_ID,
 Epa.Tag_Value,
 Epa.Create_dttm,
 Epa.Last_update_dttm
 FROM PROD_EDW_BASE_VIEWS.Epa,PROD_EDW_BASE_VIEWS.Epa_ELP_EMISSIONS_HIER
 WHERE Ref_Prod_Location = 'El Paso Refinery' 
 and PROD_EDW_BASE_VIEWS.Epa.tag_id=PROD_EDW_BASE_VIEWS.Epa_ELP_EMISSIONS_HIER.tag_id
--------------------------------------------------------------------------------

replace VIEW PROD_EDW_BASE_VIEWS.EPA_ELP_EMISSIONS_HIER ( TAG_GROUP, TAG_ID, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
		SELECT 
		EPA_ELP_EMISSIONS_HIER.TAG_GROUP,
		EPA_ELP_EMISSIONS_HIER.Tag_ID,
		EPA_ELP_EMISSIONS_HIER.Create_dttm,
		EPA_ELP_EMISSIONS_HIER.Last_update_dttm
		FROM prod_edw_base.EPA_ELP_EMISSIONS_HIER;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.EPA_ELP_EMISSIONS_HOURAVG  (Tag_Group, Tag_ID, Trans_Date, Trans_Hour, AvgTagValue)  AS 
LOCKING ROW
ACCESS
SELECT Tag_Group,Tag_ID, Trans_Date, Trans_Hour, Avg(Tag_Value) as AvgTagValue
FROM PROD_EDW_BASE_VIEWS.Epa_elp_emissions
where ref_prod_location = 'El Paso Refinery'
GROUP BY Tag_Group, Tag_ID, Trans_Date, Trans_Hour;
--------------------------------------------------------------------------------

create view prod_edw_base_views.EPA_ELP_FCCU (Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
                                Trans_Min, Tag_ID, Tag_Value, Create_dttm, Last_update_dttm) as
                LOCKING ROW
                ACCESS
SELECT                Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
                                Trans_Min, Tag_ID, Tag_Value, Create_dttm, Last_update_dttm
FROM    prod_edw_base_views.Epa
where ref_prod_location = 'El Paso Refinery'
and trans_source = 'FCCU';
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.EPA_ELP_FCCU_EXCLUSIONS ( Trans_Date, Ref_Prod_Location, Trans_Hour, Trans_Min, NOX_7Day_Exclude,
		NOX_365Day_Exclude, SOX_1Hour_Exclude, SOX_7Day_Exclude, SOX_365Day_Exclude,
		CO_1Hour_Exclude, CO_365Day_Exclude, FCCU_Exclusion_Comment,
		NOX_7Day_Comment, NOX_365Day_Comment, SOX_1Hour_Comment, SOX_7Day_Comment,
		SOX_365Day_Comment, CO_1Hour_Comment, CO_365Day_Comment, Create_Dttm, Last_Update_Dttm) AS 
	LOCKING ROW
	ACCESS
SELECT	Trans_Date, Ref_Prod_Location, Trans_Hour, Trans_Min, NOX_7Day_Exclude,
		NOX_365Day_Exclude, SOX_1Hour_Exclude, SOX_7Day_Exclude, SOX_365Day_Exclude,
		CO_1Hour_Exclude, CO_365Day_Exclude, FCCU_Exclusion_Comment,
		NOX_7Day_Comment, NOX_365Day_Comment, SOX_1Hour_Comment, SOX_7Day_Comment,
		SOX_365Day_Comment, CO_1Hour_Comment, CO_365Day_Comment, Create_Dttm, Last_Update_Dttm
FROM	prod_edw_base.EPA_ELP_FCCU_EXCLUSIONS
where ref_prod_location = 'El Paso Refinery'
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.EPA_ELP_FIRINGRATES(Trans_Source,Ref_Prod_Location,Trans_Date,Trans_Hour,Trans_Min,
		Tag_ID,Tag_Value,Create_dttm,Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
		SELECT
		Trans_Source, 
		Ref_Prod_Location,
	    Trans_Date,
	    Trans_Hour,
		Trans_Min,
		Tag_ID,
		Tag_Value,
		Create_dttm,
		Last_update_dttm
		FROM PROD_EDW_BASE_VIEWS.Epa
		WHERE Trans_Source = 'FIRINGRATE'
		AND Ref_Prod_Location = 'El Paso Refinery';
--------------------------------------------------------------------------------

REPLACE View PROD_EDW_BASE_VIEWS.EPA_ELP_FIRINGRATE_HOURAVG  (Tag_ID, Trans_Date, Trans_Hour, AvgTagValue)  AS 
LOCKING ROW
ACCESS
SELECT Tag_ID, Trans_Date, Trans_Hour, Avg(Tag_Value) as AvgTagValue
FROM PROD_EDW_BASE_VIEWS.Epa_elp_firingrates
Where ref_prod_location = 'El Paso Refinery'
GROUP BY Tag_ID, Trans_Date, Trans_Hour;
--------------------------------------------------------------------------------

Replace  VIEW PROD_EDW_base_views.EPA_ELP_FLARE ( Trans_Source, Tag_Group, Ref_Prod_Location,Trans_Date,Trans_Hour,Trans_Min,
 Tag_ID,Tag_Value,Create_dttm,Last_update_dttm ) AS 
                LOCKING ROW
                ACCESS
SELECT 
 Trans_Source,
 Epa_elp_flare_hier.tag_group,
 Ref_Prod_Location,
 Trans_Date,
 Trans_Hour,
 Trans_Min,
 epa.Tag_ID,
 Tag_Value,
 epa.Create_dttm,
 epa.Last_update_dttm
 FROM PROD_EDW_BASE_VIEWS.Epa,PROD_EDW_BASE_VIEWS.Epa_elp_flare_hier
 WHERE Ref_Prod_Location = 'El Paso Refinery' 
 and PROD_EDW_BASE_VIEWS.Epa.tag_id=PROD_EDW_BASE_VIEWS.Epa_elp_flare_hier.tag_id
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_CONTROL 
	 AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	prod_edw_base.EPA_FLARE_CONTROL
where ref_prod_location = 'El Paso Refinery'
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Epa_Elp_Flare_Hier ( TAG_GROUP, TAG_ID, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
		SELECT 
		PROD_EDW_BASE.EPA_ELP_FLARE_HIER.TAG_GROUP,
		PROD_EDW_BASE.EPA_ELP_FLARE_HIER.Tag_ID,
		PROD_EDW_BASE.EPA_ELP_FLARE_HIER.Create_dttm,
		PROD_EDW_BASE.EPA_ELP_FLARE_HIER.Last_update_dttm
		FROM PROD_edw_base.EPA_ELP_FLARE_HIER;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.EPA_ELP_FLARE_HOURAVG  (Tag_Group,Tag_ID, Trans_Date, Trans_Hour, AvgTagValue)  AS 
LOCKING ROW
ACCESS
SELECT Tag_Group,Tag_ID, Trans_Date, Trans_Hour, Avg(Tag_Value) as AvgTagValue
FROM PROD_EDW_BASE_VIEWS.Epa_elp_flare
GROUP BY Tag_Group,Tag_ID, Trans_Date, Trans_Hour;
--------------------------------------------------------------------------------

Replace  VIEW PROD_EDW_base_views.EPA_ELP_FUELGAS ( Trans_Source, Tag_Group, Ref_Prod_Location,Trans_Date,Trans_Hour,Trans_Min,
Tag_ID,Tag_Value,Create_dttm,Last_update_dttm ) AS 
                LOCKING ROW
                ACCESS
SELECT 
Epa.Trans_Source,
Epa_elp_fuelgas_hier.tag_group,
Epa.Ref_Prod_Location,
Epa.Trans_Date,
Epa.Trans_Hour,
Epa.Trans_Min,
Epa.Tag_ID,
Epa.Tag_Value,
Epa.Create_dttm,
Epa.Last_update_dttm
FROM PROD_EDW_BASE_VIEWS.Epa,PROD_EDW_BASE_VIEWS.Epa_elp_fuelgas_hier
WHERE Ref_Prod_Location = 'El Paso Refinery' 
 and PROD_EDW_BASE_VIEWS.Epa.tag_id=PROD_EDW_BASE_VIEWS.Epa_elp_fuelgas_hier.tag_id;
--------------------------------------------------------------------------------

replace VIEW PROD_EDW_BASE_VIEWS.Epa_Elp_Fuelgas_Hier( TAG_GROUP, TAG_ID, Create_Dttm, Last_Update_Dttm ) AS 
                LOCKING ROW
                ACCESS
                                SELECT 
                                PROD_EDW_BASE.EPA_ELP_FUELGAS_HIER.TAG_GROUP,
                                PROD_EDW_BASE.EPA_ELP_FUELGAS_HIER.Tag_ID,
                                PROD_EDW_BASE.EPA_ELP_FUELGAS_HIER.Create_dttm,
                                PROD_EDW_BASE.EPA_ELP_FUELGAS_HIER.Last_update_dttm
                                FROM PROD_EDW_BASE.EPA_ELP_FUELGAS_HIER;
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.EPA_ELP_FUELGAS_HOURAVG  (Tag_ID, Trans_Date, Trans_Hour, AvgTagValue)  AS 
LOCKING ROW
ACCESS
SELECT Tag_ID, Trans_Date, Trans_Hour, Avg(Tag_Value) as AvgTagValue
FROM PROD_EDW_BASE_VIEWS.Epa_elp_fuelgas
GROUP BY Tag_ID, Trans_Date, Trans_Hour;
--------------------------------------------------------------------------------

REPLACE View PROD_EDW_BASE_VIEWS.EPA_ELP_HOURAVG (Tag_ID, Trans_Date,Trans_Hour, AvgTagValue)  AS 
LOCKING ROW
ACCESS
SELECT Tag_ID, Trans_Date, Trans_Hour, Avg(Tag_Value) as AvgTagValue
FROM PROD_EDW_BASE_VIEWS.Epa
WHERE ref_prod_location = 'El Paso Refinery'
GROUP BY Tag_ID, Trans_Date, Trans_Hour;
--------------------------------------------------------------------------------

REPLACE  VIEW prod_edw_base_views.EPA_ELP_TANK ( Trans_Source, Ref_Prod_Location,Trans_Date,Trans_Hour,Trans_Min,
                                Tag_ID,Tag_Value,Create_dttm,Last_update_dttm ) AS 
                LOCKING ROW
                ACCESS
                                SELECT 
                                Epa.Trans_Source,
                                Epa.Ref_Prod_Location,
                    			Epa.Trans_Date,
                    			Epa.Trans_Hour,
                                Epa.Trans_Min,
                                Epa.Tag_ID,
                                Epa.Tag_Value,
                                Epa.Create_dttm,
                                Epa.Last_update_dttm
                                FROM PROD_EDW_BASE_VIEWS.Epa
                                WHERE Ref_Prod_Location = 'El Paso Refinery' 
                                and Trans_Source = 'Tank';
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.EPA_ELP_TANK_HOURAVG  (Tag_ID, Trans_Date, Trans_Hour, AvgTagValue)  AS 
LOCKING ROW
ACCESS
SELECT Tag_ID, Trans_Date, Trans_Hour, Avg(Tag_Value) as AvgTagValue
FROM PROD_EDW_BASE_VIEWS.Epa_elp_tank
GROUP BY Tag_ID, Trans_Date, Trans_Hour;
--------------------------------------------------------------------------------

REPLACE  VIEW prod_edw_base_views.EPA_ELP_WASTEWATER ( Trans_Source, Ref_Prod_Location,Trans_Date,Trans_Hour,Trans_Min,
                                Tag_ID,Tag_Value,Create_dttm,Last_update_dttm ) AS 
                LOCKING ROW
                ACCESS
                                SELECT 
                                Trans_Source, 
                                Ref_Prod_Location,
                                Trans_Date,
                                Trans_Hour,
                                Trans_Min,
                                Tag_ID,
                                Tag_Value,
                                Create_dttm,
                                Last_update_dttm
                                FROM PROD_EDW_BASE_VIEWS.Epa
                                WHERE Ref_Prod_Location = 'El Paso Refinery' 
                                and Trans_Source = 'Wastewater';
--------------------------------------------------------------------------------

Replace view PROD_EDW_BASE_VIEWS.Epa_Elp_Wastewater_Hier (Tag_Group, Tag_ID, Create_dttm, Last_update_dttm) AS
locking row
Access
SELECT	Tag_Group, Tag_ID, Create_dttm, Last_update_dttm
FROM	PROD_EDW_BASE.EPA_ELP_WASTEWATER_HIER;
--------------------------------------------------------------------------------

Replace view PROD_EDW_BASE_VIEWS.Epa_Load_Params As
Locking Row Access
SELECT	*
FROM	PROD_EDW_BASE.EPA_LOAD_PARAMS;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.External_Internal_Prod_Xref ( Source_System, External_Product_ID, WNR_Product_ID, WNR_Product_Desc,
		External_Product_Desc, Pricing_Group, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Source_System, External_Product_ID, WNR_Product_ID, WNR_Product_Desc,
		External_Product_Desc, Pricing_Group, Create_Dttm, Last_Update_Dttm
	FROM	PROD_EDW_BASE.EXTERNAL_INTERNAL_PROD_XREF;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Futures ( Pricing_Desc,Price_Eff_Date,
		Future_Price_Date,Pricing_Type, Pricing_Code, Price,Volume,Open_int,Create_Dttm,
		Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.FUTURES.Pricing_Desc,PROD_EDW_BASE.FUTURES.Price_Eff_Date,
		PROD_EDW_BASE.FUTURES.Future_Price_Date,PROD_EDW_BASE.FUTURES.Pricing_Type,
		PROD_EDW_BASE.FUTURES.Pricing_Code, PROD_EDW_BASE.FUTURES.Price,
		PROD_EDW_BASE.FUTURES.Volume,PROD_EDW_BASE.FUTURES.Open_int,
		PROD_EDW_BASE.FUTURES.Create_Dttm,PROD_EDW_BASE.FUTURES.Last_Update_Dttm
		FROM PROD_EDW_BASE.FUTURES;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Futures_Pricetype_Desc_Dcd ( Pricing_Type,Pricing_Desc, Pricing_Code, Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Futures_Pricetype_Desc_dcd.Pricing_Type,PROD_EDW_BASE.Futures_Pricetype_Desc_dcd.Pricing_Desc, 
	PROD_EDW_BASE.Futures_Pricetype_Desc_dcd.Pricing_Code, PROD_EDW_BASE.Futures_Pricetype_Desc_dcd.Create_Dttm,PROD_EDW_BASE.Futures_Pricetype_Desc_dcd.Last_Update_Dttm
	FROM PROD_EDW_BASE.Futures_Pricetype_Desc_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Futures_Raw ( Prod_Year,Price_Eff_Date,
		Pricing_Type,Month_code,Price_Open,Price_High,Price_Low,Price_Close,
		Volume,Open_int,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Futures_Raw.Prod_Year,PROD_EDW_BASE.Futures_Raw.Price_Eff_Date,
		PROD_EDW_BASE.Futures_Raw.Pricing_Type,PROD_EDW_BASE.Futures_Raw.Month_code,
		PROD_EDW_BASE.Futures_Raw.Price_Open,PROD_EDW_BASE.Futures_Raw.Price_High,
		PROD_EDW_BASE.Futures_Raw.Price_Low,PROD_EDW_BASE.Futures_Raw.Price_Close,
		PROD_EDW_BASE.Futures_Raw.Volume,PROD_EDW_BASE.Futures_Raw.Open_int,
		PROD_EDW_BASE.Futures_Raw.Create_Dttm,PROD_EDW_BASE.Futures_Raw.Last_Update_Dttm
		FROM PROD_EDW_BASE.Futures_Raw;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Futures_Stg ( Prod_Year,Price_Eff_Date,
		Pricing_Type,Month_code,Price_Open,Price_High,Price_Low,Price_Close,
		Volume,Create_Dttm,Open_int,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Futures_Stg.Prod_Year,PROD_EDW_BASE.Futures_Stg.Price_Eff_Date,
		PROD_EDW_BASE.Futures_Stg.Pricing_Type,PROD_EDW_BASE.Futures_Stg.Month_code,
		PROD_EDW_BASE.Futures_Stg.Price_Open,PROD_EDW_BASE.Futures_Stg.Price_High,
		PROD_EDW_BASE.Futures_Stg.Price_Low,PROD_EDW_BASE.Futures_Stg.Price_Close,
		PROD_EDW_BASE.Futures_Stg.Volume,PROD_EDW_BASE.Futures_Stg.Create_Dttm,
		PROD_EDW_BASE.Futures_Stg.Open_int,PROD_EDW_BASE.Futures_Stg.Last_Update_Dttm
		FROM PROD_EDW_BASE.Futures_Stg;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.Global_Pricing ( Price_Code, Price_Eff_date, Price_Fut_date, Price_Desc, Price_Category,
		Price_Type, Price_Source, Price, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT	Price_Code, Price_Eff_date, Price_Fut_date, Price_Desc, Price_Category,
		Price_Type, Price_Source, Price, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.GLOBAL_PRICING;
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_views.INFA_SERVICE_DETAILS AS 
                LOCKING ROW ACCESS
   SELECT * FROM prod_edw_base.INFA_SERVICE_DETAILS;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_Views.Kickback_Basket 
As Locking Row ACCESS
Select * From PROD_EDW_BASE.KICKBACK_Basket;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_Views.Kickback_FUEL
As Locking Row ACCESS
Select * From PROD_EDW_BASE.KICKBACK_FUEL;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.KICKBACK_LOCATION
AS LOCKING ROW ACCESS
SELECT	XREF.Site_ID as Location_ID, Name, Address, City, State, Zip, Phone, Fax,
		Active, Time_Zone, Launch_Date, Contact, Email, GPS_Longitude,
		GPS_Latitude, Oil_ID, LOC.create_dttm, LOC.last_update_dttm
FROM	PROD_EDW_BASE.Kickback_Location LOC
INNER JOIN PROD_EDW_BASE.Kickback_Site_XREF XREF
ON LOC.Location_ID = XREF.Location_ID;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.KICKBACK_LOYALTY_TRANSACTIONS
AS LOCKING ROW ACCESS
SELECT Loyalty_Transactions_ID, Transaction_Number, Created_At,
        Card_Number, Transaction_Number_POS, Site_ID AS Location_ID, Date_POS, Time_POS,
        Total, Amount_Due, Shift_Number, Kickback_Loyalty_Transactions.create_dttm, Kickback_Loyalty_Transactions.last_update_dttm
FROM PROD_EDW_base.Kickback_Loyalty_Transactions
INNER JOIN PROD_EDW_base.Kickback_site_xref
    ON kickback_site_xref.location_id = Kickback_Loyalty_Transactions.Location_Id;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.KICKBACK_MEMBER
as Locking Row Access
SELECT	Created_At, Updated_At, Card_Number, First_Name, Middle_Name,
		Last_Name, Address1, Address2, City, State, ZipCode, Country,
		Phone, Mobile, Email, Activation_Date, Cancellation_Date, Last_Purchase_Date,
		Last_Redemption_Date, Enrollment_Status, Birth_Date, Opt_in,
		Gender, Drivers_License, Mothers_Maiden, Parent_Card_Number,
		Trigger_Group, First_Transaction_Location_ID, First_Transaction_Date,
		Dollars_Redeemed, Lifetime_Points, First_Transaction_Cashier,
		Location_Enrolled, First_Redemption_Date, Age, MEM.create_dttm, MEM.last_update_dttm
FROM	PROD_EDW_BASE.KICKBACK_MEMBER MEM
INNER JOIN PROD_EDW_BASE.Kickback_Site_XREF XREF
ON MEM.First_Transaction_Location_ID = XREF.Location_ID;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.KICKBACK_PROMOTIONS
AS LOCKING ROW ACCESS
SELECT	Promotion_ID, XREF.Site_ID as Location_ID, Description, Trigger_Type, Trigger_Value,
		Product_Category, Trigger_Action, Points_to_Add, Prize_Line_1,
		Prize_Line_2, Prize_Line_3, Prize_Line_4, Start_Date, End_Date,
		Issue_Count, Promo_ID, Max_Issue_Count, Frequency_Limit_Days,
		Min_Card_Num, Max_Card_Num, Start_Time, End_Time, Location_Group,
		Only_Sunday, Only_Monday, Only_Tuesday, Only_Wednesday, Only_Thursday,
		Only_Friday, Only_Saturday, Progress_Line_1, Progress_Line_2,
		Progress_Line_3, Member_Group, KB_Value, Velocity_Limit_Value,
		Velocity_Limit_Unit, Velocity_Limit_Limit, Only_Enrolled, Gender,
		No_Triggers_Issued, No_Phone_Number, Velocity_Limit_Measures,
		Velocity_Limit_Applies_to, Velocity_Limit_Sign, Member_Group_Means,
		Expire_In_Hours, PROM.create_dttm, PROM.last_update_dttm
FROM	PROD_EDW_BASE.Kickback_Promotions PROM
INNER JOIN PROD_EDW_BASE.Kickback_Site_XREF XREF
ON PROM.Location_ID = XREF.Location_ID;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_Views.Kickback_Promotions_Issued
As Locking Row ACCESS
Select * From PROD_EDW_BASE.KICKBACK_Promotions_Issued;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_Views.Kickback_Redemption
As Locking Row ACCESS
Select * From PROD_EDW_BASE.KICKBACK_Redemption;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Kickback_Site_XREF
AS LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.KICKBACK_SITE_XREF;
--------------------------------------------------------------------------------

Create VIEW prod_EDW_BASE_VIEWS.KSS_CALENDAR ( Cur_Date, Days_Back, Create_dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT Cur_Date, Days_Back, Create_dttm, Last_Update_Dttm
		FROM prod_edw_base.KSS_CALENDAR;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Kss_Channel_dcd ( Channel,Channel_Desc,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Kss_Channel_dcd.Channel,PROD_EDW_BASE.Kss_Channel_dcd.Channel_Desc,
	                 PROD_EDW_BASE.Kss_Channel_dcd.Create_Dttm,PROD_EDW_BASE.Kss_Channel_dcd.Last_Update_Dttm
		FROM PROD_EDW_BASE.KSS_LOCATION_DCD;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Kss_Location_dcd ( Comm_Prod_Location,Kss_Location,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Kss_Location_dcd.Comm_Prod_Location,PROD_EDW_BASE.Kss_Location_dcd.Kss_Location,PROD_EDW_BASE.Kss_Location_dcd.Create_Dttm,PROD_EDW_BASE.Kss_Location_dcd.Last_Update_Dttm
		FROM PROD_EDW_BASE.KSS_LOCATION_DCD;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.KSS_Newwest_Calendar
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.KSS_NEWWEST_CALENDAR;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.KSS_OWN_PRICE_CALENDAR ( Event_Date, Days_Forward, Create_dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT Event_Date, Days_Forward, Create_dttm, Last_Update_Dttm
		FROM prod_edw_base.KSS_OWN_PRICE_CALENDAR;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Kss_Product_dcd ( Prod_Group_Subcat4,
		KSS_Product_Cd,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Kss_Product_dcd.Prod_Group_Subcat4, PROD_EDW_BASE.Kss_Product_dcd.Kss_Product_Cd,
		             PROD_EDW_BASE.Kss_Product_dcd.Create_Dttm,PROD_EDW_BASE.Kss_Product_dcd.Last_Update_Dttm
		FROM PROD_EDW_BASE.Kss_Product_dcd;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.LAB_RESULTS 
		(Ref_prod_location, LIMS_Source, Job_Name, Sample_Number, Test_Number, Component_Name,
		Date_Scheduled,Time_Scheduled, Date_Sampled, Time_Sampled, Date_received, Time_Received, Date_Completed,
		Time_Completed, Date_ResultAvailable, Time_ResultAvailable, Date_Authorized,
		Time_Authorized, Product, Sampling_Point, Sample_Type, Location_Id, ANALYSIS,
		Results_Text, Results_Value, Min_Limit, Max_Limit, Units, Tank, PITag, SampleStatus, 
		SAMPLE_OLD_STATUS, COMPARED, ON_SPEC, RE_SAMPLED, ORIGINAL_SAMPLE, LINK_NUMBER,
		Date_Login, Time_Login, Person_Login, AUTHORISER, AUTHORISATION_NOTES, PRODUCT_VERSION,
		GRADE_CODE, TESTS_TO_DO, ON_WKS, PROJECT_ID, BATCH_NAME, DESCRIPTION, PREPARATION,
		HAZARD, SUBSTANCE, PRIORITY, CUSTOMER_ID, INVOICE_NUMBER, TEST_SCHEDULE, TEMPLATE_ID,
		COMP_PROD_NAME, COMP_PROD_VER, COMP_PROD_GRADE, STANDARD, BATCH_ID, TEST_STATUS,
		INSTRUMENT, REPLICATE_TEST, TEST_COUNT, RESULT_TYPE, RESULT_STATUS, OUT_OF_RANGE,
		DATE_RESULT_ENTERED, Time_Result_Entered, Person_Result_Entered, Date_Result_Auth, Time_Result_Auth,
		Person_Result_Auth, REP_CONTROL, CONTAINER_TYPE, NUMBER_CONTAINERS, ON_COA, SUBMITTER,
		Create_dttm, Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT	lab_results.Ref_prod_location, Lab_Location, Job_Name, Sample_Number, Test_Number, lab_results.Component_Name, 
		Date_Scheduled,Time_Scheduled,	Date_Sampled, Time_Sampled, Date_received, Time_Received, Date_Completed,
		Time_Completed, Date_ResultAvailable, Time_ResuleAvailable, Date_Authorized,
		Time_Authorized, lab_results.Product, Sampling_Point, Sample_Type, Location_Id, lab_results.ANALYSIS,
		Results_Text, 
		CASE WHEN TO_NUMBER(CAST(results_text AS CHAR(128))) IS NULL
			THEN NULL
			ELSE results_value
		END AS results_value,

		CASE 
			WHEN SUBSTR(min_limit,1,1) IN ('>','<')  
			THEN 
				CASE 
					WHEN SUBSTR(min_limit,1,1) IN ('>')  
					THEN 
						CASE 
							WHEN SUBSTR(min_limit,1,2) = '>='  
							THEN SUBSTR(min_limit,3, CHARACTER_LENGTH(min_limit)-2) 
							ELSE 	SUBSTR(min_limit,2, CHARACTER_LENGTH(min_limit)-1)
						END
				ELSE 
					CASE
						WHEN SUBSTR(min_limit,1,1) IN ('<')  
						THEN NULL
						END
					END
			ELSE 
				CASE 
					WHEN min_limit = ('')
					THEN NULL
					ELSE min_limit
				END
			END AS Min_Limit,
		
		CASE 
			WHEN SUBSTR(min_limit,1,1) IN ('<')  
			THEN 
				CASE 
					WHEN SUBSTR(min_limit,1,1) IN ('<')  
					THEN 
						CASE 
							WHEN SUBSTR(min_limit,1,2) = '<='  
							THEN SUBSTR(min_limit,3, CHARACTER_LENGTH(min_limit)-2) 
							ELSE 	SUBSTR(min_limit,2, CHARACTER_LENGTH(min_limit)-1)
						END
					END
			ELSE 
				CASE 
					WHEN max_limit = ('')
					THEN NULL
					ELSE max_limit
				END
			END AS Max_Limit,

		lab_results.Units, Tank, 
		SUBSTR(lab_results.Ref_prod_location,1,1) || '.' || lab_results.Sampling_Point || '.' || lab_results.ANALYSIS || '.' || lab_results.Component_Name || '.LAB' AS PITag, SampleStatus,
		SAMPLE_OLD_STATUS, COMPARED, ON_SPEC, RE_SAMPLED, ORIGINAL_SAMPLE, LINK_NUMBER,
		Date_Login, Time_Login, Person_Login, AUTHORISER, AUTHORISATION_NOTES, lab_results.PRODUCT_VERSION,
		GRADE_CODE, TESTS_TO_DO, ON_WKS, PROJECT_ID, BATCH_NAME, DESCRIPTION, PREPARATION,
		HAZARD, SUBSTANCE, PRIORITY, CUSTOMER_ID, INVOICE_NUMBER, TEST_SCHEDULE, TEMPLATE_ID,
		COMP_PROD_NAME,COMP_PROD_VER, COMP_PROD_GRADE, STANDARD, BATCH_ID, TEST_STATUS,
		INSTRUMENT, REPLICATE_TEST, TEST_COUNT, RESULT_TYPE, RESULT_STATUS, OUT_OF_RANGE,
		DATE_RESULT_ENTERED, Time_Result_Entered, Person_Result_Entered, Date_Result_Auth, Time_Result_Auth,
		Person_Result_Auth, REP_CONTROL, CONTAINER_TYPE, NUMBER_CONTAINERS, ON_COA, SUBMITTER,
		lab_results.Create_dttm, lab_results.Last_update_dttm
FROM	PROD_EDW_BASE.LAB_RESULTS
LEFT OUTER JOIN prod_edw_base.lab_results_compspec
ON lab_results.ref_prod_location = lab_results_compspec.ref_prod_location
AND lab_results.product = lab_results_compspec.product
AND lab_results.component_name = lab_results_compspec.component_name
AND lab_results.date_sampled = lab_results_compspec.eff_date
AND lab_results.ANALYSIS = lab_results_compspec.ANALYSIS
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Lab_Results_CompSpec AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.LAB_RESULTS_COMPSPEC
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Lab_Results_DS_XREF AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Lab_Results_DS_XREF;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.LAB_RESULTS_SMALL AS 
                LOCKING ROW ACCESS
SELECT	Ref_prod_location, Job_Name, Sample_Number,
		Test_Number, Component_Name, Date_Sampled, Time_Sampled
		,Product, Sampling_Point, Sample_Type, Location_Id,
		ANALYSIS, Results_Text, Results_Value, Min_Limit, Max_Limit,
		Units, Tank, PITag, SampleStatus
FROM prod_edw_base_views.LAB_RESULTS;
--------------------------------------------------------------------------------

REPLACE              VIEW PROD_EDW_BASE_VIEWS.LIFTING (Report_Desc,Eff_Date, Prod_ID,Product_Name, Balance_Type, Ref_Prod_Location,Tank_Number,Movement_Code,
                                Net_Quantity, Weight,Qty_Uom, Ticket_number, Create_dttm, Last_Update_Dttm) AS 
                LOCKING ROW
                ACCESS
SELECT 
C.Report_Desc AS REPORT_DESC, 
A.EFF_DATE  AS EFF_DATE,
D.Product_ID AS PROD_ID,
C.Prod_Group_SubCat4 AS PRODUCT_NAME,
CAST ('Receipts' AS VARCHAR(20))  AS BALANCE_TYPE,
D.REF_PROD_LOCATION AS REF_PROD_LOCATION,
A.INPUT_TANK_NUMBER AS TANK_NUMBER,
CAST(0 AS VARCHAR(32)) AS MOVEMENT_CODE,
CAST (A.RECEIPTS AS DECIMAL(12,2)) AS  NET_QUANTITY,
CAST (0.00 AS DECIMAL(12,2)) AS  WEIGHT,
CAST(A.UOM AS VARCHAR(20) ) AS Qty_UOM,
CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER,
A.CREATE_DTTM AS CREATE_DTTM,
A.LAST_UPDATE_DTTM AS LAST_UPDATE_DTTM
FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER D
ON A.INPUT_PRODUCT_NAME = D.PRODUCT_NAME_3PT
AND A.INPUT_LOCATION = D.LOCATION_ID_3PT
AND A.INPUT_TANK_NUMBER = D.OTHER_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON D.Product_ID = C.Product_ID
AND D.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT
C.Report_Desc AS REPORT_DESC,  
A.EFF_DATE  AS EFF_DATE,
D.Product_ID AS PROD_ID,
C.Prod_Group_SubCat4 AS PRODUCT_NAME,
CAST ('Transfers' AS VARCHAR(20))  AS BALANCE_TYPE,
D.REF_PROD_LOCATION AS REF_PROD_LOCATION,
A.INPUT_TANK_NUMBER AS TANK_NUMBER,
CAST(0 AS VARCHAR(32)) AS MOVEMENT_CODE,
CAST (A.TRANSFERS AS DECIMAL(12,2)) AS  NET_QUANTITY,
CAST (0.00 AS DECIMAL(12,2)) AS  WEIGHT,
CAST(A.UOM AS VARCHAR(20) ) AS Qty_UOM,
CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER,
A.CREATE_DTTM AS CREATE_DTTM,
A.LAST_UPDATE_DTTM AS LAST_UPDATE_DTTM
FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER D
ON A.INPUT_PRODUCT_NAME = D.PRODUCT_NAME_3PT
AND A.INPUT_LOCATION = D.LOCATION_ID_3PT
AND A.INPUT_TANK_NUMBER = D.OTHER_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON D.Product_ID = C.Product_ID
AND D.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT
C.Report_Desc AS REPORT_DESC,  
A.EFF_DATE  AS EFF_DATE,
D.Product_ID AS PROD_ID,
C.Prod_Group_SubCat4 AS PRODUCT_NAME,
CAST('Beginning Balance' AS VARCHAR(20))  AS BALANCE_TYPE,
D.REF_PROD_LOCATION AS REF_PROD_LOCATION,
A.INPUT_TANK_NUMBER AS TANK_NUMBER,
CAST(0 AS VARCHAR(32)) AS MOVEMENT_CODE,
CAST (A.INV_BEGIN AS DECIMAL(12,2)) AS  NET_QUANTITY,
CAST (0.00 AS DECIMAL(12,2)) AS  WEIGHT,
CAST(A.UOM AS VARCHAR(20) ) AS Qty_UOM,
CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER,
A.CREATE_DTTM AS CREATE_DTTM,
A.LAST_UPDATE_DTTM AS LAST_UPDATE_DTTM
FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER D
ON A.INPUT_PRODUCT_NAME = D.PRODUCT_NAME_3PT
AND A.INPUT_LOCATION = D.LOCATION_ID_3PT
AND A.INPUT_TANK_NUMBER = D.OTHER_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON D.Product_ID = C.Product_ID
AND D.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
C.Report_Desc AS REPORT_DESC, 
A.EFF_DATE  AS EFF_DATE,
D.Product_ID AS PROD_ID,
C.Prod_Group_SubCat4 AS PRODUCT_NAME,
CAST('Adjustments' AS VARCHAR(20))  AS BALANCE_TYPE,
D.REF_PROD_LOCATION AS REF_PROD_LOCATION,
A.INPUT_TANK_NUMBER AS TANK_NUMBER,
CAST(0 AS VARCHAR(32)) AS MOVEMENT_CODE,
CAST (A.ADJUSTMENTS AS DECIMAL(12,2)) AS  NET_QUANTITY,
CAST (0.00 AS DECIMAL(12,2)) AS  WEIGHT,
CAST(A.UOM AS VARCHAR(20) ) AS Qty_UOM,
CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER,
A.CREATE_DTTM AS CREATE_DTTM,
A.LAST_UPDATE_DTTM AS LAST_UPDATE_DTTM
FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER D
ON A.INPUT_PRODUCT_NAME = D.PRODUCT_NAME_3PT
AND A.INPUT_LOCATION = D.LOCATION_ID_3PT
AND A.INPUT_TANK_NUMBER = D.OTHER_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON D.Product_ID = C.Product_ID
AND D.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT
C.Report_Desc AS REPORT_DESC,  
A.EFF_DATE  AS EFF_DATE,
D.Product_ID AS PROD_ID,
C.Prod_Group_SubCat4 AS PRODUCT_NAME,
CAST('Shipments' AS VARCHAR(20))  AS BALANCE_TYPE,
D.REF_PROD_LOCATION AS REF_PROD_LOCATION,
A.INPUT_TANK_NUMBER AS TANK_NUMBER,
CAST(0 AS VARCHAR(32)) AS MOVEMENT_CODE,
CAST (A.DELIVERED AS DECIMAL(12,2)) AS  NET_QUANTITY,
CAST (0.00 AS DECIMAL(12,2)) AS  WEIGHT,
CAST(A.UOM AS VARCHAR(20) ) AS Qty_UOM,
CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER,
A.CREATE_DTTM AS CREATE_DTTM,
A.LAST_UPDATE_DTTM AS LAST_UPDATE_DTTM
FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER D
ON A.INPUT_PRODUCT_NAME = D.PRODUCT_NAME_3PT
AND A.INPUT_LOCATION = D.LOCATION_ID_3PT
AND A.INPUT_TANK_NUMBER = D.OTHER_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON D.Product_ID = C.Product_ID
AND D.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
C.Report_Desc AS REPORT_DESC, 
A.EFF_DATE  AS EFF_DATE,
D.Product_ID AS PROD_ID,
C.Prod_Group_SubCat4 AS PRODUCT_NAME,
CAST('Ending Balance'  AS VARCHAR(20))  AS BALANCE_TYPE,
D.REF_PROD_LOCATION AS REF_PROD_LOCATION,
A.INPUT_TANK_NUMBER AS TANK_NUMBER,
CAST(0 AS VARCHAR(32)) AS MOVEMENT_CODE,
CAST (A.INV_CLOSE AS DECIMAL(12,2)) AS  NET_QUANTITY,
CAST (0.00 AS DECIMAL(12,2)) AS  WEIGHT,
CAST(A.UOM AS VARCHAR(20) ) AS Qty_UOM,
CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER,
A.CREATE_DTTM AS CREATE_DTTM,
A.LAST_UPDATE_DTTM AS LAST_UPDATE_DTTM
FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER D
ON A.INPUT_PRODUCT_NAME = D.PRODUCT_NAME_3PT
AND A.INPUT_LOCATION = D.LOCATION_ID_3PT
AND A.INPUT_TANK_NUMBER = D.OTHER_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON D.Product_ID = C.Product_ID
AND D.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
C.Report_Desc AS REPORT_DESC 
 ,A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,Case When  A.Balance_Type = 'Receipts' Then 'Receipts' 
            When A.Balance_Type = 'Shipments' Then 'Shipments' 
            When A.Balance_Type = 'Transfers' Then 'Transfers' 
            When A.Balance_Type = 'Ending Balance' Then 'Ending Balance' 
            When A.Balance_Type = 'Beginning Balance' Then 'Beginning Balance' 
            When A.Balance_Type = 'Adjustments' Then 'Adjustments' 
            When A.Balance_Type = 'BOLs' Then 'Bill of Lading' 
            When A.Balance_Type = 'Rebrands' Then 'Regrades' 
ELSE 'Unknown'
END  AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(0 As CHAR) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Quantity as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_CALJET_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_NAME = B.Product_Name_3PT
AND  A.INPUT_Location_ID= B.Location_ID_3PT
AND A.Stock_Holder_ID= B.Other_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
C.Report_Desc AS REPORT_DESC 
 ,A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,Case When  A.Balance_Type = 'Receipts' Then 'Receipts' 
            When A.Balance_Type = 'Shipments' Then 'Shipments' 
            When A.Balance_Type = 'Transfers' Then 'Transfers' 
            When A.Balance_Type = 'Ending Balance' Then 'Ending Balance' 
            When A.Balance_Type = 'Beginning Balance' Then 'Beginning Balance' 
            When A.Balance_Type = 'Adjustments' Then 'Adjustments' 
            When A.Balance_Type = 'BOLs' Then 'Bill of Lading' 
            When A.Balance_Type = 'Rebrands' Then 'Regrades' 
            When A.Balance_Type = 'Transfers Out' Then 'Transfers Out' 
            When A.Balance_Type = 'Transfers In' Then 'Transfers In' 
ELSE 'Unknown'
END  AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(0 As CHAR) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Quantity as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_SW_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_NAME = B.Product_Name_3PT
AND  A.INPUT_Location_ID= B.Location_ID_3PT
AND A.Stock_Holder_ID= B.Other_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
C.Report_Desc AS REPORT_DESC
, A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,Case When  A.Balance_Type = 'Receipts' Then 'Receipts' 
            When A.Balance_Type = 'Shipments' Then 'Shipments' 
            When A.Balance_Type = 'Transfers' Then 'Transfers' 
            When A.Balance_Type = 'Ending Balance' Then 'Ending Balance' 
            When A.Balance_Type = 'Beginning Balance' Then 'Beginning Balance' 
            When A.Balance_Type = 'Adjustments' Then 'Adjustments' 
            When A.Balance_Type = 'BOLs' Then 'Bill of Lading' 
            When A.Balance_Type = 'Rebrands' Then 'Regrades' 
            When A.Balance_Type = 'Transfers Out' Then 'Transfers Out' 
            When A.Balance_Type = 'Transfers In' Then 'Transfers In' 
            When A.Balance_Type = 'Open' Then 'Open' 
ELSE 'Unknown'
END  AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(0 As CHAR) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Quantity as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_CATO_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_NAME = B.Product_Name_3PT
AND  A.INPUT_Location_ID= B.Location_ID_3PT
AND A.Stock_Holder_ID= B.Other_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT
C.Report_Desc AS REPORT_DESC 
,A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,Case When  A.Balance_Type = 'Receipts' Then 'Receipts' 
            When A.Balance_Type = 'Shipments' Then 'Shipments' 
            When A.Balance_Type = 'Transfers' Then 'Transfers' 
            When A.Balance_Type = 'Ending Balance' Then 'Ending Balance' 
            When A.Balance_Type = 'Beginning Balance' Then 'Beginning Balance' 
            When A.Balance_Type = 'Adjustments' Then 'Adjustments' 
            When A.Balance_Type = 'BOLs' Then 'Bill of Lading' 
            When A.Balance_Type = 'Rebrands' Then 'Regrades' 
            When A.Balance_Type = 'Transfers Out' Then 'Transfers Out' 
            When A.Balance_Type = 'Transfers In' Then 'Transfers In' 
            When A.Balance_Type = 'Open' Then 'Open' 
            When A.Balance_Type = 'Other' Then 'Other' 
            When A.Balance_Type = 'Deliveries' Then 'Deliveries' 
            When A.Balance_Type = 'Disposals' Then 'Disposals' 
            When A.Balance_Type = 'Exchanges' Then 'Exchanges'
           When A.Balance_Type = 'Straight Lifts' Then 'Straight Lifts'
            When A.Balance_Type = 'Blend Lifts' Then 'Blend Lifts'   
ELSE 'Unknown'
END  AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(0 As CHAR) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Quantity as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_KM_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_NAME = B.Product_Name_3PT
AND  A.INPUT_Location_ID= B.Location_ID_3PT
AND A.Stock_Holder_ID= B.Other_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
 C.Report_Desc AS REPORT_DESC 
,A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,Case When  A.Balance_Type = 'Receipts' Then 'Receipts' 
            When A.Balance_Type = 'Shipments' Then 'Shipments' 
            When A.Balance_Type = 'Transfers' Then 'Transfers' 
            When A.Balance_Type = 'Ending Balance' Then 'Ending Balance' 
            When A.Balance_Type = 'Beginning Balance' Then 'Beginning Balance' 
            When A.Balance_Type = 'Adjustments' Then 'Adjustments' 
            When A.Balance_Type = 'BOLs' Then 'Bill of Lading' 
            When A.Balance_Type = 'Rebrands' Then 'Regrades' 
            When A.Balance_Type = 'Transfers Out' Then 'Transfers Out' 
            When A.Balance_Type = 'Transfers In' Then 'Transfers In' 
            When A.Balance_Type = 'Open' Then 'Open' 
            When A.Balance_Type = 'Other' Then 'Other' 
            When A.Balance_Type = 'Deliveries' Then 'Deliveries' 
            When A.Balance_Type = 'Disposals' Then 'Disposals' 
            When A.Balance_Type = 'Exchanges' Then 'Exchanges'
            When A.Balance_Type = 'Straight Lifts' Then 'Straight Lifts'
            When A.Balance_Type = 'Blend Lifts' Then 'Blend Lifts'   
ELSE 'Unknown'
END  AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(0 As CHAR) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Quantity as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_PROPET_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_NAME = B.Product_Name_3PT
AND  A.INPUT_Location_ID= B.Location_ID_3PT
AND A.Stock_Holder_ID= B.Other_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
 C.Report_Desc AS REPORT_DESC 
,A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,Case When  A.Balance_Type = 'Receipts' Then 'Receipts' 
            When A.Balance_Type = 'End Balance' Then 'Ending Balance' 
            When A.Balance_Type = 'Beginning Balance' Then 'Beginning Balance' 
            When A.Balance_Type = 'Other' Then 'Other' 
            When A.Balance_Type = 'Disposals' Then 'Disposals' 
ELSE 'Unknown'
END  AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(0 As CHAR) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Quantity as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_VECENERGY_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_ID = B.Product_Name_3PT
AND  A.INPUT_Location_ID= B.Location_ID_3PT
AND A.Stock_Holder_ID= B.Other_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT
C.Report_Desc AS REPORT_DESC 
,A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,Case When  A.Balance_Type = 'Receipts' Then 'Receipts' 
            When A.Balance_Type = 'Shipments' Then 'Shipments' 
            When A.Balance_Type = 'Transfers' Then 'Transfers' 
            When A.Balance_Type = 'Ending Balance' Then 'Ending Balance' 
            When A.Balance_Type = 'Beginning Balance' Then 'Beginning Balance' 
            When A.Balance_Type = 'Adjustments' Then 'Adjustments' 
            When A.Balance_Type = 'BOLs' Then 'Bill of Lading' 
            When A.Balance_Type = 'Rebrands' Then 'Regrades' 
            When A.Balance_Type = 'Transfers Out' Then 'Transfers Out' 
            When A.Balance_Type = 'Transfers In' Then 'Transfers In' 
            When A.Balance_Type = 'Open' Then 'Open' 
            When A.Balance_Type = 'Other' Then 'Other' 
            When A.Balance_Type = 'Deliveries' Then 'Deliveries' 
            When A.Balance_Type = 'Disposals' Then 'Disposals' 
            When A.Balance_Type = 'Exchanges' Then 'Exchanges'
           When A.Balance_Type = 'Straight Lifts' Then 'Straight Lifts'
            When A.Balance_Type = 'Blend Lifts' Then 'Blend Lifts'   
ELSE 'Unknown'
END  AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(0 As CHAR) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Quantity as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_BLACKWATER_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_ID = B.Product_Name_3PT
AND  A.INPUT_Location_ID= B.Location_ID_3PT
AND A.Stock_Holder_ID= B.Other_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
C.Report_Desc AS REPORT_DESC 
,CASE WHEN  A.Movement_Start  IS NULL THEN CAST(CAST(substring( movement_code from 4 for 6)  as date format 'mmddyy') as date format 'mm/dd/yy')
            ELSE A.Movement_Start
END  AS EFF_DATE
,P.Product_ID   AS PROD_ID
,C.Prod_Group_SubCat4   AS PRODUCT_NAME
,Case When A.Movement_Type = 0 Then 'Receipts' 
            When A.Movement_Type = 1 Then 'Shipments' 
            When A.Movement_Type = 2 Then 'Transfers' 
            When A.Movement_Type = 3 Then 'Feed/Rundown' 
  ELSE 'Unknown'
END  AS BALANCE_TYPE
,A.Ref_Prod_Location AS REF_PROD_LOCATION
,CASE WHEN B.Master_Code IS NULL THEN 0
             ELSE B.Master_Code
END AS TANK_NUMBER
,A.Movement_Code as Movement_Code
,CAST (A.Volume_Estimated as decimal(12,2)) as  QUANTITY
,CAST (A.Weight_Estimated as decimal(12,2)) as  WEIGHT
,CAST('Unknown' AS VARCHAR(20)) AS UOM
,A.ticket_number as TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.MOVEMENT A
LEFT OUTER JOIN PROD_EDW_BASE.MASTER B
ON A.Source_ID = B.Master_ID
AND A.Ref_Prod_Location = B.Ref_Prod_Location
INNER JOIN PROD_EDW_BASE.REF_PRODUCT P
ON A.Product_Id = P.Product_ID
AND A.Ref_Prod_Location = P.Ref_Prod_Location
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON P.Product_ID = C.Product_ID
AND P.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')

UNION ALL

SELECT 
C.Report_Desc AS REPORT_DESC 
,A.eff_date AS EFF_DATE
,B.PRODUCT_ID AS PROD_ID
,C.Prod_Group_SubCat4 AS PRODUCT_NAME
,A.Input_Transaction_Type AS BALANCE_TYPE
,B.REF_PROD_LOCATION AS REF_PROD_LOCATION
,CAST(A.INPUT_TANK as varchar(20)) as TANK_NUMBER
,CAST(0 As VARCHAR(32)) as Movement_Code
,CAST (A.Input_Qty as decimal(12,2)) as  NET_QUANTITY
,CAST (0.00 as decimal(12,2)) as  WEIGHT
,CAST(A.Input_uom AS VARCHAR(20)) AS UOM
,CAST(Null AS VARCHAR(32)) AS TICKET_NUMBER
,A.create_dttm AS CREATE_DTTM
,A.last_update_dttm AS LAST_UPDATE_DTTM
FROM   PROD_EDW_BASE.TERMINAL_YORKTOWN_RAW A
INNER JOIN PROD_EDW_BASE.TERMINAL_DECODER B
ON A.INPUT_PRODUCT_NAME = B.Product_Name_3PT
AND  cast(A.INPUT_TANK as varchar(100))= B.Location_ID_3PT
INNER JOIN PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY C
ON B.Product_ID = C.Product_ID
AND B.Ref_Prod_Location = C.Ref_Prod_Location
WHERE C.Report_Desc in ('Inventory')
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_ABC_Info
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_ABC_INFO;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Charge_Inf
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_CHARGE_INF;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Cyc_Cnt_Sh_Hdr
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_CYC_CNT_SH_HDR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Cyc_Cnt_Sh_Lines
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_CYC_CNT_SH_LINES;
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_VIEWS.MAINT_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS

SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis EOD Inv' as Source_Name, 
	cast('Maint_Item_Bal' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Item_Bal
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis EOD Inv' as Source_Name, 
	cast('Maint_Item_StoreRoom' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Item_Store_Room
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_ABC_Info' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_ABC_Info
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Charge_Inf' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Charge_Inf
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Cyc_Hdr' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Cyc_Cnt_Sh_Hdr
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Cyc_Lines' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Cyc_Cnt_Sh_Lines
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Employee' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Employee
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Employee' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Intr_Chgs
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Inv_Cat' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Inv_Cat
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Inv_Trans' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Inv_Trans
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Item_Type' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Item_Type
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Maint_Ent' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Maint_Ent
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_MRO_Item' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_MRO_Item
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Mtn_Type' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Mtn_Type
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PC_Item' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PC_Item
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PLL_WTRSR' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PLL_WTRSR_Lnk
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PL_Line' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PL_Line
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PL_Sum' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PL_Sum
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PO_Del' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PO_Del
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PO_Del_ChgInf' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PO_Del_ChgInf
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PO_Line' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PO_Line
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_PO_Sum' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_PO_Sum
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Req_Line' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Req_Line
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Req_Priority' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Req_Priority
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Req_Sum' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Req_Sum
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Site' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Site
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Site_Catalog' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Site_Catalog
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Store_Room' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Store_Room
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Suspend' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Suspend
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Tag_Plln' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Tag_Plln
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Vendor' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Vendor
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Work_Order' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Work_Order
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_Work_Task' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_Work_Task
Group by 4
UNION ALL
SELECT	'MAINTENANCE' as Table_Name, 
	'Avantis Mast/Trans' as Source_Name, 
	cast('Maint_WO_Rsrs' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	prod_edw_base_VIEWS.Maint_WO_Rsrs_Reqst
Group by 4
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Employee
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_EMPLOYEE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Intr_Chgs
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_INTR_CHGS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Inv_Cat
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_INV_CAT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Inv_Trans
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_INV_TRANS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Item_Bal
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_ITEM_BAL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Item_Store_Room
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_ITEM_STORE_ROOM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Item_Type
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_ITEM_TYPE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Maint_Ent
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_MAINT_ENT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Mro_Item
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_MRO_ITEM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Mtn_Type
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_MTN_TYPE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_PC_Item
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PC_ITEM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Pll_Wtrsr_Lnk
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PLL_WTRSR_LNK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_PL_Line
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PL_LINE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_PL_Sum
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PL_SUM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_PO_Del
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PO_DEL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_PO_Del_ChgInf
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PO_DEL_CHGINF;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_PO_Line
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PO_LINE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_PO_Sum
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_PO_SUM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Req_Line
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_REQ_LINE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Req_Priority
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_REQ_PRIORITY;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Req_Sum
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_REQ_SUM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Site
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_SITE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Site_Catalog
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_SITE_CATALOG;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Store_Room
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_STORE_ROOM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Suspend
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_SUSPEND;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Tag_Plln
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_TAG_PLLN;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Vendor
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_VENDOR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Work_Order
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_WORK_ORDER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Work_Task
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_WORK_TASK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MAINT_Wo_Rsrs_Reqst
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MAINT_WO_RSRS_REQST;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Master ( Master_ID,Ref_Prod_Location,
		Master_Code,Master_Type,Master_SubType,Master_Description,Master_Alias,
		Area_ID,Trans_Dttm,Trans_Update_Dttm,Create_dttm,Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Master.Master_ID,PROD_EDW_BASE.Master.Ref_Prod_Location,
		PROD_EDW_BASE.Master.Master_Code,PROD_EDW_BASE.Master.Master_Type,
		PROD_EDW_BASE.Master.Master_SubType,PROD_EDW_BASE.Master.Master_Description,
		PROD_EDW_BASE.Master.Master_Alias,PROD_EDW_BASE.Master.Area_ID,
		PROD_EDW_BASE.Master.Trans_Dttm,PROD_EDW_BASE.Master.Trans_Update_Dttm,
		PROD_EDW_BASE.Master.Create_dttm,PROD_EDW_BASE.Master.Last_update_dttm
		FROM PROD_EDW_BASE.Master;
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_views.MBO_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_Events
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_Event_Tanks
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_Event_Comments
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_Event_Resources
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_Specs
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_Qualities
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_Events_Publish
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_EVENTS_PUBLISH_AB
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_QUALITIES_AB
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_PRODUCTS
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_TANK_VALUES
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_TREND_LIMIT
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_TANK_INFO
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_OUT_SHIP
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'MBO' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.MBO_EV_DAILY
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_crdruns
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_events
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_event_dest_tanks
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_event_source_tanks
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_ev_daily
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_pl
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_pl_pipeline
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_pl_pipeline_comp
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_pl_pipeline_dest
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_streams
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_strms
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_tanks
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_tanks_main
GROUP BY 3,4
UNION ALL
SELECT	'OPERATIONS' AS TABLE_NAME, 
	'APS' AS Source_Name, 
	CAST(Ref_Prod_Location AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_tran_modes
GROUP BY 3,4;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Events
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MBO_EVENTS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Events_Publish
AS LOCKING ROW ACCESS
SELECT	  Ref_Prod_Location,
			      Z_SEQ,
			      DESCRIPTION,
			      ID,
			      ID1,
			      ID2,
			      ID3,
			      cast(START_TIME as date) as START_DT,
			      START_TIME,
			      STOP_TIME,
			      START_DAY,
			      STOP_DAY,
			      VOLUME,
			      WEIGHT,
			      BATCH,
			      COMMENTS,
			      LABEL,
			      PRODCODE,
			      OPTIONS,
			      REPORT,
			      ORION_CASE,
			      X_UPDATED,
			      X_BY,
			      X_SEQ,
			      X_TYPE,
			      PREP,
			      POST,
			      RATE,
			      COLOR,
			      MOVEMENT_ID,
			      APPLICATION_ID,
			      SERVICE,
			      EVENT_SEQ,
			      EARLY_START,
			      LATE_END,
			      Create_Dttm,
			      Last_Update_Dttm
FROM		  PROD_EDW_BASE.MBO_EVENTS_PUBLISH;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_views.MBO_Events_Publish_AB AS 
	LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.MBO_Events_Publish_AB;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Event_Comments
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MBO_EVENT_COMMENTS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Event_Resources
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MBO_EVENT_RESOURCES;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Event_Tanks
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MBO_EVENT_TANKS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_EV_Daily
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.MBO_EV_DAILY;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Out_Ship
AS LOCKING ROW ACCESS
SELECT	    Ref_Prod_Location,
				    X_SEQ,
				    OUT_SHIP_ID,
				    OUT_SHIP_PROP,
				    cast(OUT_SHIP_DATE as Date) as OUT_SHIP_DATE,
				    OUT_SHIP_VALUE,
				  	OUT_SHIP_CASE,			
					X_BY,
					X_UPDATED,
				    Create_Dttm,
				    Last_Update_Dttm
FROM			PROD_EDW_BASE.MBO_OUT_SHIP;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Products
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MBO_PRODUCTS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Qualities
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MBO_QUALITIES;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_views.MBO_Qualities_AB AS 
	LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.MBO_Qualities_AB;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Specs
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.MBO_SPECS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Tank_Info
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.MBO_TANK_INFO;
--------------------------------------------------------------------------------

REPLACE VIEW  PROD_EDW_BASE_VIEWS.MBO_Tank_Values AS LOCKING ROW ACCESS
SELECT 	Ref_Prod_Location, 
				TANK_ID, 
				PROP,
				CAST(VALUE_DATE AS DATE) AS VALUE_DATE,  
				TNK_CASE, 
				TNK_VALUE, 
				Create_Dttm, 
				Last_Update_Dttm
FROM		PROD_EDW_BASE.MBO_TANK_VALUES;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.MBO_Trend_Limit
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.MBO_TREND_LIMIT;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Meter AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.METER
--------------------------------------------------------------------------------

REPLACE	VIEW prod_edw_base_VIEWS.Microload  AS 
	LOCKING ROW ACCESS
SELECT	
	CASE
		WHEN location = '285 Station' THEN 'WNR 285 Station'
		WHEN location = 'CR1 Station' THEN 'WNR CR1 Station'
		WHEN location = 'Jackrabbit Station' THEN 'Mason'
		WHEN location = 'Mason Station' THEN 'Mason'
		WHEN location = 'Mesquite Station' THEN 'Mesquite'
		WHEN location = 'Yucca Station' THEN 'Yucca'
		WHEN location = 'Lybrook Station' THEN 'Lybrook'
		WHEN location = 'Bisti Station' THEN 'Bisti'
		WHEN location = 'Bloomfield Station' THEN 'Bloomfield'
	END AS Ref_Prod_Location
	,'Bloomfield' AS Ref_Prod_Location_PI
	,Location, Time_Zone_Source, Start_Dttm, Start_Date, Start_Time
	,ID_Number, PIN_Number, Vol_Gross, Vol_Adjusted, Temp_Avg, Density_Avg
	,API_Avg, API_Corrected, BSW, GV_Totalizer, Driver, Company, Coriolis, End_Dttm
	,End_Date, End_Time, Skid, RT, Lease, Create_dttm, Last_update_dttm
FROM prod_edw_base.MICROLOAD;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_views.Microload_Assay  AS 
	LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.Microload_Assay;
--------------------------------------------------------------------------------

REPLACE	VIEW prod_edw_base_VIEWS.Microload_XREF  AS 
	LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.MICROLOAD_XREF;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_views.MOVEMENT
	AS LOCKING ROW ACCESS
	SELECT	Movement_ID, movement.Product_ID
		,product_code AS PPL_Product_Code, product_desc AS PPL_Product_Desc, product_type AS PPL_Product_Type
		,prod_group_subcat1 AS SubCat1, prod_group_subcat2 AS SubCat2
		,prod_group_subcat3 AS SubCat3, prod_group_subcat4 AS SubCat4
		,movement.Ref_Prod_Location, Movement_Code
		,Movement_Flags, Movement_Type, Movement_Status, Movement_Start
		,Movement_Start_Dttm, Movement_End, Movement_End_Dttm
		,Source_ID, tmpSource.Master_Code AS Source_Code
		,Destination_ID, tmpDestination.Master_Code AS Destination_Code
		,Customer_ID, Volume_Estimated, Weight_Estimated
		,Volume_Confirmed, Weight_Confirmed, Temperature, movement.Density, Volume_Received
		,Weight_Received, Tolerance, Ticket_Number, Comments, Meter_ID
		,Recon_Flag, Trans_Mode_ID, movement.Trans_dttm, movement.Trans_Update_dttm
		,movement.Create_dttm, movement.Last_update_dttm
	FROM prod_edw_base.MOVEMENT

	LEFT OUTER JOIN prod_edw_base.ref_product
	ON ref_product.ref_prod_location = movement.ref_prod_location
		AND ref_product.product_id = movement.product_id

	LEFT OUTER JOIN
		(
		SELECT master_id, master_code, ref_prod_location
		FROM prod_edw_base.master
		) AS tmpSource
	ON tmpSource.ref_prod_location = movement.ref_prod_location
		AND tmpSource.Master_ID = movement.Source_ID

	LEFT OUTER JOIN
		(
		SELECT master_id, master_code, ref_prod_location
		FROM prod_edw_base.master
		) AS tmpDestination
	ON tmpDestination.ref_prod_location = movement.ref_prod_location
		AND tmpDestination.Master_ID = movement.Destination_ID

	LEFT OUTER JOIN prod_edw_base.comm_prod_rep_hierarchy
	ON movement.ref_prod_location = comm_prod_rep_hierarchy.ref_prod_location
		AND movement.product_id = comm_prod_rep_hierarchy.product_id
		AND comm_prod_rep_hierarchy.report_desc = 'Refops'
;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Auto_Combo AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Auto_Combo;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Card_Type AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Card_Type;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Coupon AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Coupon;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Credit_Category AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Credit_Category;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Discount AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Discount;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Employee AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Employee;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Fuel_Grade AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Fuel_Grade;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Fuel_Product AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Fuel_Product;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Fuel_Sales_Item AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Fuel_Sales_Item;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Fuel_Tier AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Fuel_Tier;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Job AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Job;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Mop AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Mop;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Mop_Group AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Mop_Group;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Pack_Size AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Pack_Size;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Reason_Code AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Reason_Code;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Retail_Item AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Retail_Item;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Sales_Destination AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Sales_Destination;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Sales_Item AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Sales_Item;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Sales_Subcat AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Sales_Subcat;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Tax AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Tax;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_D_Tax_Rate AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_D_Tax_Rate;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Auto_Disc_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Auto_Disc_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Coupon_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Coupon_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Credit_Capture_Fail AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Credit_Capture_Fail;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Credit_Detail AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Credit_Detail;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_CType_Empl_Shift_Owner AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_CType_Empl_Shift_Owner;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Disc_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Disc_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Drawer_Event_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Drawer_Event_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Fuel_Product_Price AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Fuel_Product_Price;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Invalid_Barcodes AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Invalid_Barcodes;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Manufacturer_Coupon AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Manufacturer_Coupon;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Monies_MOP_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Monies_MOP_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_MOP_Del_Trans AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_MOP_Del_Trans;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_MOP_Trans AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_MOP_Trans;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_NonReset_Totals AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_NonReset_Totals;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Non_Sales_Fuel_Event AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Non_Sales_Fuel_Event;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_OperStats_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_OperStats_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Reduction AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Reduction;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Dest_Minute AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Dest_Minute;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Fuel_Del_ItemTrans AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Fuel_Del_ItemTrans;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Fuel_ItemTrans AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Fuel_ItemTrans;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Items AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Items;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Item_Del_Trans AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Item_Del_Trans;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Item_Dest_Min AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Item_Dest_Min;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Item_Trans AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Item_Trans;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Sales_Red_Item_Trans AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Sales_Red_Item_Trans;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Taxable_Sales_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Taxable_Sales_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_Tax_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_Tax_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_F_VirtOperStats_Empl_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_F_VirtOperStats_Empl_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Hier_Dist AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Hier_Dist;
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_views.NTR_Hier_Reg AS 
	LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.NTR_Hier_Reg;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Hier_Site AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Hier_Site;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_POS_Business_Day AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_POS_Business_Day;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_POS_Shift AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_POS_Shift;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Promotion AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Promotion;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Promotion_Ret_ItemMod_List AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Promotion_Ret_ItemMod_List;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Reason_Code AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Reason_Code;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Retail_Item AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Retail_Item;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Retail_Item_Group AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Retail_Item_Group;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Retail_Item_Modified AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Retail_Item_Modified;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Retail_Item_Restriction AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Retail_Item_Restriction;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Retail_Item_Restr_Group AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Retail_Item_Restr_Group;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Sales_Cat_Level1 AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Sales_Cat_Level1;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Sales_Cat_Level2 AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Sales_Cat_Level2;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Sales_Cat_Level3 AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Sales_Cat_Level3;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Site AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Site;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Site_Table_Balance AS 
                LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Site_Table_Balance;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Site_Table_Counts AS 
                LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Site_Table_Counts;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tax_Authority AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tax_Authority;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tax_Exempt AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tax_Exempt;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tax_Plan AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tax_Plan;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tax_Plan_Schedule AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tax_Plan_Schedule;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tax_Plan_Sched_TimeTable AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tax_Plan_Sched_TimeTable;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tax_Plan_Tax_List AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tax_Plan_Tax_List;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tax_Rate AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tax_Rate;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Tender_Type AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Tender_Type;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Trans_Credit_Detail AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Trans_Credit_Detail;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Trans_Detail AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Trans_Detail;
--------------------------------------------------------------------------------

Replace VIEW Prod_Edw_Base_views.NTR_Trans_Header AS 
	LOCKING ROW ACCESS
SELECT * FROM Prod_Edw_Base.NTR_Trans_Header;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Opis_Lp_Dcd ( input_Location_Desc, Pricing_Location, Pricing_Desc, Price_Code, Create_dttm,
		Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.OPIS_LP_DCD.Input_Location_Desc,
	    PROD_EDW_BASE.OPIS_LP_DCD.Pricing_Location,
	    PROD_EDW_BASE.OPIS_LP_DCD.Pricing_Desc,
	    PROD_EDW_BASE.OPIS_LP_DCD.Price_Code,
		PROD_EDW_BASE.OPIS_LP_DCD.Create_dttm,
		PROD_EDW_BASE.OPIS_LP_DCD.Last_Update_Dttm
		FROM PROD_EDW_BASE.OPIS_LP_DCD;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Opis_Lp_Raw ( Pricing_Desc,Pricing_Location,Pricing_Group,
		Price_Type,Price_Eff_Date,Price_Source,UOM,Price, Price_Code,Source_File_Name,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.OPIS_LP_RAW.Pricing_Desc,
	    PROD_EDW_BASE.OPIS_LP_RAW.Pricing_Location,
	    PROD_EDW_BASE.OPIS_LP_RAW.Pricing_Group,
		PROD_EDW_BASE.OPIS_LP_RAW.Price_Type,
		PROD_EDW_BASE.OPIS_LP_RAW.Price_Eff_Date,
		PROD_EDW_BASE.OPIS_LP_RAW.Price_Source,
		PROD_EDW_BASE.OPIS_LP_RAW.UOM,
		PROD_EDW_BASE.OPIS_LP_RAW.Price,
		PROD_EDW_BASE.OPIS_LP_RAW.Price_Code,
		PROD_EDW_BASE.OPIS_LP_RAW.Source_File_Name,
		PROD_EDW_BASE.OPIS_LP_RAW.Create_dttm,
		PROD_EDW_BASE.OPIS_LP_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.OPIS_LP_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Opis_Lp_Stg ( Pricing_Desc,Pricing_Location,Pricing_Group,
		Price_Type,Price_Eff_Date,Price_Source,UOM,Price, Price_Code, Source_File_Name,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.OPIS_LP_Stg.Pricing_Desc,
	    PROD_EDW_BASE.OPIS_LP_Stg.Pricing_Location,
	    PROD_EDW_BASE.OPIS_LP_Stg.Pricing_Group,
		PROD_EDW_BASE.OPIS_LP_Stg.Price_Type,
		PROD_EDW_BASE.OPIS_LP_Stg.Price_Eff_Date,
		PROD_EDW_BASE.OPIS_LP_Stg.Price_Source,
		PROD_EDW_BASE.OPIS_LP_Stg.UOM,
		PROD_EDW_BASE.OPIS_LP_Stg.Price,
		PROD_EDW_BASE.OPIS_LP_Stg.Price_Code,
		PROD_EDW_BASE.OPIS_LP_Stg.Source_File_Name,
		PROD_EDW_BASE.OPIS_LP_Stg.Create_dttm,
		PROD_EDW_BASE.OPIS_LP_Stg.Last_Update_Dttm
		FROM PROD_EDW_BASE.OPIS_LP_Stg;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.PI (Trans_Source, Ref_Prod_Location, Trans_Timestamp
	,Trans_Date, Trans_Hour, Trans_Min, Tag_ID, Tag_Value, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Trans_Source, Ref_Prod_Location
	,CAST(CAST(trans_date AS VARCHAR(10))||' '||CAST(trans_hour AS FORMAT'9(2)')||':'||CAST(trans_min AS FORMAT'9(2)')||':00' AS TIMESTAMP(0))
	,Trans_Date, Trans_Hour
	,Trans_Min, Tag_ID, Tag_Value, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.PI;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline  ( Source, Ref_prod_location, Product_id, eff_date, TicketNumber, TicketDate, TicketTime, TransactionType, PipelineNumber, RefNumber, Carrier,Shipper, ShipToFromFlag, ShipToFrom,
DestLoc, StartDate, StartTime, StopDate, StopTime, ProductNumber, Product, NetVolume, UOM, Create_dttm, Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT 
	CASE When Ref_Prod_Location = 'KinderMorgan' then 'KM' End as Source,
	Ref_prod_location,
	Product_id,
	eff_date,
	TicketNumber,
	TicketDate,
	TicketTime,
	TransactionType,
	PipelineNumber,
	RefNumber,
	Carrier,
	Shipper,
	ShipToFromFlag,
	ShipToFrom,
	DestLoc,
	StartDate,
	StartTime,
	StopDate,
	StopTime,
	ProductNumber,
	Product,
	NetVolume,
	UOM,
	Create_dttm,
	Last_update_dttm
	FROM PROD_EDW_BASE.PIPELINE;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.PIPELINECR_SCHED 
	AS LOCKING ROW
	ACCESS
SELECT	PipelineCR_Sched_MPL_Raw.Ref_Prod_Location, Eff_Date,
	NULL AS "HEADER"
	,'111' AS "APPLICATION_ID"
	,BatchNum_MPL AS "MOVEMENT_ID"
	,tmpPipelinecr_sched_dcd1.Crude_Code as "CRUDE"
	,BatchNum_MPL AS "BATCH"
	,BatchNum_Enbridge AS "DESCRIPTION"
	,'MPL Schedule' AS "COMMENTS"
	,Rate AS "RATE"
	,Volume AS "QUANTITY"
	,StartDateTime AS "STARTDATETIME"
	,CAST(StartDateTime AS DATE) AS "STARTDATE"
	,StopDateTime AS "STOPDATETIME"
	,'MNPL' AS "RECEIVE_VIA"
	,NULL AS "PIPELINE"
	,Orion_Code1 AS "CODE1", Comp1 AS "COMPOSITION1"
	,Orion_Code2 AS "CODE2", Comp2 AS "COMPOSITION2"
	,Orion_Code3 AS "CODE3", Comp3 AS "COMPOSITION3"
	,Orion_Code4 AS "CODE4", Comp4 AS "COMPOSITION4"
	,Orion_Code5 AS "CODE5", Comp5 AS "COMPOSITION5"
	,NULL AS "T201"
	,CASE WHEN tmpPipelinecr_sched_dcd1.Crude_Code = 'SR' THEN VOLUME END AS  "T202"
	,NULL AS "T204"
	,CASE WHEN tmpPipelinecr_sched_dcd1.Crude_Code = 'SYN' THEN VOLUME END AS  "T205"
	,NULL AS "T206"
	,CASE WHEN tmpPipelinecr_sched_dcd1.Crude_Code = 'SWT' THEN VOLUME END AS  "T207"
	,NULL AS "T208"
	,NULL AS "T209"
FROM	PROD_EDW_BASE_views.Pipelinecr_Sched_MPL_Raw
LEFT OUTER JOIN 
	(
	SELECT DISTINCT Ref_Prod_Location, MNPL_Code, Crude_Code, orion_code AS Orion_Code1
	FROM PROD_EDW_BASE_views.Pipelinecr_sched_dcd
	where mnpl_code is not null
	) as tmpPipelinecr_sched_dcd1
ON Pipelinecr_Sched_MPL_Raw.Ref_Prod_Location = tmpPipelinecr_Sched_Dcd1.Ref_Prod_Location
	AND Pipelinecr_Sched_MPL_Raw.Code1 = tmpPipelinecr_Sched_Dcd1.MNPL_Code
	
LEFT OUTER JOIN 
	(
	SELECT DISTINCT Ref_Prod_Location, MNPL_Code, Crude_Code, orion_code AS Orion_Code2
	FROM PROD_EDW_BASE_views.Pipelinecr_sched_dcd
	where mnpl_code is not null
	) as tmpPipelinecr_sched_dcd2
ON Pipelinecr_Sched_MPL_Raw.Ref_Prod_Location = tmpPipelinecr_Sched_Dcd2.Ref_Prod_Location
	AND Pipelinecr_Sched_MPL_Raw.Code2 = tmpPipelinecr_Sched_Dcd2.MNPL_Code

LEFT OUTER JOIN 
	(
	SELECT DISTINCT Ref_Prod_Location, MNPL_Code, Crude_Code, orion_code AS Orion_Code3
	FROM PROD_EDW_BASE_views.Pipelinecr_sched_dcd
	where mnpl_code is not null
	) as tmpPipelinecr_sched_dcd3
ON Pipelinecr_Sched_MPL_Raw.Ref_Prod_Location = tmpPipelinecr_Sched_Dcd3.Ref_Prod_Location
	AND Pipelinecr_Sched_MPL_Raw.Code3 = tmpPipelinecr_Sched_Dcd3.MNPL_Code

LEFT OUTER JOIN 
	(
	SELECT DISTINCT Ref_Prod_Location, MNPL_Code, Crude_Code, orion_code AS Orion_Code4
	FROM PROD_EDW_BASE_views.Pipelinecr_sched_dcd
	where mnpl_code is not null
	) as tmpPipelinecr_sched_dcd4
ON Pipelinecr_Sched_MPL_Raw.Ref_Prod_Location = tmpPipelinecr_Sched_Dcd4.Ref_Prod_Location
	AND Pipelinecr_Sched_MPL_Raw.Code4 = tmpPipelinecr_Sched_Dcd4.MNPL_Code
	
LEFT OUTER JOIN 
	(
	SELECT DISTINCT Ref_Prod_Location, MNPL_Code, Crude_Code, orion_code AS Orion_Code5
	FROM PROD_EDW_BASE_views.Pipelinecr_sched_dcd
	where mnpl_code is not null
	) as tmpPipelinecr_sched_dcd5
ON Pipelinecr_Sched_MPL_Raw.Ref_Prod_Location = tmpPipelinecr_Sched_Dcd5.Ref_Prod_Location
	AND Pipelinecr_Sched_MPL_Raw.Code5 = tmpPipelinecr_Sched_Dcd5.MNPL_Code
;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipelinecr_Sched_Dcd AS 
	LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.Pipelinecr_Sched_Dcd;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipelinecr_Sched_MPL_Raw AS 
	LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.Pipelinecr_Sched_MPL_Raw;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipelinecr_Sched_MPL_Stg AS 
	LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.Pipelinecr_Sched_MPL_STG;
--------------------------------------------------------------------------------

Create	VIEW prod_edw_base_views.Pipelinesched  (Ref_prod_location, Pipeline_id, Batch_id, Eff_Date, Eff_time, Customer, ProductName, ProductNumber, BatchCycle, Product, Tank,	Side, Line, Total, TankApproved, ShipmentFinished, Create_dttm, Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT	
	Ref_prod_location, 
	Pipeline_id, 
	Batch_id, 
	Eff_Date, 
	Eff_time,
	Customer, 
	ProductName, 
	ProductNumber, 
	BatchCycle, 
	Product, 
	Tank,
	Side, 
	Line, 
	Total, 
	TankApproved, 
	ShipmentFinished, 
	Create_dttm,
	Last_update_dttm
FROM 	prod_edw_base.PIPELINESCHED
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.Pipeline_Dcd (Product_ID, Product_Name, Last_Update_Dttm,	Create_Dttm
 	) AS 
	LOCKING ROW
	ACCESS
	SELECT		
		PROD_EDW_BASE.Pipeline_Dcd.Product_ID,
		PROD_EDW_BASE.Pipeline_Dcd.Product_Name,
		PROD_EDW_BASE.Pipeline_Dcd.Last_Update_Dttm,
		PROD_EDW_BASE.Pipeline_Dcd.Create_Dttm
	FROM PROD_EDW_BASE.Pipeline_Dcd;
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_views.PIPELINE_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS

SELECT 
CAST ('PIPELINE SHIPMENTS' AS VARCHAR(20))  AS TABLE_NAME
,CAST (ref_prod_location AS VARCHAR(20))  AS SOURCE_NAME
,CAST ('NONE' AS VARCHAR(20))  AS LOCATION
,EFF_DATE AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.PIPELINE
GROUP BY 1,2,3,4

UNION ALL

SELECT 
CAST ('PIPELINE NOMINATIONS' AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE AS VARCHAR(20))  AS SOURCE_NAME
,CAST ('MAIN' AS VARCHAR(20))  AS LOCATION
,NominationsScheduleStartDate AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.PIPELINE_KM_NOM_MAIN_RAW
GROUP BY 1,2,3,4

UNION ALL

SELECT 
CAST ('PIPELINE SCHEDULE' AS VARCHAR(20))  AS TABLE_NAME
,CAST (Ref_Prod_Location AS VARCHAR(20))  AS SOURCE_NAME
,CAST (SUBSTR(Pipeline_ID,16,6) AS VARCHAR(20))  AS LOCATION
,Eff_Date AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.PIPELINE_SCHED
GROUP BY 1,2,3,4

UNION ALL

SELECT	CAST('KM WINK RECEIPTS' AS VARCHAR(20)) AS TABLE_NAME, 
	CAST('KinderMorgan' AS VARCHAR(20)) AS Source_Name, 
	CAST('WINK' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_km_receipts
GROUP BY 1,2,3,4

UNION ALL

SELECT	CAST('KM WINK FWDSHIPMENTS' AS VARCHAR(20)) AS TABLE_NAME, 
	CAST('KinderMorgan' AS VARCHAR(20)) AS Source_Name, 
	CAST('WINK' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.aps_km_fwdshipments
GROUP BY 1,2,3,4;
--------------------------------------------------------------------------------

Replace view PROD_EDW_BASE_VIEWS.Pipeline_KM_Nom_Main_Raw  as
locking row access
select	  FileName,
			  'KM' as Source,
		      PurposeCode,
		      ReferenceID,
		      ScheduleType,
		      ScheduleQuantity,
		      NominationsScheduleStartDate,
		      NominationsScheduleEndDate,
		      NominationsScheduleIssueDate,
		      Company1Code,
		      Company1Name,
		      Company2Code,
		      Company2Name,
		      PipelineNumber,
		      ProductQualifier,
		      ProductType,
		      ProductID,
		      BatchIdentification,
		      UOM,
		      Reference1Type,
		      Reference1,
		      Reference2Type,
		      Reference2,
		      Company3Code,
		      Company3Name,
		      Company3ID,
		      Company4Code,
		      Company4Name,
		      Company4ID,
		      Volume,
		      ForecastQualifier,
		      TimingQualifier,
		      OriginDeliveryNominationDate,
		      DateType,
		      Nomination_Time,
		      create_dttm,
		      last_update_dttm
from 	PROD_EDW_BASE.PIPELINE_KM_NOM_MAIN_RAW;
--------------------------------------------------------------------------------

Replace view PROD_EDW_BASE_VIEWS.Pipeline_KM_Nom_Main_Stg  (	Filename,Source, PurposeCode, ReferenceID, ScheduleType, ScheduleQuantity,
		NominationsScheduleStartDate, NominationsScheduleEndDate, NominationsScheduleIssueDate,
		Company1Code, Company1Name, Company2Code, Company2Name, PipelineNumber,
		ProductQualifier, ProductType, ProductID, BatchIdentification,
		UOM, Reference1Type, Reference1, Reference2Type, Reference2,
		Company3Code, Company3Name, Company3ID, Company4Code, Company4Name,
		Company4ID, Volume, ForecastQualifier, TimingQualifier, OriginDeliveryNominationDate,
		DateType, Nomination_Time, create_dttm, last_update_dttm
) as
locking row access
SELECT Filename,'KM' as Source, PurposeCode, ReferenceID, ScheduleType, ScheduleQuantity,
		NominationsScheduleStartDate, NominationsScheduleEndDate, NominationsScheduleIssueDate,
		Company1Code, Company1Name, Company2Code, Company2Name, PipelineNumber,
		ProductQualifier, ProductType, ProductID, BatchIdentification,
		UOM, Reference1Type, Reference1, Reference2Type, Reference2,
		Company3Code, Company3Name, Company3ID, Company4Code, Company4Name,
		Company4ID, Volume, ForecastQualifier, TimingQualifier, OriginDeliveryNominationDate,
		DateType, Nomination_Time, create_dttm, last_update_dttm
FROM PROD_EDW_BASE.Pipeline_KM_Nom_Main_Stg;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.Pipeline_Km_Raw( TicketNumber, 
	TicketDate, TicketTime, TransactionType, PipelineNumber, RefNumber, Carrier, CarrierCode, Shipper, ShipperCode, 
	ShipToFromFlag, ShipToFrom, ShipToFromCode, DestLocFlag, DestLoc, DestLocCode, StartDate, StartTime, StopDate, StopTime, 
	ProductNumber, Product, TankNumber, NetVolume, UOM, GrossVolume, UOM2, Gravity, GravityUOM, Temperature, TemperatureUOM, 
	TemperatureFactor, DistributedMeterFactor, CompositeCorrectedFactor, Additive, AdditiveUOM, MeterQuality, Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT TicketNumber, 
	TicketDate, TicketTime, TransactionType, PipelineNumber, RefNumber, Carrier, CarrierCode, Shipper, ShipperCode, 
	ShipToFromFlag, ShipToFrom, ShipToFromCode, DestLocFlag, DestLoc, DestLocCode, StartDate, StartTime, StopDate, StopTime, 
	ProductNumber, Product, TankNumber, NetVolume, UOM, GrossVolume, UOM2, Gravity, GravityUOM, Temperature, TemperatureUOM, 
	TemperatureFactor, DistributedMeterFactor, CompositeCorrectedFactor, Additive, AdditiveUOM, MeterQuality, Create_dttm,Last_Update_Dttm
	FROM PROD_EDW_BASE.PIPELINE_KM_RAW;
--------------------------------------------------------------------------------

--****************************************
REPLACE VIEW prod_edw_base_views.PIPELINE_KM_RECEIPTS_ELPASO AS LOCKING ROW ACCESS
SELECT pi.trans_date, pi.trans_hour, pi.trans_min, CAST(tag_value AS INTEGER) AS Volume_Omni
	,CrudeType_Omni
	,CASE 
		WHEN CrudeType_Omni = 1 THEN 'Wasson Sour'
		WHEN CrudeType_Omni = 2 THEN 'Sweet'
		WHEN CrudeType_Omni = 3 THEN 'Yates Sour'
	END AS CrudeType_Omni_Desc
	,CASE 
		WHEN tag_value - SUM(tag_value) OVER (ORDER BY pi.trans_date,pi.trans_hour, pi.trans_min
			ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) < -500 THEN 'START'
		WHEN tag_value - SUM(tag_value) OVER (ORDER BY pi.trans_date,pi.trans_hour, pi.trans_min
			ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) > 500 THEN 'END'
		ELSE NULL
	END AS Batch_Marker
-- *** Assign flow rate by subtracting current row from prevous row
	,Volume_Accumulator - SUM(Volume_Accumulator) OVER (ORDER BY pi.trans_date, pi.trans_hour, pi.trans_min ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS Flow_Rate
	,Volume_Accumulator
	,API_Omni
,CAST(CASE 
		WHEN Batch_Marker = 'END' THEN Volume_Accumulator + Flow_Rate
		ELSE Volume_Accumulator
	END AS INTEGER) AS Volume_Accumulator_Corr
FROM prod_edw_base_views.pi
INNER JOIN
	(
	SELECT trans_date, trans_hour, trans_min
		,CAST(MAX(CASE WHEN tag_id = '61AM700' THEN tag_value END) AS BIGINT) AS Volume_Accumulator
		,CAST(MAX(CASE WHEN tag_id = '61RP500' THEN tag_value END) AS BIGINT) AS CrudeType_Omni
		,CAST(MAX(CASE WHEN tag_id = '61DA500' THEN tag_value END) AS DECIMAL(10,2)) AS API_Omni
	FROM prod_edw_base_views.pi
	WHERE tag_id IN ('61AM700','61RP500','61DA500')
		AND ref_prod_location = 'El Paso Refinery'
	GROUP BY trans_date, trans_hour, trans_min
	) AS tmpAccumulator
ON pi.trans_date = tmpAccumulator.trans_date
	AND pi.trans_hour = tmpAccumulator.trans_hour
	AND pi.trans_min = tmpAccumulator.trans_min
WHERE tag_id = '61CI901'
	--AND pi.trans_date BETWEEN '2016/09/01' AND '2016/09/04'
	AND ref_prod_location = 'El Paso Refinery'
--ORDER BY pi.trans_date DESC, pi.trans_hour DESC, pi.trans_min DESC
;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.Pipeline_Km_Stg( TicketNumber, 
	TicketDate, TicketTime, TransactionType, PipelineNumber, RefNumber, Carrier, CarrierCode, Shipper, ShipperCode, 
	ShipToFromFlag, ShipToFrom, ShipToFromCode, DestLocFlag, DestLoc, DestLocCode, StartDate, StartTime, StopDate, StopTime, 
	ProductNumber, Product, TankNumber, NetVolume, UOM, GrossVolume, UOM2, Gravity, GravityUOM, Temperature, TemperatureUOM, 
	TemperatureFactor, DistributedMeterFactor, CompositeCorrectedFactor, Additive, AdditiveUOM, MeterQuality, Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT TicketNumber, 
	TicketDate, TicketTime, TransactionType, PipelineNumber, RefNumber, Carrier, CarrierCode, Shipper, ShipperCode, 
	ShipToFromFlag, ShipToFrom, ShipToFromCode, DestLocFlag, DestLoc, DestLocCode, StartDate, StartTime, StopDate, StopTime, 
	ProductNumber, Product, TankNumber, NetVolume, UOM, GrossVolume, UOM2, Gravity, GravityUOM, Temperature, TemperatureUOM, 
	TemperatureFactor, DistributedMeterFactor, CompositeCorrectedFactor, Additive, AdditiveUOM, MeterQuality, Create_dttm,Last_Update_Dttm
	FROM PROD_EDW_BASE.PIPELINE_KM_STG;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.PIPELINE_SCHED (Ref_Prod_Location, Pipeline_ID, Eff_Date, Application_ID, Movement_ID, Quantity, StartDateTime, StartDate
		,StopDateTime, Product, Product_code, Product_Name, Source_Tank, Shipment_Type, Rate, Ship_Via, Description, Comments
		,Create_dttm, Last_update_dttm)
	AS LOCKING ROW
	ACCESS
SELECT	Ref_Prod_Location, Pipeline_ID, Eff_Date, Application_ID, Movement_ID, Quantity, StartDateTime, CAST(StartDateTime AS DATE) AS StartDate
		,CASE WHEN StopDateTime IS NULL 
			THEN
				(StartDateTime + CAST(quantity/rate AS INTERVAL HOUR) 
					+ CAST(CAST(CAST(quantity AS DECIMAL(10,2))/CAST(rate AS DECIMAL(10,2))*60 AS INTEGER)-(quantity/rate*60) AS INTERVAL MINUTE))
			ELSE StopDateTime
		END AS StopDateTime,		Product_Code, 	Product, Product_Name, Source_Tank, Shipment_Type, Rate, Ship_Via
		,CASE WHEN application_id = 1 
			THEN SUBSTR(product,1,1) 
			ELSE product 
		END AS "Description"
		,Comments
		,Create_dttm, Last_update_dttm
FROM PROD_EDW_BASE.Pipeline_Sched;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline_Sched_DCD AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Pipeline_Sched_DCD;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline_Sched_KM_Raw AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Pipeline_Sched_KM_Raw;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline_Sched_KM_Stg AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Pipeline_Sched_KM_Stg;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline_Sched_MagAlb_Raw AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Pipeline_Sched_MagAlb_Raw;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline_Sched_MagAlb_Stg AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Pipeline_Sched_MagAlb_Stg;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline_Sched_MagJz_Raw AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Pipeline_Sched_MagJz_Raw;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Pipeline_Sched_MagJz_Stg AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.Pipeline_Sched_MagJz_Stg;
--------------------------------------------------------------------------------

REPLACE VIEW prod_edw_base_VIEWS.PISTG_to_PI_XForm
	AS LOCKING ROW ACCESS

SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag1_ID, Tag1_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag1_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag2_ID, Tag2_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag2_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag3_ID, Tag3_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag3_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag4_ID, Tag4_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag4_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag5_ID, Tag5_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag5_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag6_ID, Tag6_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag6_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag7_ID, Tag7_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag7_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag8_ID, Tag8_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag8_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag9_ID, Tag9_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag9_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag10_ID, Tag10_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag10_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag11_ID, Tag11_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag11_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag12_ID, Tag12_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag12_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag13_ID, Tag13_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag13_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag14_ID, Tag14_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag14_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag15_ID, Tag15_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag15_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag16_ID, Tag16_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag16_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag17_ID, Tag17_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag17_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag18_ID, Tag18_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag18_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag19_ID, Tag19_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag19_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag20_ID, Tag20_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag20_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag21_ID, Tag21_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag21_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag22_ID, Tag22_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag22_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag23_ID, Tag23_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag23_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag24_ID, Tag24_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag24_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag25_ID, Tag25_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag25_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag26_ID, Tag26_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag26_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag27_ID, Tag27_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag27_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag28_ID, Tag28_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag28_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag29_ID, Tag29_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag29_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag30_ID, Tag30_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag30_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag31_ID, Tag31_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag31_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag32_ID, Tag32_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag32_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag33_ID, Tag33_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag33_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag34_ID, Tag34_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag34_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag35_ID, Tag35_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag35_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag36_ID, Tag36_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag36_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag37_ID, Tag37_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag37_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag38_ID, Tag38_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag38_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag39_ID, Tag39_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag39_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag40_ID, Tag40_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag40_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag41_ID, Tag41_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag41_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag42_ID, Tag42_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag42_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag43_ID, Tag43_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag43_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag44_ID, Tag44_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag44_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag45_ID, Tag45_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag45_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag46_ID, Tag46_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag46_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag47_ID, Tag47_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag47_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag48_ID, Tag48_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag48_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag49_ID, Tag49_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag49_Id <> 'DUMMY'
UNION ALL
SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag50_ID, Tag50_Value, CAST(NULL AS TIMESTAMP(0)) AS Create_Dttm, CURRENT_TIMESTAMP(0) AS Last_Update_Dttm
FROM prod_edw_base_views.PI_Stg
WHERE Tag50_Id <> 'DUMMY';
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.PI_Audit  AS 
	LOCKING ROW
	ACCESS
	SELECT	*
FROM	PROD_EDW_BASE.PI_AUDIT
	;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.PI_CORRECTED AS 
	LOCKING ROW
	ACCESS

SELECT	PI.Ref_Prod_Location, PI.Trans_Source,
		PI.Trans_Date, PI.Trans_Hour,
		PI.Trans_Min, PI.Tag_ID, 
		CASE WHEN Audit_Person IS NOT NULL
			THEN Audit_Value
			ELSE Tag_Value
		END as Tag_Value,
		Tag_Value AS Tag_Value_Raw,
		Audit_Date AS Audit_Date,
		Audit_Value AS Tag_Value_Audit,
		Audit_Person, Audit_Reason
		
FROM	prod_edw_base_views.PI
LEFT OUTER JOIN prod_edw_base_views.PI_Audit
	ON PI.Ref_Prod_Location = PI_Audit.Ref_Prod_Location
		AND PI.Tag_ID = PI_Audit.Tag_ID
		AND PI.Trans_Date = PI_Audit.Trans_Date
		AND PI.Trans_Hour = PI_Audit.Trans_Hour
		AND PI.Trans_Min = PI_Audit.Trans_Min
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.PI_DAY_AVG ( Ref_Prod_Location, Trans_Source, Trans_Date,
	Tag_ID, DayTagAvg) AS 
	LOCKING ROW
	ACCESS
	SELECT Ref_Prod_Location, Trans_Source, Trans_Date, Tag_ID, avg(Tag_Value)
	FROM	prod_edw_base_views.PI
	GROUP BY Ref_Prod_Location, Trans_Source, Trans_Date, Tag_ID;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.PI_Desc_Units (TRef_Prod_Location, Tag_ID, Tag_Desc, Tag_Units, Create_dttm,
		Last_Update_Dttm) AS 
	LOCKING ROW
	ACCESS
	SELECT	Ref_Prod_Location, Tag_ID, Tag_Desc, Tag_Units, Create_dttm,
		Last_Update_Dttm
FROM	PROD_EDW_BASE.PI_DESC_UNITS;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.PI_HOUR_AVG ( Ref_Prod_Location, Trans_Source, Trans_Date,
	Trans_Hour, Tag_ID, HourlyTagAvg) AS 
	LOCKING ROW
	ACCESS
	SELECT Ref_Prod_Location, Trans_Source, Trans_Date, Trans_Hour, Tag_ID, avg(Tag_Value)
	FROM	prod_edw_base_views.PI
	GROUP BY Ref_Prod_Location, Trans_Source, Trans_Date, Trans_Hour, Tag_ID;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.PI_Material AS
LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PI_Material;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.PI_NEW (Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag_ID, Tag_Value, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag_ID, Tag_Value, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.PI_NEW
	;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.PI_Raw (Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag1_ID, Tag1_Value, Tag2_ID, Tag2_Value, Tag3_ID,
		Tag3_Value, Tag4_ID, Tag4_Value, Tag5_ID, Tag5_Value, Tag6_ID,
		Tag6_Value, Tag7_ID, Tag7_Value, Tag8_ID, Tag8_Value, Tag9_ID,
		Tag9_Value, Tag10_ID, Tag10_Value, Tag11_ID, Tag11_Value, Tag12_ID,
		Tag12_Value, Tag13_ID, Tag13_Value, Tag14_ID, Tag14_Value, Tag15_ID,
		Tag15_Value, Tag16_ID, Tag16_Value, Tag17_ID, Tag17_Value, Tag18_ID,
		Tag18_Value, Tag19_ID, Tag19_Value, Tag20_ID, Tag20_Value, Tag21_ID,
		Tag21_Value, Tag22_ID, Tag22_Value, Tag23_ID, Tag23_Value, Tag24_ID,
		Tag24_Value, Tag25_ID, Tag25_Value, Tag26_ID, Tag26_Value, Tag27_ID,
		Tag27_Value, Tag28_ID, Tag28_Value, Tag29_ID, Tag29_Value, Tag30_ID,
		Tag30_Value, Tag31_ID, Tag31_Value, Tag32_ID, Tag32_Value, Tag33_ID,
		Tag33_Value, Tag34_ID, Tag34_Value, Tag35_ID, Tag35_Value, Tag36_ID,
		Tag36_Value, Tag37_ID, Tag37_Value, Tag38_ID, Tag38_Value, Tag39_ID,
		Tag39_Value, Tag40_ID, Tag40_Value, Tag41_ID, Tag41_Value, Tag42_ID,
		Tag42_Value, Tag43_ID, Tag43_Value, Tag44_ID, Tag44_Value, Tag45_ID,
		Tag45_Value, Tag46_ID, Tag46_Value, Tag47_ID, Tag47_Value, Tag48_ID,
		Tag48_Value, Tag49_ID, Tag49_Value, Tag50_ID, Tag50_Value, Create_Dttm,
		Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag1_ID, Tag1_Value, Tag2_ID, Tag2_Value, Tag3_ID,
		Tag3_Value, Tag4_ID, Tag4_Value, Tag5_ID, Tag5_Value, Tag6_ID,
		Tag6_Value, Tag7_ID, Tag7_Value, Tag8_ID, Tag8_Value, Tag9_ID,
		Tag9_Value, Tag10_ID, Tag10_Value, Tag11_ID, Tag11_Value, Tag12_ID,
		Tag12_Value, Tag13_ID, Tag13_Value, Tag14_ID, Tag14_Value, Tag15_ID,
		Tag15_Value, Tag16_ID, Tag16_Value, Tag17_ID, Tag17_Value, Tag18_ID,
		Tag18_Value, Tag19_ID, Tag19_Value, Tag20_ID, Tag20_Value, Tag21_ID,
		Tag21_Value, Tag22_ID, Tag22_Value, Tag23_ID, Tag23_Value, Tag24_ID,
		Tag24_Value, Tag25_ID, Tag25_Value, Tag26_ID, Tag26_Value, Tag27_ID,
		Tag27_Value, Tag28_ID, Tag28_Value, Tag29_ID, Tag29_Value, Tag30_ID,
		Tag30_Value, Tag31_ID, Tag31_Value, Tag32_ID, Tag32_Value, Tag33_ID,
		Tag33_Value, Tag34_ID, Tag34_Value, Tag35_ID, Tag35_Value, Tag36_ID,
		Tag36_Value, Tag37_ID, Tag37_Value, Tag38_ID, Tag38_Value, Tag39_ID,
		Tag39_Value, Tag40_ID, Tag40_Value, Tag41_ID, Tag41_Value, Tag42_ID,
		Tag42_Value, Tag43_ID, Tag43_Value, Tag44_ID, Tag44_Value, Tag45_ID,
		Tag45_Value, Tag46_ID, Tag46_Value, Tag47_ID, Tag47_Value, Tag48_ID,
		Tag48_Value, Tag49_ID, Tag49_Value, Tag50_ID, Tag50_Value, Create_Dttm,
		Last_Update_Dttm
FROM	PROD_EDW_BASE.PI_RAW
	;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.PI_Satellite 
	AS 
	LOCKING ROW
	ACCESS
	SELECT	* FROM	PROD_EDW_BASE.PI_SATELLITE;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.PI_Satellite_Xref 
	AS 
	LOCKING ROW
	ACCESS
	SELECT	* FROM	PROD_EDW_BASE.PI_SATELLITE_XREF;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.PI_Stg (Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag1_ID, Tag1_Value, Tag2_ID, Tag2_Value, Tag3_ID,
		Tag3_Value, Tag4_ID, Tag4_Value, Tag5_ID, Tag5_Value, Tag6_ID,
		Tag6_Value, Tag7_ID, Tag7_Value, Tag8_ID, Tag8_Value, Tag9_ID,
		Tag9_Value, Tag10_ID, Tag10_Value, Tag11_ID, Tag11_Value, Tag12_ID,
		Tag12_Value, Tag13_ID, Tag13_Value, Tag14_ID, Tag14_Value, Tag15_ID,
		Tag15_Value, Tag16_ID, Tag16_Value, Tag17_ID, Tag17_Value, Tag18_ID,
		Tag18_Value, Tag19_ID, Tag19_Value, Tag20_ID, Tag20_Value, Tag21_ID,
		Tag21_Value, Tag22_ID, Tag22_Value, Tag23_ID, Tag23_Value, Tag24_ID,
		Tag24_Value, Tag25_ID, Tag25_Value, Tag26_ID, Tag26_Value, Tag27_ID,
		Tag27_Value, Tag28_ID, Tag28_Value, Tag29_ID, Tag29_Value, Tag30_ID,
		Tag30_Value, Tag31_ID, Tag31_Value, Tag32_ID, Tag32_Value, Tag33_ID,
		Tag33_Value, Tag34_ID, Tag34_Value, Tag35_ID, Tag35_Value, Tag36_ID,
		Tag36_Value, Tag37_ID, Tag37_Value, Tag38_ID, Tag38_Value, Tag39_ID,
		Tag39_Value, Tag40_ID, Tag40_Value, Tag41_ID, Tag41_Value, Tag42_ID,
		Tag42_Value, Tag43_ID, Tag43_Value, Tag44_ID, Tag44_Value, Tag45_ID,
		Tag45_Value, Tag46_ID, Tag46_Value, Tag47_ID, Tag47_Value, Tag48_ID,
		Tag48_Value, Tag49_ID, Tag49_Value, Tag50_ID, Tag50_Value, Create_Dttm,
		Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Trans_Source, Ref_Prod_Location, Trans_Date, Trans_Hour,
		Trans_Min, Tag1_ID, Tag1_Value, Tag2_ID, Tag2_Value, Tag3_ID,
		Tag3_Value, Tag4_ID, Tag4_Value, Tag5_ID, Tag5_Value, Tag6_ID,
		Tag6_Value, Tag7_ID, Tag7_Value, Tag8_ID, Tag8_Value, Tag9_ID,
		Tag9_Value, Tag10_ID, Tag10_Value, Tag11_ID, Tag11_Value, Tag12_ID,
		Tag12_Value, Tag13_ID, Tag13_Value, Tag14_ID, Tag14_Value, Tag15_ID,
		Tag15_Value, Tag16_ID, Tag16_Value, Tag17_ID, Tag17_Value, Tag18_ID,
		Tag18_Value, Tag19_ID, Tag19_Value, Tag20_ID, Tag20_Value, Tag21_ID,
		Tag21_Value, Tag22_ID, Tag22_Value, Tag23_ID, Tag23_Value, Tag24_ID,
		Tag24_Value, Tag25_ID, Tag25_Value, Tag26_ID, Tag26_Value, Tag27_ID,
		Tag27_Value, Tag28_ID, Tag28_Value, Tag29_ID, Tag29_Value, Tag30_ID,
		Tag30_Value, Tag31_ID, Tag31_Value, Tag32_ID, Tag32_Value, Tag33_ID,
		Tag33_Value, Tag34_ID, Tag34_Value, Tag35_ID, Tag35_Value, Tag36_ID,
		Tag36_Value, Tag37_ID, Tag37_Value, Tag38_ID, Tag38_Value, Tag39_ID,
		Tag39_Value, Tag40_ID, Tag40_Value, Tag41_ID, Tag41_Value, Tag42_ID,
		Tag42_Value, Tag43_ID, Tag43_Value, Tag44_ID, Tag44_Value, Tag45_ID,
		Tag45_Value, Tag46_ID, Tag46_Value, Tag47_ID, Tag47_Value, Tag48_ID,
		Tag48_Value, Tag49_ID, Tag49_Value, Tag50_ID, Tag50_Value, Create_Dttm,
		Last_Update_Dttm
FROM	PROD_EDW_BASE.PI_STG
	;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.PPL_PROD_AUDIT ( ref_prod_location, product_id, product_desc ) AS 
	LOCKING ROW
	ACCESS
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Bloomfield'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Bloomfield')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Phoenix'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Phoenix')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Yorktown'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Yorktown')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Flagstaff'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Flagstaff')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Gallup'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Gallup')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'El Paso Refinery'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'El Paso Refinery')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'El Paso Asphalt'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'El Paso Asphalt')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Tucson'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Tucson')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Albuquerque Asphalt'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Albuquerque Asphalt')
union all
Select ref_prod_location, product_id, product_desc
from PROD_EDW_base_views.ref_product
Where ref_prod_location = 'Albuquerque Terminal'
and product_id < 10000
and product_id not in 
                (SELECT               Product_ID
                FROM    PROD_EDW_base_views.Ref_Product_Audit
                where ref_prod_location = 'Albuquerque Terminal');
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Argus_Category_Dcd ( Code,
		Display_Name,Last_Update_Dttm,Create_Dttm,Category ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.PRICE_ARGUS_CATEGORY_DCD.Code,PROD_EDW_BASE.PRICE_ARGUS_CATEGORY_DCD.Display_Name,
		PROD_EDW_BASE.PRICE_ARGUS_CATEGORY_DCD.Last_Update_Dttm,PROD_EDW_BASE.PRICE_ARGUS_CATEGORY_DCD.Create_Dttm,
		PROD_EDW_BASE.PRICE_ARGUS_CATEGORY_DCD.Category
		FROM PROD_EDW_BASE.PRICE_ARGUS_CATEGORY_DCD;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Argus_Code_Dcd ( Code,Display_Name,
		Delivery_Mode,Unit,Frequency,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD.Code,PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD.Display_Name,
		PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD.Delivery_Mode,PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD.Unit,
		PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD.Frequency,PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD.Create_Dttm,
		PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD.Last_Update_Dttm
		FROM PROD_EDW_BASE.PRICE_ARGUS_CODE_DCD;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Price_Argus_Pricetype_Dcd ( Price_Type_ID,
		Description,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.PRICE_ARGUS_PRICETYPE_DCD.Price_Type_ID,PROD_EDW_BASE.PRICE_ARGUS_PRICETYPE_DCD.Description,
		PROD_EDW_BASE.PRICE_ARGUS_PRICETYPE_DCD.Create_Dttm,PROD_EDW_BASE.PRICE_ARGUS_PRICETYPE_DCD.Last_Update_Dttm
		FROM PROD_EDW_BASE.PRICE_ARGUS_PRICETYPE_DCD;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Argus_Raw ( Code,Ts_Type,
		Pt_Code,Price_Eff_Date,Price_Value,Fwd_Period,Diff_Base_Roll,
		Price_Eff_Year,Cont_Fwd,Record_Status,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.PRICE_ARGUS_RAW.Code,PROD_EDW_BASE.PRICE_ARGUS_RAW.Ts_Type,
		PROD_EDW_BASE.PRICE_ARGUS_RAW.Pt_Code,PROD_EDW_BASE.PRICE_ARGUS_RAW.Price_Eff_Date,
		PROD_EDW_BASE.PRICE_ARGUS_RAW.Price_Value,PROD_EDW_BASE.PRICE_ARGUS_RAW.Fwd_Period,
		PROD_EDW_BASE.PRICE_ARGUS_RAW.Diff_Base_Roll,PROD_EDW_BASE.PRICE_ARGUS_RAW.Price_Eff_Year,
		PROD_EDW_BASE.PRICE_ARGUS_RAW.Cont_Fwd,PROD_EDW_BASE.PRICE_ARGUS_RAW.Record_Status,
		PROD_EDW_BASE.PRICE_ARGUS_RAW.Create_Dttm,PROD_EDW_BASE.PRICE_ARGUS_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.PRICE_ARGUS_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Argus_Stg ( Code,Ts_Type,
		Pt_Code,Price_Eff_Date,Price_Value,Fwd_Period,Diff_Base_Roll,
		Price_Eff_Year,Cont_Fwd,Record_Status,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.PRICE_ARGUS_STG.Code,PROD_EDW_BASE.PRICE_ARGUS_STG.Ts_Type,
		PROD_EDW_BASE.PRICE_ARGUS_STG.Pt_Code,PROD_EDW_BASE.PRICE_ARGUS_STG.Price_Eff_Date,
		PROD_EDW_BASE.PRICE_ARGUS_STG.Price_Value,PROD_EDW_BASE.PRICE_ARGUS_STG.Fwd_Period,
		PROD_EDW_BASE.PRICE_ARGUS_STG.Diff_Base_Roll,PROD_EDW_BASE.PRICE_ARGUS_STG.Price_Eff_Year,
		PROD_EDW_BASE.PRICE_ARGUS_STG.Cont_Fwd,PROD_EDW_BASE.PRICE_ARGUS_STG.Record_Status,
		PROD_EDW_BASE.PRICE_ARGUS_STG.Create_Dttm,PROD_EDW_BASE.PRICE_ARGUS_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.PRICE_ARGUS_STG;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Price_Argus_Timestamp_Dcd ( Timestamp_ID,Description,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.PRICE_ARGUS_TIMESTAMP_DCD.Timestamp_ID,PROD_EDW_BASE.PRICE_ARGUS_TIMESTAMP_DCD.Description,PROD_EDW_BASE.PRICE_ARGUS_TIMESTAMP_DCD.Create_Dttm,PROD_EDW_BASE.PRICE_ARGUS_TIMESTAMP_DCD.Last_Update_Dttm
		FROM PROD_EDW_BASE.PRICE_ARGUS_TIMESTAMP_DCD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_CANA_CRD_Dcd
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_CANA_CRD_DCD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_CANA_CRD_Raw
	AS LOCKING ROW ACCESS
SELECT	   	*
FROM			PROD_EDW_BASE.PRICE_CANA_CRD_RAW;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_CANA_CRD_Stg
	AS LOCKING ROW ACCESS
SELECT	    *
FROM			PROD_EDW_BASE.PRICE_CANA_CRD_STG;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_COMP_MD
	AS LOCKING ROW ACCESS
SELECT	   	*
FROM			PROD_EDW_BASE.PRICE_COMP_MD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_COMP_MD_Dcd
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_COMP_MD_DCD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_COMP_MD_Raw
	AS LOCKING ROW ACCESS
SELECT	   	*
FROM			PROD_EDW_BASE.PRICE_COMP_MD_RAW;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_COMP_MD_Stg
	AS LOCKING ROW ACCESS
SELECT	    *
FROM			PROD_EDW_BASE.PRICE_COMP_MD_STG;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Price_Crude_Calendar
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_CRUDE_CALENDAR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Price_DM_Cal_Days
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_DM_CAL_DAYS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_DTN_Dcd
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_DTN_DCD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_DTN_Raw
AS LOCKING ROW ACCESS
SELECT	    Price_Code,
      				cast(Price_Eff_Dttm as date format 'YYYY-MM-DD') as Price_Eff_Date,
	  				cast(Price_Eff_Dttm as TIME	FORMAT 'HH:MI') as Price_Eff_Time,
      				Pricing_Desc,
      				Poster,
      				Poster_Code1,
      				Poster_Code2,
      				Pricing_Location,
      				Product,
      				Brand,
      				Price,
      				Price_Diff,
      				Create_Dttm,
      				Last_Update_Dttm
FROM			PROD_EDW_BASE.PRICE_DTN_RAW;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_DTN_Stg
	AS LOCKING ROW ACCESS
SELECT	    Price_Code,
      				cast(Price_Eff_Dttm as date format 'YYYY-MM-DD') as Price_Eff_Date,
	  				cast(Price_Eff_Dttm as TIME	FORMAT 'HH:MI') as Price_Eff_Time,
      				Pricing_Desc,
      				Poster,
      				Poster_Code1,
      				Poster_Code2,
      				Pricing_Location,
      				Product,
      				Brand,
      				Price,
      				Price_Diff,
      				Create_Dttm,
      				Last_Update_Dttm
FROM	PROD_EDW_BASE.PRICE_DTN_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Fstock_dcd ( Pricing_Desc, Pricing_Location, Pricing_Group, Price_Code,
		Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT Pricing_Desc, Pricing_Location, Pricing_Group, Price_Code,
		Create_Dttm, Last_Update_Dttm
	FROM PROD_EDW_BASE.Price_Fstock_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Fstock_Raw ( PriceType,Price_Low,
		Price_High,Price_Avg,Country,UOM,PriceFreq,Price_Eff_Date,Pricing_Desc,
		Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Fstock_Raw.PriceType,PROD_EDW_BASE.Price_Fstock_Raw.Price_Low,
		PROD_EDW_BASE.Price_Fstock_Raw.Price_High,PROD_EDW_BASE.Price_Fstock_Raw.Price_Avg,
		PROD_EDW_BASE.Price_Fstock_Raw.Country,PROD_EDW_BASE.Price_Fstock_Raw.UOM,
		PROD_EDW_BASE.Price_Fstock_Raw.PriceFreq,PROD_EDW_BASE.Price_Fstock_Raw.Price_Eff_Date,
		PROD_EDW_BASE.Price_Fstock_Raw.Pricing_Desc,PROD_EDW_BASE.Price_Fstock_Raw.Create_dttm,
		PROD_EDW_BASE.Price_Fstock_Raw.Last_Update_Dttm
		FROM PROD_EDW_BASE.Price_Fstock_Raw;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Fstock_Stg ( Price_Eff_Date,
		Price_Type,Price_Low,Price_High,Price_Avg,Country,UOM,Price_Freq,
		Create_Dttm,Last_Update_Dttm,Pricing_Desc ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Fstock_Stg.Price_Eff_Date,PROD_EDW_BASE.Price_Fstock_Stg.Price_Type,
		PROD_EDW_BASE.Price_Fstock_Stg.Price_Low,PROD_EDW_BASE.Price_Fstock_Stg.Price_High,
		PROD_EDW_BASE.Price_Fstock_Stg.Price_Avg,PROD_EDW_BASE.Price_Fstock_Stg.Country,
		PROD_EDW_BASE.Price_Fstock_Stg.UOM,PROD_EDW_BASE.Price_Fstock_Stg.Price_Freq,
		PROD_EDW_BASE.Price_Fstock_Stg.Create_Dttm,PROD_EDW_BASE.Price_Fstock_Stg.Last_Update_Dttm,
		PROD_EDW_BASE.Price_Fstock_Stg.Pricing_Desc
		FROM PROD_EDW_BASE.Price_Fstock_Stg;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.Price_Global_Dcd ( Price_Code, Price_Desc, Price_Category,Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT	Price_Code, Price_Desc, Price_Category,Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.Price_Global_Dcd;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.Price_Global_Raw ( Price_Code, Price_Desc, Contract_Date, Eff_date, Price_Open,
		Price_High, Price_Low, Price_Close, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Price_Code, Price_Desc, Contract_Date, Eff_date, Price_Open,
		Price_High, Price_Low, Price_Close, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.PRICE_GLOBAL_RAW;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.Price_Global_Stg ( Price_Code, Price_Desc, Contract_Date, Eff_date, Price_Open,
		Price_High, Price_Low, Price_Close, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Price_Code, Price_Desc, Contract_Date, Eff_date, Price_Open,
		Price_High, Price_Low, Price_Close, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.PRICE_GLOBAL_STG;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.PRICE_ICE_Raw 
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_ICE_RAW;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Price_ICE_Stg 
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_ICE_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_OpisBL_Raw AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.Price_OpisBL_Raw
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_OpisBL_Stg AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.Price_OpisBL_Stg
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Plattscurr_dcd ( Currency_Platts,
		Currency,Last_Update_Dttm,Create_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Plattscurr_dcd.Currency_Platts,PROD_EDW_BASE.Price_Plattscurr_dcd.Currency,
		PROD_EDW_BASE.Price_Plattscurr_dcd.Last_Update_Dttm,PROD_EDW_BASE.Price_Plattscurr_dcd.Create_Dttm
		FROM PROD_EDW_BASE.Price_Plattscurr_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Plattstype_dcd ( Price_Type,
		Price_Type_Desc,Last_Update_Dttm,Create_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Plattstype_dcd.Price_Type,PROD_EDW_BASE.Price_Plattstype_dcd.Price_Type_Desc,
		PROD_EDW_BASE.Price_Plattstype_dcd.Last_Update_Dttm,PROD_EDW_BASE.Price_Plattstype_dcd.Create_Dttm
		FROM PROD_EDW_BASE.Price_Plattstype_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Plattstype_Special_dcd AS 
	LOCKING ROW
	ACCESS
	SELECT * FROM PROD_EDW_BASE.Price_Plattstype_Special_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Plattsuom_dcd ( UOM_Platts,
		UOM,Last_Update_Dttm,Create_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Plattsuom_dcd.UOM_Platts,PROD_EDW_BASE.Price_Plattsuom_dcd.UOM,
		PROD_EDW_BASE.Price_Plattsuom_dcd.Last_Update_Dttm,PROD_EDW_BASE.Price_Plattsuom_dcd.Create_Dttm
		FROM PROD_EDW_BASE.Price_Plattsuom_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW prod_edw_base_VIEWS.Price_Platts_Dcd AS 
	LOCKING ROW
	ACCESS
	SELECT * FROM prod_edw_base.Price_Platts_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Platts_Raw ( Price_Code,
		Price_Eff_Date,Price,Price_Type,Source_File_Name,Record_Status,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_platts_raw.Price_Code,PROD_EDW_BASE.Price_platts_raw.Price_Eff_Date,
		PROD_EDW_BASE.Price_platts_raw.Price,PROD_EDW_BASE.Price_platts_raw.Price_Type,PROD_EDW_BASE.Price_platts_raw.Source_File_Name,
		PROD_EDW_BASE.Price_platts_raw.Record_Status,PROD_EDW_BASE.Price_platts_raw.Create_Dttm,PROD_EDW_BASE.Price_platts_raw.Last_Update_Dttm
		FROM PROD_EDW_BASE.Price_platts_raw;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Platts_Stg ( Price_Code,
		Price_Eff_Date,Price,Price_Type,Source_File_Name,Record_Status,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Platts_stg.Price_Code,PROD_EDW_BASE.Price_Platts_stg.Price_Eff_Date,
		PROD_EDW_BASE.Price_Platts_stg.Price,PROD_EDW_BASE.Price_Platts_stg.Price_Type,PROD_EDW_BASE.Price_Platts_stg.Source_File_Name,
		PROD_EDW_BASE.Price_Platts_stg.Record_Status,PROD_EDW_BASE.Price_Platts_stg.Create_Dttm,PROD_EDW_BASE.Price_Platts_stg.Last_Update_Dttm
		FROM PROD_EDW_BASE.Price_Platts_stg;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Poten_dcd ( Pricing_Desc,
		Pricing_Group,Pricing_Location, Price_Code, Last_Update_Dttm,Create_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Poten_dcd.Pricing_Desc,PROD_EDW_BASE.Price_Poten_dcd.Pricing_Group,
		PROD_EDW_BASE.Price_Poten_dcd.Pricing_Location,  PROD_EDW_BASE.Price_Poten_dcd.Price_Code, PROD_EDW_BASE.Price_Poten_dcd.Last_Update_Dttm,
		PROD_EDW_BASE.Price_Poten_dcd.Create_Dttm
		FROM PROD_EDW_BASE.Price_Poten_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Poten_Raw ( Price,Price_Type,
		Price_Eff_Date,Pricing_Desc,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Poten_Raw.Price,PROD_EDW_BASE.Price_Poten_Raw.Price_Type,
		PROD_EDW_BASE.Price_Poten_Raw.Price_Eff_Date,PROD_EDW_BASE.Price_Poten_Raw.Pricing_Desc,
		PROD_EDW_BASE.Price_Poten_Raw.Create_Dttm,PROD_EDW_BASE.Price_Poten_Raw.Last_Update_Dttm
		FROM PROD_EDW_BASE.Price_Poten_Raw;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Poten_Stg ( Price_Type,Price_Eff_Date,
		Price,Last_Update_Dttm,Create_Dttm,Pricing_Desc ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Poten_Stg.Price_Type,PROD_EDW_BASE.Price_Poten_Stg.Price_Eff_Date,
		PROD_EDW_BASE.Price_Poten_Stg.Price,PROD_EDW_BASE.Price_Poten_Stg.Last_Update_Dttm,
		PROD_EDW_BASE.Price_Poten_Stg.Create_Dttm,PROD_EDW_BASE.Price_Poten_Stg.Pricing_Desc
		FROM PROD_EDW_BASE.Price_Poten_Stg;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Rackloc_Dcd  AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.Price_Rackloc_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Rack_Dcd ( Product_Indicator,
		Product_Type,Vapor_Pressure,Pricing_Desc,Price_Code, Last_Update_Dttm,Actual_Product,
		Create_Dttm,Pricing_Group ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Rack_dcd.Product_Indicator,PROD_EDW_BASE.Price_Rack_dcd.Product_Type,
		PROD_EDW_BASE.Price_Rack_dcd.Vapor_Pressure,PROD_EDW_BASE.Price_Rack_dcd.Pricing_Desc,
		PROD_EDW_BASE.Price_Rack_dcd.Price_Code,
		PROD_EDW_BASE.Price_Rack_dcd.Last_Update_Dttm,PROD_EDW_BASE.Price_Rack_dcd.Actual_Product,
		PROD_EDW_BASE.Price_Rack_dcd.Create_Dttm,PROD_EDW_BASE.Price_Rack_dcd.Pricing_Group
		FROM PROD_EDW_BASE.Price_Rack_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Rack_Raw ( Price_Eff_Date,
		Price_Type,Product_Indicator,Product_Type,Vapor_Pressure,Grade,
		Location_Code,Price,Price_Rev_Date,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Rack_Raw.Price_Eff_Date,PROD_EDW_BASE.Price_Rack_Raw.Price_Type,
		PROD_EDW_BASE.Price_Rack_Raw.Product_Indicator,PROD_EDW_BASE.Price_Rack_Raw.Product_Type,
		PROD_EDW_BASE.Price_Rack_Raw.Vapor_Pressure,PROD_EDW_BASE.Price_Rack_Raw.Grade,
		PROD_EDW_BASE.Price_Rack_Raw.Location_Code,PROD_EDW_BASE.Price_Rack_Raw.Price,
		PROD_EDW_BASE.Price_Rack_Raw.Price_Rev_Date,PROD_EDW_BASE.Price_Rack_Raw.Create_Dttm,
		PROD_EDW_BASE.Price_Rack_Raw.Last_Update_Dttm
		FROM PROD_EDW_BASE.Price_Rack_Raw;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Rack_Stg ( Price_Eff_Date,
		Price_Type,Product_Indicator,Product_Type,Grade,Vapor_Pressure,
		Location_Code,Price,Price_Rev_Date,Last_Update_Dttm,Create_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Rack_Stg.Price_Eff_Date,PROD_EDW_BASE.Price_Rack_Stg.Price_Type,
		PROD_EDW_BASE.Price_Rack_Stg.Product_Indicator,PROD_EDW_BASE.Price_Rack_Stg.Product_Type,
		PROD_EDW_BASE.Price_Rack_Stg.Grade,PROD_EDW_BASE.Price_Rack_Stg.Vapor_Pressure,
		PROD_EDW_BASE.Price_Rack_Stg.Location_Code,PROD_EDW_BASE.Price_Rack_Stg.Price,
		PROD_EDW_BASE.Price_Rack_Stg.Price_Rev_Date,PROD_EDW_BASE.Price_Rack_Stg.Last_Update_Dttm,
		PROD_EDW_BASE.Price_Rack_Stg.Create_Dttm
		FROM PROD_EDW_BASE.Price_Rack_Stg;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Spot_dcd ( Pricing_Desc,
		Pricing_Group,Pricing_Location,Create_Dttm,Last_Update_Dttm,
		Pricing_Code ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Spot_dcd.Pricing_Desc,PROD_EDW_BASE.Price_Spot_dcd.Pricing_Group,
		PROD_EDW_BASE.Price_Spot_dcd.Pricing_Location,PROD_EDW_BASE.Price_Spot_dcd.Create_Dttm,
		PROD_EDW_BASE.Price_Spot_dcd.Last_Update_Dttm,PROD_EDW_BASE.Price_Spot_dcd.Pricing_Code
		FROM PROD_EDW_BASE.Price_Spot_dcd;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Spot_Raw ( Price_Low,Price_Avg,
		Price_Close,Country,UOM,Delivery_Type,Price_Freq,Price_Eff_Date,
		Pricing_Desc,Price_Type,Price_High,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Spot_Raw.Price_Low,PROD_EDW_BASE.Price_Spot_Raw.Price_Avg,
		PROD_EDW_BASE.Price_Spot_Raw.Price_Close,PROD_EDW_BASE.Price_Spot_Raw.Country,
		PROD_EDW_BASE.Price_Spot_Raw.UOM,PROD_EDW_BASE.Price_Spot_Raw.Delivery_Type,
		PROD_EDW_BASE.Price_Spot_Raw.Price_Freq,PROD_EDW_BASE.Price_Spot_Raw.Price_Eff_Date,
		PROD_EDW_BASE.Price_Spot_Raw.Pricing_Desc,PROD_EDW_BASE.Price_Spot_Raw.Price_Type,
		PROD_EDW_BASE.Price_Spot_Raw.Price_High,PROD_EDW_BASE.Price_Spot_Raw.Create_Dttm,
		PROD_EDW_BASE.Price_Spot_Raw.Last_Update_Dttm
		FROM PROD_EDW_BASE.Price_Spot_Raw;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Price_Spot_Stg ( Price_Eff_Date,
		Price_Low,Price_High,Price_Avg,Price_Close,Country,UOM,Delivery_Type,
		Price_Freq,Pricing_Desc,Price_Type,Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Price_Spot_Stg.Price_Eff_Date,PROD_EDW_BASE.Price_Spot_Stg.Price_Low,
		PROD_EDW_BASE.Price_Spot_Stg.Price_High,PROD_EDW_BASE.Price_Spot_Stg.Price_Avg,
		PROD_EDW_BASE.Price_Spot_Stg.Price_Close,PROD_EDW_BASE.Price_Spot_Stg.Country,
		PROD_EDW_BASE.Price_Spot_Stg.UOM,PROD_EDW_BASE.Price_Spot_Stg.Delivery_Type,
		PROD_EDW_BASE.Price_Spot_Stg.Price_Freq,PROD_EDW_BASE.Price_Spot_Stg.Pricing_Desc,
		PROD_EDW_BASE.Price_Spot_Stg.Price_Type,PROD_EDW_BASE.Price_Spot_Stg.Create_Dttm,
		PROD_EDW_BASE.Price_Spot_Stg.Last_Update_Dttm
		FROM PROD_EDW_BASE.Price_Spot_Stg;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Price_SPP_Rack
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_SPP_RACK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Price_West_Giant_Rack
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_WEST_GIANT_RACK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.Price_WNR_Transfer
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.PRICE_WNR_TRANSFER;
--------------------------------------------------------------------------------

REPLACE	VIEW prod_edw_base_VIEWS.Pricing AS 
	LOCKING ROW
	ACCESS
	SELECT * FROM prod_edw_base.PRICING;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Pricing_Opis_BottomLine AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.Pricing_Opis_BottomLine
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.PRODUCTION (Ref_Prod_Location, Product_ID, Eff_Date, Product_Desc, 
	Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4,Inv_Begin, Inv_End, Shipments, Receipts, Yield_Type, Production,
	Production_Update_Dttm) AS

Select  tmpTotal.Ref_Prod_Location, tmpTotal.Product_ID, cur_date, Product_Desc,
				Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4,
                inv_begin, inv_end, shipments, receipts, yield_type,                             
                Case When yield_type = 2 Then (zeroifnull(inv_end) - zeroifnull(receipts) + zeroifnull(shipments) - zeroifnull(inv_begin)) 
                                Else (zeroifnull(inv_begin) + zeroifnull(receipts) - zeroifnull(shipments) - zeroifnull(inv_end)) 
                End As "Production",
                Case 
	              	When Liftings_Update_Dttm>InvCurr_Update_Dttm and Liftings_Update_Dttm>InvPrev_Update_DTTM Then Liftings_Update_dttm
	               	When InvCurr_Update_Dttm>InvPrev_Update_Dttm and InvCurr_Update_Dttm>Liftings_Update_DTTM Then InvCurr_Update_dttm
	               	When InvPrev_Update_Dttm>InvCurr_Update_Dttm and InvPrev_Update_Dttm>Liftings_Update_DTTM Then InvPrev_Update_dttm
	               	When InvCurr_Update_Dttm=InvPrev_Update_Dttm and InvCurr_Update_Dttm>Liftings_Update_DTTM Then InvCurr_Update_dttm
				End As Production_Update_Dttm
From (
Select                ref_product.Ref_Prod_Location, ref_product.Product_ID, cur_date, Product_Desc,
                               max(inv_prev) as inv_begin, max(inv_curr) as inv_end, max(shipments) as shipments, max(receipts) as receipts, max(yield_type) as yield_type,
                               Case When max(tmpInv_Curr.Last_Update_Dttm) is null Then cast('1900-01-01 00:00:00' as Timestamp(0))
                               		Else max(tmpInv_Curr.Last_Update_Dttm)
                               End as InvCurr_Update_Dttm,
                               Case When max(tmpInv_Prev.Last_Update_Dttm) is null Then cast('1900-01-01 00:00:00' as Timestamp(0))
                               		Else max(tmpInv_Prev.Last_Update_Dttm)
                               End as InvPrev_Update_Dttm,
                               Case When max(tmpLiftings.Last_Update_Dttm) is null Then cast('1900-01-01 00:00:00' as Timestamp(0))
                               		Else max(tmpLiftings.Last_Update_Dttm)
                               End as Liftings_Update_Dttm
                From PROD_EDW_BASE_VIEWS.Ref_Product
                Cross Join cur_date
                Inner Join PROD_EDW_BASE_VIEWS.ref_product_sitespecific
                                                on ref_product.ref_prod_location = ref_product_sitespecific.ref_prod_location
                                                and ref_product.product_id = ref_product_sitespecific.product_id
                Inner join PROD_EDW_BASE_VIEWS.Ref_Prod_Group
                                                on ref_product_sitespecific.ref_prod_location = ref_prod_group.ref_prod_location
                                                and ref_product_sitespecific.product_group_id = ref_prod_group.product_group_id
               Left outer join (
                                Select ref_prod_location, eff_date, product_id, sum(net_quantity) inv_curr, max(last_update_dttm) last_update_dttm
                                From PROD_EDW_BASE_VIEWS.tank
                                Group By ref_prod_location, eff_date, product_id) As tmpInv_Curr
                                On ref_product.ref_prod_location = tmpInv_Curr.ref_prod_location
                                And ref_product.product_id = tmpInv_Curr.product_id
                                And tmpInv_Curr.eff_date = cur_date.cur_date
               Left Outer Join (
                                Select ref_prod_location, eff_date, product_id, sum(net_quantity) inv_prev, max(last_update_dttm) last_update_dttm
                                From PROD_EDW_BASE_VIEWS.tank
                                                Group by ref_prod_location, eff_date, product_id) As tmpInv_Prev
                                On ref_product.ref_prod_location = tmpInv_Prev.ref_prod_location
                                And ref_product.product_id = tmpInv_prev.product_id
                                And tmpInv_Prev.eff_date = cur_date.cur_date -1
               Left Outer Join
                                (Select  ref_prod_location, prod_id product_id, Eff_Date, max(last_update_dttm) last_update_dttm,
                                                sum(Case When balance_type = 'shipments' Then net_quantity End) As "Shipments",
                                                sum(Case When balance_type = 'receipts' Then net_quantity End) As "Receipts"
                                From PROD_EDW_BASE_VIEWS.LIFTING
                                Where report_desc = 'Inventory'
                                                And balance_type In ('receipts','shipments')
                                        	    Group By ref_prod_location, prod_id, eff_date) As tmpLiftings
                                On ref_product.ref_prod_location = tmpLiftings.ref_prod_location
                                And ref_product.product_id = tmpLiftings.product_id          
                                And cur_date.cur_date = tmpLiftings.eff_date 
               Where cur_date <= current_date
               Group by ref_product.Ref_Prod_Location, ref_product.Product_ID,cur_date, Product_Desc) As tmpTotal

LEFT OUTER JOIN
	(SELECT	Ref_Prod_Location, product_id,
			Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3,
			Prod_Group_SubCat4
	FROM	PROD_EDW_BASE_VIEWS.PROD_HIER
	INNER JOIN 
		(Select max(eff_end_date) as max_eff_end_date from PROD_EDW_BASE_VIEWS.prod_hier
			where location_category = 'Western Total') as tmpEffEndDate
	ON prod_hier.eff_end_date = tmpEffEndDate.max_eff_end_date
	where location_category = 'Western Total') as tmpCommCategories
ON tmpTotal.Ref_Prod_Location = tmpCommCategories.Ref_Prod_Location
	AND tmpTotal.product_id = tmpCommCategories.product_id;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.PROD_HIER (Report_Desc,Location_Category,
		Comm_Prod_Location,Ref_Prod_Location,Prod_Group_Subcat1_Sort,
			                   Prod_Group_SubCat1,Prod_Group_Subcat2_Sort,
		Prod_Group_SubCat2,Prod_Group_Subcat3_Sort,
                                           Prod_Group_SubCat3,
		Prod_Group_Subcat4_Sort,Prod_Group_SubCat4,Product_Target,
                                           Product_Percent,Product_Lifo,
		Product_ID , Product_Desc, Eff_Start_Date, Eff_End_Date) AS
	LOCKING ROW  FOR ACCESS
SELECT	
CPH.Report_Desc,
CLH.Location_Category,
CPH.Comm_Prod_Location,
CPH.Ref_Prod_Location,
PGS.Prod_Group_Subcat1_Sort,
CPH.Prod_Group_SubCat1,
PGS.Prod_Group_Subcat2_Sort,
CPH.Prod_Group_SubCat2,
PGS.Prod_Group_Subcat3_Sort,
CPH.Prod_Group_SubCat3,
PGS.Prod_Group_Subcat4_Sort,
CPH.Prod_Group_SubCat4,
PGTL.Product_Target,
CPH.Product_Percent,
PGTL.Product_Lifo,
CPH.Product_ID,
CPH.Product_Name,
PGTL.EFF_Start_Date,
PGTL.EFF_End_Date
FROM	PROD_EDW_BASE.COMM_PROD_REP_HIERARCHY CPH
INNER JOIN PROD_EDW_BASE.COMM_LOC_REP_HIERARCHY  CLH
	ON	CLH.Comm_Prod_Location  = CPH.Comm_Prod_Location
	AND	CLH.Report_Desc = CPH.Report_Desc
INNER JOIN PROD_EDW_BASE.COMM_PROD_GROUP_SORT PGS
	ON	CPH.Report_Desc = PGS.Report_Desc
	AND	CPH.Prod_Group_SubCat1 = PGS.Prod_Group_SubCat1
	AND	CPH.Prod_Group_SubCat2 = PGS.Prod_Group_SubCat2
	AND	CPH.Prod_Group_SubCat3 = PGS.Prod_Group_SubCat3
	AND	CPH.Prod_Group_SubCat4 = PGS.Prod_Group_SubCat4
INNER JOIN PROD_EDW_BASE.COMM_PROD_GROUP_TGT_LIFO PGTL
	ON	CPH.Report_Desc = PGTL.Report_Desc
	AND	CPH.Prod_Group_SubCat1 = PGTL.Prod_Group_SubCat1
	AND	CPH.Prod_Group_SubCat2 = PGTL.Prod_Group_SubCat2
	AND	CPH.Prod_Group_SubCat3 = PGTL.Prod_Group_SubCat3
	AND	CPH.Prod_Group_SubCat4 = PGTL.Prod_Group_SubCat4
	AND	CPH.Comm_Prod_Location = PGTL.Comm_Prod_Location;
--------------------------------------------------------------------------------

REPLACE	VIEW prod_EDW_BASE_VIEWS.PROD_HIER_TANK  (Report_Desc,Location_Category,Comm_Prod_Location,Ref_Prod_Location,
			                         Prod_Group_Subcat1_Sort,Prod_Group_SubCat1,Prod_Group_Subcat2_Sort, Prod_Group_SubCat2,Prod_Group_Subcat3_Sort,
                                                 Prod_Group_SubCat3, Prod_Group_Subcat4_Sort, Prod_Group_SubCat4,Product_Target,Tank_ID,
                                                 Product_Percent,Product_Lifo,Product_ID , Product_Desc,  Net_Quantity, Min_Op_Qty, Eff_Date, Master_Code, UOM ) AS
LOCKING ROW  FOR ACCESS
SELECT	
CPH.Report_Desc,
CPH.Location_Category,
CPH.Comm_Prod_Location,
CPH.Ref_Prod_Location,
CPH.Prod_Group_Subcat1_Sort,
CPH.Prod_Group_SubCat1,
CPH.Prod_Group_Subcat2_Sort,
CPH.Prod_Group_SubCat2,
CPH.Prod_Group_Subcat3_Sort,
CPH.Prod_Group_SubCat3,
CPH.Prod_Group_Subcat4_Sort,
CPH.Prod_Group_SubCat4,
CPH.Product_Target,
TNK.Tank_ID,
CPH.Product_Percent,
CPH.Product_Lifo,
CPH.Product_ID,
CPH.Product_Desc,
(COALESCE((TNK.Net_Quantity),0) * COALESCE(CPH.Product_Percent,0)) As Net_Quantity,
TNI.Min_Op_Qty,
TNK.Eff_Date,
M.Master_Code,
CAST('BBL' as Varchar(20)) as UOM
FROM prod_EDW_BASE_VIEWS.PROD_HIER CPH
INNER JOIN prod_EDW_BASE.TANK TNK
    ON	TNK.Ref_Prod_Location = CPH.Ref_Prod_Location
   AND TNK.Product_ID = CPH.Product_ID
INNER JOIN prod_EDW_BASE.TANK_INFO TNI
   ON	TNI.Tank_ID= TNK.Tank_ID
   AND TNK.Ref_Prod_Location = TNI.Ref_Prod_Location
INNER JOIN prod_EDW_BASE.MASTER M
ON	TNK.Tank_ID= M.Master_ID
 AND TNK.Ref_Prod_Location = M.Ref_Prod_Location
WHERE TNK.Eff_Date between CPH.EFF_START_DATE AND CPH.EFF_END_DATE
AND eff_date between '1990/04/01' and '2020/01/01';
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.PROD_HIER_TERMINAL (Report_Desc,
		Location_Category,Comm_Prod_Location,Ref_Prod_Location,
			                            Prod_Group_Subcat1_Sort,Prod_Group_SubCat1,
		Prod_Group_Subcat2_Sort,Prod_Group_SubCat2, 
                                                    Prod_Group_Subcat3_Sort,
		Prod_Group_SubCat3, Prod_Group_Subcat4_Sort,Prod_Group_SubCat4,
                                                    Product_Target,
		Product_Percent,Product_Lifo, Product_ID,
                                                    Product_Desc, Terminal_ID,
		Master_Code, Net_Quantity, Eff_Date,Min_Op_Qty,UOM) AS
LOCKING	ROW  FOR ACCESS
SELECT	
CPH.Report_Desc,
CPH.Location_Category,
CPH.Comm_Prod_Location,
CPH.Ref_Prod_Location,
CPH.Prod_Group_Subcat1_Sort,
CPH.Prod_Group_SubCat1,
CPH.Prod_Group_Subcat2_Sort,
CPH.Prod_Group_SubCat2,
CPH.Prod_Group_Subcat3_Sort,
CPH.Prod_Group_SubCat3,
CPH.Prod_Group_Subcat4_Sort,
CPH.Prod_Group_SubCat4,
CPH.Product_Target,
CPH.Product_Percent,
CPH.Product_Lifo,
CPH.Product_ID,
CPH.Product_desc,
TRM.Terminal_ID,
TRM.Master_Code,
(COALESCE((TRM.Net_Quantity),0) * COALESCE(CPH.Product_Percent,
		0)) As Net_Quantity,
TRM.Eff_Date,
CAST(0  as Float) AS Min_Op_Qty,
CAST('BBL' as Varchar(20)) as UOM
FROM	PROD_EDW_BASE_VIEWS.PROD_HIER CPH
INNER JOIN PROD_EDW_BASE.TERMINAL TRM
	ON	    CPH.Ref_Prod_Location = TRM.Ref_Prod_Location
	AND	  TRM.Product_ID = CPH.Product_ID
WHERE	TRM.Eff_Date between CPH.Eff_Start_Date AND CPH.Eff_End_Date;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.PROD_UNION (Report_Desc,Location_Category,Comm_Prod_Location,Ref_Prod_Location,
                                Prod_Group_SubCat1,Prod_Group_SubCat2, Prod_Group_SubCat3, 
                                Prod_Group_SubCat4, Product_Target,Product_Lifo,Product_ID,Product_Desc,Net_Quantity, Min_Op_Qty,
                                Eff_Date, Tank_ID, Terminal_ID,Master_Code, UOM, Status,
								Prod_Group_Subcat1_Sort,Prod_Group_Subcat2_Sort,Prod_Group_Subcat3_Sort,Prod_Group_Subcat4_Sort) AS
LOCKING ROW  FOR ACCESS
SELECT
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
T.Tank_ID    AS Tank_ID,
CAST(0 AS INTEGER)   AS Terminal_ID,
T.Master_Code AS Master_Code,
T.UOM   AS UOM,
CAST ('TANK' AS VARCHAR(20)) AS Status,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort
FROM PROD_EDW_BASE_VIEWS.PROD_HIER_TANK T

UNION ALL

SELECT
T.Report_Desc  AS REPORT_DESC,
T.Location_Category AS LOCATION_CAT,
T.Comm_Prod_Location AS COMM_PROD_LOCATION,
T.Ref_Prod_Location  AS REF_PROD_LOCATION,
T.Prod_Group_SubCat1 AS CATEGORY1,
T.Prod_Group_SubCat2  AS CATEGORY2,
T.Prod_Group_SubCat3 AS CATEGORY3,
T.Prod_Group_SubCat4 AS CATEGORY4,
T.Product_Target  AS PRODUCT_TARGET,
T.Product_Lifo  AS PROD_LIFO,
T.Product_ID    AS PROD_ID,   
T.Product_Desc   AS PROD_DESC,
T.Net_Quantity    AS NET_QUANTITY,
T.Min_Op_Qty    AS MIN_OP_QTY,
T.Eff_Date    AS Eff_Date,
CAST(0 AS INTEGER)   AS Tank_ID,
Terminal_ID   AS Terminal_ID,
T.Master_Code  AS  MASTER_CODE,
T.UOM   AS UOM,
CAST ('TERMINAL' AS VARCHAR(20)) AS Status,
T.Prod_Group_Subcat1_Sort  AS Subcat1_Sort,
T.Prod_Group_Subcat2_Sort   AS Subcat2_Sort,
T.Prod_Group_Subcat3_Sort   AS Subcat3_Sort,
T.Prod_Group_Subcat4_Sort  AS Subcat4_Sort
FROM PROD_EDW_BASE_VIEWS.PROD_HIER_TERMINAL T;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.PROD_UNION_SUMMARY 
(report_desc, Eff_Date, Location_Category, Prod_Group_SubCat1, Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4, 
Target, 
LIFO,
Net_Quantity)
AS LOCKING ROW  FOR ACCESS
Select 
report_desc, Eff_Date, Location_Category, Prod_Group_SubCat1, Prod_Group_SubCat2, 
Prod_Group_SubCat3, Prod_Group_SubCat4, 
Cast(sum(Target) as Integer) as Target, 
Cast(sum(LIFO) as Integer) as LIFO, 
Cast(sum(Net_Quantity) as Integer) as Net_Quantity
FROM
	(Select report_desc, Eff_Date, Location_Category, comm_Prod_Location, Prod_Group_SubCat1, 
 				Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4,
 				max(Product_Target) Target, max(Product_Lifo) LIFO, sum(Net_Quantity) Net_Quantity
 	From prod_edw_base_views.PROD_UNION
	Group by report_desc, eff_date, Location_Category, comm_Prod_Location, Prod_Group_SubCat1, 
	Prod_Group_SubCat2, Prod_Group_SubCat3,Prod_Group_SubCat4) 
AS tmpSumProdUnion
Group by Eff_Date, report_desc, Location_Category, Prod_Group_SubCat1, 
Prod_Group_SubCat2, Prod_Group_SubCat3, Prod_Group_SubCat4
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_VIEWS.RAILCAR AS 
	LOCKING ROW
	ACCESS

SELECT	Eff_Date, QTSMast.TripID, QTSMast.UnitID, QTSMast.ShipDate, Shipper, Consignee,
	OCity, OState, LastProduct, LastSTCC, 
	CASE WHEN QTSATP.ProdCode IS NULL THEN QTSMAST.PRODCODE
		ELSE QTSATP.ProdCode END AS ProdCode, 
	Product, StatusName,
	QTSUpd.L_E, LastReportedDestCity, LastReportedDestState, CurrentLegEta,
	CASE WHEN Volume > 0 THEN cast(Volume as Integer)
		ELSE cast(IBVol  as Integer)END AS Volume_Gal,
	CASE WHEN Volume > 0 THEN cast(Volume/42 as Integer)
		ELSE cast(IBVol/42 as Integer) END AS Volume_BBL,
	QTSUpd.Last_Update_dttm

FROM	prod_edw_base_views.Railcar_QTS_Master_Raw QTSMast

LEFT OUTER JOIN 
	(
	SELECT 	L_E, LastReportedDestCity, LastReportedDestState, CurrentLegEta, tmpQTSUpd.Unitid, tmpQTSUpd.TripId,
	Volume, tmpQTSUpd.Last_Update_dttm, StatusName, cast(eff_date as date) as eff_date
	FROM prod_edw_base_Views.Railcar_QTS_Update_Raw tmpQTSUpd
	INNER JOIN
		(
		SELECT tripid, unitid, 
		CAST(PrepareDateTime AS DATE FORMAT 'YYYYMMDD') as Eff_Date,
		max(last_update_dttm) as last_update_dttm
		FROM prod_edw_base_views.railcar_qts_update_raw
		GROUP BY tripid, unitid	, Eff_Date
		) AS tmpQTSUpdMaxDate
		ON	tmpQTSUpd.TripID=tmpQTSUpdMaxDate.TripID
		AND tmpQTSUpd.UnitID=tmpQTSUpdMaxDate.UnitID
		AND tmpQTSUpd.Last_Update_Dttm = tmpQTSUpdMaxDate.Last_Update_Dttm
		) AS QTSUpd
	ON QTSMast.UnitId = QTSUpd.UnitId
	AND QTSMast.TripId = QTSUpd.TripId

LEFT OUTER JOIN
	(
	SELECT	Distinct tmpQTSAtp.UnitID, tmpQTSAtp.TripID, Product, IBVol, ProdCode
	FROM	prod_edw_base_views.Railcar_Qts_AtPlant_Raw tmpQTSAtp
	INNER JOIN
		(SELECT tripid, unitid, max(last_update_dttm) AS last_update_dttm
		FROM prod_edw_base_views.railcar_qts_atplant_raw
		GROUP BY tripid, unitid) AS tmpQTSAtpMaxDate
	ON	tmpQTSAtp.TripID=tmpQTSAtpMaxDate.TripID
	AND tmpQTSAtp.UnitID=tmpQTSAtpMaxDate.UnitID
	AND tmpQTSAtp.Last_Update_Dttm = tmpQTSAtpMaxDate.Last_Update_Dttm
	) AS QTSAtp
	ON QTSMast.UnitId = QTSAtp.UnitId
	AND QTSMast.TripId = QTSAtp.TripId
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.railcar_bque_clm
AS LOCKING ROW ACCESS 
SELECT * FROM  PROD_EDW_BASE.railcar_bque_clm;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.railcar_bque_insp
AS LOCKING ROW ACCESS 
SELECT * FROM  PROD_EDW_BASE.railcar_bque_insp;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.railcar_bque_trip
AS LOCKING ROW ACCESS -- Locks table while view does its pull, unlocks when done
SELECT * FROM  PROD_EDW_BASE.railcar_bque_trip;
--------------------------------------------------------------------------------

REPLACE             VIEW PROD_EDW_BASE_VIEWS.RAILCAR_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS
SELECT	'RAILCAR' as Table_Name, 
	'QTS' as Source_Name, 
	cast('Master' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.Railcar_QTS_Master_Raw
Group by 4
UNION ALL
SELECT	'RAILCAR' as Table_Name, 
	'QTS' as Source_Name, 
	cast('Update' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.Railcar_QTS_Update_Raw
Group by 4
UNION ALL
SELECT	'RAILCAR' as Table_Name, 
	'QTS' as Source_Name, 
	cast('AtPlant' as varchar(20)) as Location,
	cast(Last_Update_Dttm as date) as EFF_DATE, 
	count(cast(Last_Update_Dttm as date)) as RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.Railcar_QTS_AtPlant_Raw
Group by 4
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.RAILCAR_QTS_AtPlant_Raw AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.RAILCAR_QTS_ATPLANT_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.RAILCAR_QTS_AtPlant_Stg AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.RAILCAR_QTS_ATPLANT_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.RAILCAR_QTS_Master_Raw AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.RAILCAR_QTS_Master_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.RAILCAR_QTS_Master_Stg AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.RAILCAR_QTS_Master_Stg;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.RAILCAR_QTS_Prod_Dcd AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.RAILCAR_QTS_PROD_DCD;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.RAILCAR_QTS_Update_Raw AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.RAILCAR_QTS_UPDATE_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.RAILCAR_QTS_Update_Stg AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.RAILCAR_QTS_UPDATE_STG;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_ACCT_DTL
as Locking Row ACCESS
Select * from PROD_EDW_BASE.RA_ACCT_DTL;
--------------------------------------------------------------------------------

--Show View PROD_EDW_BASE_VIEWS.RA_Acct_Sales;

Replace View  PROD_EDW_BASE_VIEWS.RA_Acct_Sales
--CR 4453
AS LOCKING ROW ACCESS
Select 
	Acct.RA_Source,
	Acct.AccntngPrdYr as AccountingYear,
	Acct.AccntngPrdPrd as AccountingMonth,
	Acct.AcctDtlDlDtlID as AccountDetailID, 
	InternalBA.BANme as InternalBA,
	InternalBA.BAID as InternalBAID,
	ExternalBA.BANme as ExternalBA,
	ExternalBA.BAID as ExternalBAID,
	Acct.AcctDtlTrnsctnDte as TransactionDate,
	Acct.CreatedDate,
	Acct.PayableMatchingStatus,
CASE Acct.PayableMatchingStatus
	WHEN 'X'	then 'Movement Transaction' 
	WHEN 'T'	then 'Tax Transaction '
	WHEN 'I'	then 'Manual invoice'
	WHEN 'TT'	then 'Time Transaction' 
	WHEN 'M'	then 'Movement expense '
	WHEN 'ML'	then 'Manual ledger entry '
	WHEN 'N'	then 'Net out Transaction'
	WHEN 'P'	then 'Payable write off, discount or partial pay'
	WHEN 'IV'	then 'Inventory subledger'
	else 'you should never see this - did OLF add a new source type?'
END as AcctDtl_SrcTable_Desc,
	Acct.AcctDtlValue as TransValue,
	Acct.Volume *-1 as Volume,
	Acct.SupplyDemand,
	Acct.TrnsctnTypDesc as TransactionType,  
	Acct.AcctDtlTrnsctnTypID,
	Acct.AcctDtlSrceTble, 
	Case Acct.AcctDtlSrceTble 
	when 'X'	then 'Movement Transaction' 
	when 'T'	then 'Tax Transaction '
	when 'I'	then 'Manual invoice'
	when 'TT'	then 'Time Transaction' 
	when 'M'	then 'Movement expense '
	when 'ML'	then 'Manual ledger entry '
	when 'N'	then 'Net out Transaction'
	when 'P'	then 'Payable write off, discount or partial pay'
	when 'IV'	then 'Inventory subledger'
	else 'you should never see this - did OLF add a new source type?'
	end as AcctDtlSrceTble_Desc,
	Cast(Acct.AccntngPrdBgnDte as Date) as AccountingPeriod,
	Acct.AccntngPrdID,
	Locale.LcleNme,
	Locale.LcleID,
	Destination.LcleNme as DestLocale,
	Destination.LcleID as DestLocaleID,
	ParentProd.PrdctNme as ParentProductName,
	ParentProd.PrdctAbbv as ParentProduct,
	ParentProd.PrdctID as ParentProdID,
	ParentProd.CmmdtyID as ParentCommodityID,
	ChildProd.PrdctNme as ChildProductName,
	ChildProd.PrdctAbbv as ChildProduct,
	ChildProd.PrdctID as ChildProdID,
	ChildProd.CmmdtyID as ChildCommodityID,	
	Deal.DlHdrIntrnlNbr as DealNumber,
	Deal.DlHdrID,
	Deal.DlDtlID,
	Deal.DealDetailID,
	Mvmt.MvtDcmntExtrnlDcmntNbr as BOL,
	
	Mvmt.MvtDcmntDte,
	Mvmt.MvtHdrID,
	Mvmt.LineNumber,
	Mvmt.MvtHdrTyp,
	Mvmt.Name,
	Mvmt.MvtHdrDte,
	Mvmt.MvtHdrQty,
	Mvmt.MvtHdrGrssQty,
	MvmtHdrLoc.LcleNme as MvtHdrLocale, 
MvmtHdrLoc.LcleID as  MvtHdrLocalID,
MvmtHdrOrgLoc.LcleNme as MvtHdrOriginLocale,
MvmtHdrOrgLoc.LcleID as MvtHdrOriginLocaleID,
MvmtHdrDestLoc.LcleNme as MvtHdrDestinationLocale, 
 MvmtHdrDestLoc.LcleID as MvtHdrDestinationLocaleID
From PROD_EDW_BASE.RA_Acct_Dtl Acct
Inner Join PROD_EDW_BASE.RA_Business_Associate InternalBA on Acct.InternalBAID = InternalBA.BAID and Acct.RA_Source = InternalBA.RA_Source
Inner Join PROD_EDW_BASE.RA_Business_Associate ExternalBA on Acct.ExternalBAID = ExternalBA.BAID and Acct.RA_Source = ExternalBA.RA_Source

Inner Join PROD_EDW_BASE.RA_Business_Locale Locale on Acct.AcctDtlLcleID = Locale.LcleID and Acct.RA_Source = Locale.RA_Source
Left Join PROD_EDW_BASE.RA_Business_Locale Destination on Acct.AcctDtlDestinationLcleID = Destination.LcleID and Acct.RA_Source = Destination.RA_Source--left join because this will be blank sometimes

Inner Join PROD_EDW_BASE.RA_Product ParentProd on Acct.ParentPrdctID = ParentProd.PrdctID and Acct.RA_Source = ParentProd.RA_Source
Inner Join PROD_EDW_BASE.RA_Product ChildProd on Acct.ChildPrdctID = ChildProd.PrdctID and Acct.RA_Source = ChildProd.RA_Source

Inner Join PROD_EDW_BASE.RA_Deal Deal on Acct.AcctDtlDlDtlDlHdrID = Deal.DlHdrID and Acct.AcctDtlDlDtlID = Deal.DlDtlID and Acct.RA_Source = Deal.RA_Source

Left Join PROD_EDW_BASE.RA_Movement Mvmt on Acct.AcctDtlMvtHdrID = Mvmt.MvtHdrID and Acct.RA_Source = Mvmt.RA_Source
 
Left join PROD_EDW_BASE.RA_Business_Locale MvmtHdrLoc on Mvmt.MvtHdrLcleID = MvmtHdrLoc.LcleID and Mvmt.RA_Source = MvmtHdrLoc.RA_Source
Left join PROD_EDW_BASE.RA_Business_Locale MvmtHdrOrgLoc on Mvmt.MvtHdrOrgnLcleID = MvmtHdrOrgLoc.LcleID and Mvmt.RA_Source = MvmtHdrOrgLoc.RA_Source
Left join PROD_EDW_BASE.RA_Business_Locale MvmtHdrDestLoc on Mvmt.MvtHdrDstntnLcleID = MvmtHdrDestLoc.LcleID and Mvmt.RA_Source = MvmtHdrDestLoc.RA_Source;
--------------------------------------------------------------------------------

-- We create tables in PROD_EDW_BASE, and then create a 1:1 view in PROD_EDW_BASE_VIEWS. 
REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_Acct_Sales_Classification
AS LOCKING ROW ACCESS -- Locks table while view does its pull, unlocks when done
SELECT  	RA_Acct_Sales.RA_Source, AccountingYear, AccountingMonth, AccountDetailID,
		InternalBA, InternalBAID, ExternalBA, ExternalBAID, TransactionDate,
		CreatedDate, PayableMatchingStatus, AcctDtl_SrcTable_Desc, TransValue,
		Volume, SupplyDemand, TransactionType, AcctDtlTrnsctnTypID, AcctDtlSrceTble,
		AcctDtlSrceTble_Desc, AccountingPeriod, AccntngPrdID, LcleNme,
		LcleID, DestLocale, DestLocaleID, ParentProductName, ParentProduct,
		ParentProdID, ChildProductName, ChildProduct, ChildProdID, DealNumber,
		DlHdrID, DlDtlID, DealDetailID, BOL, MvtDcmntDte, MvtHdrID, LineNumber,
		MvtHdrTyp, NAME, MvtHdrDte, MvtHdrQty, MvtHdrGrssQty, MvtHdrLocale,
		MvtHdrLocalID, MvtHdrOriginLocale, MvtHdrOriginLocaleID, MvtHdrDestinationLocale,
		MvtHdrDestinationLocaleID, RA_PRODUCT_GROUP.Classification
FROM PROD_EDW_BASE_VIEWS.RA_Acct_Sales
INNER JOIN PROD_EDW_BASE_VIEWS.RA_PRODUCT_GROUP 
	ON RA_Acct_Sales.RA_Source = RA_PRODUCT_GROUP.RA_Source
		AND RA_PRODUCT_GROUP.PrdctID=  RA_Acct_Sales.ChildProdID;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_BUSINESS_ASSOCIATE
as Locking Row ACCESS
Select * from PROD_EDW_BASE.RA_BUSINESS_ASSOCIATE;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_BUSINESS_LOCALE
as Locking Row ACCESS
Select * from PROD_EDW_BASE.RA_BUSINESS_LOCALE;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_DEAL
as Locking Row ACCESS
Select * from PROD_EDW_BASE.RA_DEAL;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_MOVEMENT
as Locking Row ACCESS
Select * from PROD_EDW_BASE.RA_Movement;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_PRODUCT
as Locking Row ACCESS
Select * from PROD_EDW_BASE.RA_PRODUCT;
--------------------------------------------------------------------------------

-- We create tables in PROD_EDW_BASE, and then create a 1:1 view in PROD_EDW_BASE_VIEWS. 
REPLACE VIEW PROD_EDW_BASE_VIEWS.RA_PRODUCT_GROUP
AS LOCKING ROW ACCESS -- Locks table while view does its pull, unlocks when done
SELECT * FROM  PROD_EDW_BASE.RA_PRODUCT_GROUP;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.REFOPS
	(ref_prod_location,tag_id,eff_date,eff_hour,test_number,section,name,area,result_value,target_min,target_max,target)
AS
SELECT 
	pi.ref_prod_location as ref_prod_location, 
	tag_id as pi_tag_id, 
	trans_date as eff_date, 
	trans_hour as eff_hour, 
	cast('000000' as varchar(10)) as test_number,
	section as section,
	name as name,
	area as area,	
	cast(avg(tag_value) as Varchar(100)) as Result_Value,
	max(case when measurement_type = 'Min' then Plan_Value end) as "Target_Min",
	max(case when measurement_type = 'Max' then Plan_Value end) as "Target_Max",
	max(case when measurement_type = 'Target' then Plan_Value end) as "Target"
FROM PROD_EDW_BASE_VIEWS.PI
LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.refops_plan_target
	ON pi.ref_prod_location = refops_plan_target.ref_prod_location
	AND pi.trans_date = refops_plan_target.eff_date
	AND pi.tag_id = refops_plan_target.pi_tag
WHERE trans_source = 'Operations'
AND tag_value is not null
GROUP BY 1,2,3,4,5,6,7,8
UNION ALL
SELECT 
	lab_results.ref_prod_location as ref_prod_location, 
	pitag as pi_tag_id,
	date_sampled as eff_date,
	cast(EXTRACT(HOUR FROM time_sampled) AS smallint)  AS eff_hour,
	cast(test_number as varchar(10)) as test_number,
	section as section,
	name as name,
	area as area,	
	cast(max(Results_text) as Varchar(100)) as Result_Value,
	max(case when measurement_type = 'Min' then Plan_Value end) as "Target_Min",
	max(case when measurement_type = 'Max' then Plan_Value end) as "Target_Max",
	max(case when measurement_type = 'Target' then Plan_Value end) as "Target"
FROM PROD_EDW_BASE_VIEWS.Lab_Results
LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.refops_plan_target
	ON lab_results.ref_prod_location = refops_plan_target.ref_prod_location
	AND lab_results.date_sampled = refops_plan_target.eff_date
	AND lab_results.pitag = refops_plan_target.pi_tag
WHERE results_text is not null
AND results_text <> ' '
GROUP by 1,2,3,4,5,6,7,8
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.REFOPS_COMMENTS AS 
	LOCKING ROW
	ACCESS
SELECT		Ref_Prod_Location,
					Answer_Id,
					cast(null as integer) as Notes_Id,
					Question_ID,
					Module_Id,
					Shift_ID,
					Shift_Date,
					Shift_Time,
					Question,
					Question_Value,
					Question_Comments,
					Question_User as SRC_Created_By_User,
					Question_Update_Date as SRC_Last_Updated_Date, 
					Question_Update_Time as SRC_Last_Updated_Time,
					Option_Id,
					IsIssue,
					IsBlankIssue,
					ViewOrder,
					cast(null as integer) as ReportTypeId,
					cast(null as varchar(4000)) as UserNotes_Adj,
					cast(null as varchar(2000)) as NT_Title,
					cast(null as integer) as NoteNo,
					Create_Dttm,
					Last_Update_Dttm
FROM			PROD_EDW_BASE.REFOPS_COMMENTS
union all
select			Ref_Prod_Location,
					cast(null as integer) as Answer_Id,
					NotesId as Notes_Id,
					cast(null as integer) as Question_ID,
					ModuleID as Module_Id,
					ShiftId as Shift_ID,
					Shift_Date,
					Shift_Time,
					cast(null as varchar(200)) as Question,
					cast(null as varchar(200)) as Question_Value,
					cast(null as varchar(200)) as Question_Comments,
					CreatedByUser as SRC_Created_By_User,
					cast(SRC_Last_Update_Dttm as date format 'yyyy-mm-dd') as SRC_Last_Updated_Date, 
					cast(SRC_Last_Update_Dttm as time(6)) as SRC_Last_Updated_Time,
					cast(null as integer) as Option_Id,
					cast(null as integer) as IsIssue,
					cast(null as integer) as IsBlankIssue,
					cast(null as integer) as ViewOrder,
					ReportTypeId,
					UserNotes_Adj,
					NT_Title,
					NoteNo,
					Create_Dttm,
					Last_Update_Dttm
from				PROD_EDW_BASE.REFOPS_WNRL_COMMENTS;
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_views.REFOPS_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS

SELECT 
CAST ('OPERATIONS' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('LAB RESULTS' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (ref_prod_location AS VARCHAR(20))  AS LOCATION
,date_completed AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.LAB_RESULTS
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('OPERATIONS' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('BLEND' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (ref_prod_location AS VARCHAR(20))  AS LOCATION
,blenddate AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.BLEND
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('OPERATIONS' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('BLEND RECIPE' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (ref_prod_location AS VARCHAR(20))  AS LOCATION
,closegaugedate AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.BLENDRECIPE
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('PLANNING' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('OPERATING TARGETS' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (ref_prod_location AS VARCHAR(20))  AS LOCATION
,eff_date AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.REFOPS_PLAN_TARGET
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('PLANNING' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('PRODUCTION TARGETS' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (ref_prod_location AS VARCHAR(20))  AS LOCATION
,planned_month AS EFF_DATE
,COUNT(planned_month) AS RECORD_CT
FROM prod_edw_base_views.REFOPS_PLAN_PRODUCTION
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('PLANNING' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('PRODUCT PRICING' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (ref_prod_location AS VARCHAR(20))  AS LOCATION
,planned_month AS EFF_DATE
,COUNT(planned_month) AS RECORD_CT
FROM prod_edw_base_views.REFOPS_PLAN_PRICE
GROUP BY 1,2,3,4
UNION ALL

SELECT 
CAST ('PI' AS VARCHAR(20))  AS TABLE_NAME
,CAST (TRANS_SOURCE AS VARCHAR(20))  AS SOURCE_NAME
,CAST (REF_PROD_LOCATION AS VARCHAR(20))  AS LOCATION
,TRANS_DATE AS EFF_DATE
,COUNT(TRANS_DATE) AS RECORD_CT
FROM prod_edw_base_views.PI
WHERE ref_prod_location NOT IN 'El Paso Refinery'
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('PI' AS VARCHAR(20))  AS TABLE_NAME
,CAST (TRANS_SOURCE AS VARCHAR(20))  AS SOURCE_NAME
,CAST (REF_PROD_LOCATION AS VARCHAR(20))  AS LOCATION
,TRANS_DATE AS EFF_DATE
,COUNT(TRANS_DATE) AS RECORD_CT
FROM prod_edw_base_views.PI
WHERE ref_prod_location IN 'El Paso Refinery'
	AND trans_source ='FCCU'
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('PI' AS VARCHAR(20))  AS TABLE_NAME
,CAST (TRANS_SOURCE AS VARCHAR(20))  AS SOURCE_NAME
,CAST (REF_PROD_LOCATION AS VARCHAR(20))  AS LOCATION
,TRANS_DATE AS EFF_DATE
,COUNT(TRANS_DATE) AS RECORD_CT
FROM prod_edw_base_views.PI
WHERE ref_prod_location = 'El Paso Refinery'
	AND trans_source ='Operations'
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('PI' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('Environmental' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (REF_PROD_LOCATION AS VARCHAR(20))  AS LOCATION
,TRANS_DATE AS EFF_DATE
,COUNT(TRANS_DATE) AS RECORD_CT
FROM prod_edw_base_views.PI
WHERE ref_prod_location = 'El Paso Refinery'
	AND trans_source NOT IN ('FCCU','Operations')
GROUP BY 1,2,3,4

UNION ALL
SELECT	
CAST ('PI' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('DESC_UNITS' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (TREF_PROD_LOCATION AS VARCHAR(20))  AS LOCATION
,CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	prod_edw_base_views.PI_DESC_UNITS
GROUP BY 1,2,3,4
UNION ALL
SELECT 
CAST ('PI' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('SATELLITE' AS VARCHAR(20))  AS SOURCE_NAME
,CAST (REF_PROD_LOCATION AS VARCHAR(20))  AS LOCATION
,TRANS_DATE AS EFF_DATE
,COUNT(TRANS_DATE) AS RECORD_CT
FROM prod_edw_base_views.PI_Satellite
GROUP BY 1,2,3,4;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.REFOPS_Incident_Action
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.REFOPS_INCIDENT_ACTION;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.REFOPS_Incident_Action_De
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.REFOPS_INCIDENT_ACTION_DE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.REFOPS_Incident_ATR_Empl
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.REFOPS_INCIDENT_ATR_EMPL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.REFOPS_Incident_Report
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.REFOPS_INCIDENT_REPORT;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Refops_Plan_Price AS
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.REFOPS_PLAN_PRICE;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.REFOPS_PLAN_PRICE_SUBCAT4 (Ref_prod_location, Planned_Month, Product_ID, Planned_Price, Prod_Group_SubCat4,
		Create_Dttm, Last_Update_Dttm ) AS
	LOCKING ROW
	ACCESS
SELECT refops_plan_price.Ref_prod_location, Planned_Month, refops_plan_price.Product_ID, Planned_Price,
prod_group_subcat4, refops_plan_price.Create_Dttm, refops_plan_price.Last_Update_Dttm
FROM	PROD_EDW_BASE_VIEWS.REFOPS_PLAN_PRICE
Left Outer Join prod_edw_base_views.prod_hier
	ON prod_hier.product_id = refops_plan_price.product_id
	and prod_hier.ref_prod_location = refops_plan_price.ref_prod_location
	and prod_hier.report_desc = 'refops'
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.Refops_Plan_Price_XRef AS
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.REFOPS_PLAN_PRICE_XREF;
--------------------------------------------------------------------------------

Create view PROD_EDW_BASE_VIEWS.Refops_Plan_Production ( Ref_prod_location, Planned_Month, Product_Id, Planned_Volume,
		Create_dttm, Last_update_dttm ) AS
LOCKING ROW
ACCESS
SELECT	Ref_prod_location, Planned_Month, Product_Id, Planned_Volume,
		Create_dttm, Last_update_dttm
FROM	PROD_EDW_BASE.REFOPS_PLAN_PRODUCTION;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.Refops_Plan_Target ( Ref_Prod_Location, Eff_Date, PI_Tag, Measurement_Type, Section,
		Name, Area, Plan_Value, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW	ACCESS
	SELECT	Ref_Prod_Location, Eff_Date, PI_Tag, Measurement_Type, Section,
		Name, Area, Plan_Value, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.REFOPS_PLAN_TARGET
--------------------------------------------------------------------------------

Create view PROD_EDW_BASE_VIEWS.Refops_PumpersLog (PumpersLogTimeStamp, IndexNum, Orders, LogCount, PumpOrder,
		LogType, ProductID, From_TankID, From_Type, From_SubType, From_OpenWater_Gauge,
		From_OpenWater_FT, From_OpenWater_In, From_OpenWater_16, From_OpenTank_Gauge,
		From_OpenTank_FT, From_OpenTank_In, From_OpenTank_16, From_OpenTemp,
		From_OpenGravity, From_OpenGauger, From_OpenGaugeTime, From_OpenGross,
		From_OpenNet, From_CloseWater_Gauge, From_CloseWater_FT, From_CloseWater_In,
		From_CloseWater_16, From_CloseTank_Gauge, From_CloseTank_FT,
		From_CloseTank_In, From_CloseTank_16, From_CloseTemp, From_CloseGravity,
		From_CloseGauger, From_CloseGaugeTime, From_CloseGross, From_CloseNet,
		From_BarrelsGross, From_BarrelsNet, To_TankID, To_Type, To_SubType,
		To_OpenWater_Gauge, To_OpenWater_FT, To_OpenWater_In, To_OpenWater_16,
		To_OpenTank_Gauge, To_OpenTank_FT, To_OpenTank_In, To_OpenTank_16,
		To_OpenTemp, To_OpenGravity, To_OpenGauger, To_OpenGaugeTime,
		To_OpenSwing, To_OpenGross, To_OpenNet, To_CloseWater_Gauge,
		To_CloseWater_FT, To_CloseWater_In, To_CloseWater_16, To_CloseTank_Gauge,
		To_CloseTank_FT, To_CloseTank_In, To_CloseTank_16, To_CloseTemp,
		To_CloseGravity, To_CloseGauger, To_CloseGaugeTime, To_CloseGross,
		To_CloseNet, To_BarrelsGross, To_BarrelsNet, PumpStart, PumpEnd,
		MovementID, MovementStart, MovementEnd, BarrelsToPump, TimeInterval,
		Comments, MeterOpenTime, MeterCloseTime, Link, OpenAmbTemp, CloseAmbTemp,
		From_flags, To_flags, Ref_Prod_Location, Create_Dttm, Last_Update_Dttm) as
		Locking row Access
SELECT	PumpersLogTimeStamp, IndexNum, Orders, LogCount, PumpOrder,
		LogType, ProductID, From_TankID, From_Type, From_SubType, From_OpenWater_Gauge,
		From_OpenWater_FT, From_OpenWater_In, From_OpenWater_16, From_OpenTank_Gauge,
		From_OpenTank_FT, From_OpenTank_In, From_OpenTank_16, From_OpenTemp,
		From_OpenGravity, From_OpenGauger, From_OpenGaugeTime, From_OpenGross,
		From_OpenNet, From_CloseWater_Gauge, From_CloseWater_FT, From_CloseWater_In,
		From_CloseWater_16, From_CloseTank_Gauge, From_CloseTank_FT,
		From_CloseTank_In, From_CloseTank_16, From_CloseTemp, From_CloseGravity,
		From_CloseGauger, From_CloseGaugeTime, From_CloseGross, From_CloseNet,
		From_BarrelsGross, From_BarrelsNet, To_TankID, To_Type, To_SubType,
		To_OpenWater_Gauge, To_OpenWater_FT, To_OpenWater_In, To_OpenWater_16,
		To_OpenTank_Gauge, To_OpenTank_FT, To_OpenTank_In, To_OpenTank_16,
		To_OpenTemp, To_OpenGravity, To_OpenGauger, To_OpenGaugeTime,
		To_OpenSwing, To_OpenGross, To_OpenNet, To_CloseWater_Gauge,
		To_CloseWater_FT, To_CloseWater_In, To_CloseWater_16, To_CloseTank_Gauge,
		To_CloseTank_FT, To_CloseTank_In, To_CloseTank_16, To_CloseTemp,
		To_CloseGravity, To_CloseGauger, To_CloseGaugeTime, To_CloseGross,
		To_CloseNet, To_BarrelsGross, To_BarrelsNet, PumpStart, PumpEnd,
		MovementID, MovementStart, MovementEnd, BarrelsToPump, TimeInterval,
		Comments, MeterOpenTime, MeterCloseTime, Link, OpenAmbTemp, CloseAmbTemp,
		From_flags, To_flags, Ref_Prod_Location, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.REFOPS_PUMPERSLOG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Refops_UEDC AS 
	LOCKING ROW
	ACCESS
	SELECT *
FROM	PROD_EDW_BASE.REFOPS_UEDC;
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.Ref_GMR ( Operating_Unit, Property_1, Property_2, Units, Tag_ID, Create_dttm,
		Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
SELECT	Operating_Unit, Property_1, Property_2, Units, Tag_ID, Create_dttm,
		Last_update_dttm
FROM	PROD_EDW_BASE.REF_GMR;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Ref_Product ( Product_ID,Ref_Prod_Location,
		Product_Group_ID,Product_Code,Product_Desc,Product_Type,Density,
		Trans_Dttm,Trans_Update_Dttm,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Ref_Product.Product_ID,PROD_EDW_BASE.Ref_Product.Ref_Prod_Location,
		PROD_EDW_BASE.Ref_Product.Product_Group_ID,PROD_EDW_BASE.Ref_Product.Product_Code,
		PROD_EDW_BASE.Ref_Product.Product_Desc,PROD_EDW_BASE.Ref_Product.Product_Type,
		PROD_EDW_BASE.Ref_Product.Density,PROD_EDW_BASE.Ref_Product.Trans_Dttm,
		PROD_EDW_BASE.Ref_Product.Trans_Update_Dttm,PROD_EDW_BASE.Ref_Product.Create_dttm,
		PROD_EDW_BASE.Ref_Product.Last_Update_Dttm
		FROM PROD_EDW_BASE.Ref_Product;
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.Ref_Product_Audit (Product_ID, Ref_Prod_Location, Create_dttm, Last_update_dttm) as
LOCKING ROW
ACCESS
SELECT	Product_ID, Ref_Prod_Location, Create_dttm, Last_update_dttm
FROM	prod_edw_base.REF_PRODUCT_AUDIT;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Ref_Product_SiteSpecific ( Ref_Prod_Location, Product_ID, Product_Group_ID, Product_Order,
		RailProduct, RailProductCapacity, TruckProduct, ByWeight, ByWeightDensity,
		RailShipInfo, RailShipOther, DailyReceiptsTag, DailyReceiptsPoint,
		DailyShipmentsTag, DailyShipmentsPoint, DailyProductionTag, DailyProductionPoint,
		AvgDailyProductionTag, AvgDailyProductionPoint, TMSProductID,
		CrudeProductType, PRLProduct, ByWeight_Truck, ByWeightDensity_Truck,
		EProductID, Create_dttm, Last_update_dttm) AS 
	LOCKING ROW
	ACCESS
SELECT	Ref_Prod_Location, Product_ID, Product_Group_ID, Product_Order,
		RailProduct, RailProductCapacity, TruckProduct, ByWeight, ByWeightDensity,
		RailShipInfo, RailShipOther, DailyReceiptsTag, DailyReceiptsPoint,
		DailyShipmentsTag, DailyShipmentsPoint, DailyProductionTag, DailyProductionPoint,
		AvgDailyProductionTag, AvgDailyProductionPoint, TMSProductID,
		CrudeProductType, PRLProduct, ByWeight_Truck, ByWeightDensity_Truck,
		EProductID, Create_dttm, Last_update_dttm
FROM	PROD_EDW_BASE.REF_PRODUCT_SITESPECIFIC;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Ref_Prod_Family ( Product_Family_ID,
		Ref_Prod_Location,Product_Family_Code,Product_Family_Description,
		Trans_Dttm,Trans_Update_Dttm,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Ref_Product_Family.Product_Family_ID,PROD_EDW_BASE.Ref_Product_Family.Ref_Prod_Location,
		PROD_EDW_BASE.Ref_Product_Family.Product_Family_Code,PROD_EDW_BASE.Ref_Product_Family.Product_Family_Description,
		PROD_EDW_BASE.Ref_Product_Family.Trans_Dttm,PROD_EDW_BASE.Ref_Product_Family.Trans_Update_Dttm,
		PROD_EDW_BASE.Ref_Product_Family.Create_dttm,PROD_EDW_BASE.Ref_Product_Family.Last_Update_Dttm
		FROM PROD_EDW_BASE.Ref_Product_Family;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Ref_Prod_Group ( Product_Group_ID,
		Ref_Prod_Location,Product_Group_Code,Product_Group_Desc,Yield_Type,
		Product_Family_ID,Trans_Dttm,Trans_Update_Dttm,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Ref_Product_Group.Product_Group_ID,PROD_EDW_BASE.Ref_Product_Group.Ref_Prod_Location,
		PROD_EDW_BASE.Ref_Product_Group.Product_Group_Code,PROD_EDW_BASE.Ref_Product_Group.Product_Group_Desc,
		PROD_EDW_BASE.Ref_Product_Group.Yield_Type,PROD_EDW_BASE.Ref_Product_Group.Product_Family_ID,
		PROD_EDW_BASE.Ref_Product_Group.Trans_Dttm,PROD_EDW_BASE.Ref_Product_Group.Trans_Update_Dttm,
		PROD_EDW_BASE.Ref_Product_Group.Create_dttm,PROD_EDW_BASE.Ref_Product_Group.Last_Update_Dttm
		FROM PROD_EDW_BASE.Ref_Product_Group;
--------------------------------------------------------------------------------

Replace view PROD_EDW_BASE_VIEWS.REP_SECU_LIST as LOCKING ROW ACCESS
select * from PROD_EDW_BASE.REP_SECU_LIST;
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.Retail_Comp_Pricing ( Eff_date, Station_id, Station_desc, Station_address, Station_city,	Station_state, Competitor_id, Competitor_name, Competitor_address, Competitor_state, Competitor_county, Competitor_city, Competitor_zip,
		Competitor_brand, Competitor_distance, Competitor_unlprice, Competitor_unldate, Competitor_unltime, Competitor_midprice, Competitor_middate, 	Competitor_midtime, Competitor_preprice, Competitor_predate,
		Competitor_pretime, Competitor_dslprice, Competitor_dsldate,	Competitor_dsltime, Create_dttm, Last_Update_Dttm) AS
		LOCKING ROW ACCESS
SELECT	Eff_date, Station_id, Station_desc, Station_address, Station_city,
		Station_state, Competitor_id, Competitor_name, Competitor_address,
		Competitor_state, Competitor_county, Competitor_city, Competitor_zip,
		Competitor_brand, Competitor_distance, Competitor_unlprice, Competitor_unldate,
		Competitor_unltime, Competitor_midprice, Competitor_middate,
		Competitor_midtime, Competitor_preprice, Competitor_predate,
		Competitor_pretime, Competitor_dslprice, Competitor_dsldate,
		Competitor_dsltime, Create_dttm, Last_Update_Dttm
FROM	PROD_edw_base.RETAIL_COMP_PRICING
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_views.RETAIL_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS

SELECT 
CAST ('RETAIL' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('COMPETITOR PRICING' AS VARCHAR(20))  AS SOURCE_NAME
,CAST ('NONE' AS VARCHAR(50))  AS LOCATION
,EFF_DATE AS EFF_DATE
,COUNT(EFF_DATE) AS RECORD_CT
FROM prod_edw_base_views.RETAIL_COMP_PRICING
GROUP BY 1,2,3,4

UNION ALL

SELECT 
CAST ('RETAIL' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('C STORE TERADATA' AS VARCHAR(20))  AS SOURCE_NAME
,CAST ('NONE' AS VARCHAR(50))  AS LOCATION
,BUSINESS_DATE AS EFF_DATE
,SUM(Record_Count) AS RECORD_CT
FROM prod_edw_base_views.NTR_SITE_TABLE_BALANCE
GROUP BY 1,2,3,4

UNION ALL

SELECT 
CAST ('RETAIL' AS VARCHAR(20))  AS TABLE_NAME
,CAST ('C STORE RADIANT' AS VARCHAR(20))  AS SOURCE_NAME
,CAST ('NONE' AS VARCHAR(50))  AS LOCATION
,BUSINESS_DATE AS EFF_DATE
,SUM(Source_Record_Count) AS RECORD_CT
FROM prod_edw_base_views.NTR_SITE_TABLE_BALANCE
GROUP BY 1,2,3,4;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.RINS_Details
AS LOCKING ROW ACCESS
SELECT 	*
FROM		PROD_EDW_BASE.RINS_DETAILS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.SOX_ETL_Daily_Audit
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.SOX_ETL_DAILY_AUDIT;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.SSRS_BorrowingBase(Location_Category, Comm_Prod_Location, Product_Category, Prod_Group_Subcat4,
		Pricing_Code, Price_Type, Divisor, UOM_Factor, Diff_Factor, 
		Create_Dttm, Last_Update_Dttm) 
		AS LOCKING ROW ACCESS
SELECT	Location_Category, Comm_Prod_Location, Product_Category, Prod_Group_Subcat4,
		Pricing_Code, Price_Type, Divisor, UOM_Factor, Diff_Factor,
		Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.SSRS_BORROWINGBASE;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.SSRS_Rep_Hierarchy ( Location_Category, Sort_Order, Report_Group, Create_Dttm,
		Last_Update_Dttm ) AS 
	SELECT	Location_Category, Sort_Order, Report_Group, Create_Dttm,
		Last_Update_Dttm
FROM	PROD_EDW_BASE.SSRS_REP_HIERARCHY;
--------------------------------------------------------------------------------

--***************************************

REPLACE	VIEW PROD_EDW_BASE_VIEWS.STRAPPING ( Tank_ID, Tank_Number, Ref_Prod_Location,
		Product_Height,Product_Quantity,Tank_Feet,Tank_Inches,Tank_Frac,
		Trans_Dttm,Trans_Update_Dttm,Create_dttm,Last_update_dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT	Tank_ID, master_code AS Tank_Number, strapping.ref_prod_location, Product_Height, Product_Quantity
		,Tank_Feet, Tank_Inches, Tank_Frac
		,strapping.Trans_Dttm,strapping.Trans_Update_Dttm,strapping.Create_dttm,strapping.Last_update_dttm
FROM prod_edw_base.Strapping
INNER JOIN prod_edw_base.master
ON master.ref_prod_location = strapping.ref_prod_location
	AND master.master_id = strapping.tank_id;
--------------------------------------------------------------------------------

REPLACE             VIEW prod_edw_base_views.TABLE_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS
SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(50))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.COMMERCIAL_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(20))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.WSALE_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(20))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.BOL_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(20))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.RAILCAR_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(20))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.PIPELINE_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(50))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.REFOPS_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(20))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.MAINT_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(20))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.MBO_EFF_DATE_COUNTS

UNION ALL

SELECT 
CAST (TABLE_NAME AS VARCHAR(20))  AS TABLE_NAME
,CAST (SOURCE_NAME AS VARCHAR(20))  AS SOURCE_NAME
,CAST (LOCATION AS VARCHAR(20))  AS LOCATION
,EFF_DATE
,RECORD_CT
FROM prod_edw_base_views.RETAIL_EFF_DATE_COUNTS

;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Tank ( Eff_Date,Gross_Quantity,
		Net_Quantity,Temperature,Density,Gauge,Gauge_FT,Gauge_IN,Gauge_FR,
		BSW,BSW_FT,BSW_IN,BSW_FR,Water,Rec_Weight,Rec_Volume,Tolerance,
		Recon_Flag,Observed_Density,Create_dttm,Last_Update_Dttm,Trans_Dttm,
		Trans_Update_Dttm,Tank_ID,Ref_Prod_Location,Product_ID ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Tank.Eff_Date,PROD_EDW_BASE.Tank.Gross_Quantity,
		PROD_EDW_BASE.Tank.Net_Quantity,PROD_EDW_BASE.Tank.Temperature,
		PROD_EDW_BASE.Tank.Density,PROD_EDW_BASE.Tank.Gauge,PROD_EDW_BASE.Tank.Gauge_FT,
		PROD_EDW_BASE.Tank.Gauge_IN,PROD_EDW_BASE.Tank.Gauge_FR,PROD_EDW_BASE.Tank.BSW,
		PROD_EDW_BASE.Tank.BSW_FT,PROD_EDW_BASE.Tank.BSW_IN,PROD_EDW_BASE.Tank.BSW_FR,
                PROD_EDW_BASE.Tank.Water,PROD_EDW_BASE.Tank.Rec_Weight,
                PROD_EDW_BASE.Tank.Rec_Volume,PROD_EDW_BASE.Tank.Tolerance,
                PROD_EDW_BASE.Tank.Recon_Flag,PROD_EDW_BASE.Tank.Observed_Density,
		PROD_EDW_BASE.Tank.Create_dttm,PROD_EDW_BASE.Tank.Last_Update_Dttm,
		PROD_EDW_BASE.Tank.Trans_Dttm,PROD_EDW_BASE.Tank.Trans_Update_Dttm,
		PROD_EDW_BASE.Tank.Tank_ID,PROD_EDW_BASE.Tank.Ref_Prod_Location,
		PROD_EDW_BASE.Tank.Product_ID
		FROM PROD_EDW_BASE.Tank;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.TankSiteSpecific
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.TANKSITESPECIFIC;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Tank_Info ( Tank_ID,Ref_Prod_Location,
		Min_Op_Qty,Max_Op_Qty,Critical_Low,Critical_High,Roof_Adjustment,
		Height,Diameter,Base_Density,DO_Composition,DO_Crude_Tracking,
		DO_Reconcile,Recon_Pool_ID,Density_Type,Shell_Insulated,Shell_Type,
		Shell_Strap_Temp,Flags,Product,Gross_Volume,Raw_Net_Volume,Man_Net_Volume,
		Man_Product,Man_Gross_Volume,Raw_Temperature,Man_Temperature,
		Raw_Density,Man_Density,Raw_Gauge,Man_Gauge,Raw_BSW,Man_BSW,
		Water_Percent,Man_Water_Percent,Date_Strapped,Avail_Product,
		Avail_Cap,Net_Change,Trans_Dttm,Trans_Update_Dttm,Create_dttm,
		Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Tank_Info.Tank_ID,PROD_EDW_BASE.Tank_Info.Ref_Prod_Location,
		PROD_EDW_BASE.Tank_Info.Min_Op_Qty,PROD_EDW_BASE.Tank_Info.Max_Op_Qty,
		PROD_EDW_BASE.Tank_Info.Critical_Low,PROD_EDW_BASE.Tank_Info.Critical_High,
		PROD_EDW_BASE.Tank_Info.Roof_Adjustment,PROD_EDW_BASE.Tank_Info.Height,
		PROD_EDW_BASE.Tank_Info.Diameter,PROD_EDW_BASE.Tank_Info.Base_Density,
		PROD_EDW_BASE.Tank_Info.DO_Composition,PROD_EDW_BASE.Tank_Info.DO_Crude_Tracking,
		PROD_EDW_BASE.Tank_Info.DO_Reconcile,PROD_EDW_BASE.Tank_Info.Recon_Pool_ID,
		PROD_EDW_BASE.Tank_Info.Density_Type,PROD_EDW_BASE.Tank_Info.Shell_Insulated,
		PROD_EDW_BASE.Tank_Info.Shell_Type,PROD_EDW_BASE.Tank_Info.Shell_Strap_Temp,
		PROD_EDW_BASE.Tank_Info.Flags,PROD_EDW_BASE.Tank_Info.Product,
		PROD_EDW_BASE.Tank_Info.Gross_Volume,PROD_EDW_BASE.Tank_Info.Raw_Net_Volume,
		PROD_EDW_BASE.Tank_Info.Man_Net_Volume,PROD_EDW_BASE.Tank_Info.Man_Product,
		PROD_EDW_BASE.Tank_Info.Man_Gross_Volume,PROD_EDW_BASE.Tank_Info.Raw_Temperature,
		PROD_EDW_BASE.Tank_Info.Man_Temperature,PROD_EDW_BASE.Tank_Info.Raw_Density,
		PROD_EDW_BASE.Tank_Info.Man_Density,PROD_EDW_BASE.Tank_Info.Raw_Gauge,
		PROD_EDW_BASE.Tank_Info.Man_Gauge,PROD_EDW_BASE.Tank_Info.Raw_BSW,
		PROD_EDW_BASE.Tank_Info.Man_BSW,PROD_EDW_BASE.Tank_Info.Water_Percent,
		PROD_EDW_BASE.Tank_Info.Man_Water_Percent,PROD_EDW_BASE.Tank_Info.Date_Strapped,
		PROD_EDW_BASE.Tank_Info.Avail_Product,PROD_EDW_BASE.Tank_Info.Avail_Cap,
		PROD_EDW_BASE.Tank_Info.Net_Change,PROD_EDW_BASE.Tank_Info.Trans_Dttm,
		PROD_EDW_BASE.Tank_Info.Trans_Update_Dttm,PROD_EDW_BASE.Tank_Info.Create_dttm,
		PROD_EDW_BASE.Tank_Info.Last_Update_Dttm
		FROM PROD_EDW_BASE.Tank_Info;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.Tank_Temp_Correct AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.TANK_TEMP_CORRECT;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal ( Product_ID,Ref_Prod_Location,Eff_Date,Terminal_ID,
                                           Net_Quantity,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal.Product_ID,PROD_EDW_BASE.Terminal.Ref_Prod_Location,
		PROD_EDW_BASE.Terminal.Eff_Date,PROD_EDW_BASE.Terminal.Terminal_ID,
		PROD_EDW_BASE.Terminal.Net_Quantity,PROD_EDW_BASE.Terminal.Create_dttm,PROD_EDW_BASE.Terminal.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Allied_Raw ( Eff_Date,
		Input_Location,Input_Product_Name,Input_Tank_Number,UOM,Inv_Begin,
		Receipts,Transfers,Adjustments,Delivered,Inv_Close,Supply_Gain_Loss,
		Storage_Avail,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Eff_Date,PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Input_Location,
		PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Input_Product_Name,PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Input_Tank_Number,
		PROD_EDW_BASE.TERMINAL_ALLIED_RAW.UOM,PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Inv_Begin,
		PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Receipts,PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Transfers,
		PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Adjustments,PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Delivered,
		PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Inv_Close,PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Supply_Gain_Loss,
		PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Storage_Avail,PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Create_dttm,
		PROD_EDW_BASE.TERMINAL_ALLIED_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_ALLIED_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Allied_Stg ( Eff_Date,
		Input_Location,Input_Product_Name,Input_Tank_Number,UOM,Inv_Begin,
		Receipts,Transfers,Adjustments,Delivered,Inv_Close,Supply_Gain_Loss,
		Storage_Avail,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_ALLIED_STG.Eff_Date,
	    PROD_EDW_BASE.TERMINAL_ALLIED_STG.Input_Location,
		PROD_EDW_BASE.TERMINAL_ALLIED_STG.Input_Product_Name,PROD_EDW_BASE.TERMINAL_ALLIED_STG.Input_Tank_Number,
		PROD_EDW_BASE.TERMINAL_ALLIED_STG.UOM,PROD_EDW_BASE.TERMINAL_ALLIED_STG.Inv_Begin,
		PROD_EDW_BASE.TERMINAL_ALLIED_STG.Receipts,PROD_EDW_BASE.TERMINAL_ALLIED_STG.Transfers,
		PROD_EDW_BASE.TERMINAL_ALLIED_STG.Adjustments,PROD_EDW_BASE.TERMINAL_ALLIED_STG.Delivered,
		PROD_EDW_BASE.TERMINAL_ALLIED_STG.Inv_Close,PROD_EDW_BASE.TERMINAL_ALLIED_STG.Supply_Gain_Loss,
		PROD_EDW_BASE.TERMINAL_ALLIED_STG.Storage_Avail,PROD_EDW_BASE.TERMINAL_ALLIED_STG.Create_dttm,
		PROD_EDW_BASE.TERMINAL_ALLIED_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_ALLIED_STG;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.Terminal_Blackwater_Raw ( Eff_Date,Input_Location_ID,
		Stock_Holder_Id,Input_Location_Name,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Eff_Date,PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Input_Location_ID,
		PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Stock_Holder_Id,PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Input_Location_Name,
		PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Stock_Holder_Name,PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Input_Product_ID,
		PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Input_Product_Name,PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Transaction_Desc,
		PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Balance_Type,PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Input_Quantity,
		PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Input_Uom,PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Create_dttm,
		PROD_EDW_BASE.Terminal_BLACKWATER_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_BLACKWATER_RAW;
--------------------------------------------------------------------------------

Create	VIEW PROD_EDW_BASE_VIEWS.Terminal_Blackwater_Stg ( Eff_Date,Input_Location_ID,
		Input_Location_Name,Stock_Holder_Id,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_Blackwater_STG.Eff_Date,PROD_EDW_BASE.Terminal_Blackwater_STG.Input_Location_ID,
		PROD_EDW_BASE.Terminal_Blackwater_STG.Input_Location_Name,PROD_EDW_BASE.Terminal_Blackwater_STG.Stock_Holder_Id,
		PROD_EDW_BASE.Terminal_Blackwater_STG.Stock_Holder_Name,PROD_EDW_BASE.Terminal_Blackwater_STG.Input_Product_ID,
		PROD_EDW_BASE.Terminal_Blackwater_STG.Input_Product_Name,PROD_EDW_BASE.Terminal_Blackwater_STG.Transaction_Desc,
		PROD_EDW_BASE.Terminal_Blackwater_STG.Balance_Type,PROD_EDW_BASE.Terminal_Blackwater_STG.Input_Quantity,
		PROD_EDW_BASE.Terminal_Blackwater_STG.Input_Uom,PROD_EDW_BASE.Terminal_Blackwater_STG.Create_dttm,
		PROD_EDW_BASE.Terminal_Blackwater_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_Blackwater_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Caljet_Raw ( Eff_Date,
		Input_Product_ID,Balance_Type,Stock_Holder_Id,Input_Location_Name,
		Stock_Holder_Name,Transaction_Desc,Input_Product_Name,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	SELECT PROD_EDW_BASE.TERMINAL_CALJET_RAW.Eff_Date,PROD_EDW_BASE.TERMINAL_CALJET_RAW.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_CALJET_RAW.Balance_Type,PROD_EDW_BASE.TERMINAL_CALJET_RAW.Stock_Holder_Id,
		PROD_EDW_BASE.TERMINAL_CALJET_RAW.Input_Location_Name,PROD_EDW_BASE.TERMINAL_CALJET_RAW.Stock_Holder_Name,
		PROD_EDW_BASE.TERMINAL_CALJET_RAW.Transaction_Desc,PROD_EDW_BASE.TERMINAL_CALJET_RAW.Input_Product_Name,
		PROD_EDW_BASE.TERMINAL_CALJET_RAW.Input_Quantity,PROD_EDW_BASE.TERMINAL_CALJET_RAW.Input_Uom,
		PROD_EDW_BASE.TERMINAL_CALJET_RAW.Create_dttm,PROD_EDW_BASE.TERMINAL_CALJET_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_CALJET_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Caljet_Stg ( Eff_Date,
		Input_Product_ID,Balance_Type,Stock_Holder_Id,Input_Location_ID,
		Input_Location_Name,Stock_Holder_Name,Transaction_Desc,Input_Product_Name,
		Input_Quantity,Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_CALJET_STG.Eff_Date,PROD_EDW_BASE.TERMINAL_CALJET_STG.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_CALJET_STG.Balance_Type,PROD_EDW_BASE.TERMINAL_CALJET_STG.Stock_Holder_Id,
		PROD_EDW_BASE.TERMINAL_CALJET_STG.Input_Location_ID,PROD_EDW_BASE.TERMINAL_CALJET_STG.Input_Location_Name,
		PROD_EDW_BASE.TERMINAL_CALJET_STG.Stock_Holder_Name,PROD_EDW_BASE.TERMINAL_CALJET_STG.Transaction_Desc,
		PROD_EDW_BASE.TERMINAL_CALJET_STG.Input_Product_Name,PROD_EDW_BASE.TERMINAL_CALJET_STG.Input_Quantity,
		PROD_EDW_BASE.TERMINAL_CALJET_STG.Input_Uom,PROD_EDW_BASE.TERMINAL_CALJET_STG.Create_dttm,
		PROD_EDW_BASE.TERMINAL_CALJET_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_CALJET_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Cato_Raw ( Eff_Date,Input_Product_ID,
		Balance_Type,Input_Location_ID,Input_Location_Name,Stock_Holder_Id,
		Stock_Holder_Name,Transaction_Desc,Input_Product_Name,Input_Quantity,Input_Uom,
		Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_CATO_RAW.Eff_Date,PROD_EDW_BASE.TERMINAL_CATO_RAW.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_CATO_RAW.Balance_Type,PROD_EDW_BASE.TERMINAL_CATO_RAW.Input_Location_ID,
		PROD_EDW_BASE.TERMINAL_CATO_RAW.Input_Location_Name,PROD_EDW_BASE.TERMINAL_CATO_RAW.Stock_Holder_Id,
		PROD_EDW_BASE.TERMINAL_CATO_RAW.Stock_Holder_Name,PROD_EDW_BASE.TERMINAL_CATO_RAW.Transaction_Desc,
		PROD_EDW_BASE.TERMINAL_CATO_RAW.Input_Product_Name,PROD_EDW_BASE.TERMINAL_CATO_RAW.Input_Quantity,
		PROD_EDW_BASE.TERMINAL_CATO_RAW.Input_Uom,		PROD_EDW_BASE.TERMINAL_CATO_RAW.Create_dttm,
		PROD_EDW_BASE.TERMINAL_CATO_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_CATO_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Cato_Stg ( Eff_Date,Input_Product_ID,
		Balance_Type,Input_Location_ID,Input_Location_Name,Stock_Holder_Id,
		Stock_Holder_Name,Transaction_Desc,Input_Product_Name,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_CATO_STG.Eff_Date,PROD_EDW_BASE.TERMINAL_CATO_STG.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_CATO_STG.Balance_Type,PROD_EDW_BASE.TERMINAL_CATO_STG.Input_Location_ID,
		PROD_EDW_BASE.TERMINAL_CATO_STG.Input_Location_Name,PROD_EDW_BASE.TERMINAL_CATO_STG.Stock_Holder_Id,
		PROD_EDW_BASE.TERMINAL_CATO_STG.Stock_Holder_Name,PROD_EDW_BASE.TERMINAL_CATO_STG.Transaction_Desc,
		PROD_EDW_BASE.TERMINAL_CATO_STG.Input_Product_Name,PROD_EDW_BASE.TERMINAL_CATO_STG.Input_Quantity,
		PROD_EDW_BASE.TERMINAL_CATO_STG.Input_Uom,PROD_EDW_BASE.TERMINAL_CATO_STG.Create_dttm,
		PROD_EDW_BASE.TERMINAL_CATO_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_CATO_STG;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.Terminal_Coolidge_Raw AS 
	LOCKING ROW
	ACCESS
	SELECT*
FROM	PROD_EDW_BASE.Terminal_Coolidge_Raw;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.Terminal_Coolidge_Stg AS 
	LOCKING ROW
	ACCESS
	SELECT*
FROM	PROD_EDW_BASE.Terminal_Coolidge_Stg;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.Terminal_Customer
as Locking Row Access 
Select * FROM PROD_EDW_BASE.Terminal_Customer;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Decoder ( Product_ID,
		Input_Product_Name,Terminal_ID,Ref_Prod_Location,Product_Name,
		Product_Name_3PT,Location_ID_3PT,Other_ID_3PT,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_Decoder.Product_ID,PROD_EDW_BASE.Terminal_Decoder.Input_Product_Name,
		PROD_EDW_BASE.Terminal_Decoder.Terminal_ID,PROD_EDW_BASE.Terminal_Decoder.Ref_Prod_Location,
		PROD_EDW_BASE.Terminal_Decoder.Product_Name,PROD_EDW_BASE.Terminal_Decoder.Product_Name_3PT,
		PROD_EDW_BASE.Terminal_Decoder.Location_ID_3PT,PROD_EDW_BASE.Terminal_Decoder.Other_ID_3PT,
		PROD_EDW_BASE.Terminal_Decoder.Create_dttm,PROD_EDW_BASE.Terminal_Decoder.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_Decoder;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Km_Raw ( Eff_Date,Input_Location_ID,
		Stock_Holder_Id,Input_Location_Name,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_KM_RAW.Eff_Date,PROD_EDW_BASE.TERMINAL_KM_RAW.Input_Location_ID,
		PROD_EDW_BASE.TERMINAL_KM_RAW.Stock_Holder_Id,PROD_EDW_BASE.TERMINAL_KM_RAW.Input_Location_Name,
		PROD_EDW_BASE.TERMINAL_KM_RAW.Stock_Holder_Name,PROD_EDW_BASE.TERMINAL_KM_RAW.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_KM_RAW.Input_Product_Name,PROD_EDW_BASE.TERMINAL_KM_RAW.Transaction_Desc,
		PROD_EDW_BASE.TERMINAL_KM_RAW.Balance_Type,PROD_EDW_BASE.TERMINAL_KM_RAW.Input_Quantity,
		PROD_EDW_BASE.TERMINAL_KM_RAW.Input_Uom,PROD_EDW_BASE.TERMINAL_KM_RAW.Create_dttm,
		PROD_EDW_BASE.TERMINAL_KM_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_KM_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Km_Stg ( Eff_Date,Input_Location_ID,
		Input_Location_Name,Stock_Holder_Id,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_KM_STG.Eff_Date,PROD_EDW_BASE.TERMINAL_KM_STG.Input_Location_ID,
		PROD_EDW_BASE.TERMINAL_KM_STG.Input_Location_Name,PROD_EDW_BASE.TERMINAL_KM_STG.Stock_Holder_Id,
		PROD_EDW_BASE.TERMINAL_KM_STG.Stock_Holder_Name,PROD_EDW_BASE.TERMINAL_KM_STG.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_KM_STG.Input_Product_Name,PROD_EDW_BASE.TERMINAL_KM_STG.Transaction_Desc,
		PROD_EDW_BASE.TERMINAL_KM_STG.Balance_Type,PROD_EDW_BASE.TERMINAL_KM_STG.Input_Quantity,
		PROD_EDW_BASE.TERMINAL_KM_STG.Input_Uom,PROD_EDW_BASE.TERMINAL_KM_STG.Create_dttm,
		PROD_EDW_BASE.TERMINAL_KM_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_KM_STG;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.Terminal_Product
as Locking Row Access 
Select * FROM PROD_EDW_BASE.Terminal_Product;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Propet_Raw ( Eff_Date,
		Input_Location_ID,Input_Product_Name,Input_Location_Name,Stock_Holder_ID,
		Stock_Holder_Name,Transaction_Desc,Input_Product_ID,Balance_Type,
		Input_Quantity,Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_PROPET_RAW.Eff_Date,PROD_EDW_BASE.TERMINAL_PROPET_RAW.Input_Location_ID,
		PROD_EDW_BASE.TERMINAL_PROPET_RAW.Input_Product_Name,PROD_EDW_BASE.TERMINAL_PROPET_RAW.Input_Location_Name,
		PROD_EDW_BASE.TERMINAL_PROPET_RAW.Stock_Holder_ID,PROD_EDW_BASE.TERMINAL_PROPET_RAW.Stock_Holder_Name,
		PROD_EDW_BASE.TERMINAL_PROPET_RAW.Transaction_Desc,PROD_EDW_BASE.TERMINAL_PROPET_RAW.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_PROPET_RAW.Balance_Type,PROD_EDW_BASE.TERMINAL_PROPET_RAW.Input_Quantity,
		PROD_EDW_BASE.TERMINAL_PROPET_RAW.Input_Uom,PROD_EDW_BASE.TERMINAL_PROPET_RAW.Create_dttm,
		PROD_EDW_BASE.TERMINAL_PROPET_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_PROPET_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Propet_STG ( Eff_Date,
		Input_Location_ID,Input_Product_Name,Input_Location_Name,Stock_Holder_ID,
		Stock_Holder_Name,Transaction_Desc,Input_Product_ID,Balance_Type,
		Input_Quantity,Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.TERMINAL_PROPET_STG.Eff_Date,PROD_EDW_BASE.TERMINAL_PROPET_STG.Input_Location_ID,
		PROD_EDW_BASE.TERMINAL_PROPET_STG.Input_Product_Name,PROD_EDW_BASE.TERMINAL_PROPET_STG.Input_Location_Name,
		PROD_EDW_BASE.TERMINAL_PROPET_STG.Stock_Holder_ID,PROD_EDW_BASE.TERMINAL_PROPET_STG.Stock_Holder_Name,
		PROD_EDW_BASE.TERMINAL_PROPET_STG.Transaction_Desc,PROD_EDW_BASE.TERMINAL_PROPET_STG.Input_Product_ID,
		PROD_EDW_BASE.TERMINAL_PROPET_STG.Balance_Type,PROD_EDW_BASE.TERMINAL_PROPET_STG.Input_Quantity,
		PROD_EDW_BASE.TERMINAL_PROPET_STG.Input_Uom,PROD_EDW_BASE.TERMINAL_PROPET_STG.Create_dttm,
		PROD_EDW_BASE.TERMINAL_PROPET_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.TERMINAL_PROPET_STG;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.Terminal_Rack
as Locking Row Access 
Select * FROM PROD_EDW_BASE.Terminal_Rack;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Raw AS 
	LOCKING ROW
	ACCESS
	SELECT *
		FROM PROD_EDW_BASE.Terminal_Raw;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.TERMINAL_Running_Horse_Raw
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.TERMINAL_RUNNING_HORSE_RAW;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.TERMINAL_Running_Horse_Stg
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.TERMINAL_RUNNING_HORSE_STG;
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_views.Terminal_SPPR_Stg AS 
	LOCKING ROW ACCESS
SELECT * FROM prod_edw_base.Terminal_SPPR_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Stg ( Input_Product_Name,Net_Quantity,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_Stg.Input_Product_Name, PROD_EDW_BASE.Terminal_Stg.Net_Quantity, 
	 PROD_EDW_BASE.Terminal_Stg.Create_dttm,PROD_EDW_BASE.Terminal_Stg.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_Stg;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.TERMINAL_STL_Asph_Raw
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.TERMINAL_STL_ASPH_RAW;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.TERMINAL_STL_Asph_Stg
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.TERMINAL_STL_ASPH_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Sw_Raw ( Eff_Date,Input_Location_ID,
		Stock_Holder_Id,Input_Location_Name,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_Sw_Raw.Eff_Date,PROD_EDW_BASE.Terminal_Sw_Raw.Input_Location_ID,
		PROD_EDW_BASE.Terminal_Sw_Raw.Stock_Holder_Id,PROD_EDW_BASE.Terminal_Sw_Raw.Input_Location_Name,
		PROD_EDW_BASE.Terminal_Sw_Raw.Stock_Holder_Name,PROD_EDW_BASE.Terminal_Sw_Raw.Input_Product_ID,
		PROD_EDW_BASE.Terminal_Sw_Raw.Input_Product_Name,PROD_EDW_BASE.Terminal_Sw_Raw.Transaction_Desc,
		PROD_EDW_BASE.Terminal_Sw_Raw.Balance_Type,PROD_EDW_BASE.Terminal_Sw_Raw.Input_Quantity,
		PROD_EDW_BASE.Terminal_Sw_Raw.Input_Uom,PROD_EDW_BASE.Terminal_Sw_Raw.Create_dttm,
		PROD_EDW_BASE.Terminal_Sw_Raw.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_Sw_Raw;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Sw_Stg ( Eff_Date,Input_Location_ID,
		Input_Location_Name,Stock_Holder_Id,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_Sw_Stg.Eff_Date,PROD_EDW_BASE.Terminal_Sw_Stg.Input_Location_ID,
		PROD_EDW_BASE.Terminal_Sw_Stg.Input_Location_Name,PROD_EDW_BASE.Terminal_Sw_Stg.Stock_Holder_Id,
		PROD_EDW_BASE.Terminal_Sw_Stg.Stock_Holder_Name,PROD_EDW_BASE.Terminal_Sw_Stg.Input_Product_ID,
		PROD_EDW_BASE.Terminal_Sw_Stg.Input_Product_Name,PROD_EDW_BASE.Terminal_Sw_Stg.Transaction_Desc,
		PROD_EDW_BASE.Terminal_Sw_Stg.Balance_Type,PROD_EDW_BASE.Terminal_Sw_Stg.Input_Quantity,
		PROD_EDW_BASE.Terminal_Sw_Stg.Input_Uom,PROD_EDW_BASE.Terminal_Sw_Stg.Create_dttm,
		PROD_EDW_BASE.Terminal_Sw_Stg.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_Sw_Stg;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Vecenergy_Raw ( Eff_Date,Input_Location_ID,
		Stock_Holder_Id,Input_Location_Name,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_Vecenergy_RAW.Eff_Date,PROD_EDW_BASE.Terminal_Vecenergy_RAW.Input_Location_ID,
		PROD_EDW_BASE.Terminal_Vecenergy_RAW.Stock_Holder_Id,PROD_EDW_BASE.Terminal_Vecenergy_RAW.Input_Location_Name,
		PROD_EDW_BASE.Terminal_Vecenergy_RAW.Stock_Holder_Name,PROD_EDW_BASE.Terminal_Vecenergy_RAW.Input_Product_ID,
		PROD_EDW_BASE.Terminal_Vecenergy_RAW.Input_Product_Name,PROD_EDW_BASE.Terminal_Vecenergy_RAW.Transaction_Desc,
		PROD_EDW_BASE.Terminal_Vecenergy_RAW.Balance_Type,PROD_EDW_BASE.Terminal_Vecenergy_RAW.Input_Quantity,
		PROD_EDW_BASE.Terminal_Vecenergy_RAW.Input_Uom,PROD_EDW_BASE.Terminal_Vecenergy_RAW.Create_dttm,
		PROD_EDW_BASE.Terminal_Vecenergy_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_Vecenergy_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Terminal_Vecenergy_Stg ( Eff_Date,Input_Location_ID,
		Input_Location_Name,Stock_Holder_Id,Stock_Holder_Name,Input_Product_ID,
		Input_Product_Name,Transaction_Desc,Balance_Type,Input_Quantity,
		Input_Uom,Create_dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Terminal_Vecenergy_STG.Eff_Date,PROD_EDW_BASE.Terminal_Vecenergy_STG.Input_Location_ID,
		PROD_EDW_BASE.Terminal_Vecenergy_STG.Input_Location_Name,PROD_EDW_BASE.Terminal_Vecenergy_STG.Stock_Holder_Id,
		PROD_EDW_BASE.Terminal_Vecenergy_STG.Stock_Holder_Name,PROD_EDW_BASE.Terminal_Vecenergy_STG.Input_Product_ID,
		PROD_EDW_BASE.Terminal_Vecenergy_STG.Input_Product_Name,PROD_EDW_BASE.Terminal_Vecenergy_STG.Transaction_Desc,
		PROD_EDW_BASE.Terminal_Vecenergy_STG.Balance_Type,PROD_EDW_BASE.Terminal_Vecenergy_STG.Input_Quantity,
		PROD_EDW_BASE.Terminal_Vecenergy_STG.Input_Uom,PROD_EDW_BASE.Terminal_Vecenergy_STG.Create_dttm,
		PROD_EDW_BASE.Terminal_Vecenergy_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.Terminal_Vecenergy_STG;
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_views.Terminal_Yorktown_Raw AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	prod_edw_base.terminal_yorktown_raw
--------------------------------------------------------------------------------

Replace VIEW prod_edw_base_views.Terminal_Yorktown_Stg AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	prod_edw_base.terminal_yorktown_stg
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.TMT_STDFLUIDS
as Locking Row Access
Select * From PROD_EDW_BASE.TMT_STDFLUIDS;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Trans_Mode ( Trans_Mode_ID,Ref_Prod_Location,
		Trans_Mode_Code,Trans_Mode_Description,Marine_Flag,Tare_Flag,
		Create_dttm,Last_Update_Dttm,Trans_Dttm,Trans_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.Trans_Mode.Trans_Mode_ID,PROD_EDW_BASE.Trans_Mode.Ref_Prod_Location,
		PROD_EDW_BASE.Trans_Mode.Trans_Mode_Code,PROD_EDW_BASE.Trans_Mode.Trans_Mode_Description,
		PROD_EDW_BASE.Trans_Mode.Marine_Flag,PROD_EDW_BASE.Trans_Mode.Tare_Flag,
		PROD_EDW_BASE.Trans_Mode.Create_dttm,PROD_EDW_BASE.Trans_Mode.Last_Update_Dttm,
		PROD_EDW_BASE.Trans_Mode.Trans_Dttm,PROD_EDW_BASE.Trans_Mode.Trans_Update_Dttm
		FROM PROD_EDW_BASE.Trans_Mode;
--------------------------------------------------------------------------------

REPLACE VIEW  PROD_EDW_BASE_VIEWS.UTC_Time_Offset
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.UTC_Time_Offset;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_CHECK
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_CHECK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_CROSSREF
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_CROSSREF;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_EXCHANGE
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_EXCHANGE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_INTEREST
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_INTEREST;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_LEASE
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_LEASE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_NAME_AND_ADDRESS
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_NAME_AND_ADDRESS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_OPERATOR
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_OPERATOR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_POSTING
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_POSTING;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_PRODUCT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_PRODUCT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_RECEIVING_POINT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_RECEIVING_POINT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_RUNTICKET
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_RUNTICKET;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_TANK
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_TANK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.VAX_TRANSPORT
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.VAX_TRANSPORT;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Western_Price_Raw ( Terminal_Desc,
		Product_Desc,Channel,Event_Dttm,Rack_Price,Prior_Date_Change_Amt,
		Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.WESTERN_PRICE_RAW.Terminal_Desc,PROD_EDW_BASE.WESTERN_PRICE_RAW.Product_Desc,
		PROD_EDW_BASE.WESTERN_PRICE_RAW.Channel,PROD_EDW_BASE.WESTERN_PRICE_RAW.Event_Dttm,
		PROD_EDW_BASE.WESTERN_PRICE_RAW.Rack_Price,PROD_EDW_BASE.WESTERN_PRICE_RAW.Prior_Date_Change_Amt,
		PROD_EDW_BASE.WESTERN_PRICE_RAW.Create_Dttm,PROD_EDW_BASE.WESTERN_PRICE_RAW.Last_Update_Dttm
		FROM PROD_EDW_BASE.WESTERN_PRICE_RAW;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Western_Price_Stg ( Terminal_Desc,
		Product_Desc,Channel,Event_Dttm,Rack_Price,Prior_Date_Change_Amt,
		Create_Dttm,Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT PROD_EDW_BASE.WESTERN_PRICE_STG.Terminal_Desc,PROD_EDW_BASE.WESTERN_PRICE_STG.Product_Desc,
		PROD_EDW_BASE.WESTERN_PRICE_STG.Channel,PROD_EDW_BASE.WESTERN_PRICE_STG.Event_Dttm,
		PROD_EDW_BASE.WESTERN_PRICE_STG.Rack_Price,PROD_EDW_BASE.WESTERN_PRICE_STG.Prior_Date_Change_Amt,
		PROD_EDW_BASE.WESTERN_PRICE_STG.Create_Dttm,PROD_EDW_BASE.WESTERN_PRICE_STG.Last_Update_Dttm
		FROM PROD_EDW_BASE.WESTERN_PRICE_STG;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Western_Pricing ( Terminal_Code, Terminal_Desc, Product_Code, Product_Desc,
		Pricing_Group, Pricing_Code, Channel, Channel_Desc, Event_Dttm,
		Rack_Price, Prior_Date_Change_Amt, Create_dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT Terminal_Code, Terminal_Desc, Product_Code, Product_Desc,
		Pricing_Group, Pricing_Code, Channel, Channel_Desc, Event_Dttm,
		Rack_Price, Prior_Date_Change_Amt, Create_dttm, Last_Update_Dttm
		FROM PROD_EDW_BASE.WESTERN_PRICING;
--------------------------------------------------------------------------------

REPLACE	VIEW PROD_EDW_BASE_VIEWS.Western_Product_Terminal_Dcd ( Source_System, Terminal_Code, Terminal_Location, External_Product_ID,
		WNR_Product_ID, WNR_Product_Desc, External_Product_Desc, Product_Group,
		Pricing_Code, Create_Dttm, Last_Update_Dttm ) AS 
	LOCKING ROW
	ACCESS
	SELECT Source_System, Terminal_Code, Terminal_Location, External_Product_ID,
		WNR_Product_ID, WNR_Product_Desc, External_Product_Desc, Product_Group,
		Pricing_Code, Create_Dttm, Last_Update_Dttm
		FROM PROD_EDW_BASE.WESTERN_PRODUCT_TERMINAL_DCD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Advent_Card_Master
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_ADVENT_CARD_MASTER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Advent_CostGroup
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_ADVENT_COSTGROUP;
--------------------------------------------------------------------------------

Replace view prod_edw_base_views.WSale_Advent_CustData AS Locking Row Access
select * from prod_edw_base.WSale_Advent_CustData
--------------------------------------------------------------------------------

Replace view prod_edw_base_views.WSale_Advent_Customer AS Locking Row Access
select * from prod_edw_base.WSale_Advent_Customer
--------------------------------------------------------------------------------

Replace view PROD_EDW_BASE_views.WSale_Advent_FuelHist AS Locking Row Access
select * from PROD_EDW_BASE.WSale_Advent_FuelHist;
--------------------------------------------------------------------------------

/**/
replace view PROD_EDW_BASE_VIEWS.WSale_Advent_FuelHistSum 
AS LOCKING ROW ACCESS
SELECT		prod_code,
					inv_num,
					cust_key,
					cust_num,
					CAST(SUM(FH.fuel_qty) AS DECIMAL(38,4)) AS fuel_qty,
					CAST(SUM(FH.fuel_tax) as DECIMAL(38,4)) AS fuel_tax,
					CAST(SUM(FH.sales_tax) as DECIMAL(38,4)) AS sales_tax,
					CAST(SUM(FH.total_price) AS DECIMAL(38,4)) AS total_price,
					CAST(SUM(FH.rpt_cost) AS DECIMAL(38,4)) AS rpt_cost,
					CAST(sum((FH.TOTAL_CHARGE)) AS DECIMAL(38,4)) AS TOTAL_CHARGE,
					CAST(SUM(FH.fuel_qty) AS DECIMAL(38,4)) AS Units
FROM 			PROD_EDW_BASE_VIEWS.WSale_Advent_FuelHist FH
GROUP BY 	prod_code, inv_num, cust_key, cust_num;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_ADVENT_FUELPROD
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.WSALE_ADVENT_FUELPROD;
--------------------------------------------------------------------------------

Replace view prod_edw_base_views.WSale_Advent_FuelSite AS Locking Row Access
select * from prod_edw_base.WSale_Advent_FuelSite
--------------------------------------------------------------------------------

Replace view prod_edw_base_views.WSale_Advent_FuelSum AS Locking Row Access
select * from prod_edw_base.WSale_Advent_FuelSum
--------------------------------------------------------------------------------

Replace view prod_edw_base_views.WSale_Advent_InvHist AS Locking Row Access
select * from prod_edw_base.WSale_Advent_invHist
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.WSALE_ADVENT_PRODUCT_DCD AS 
	LOCKING ROW
	ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_ADVENT_PRODUCT_DCD;
--------------------------------------------------------------------------------

Replace view prod_edw_base_views.WSale_Advent_SetupCL AS Locking Row Access
select * from prod_edw_base.WSale_Advent_SetupCL
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.WSale_BO_Backorders 
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSale_BO_Backorders;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_BO_Comments
AS LOCKING ROW ACCESS
select	       	*
from		  		PROD_EDW_BASE.WSALE_BO_COMMENTS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_BO_COMMENTS_FLTD
AS LOCKING ROW ACCESS
select	       	CommentID,
					BackOrderID,
					CommentTime,
					Cmt_Username,
					CommentText, 
					cast(CommentTime as varchar(50)) ||'-'||Cmt_Username||'-'||CommentText as ConcatStr,
					Create_Dttm,
      				Last_Update_Dttm
from		  		PROD_EDW_BASE.WSALE_BO_COMMENTS
where			CommentID not in (select CommentID from PROD_EDW_BASE.WSale_BO_Comments  where	CommentText   like any ('<[EDITED]>%','<[RESOLVED]>%'));
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_BO_COMMENTS_FLTD_PVT
AS LOCKING ROW ACCESS
select	       	BackOrderID,
					TDStats.UDFConcat(Trim(CommentText)) as ConCatCmtTxt 
from		  		PROD_EDW_BASE_VIEWS.WSALE_BO_COMMENTS_FLTD
group by		BackOrderID;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.WSale_BO_Customers (CustomerCode, CustomerName, Create_Dttm, Last_Update_Dttm
 ) AS LOCKING ROW ACCESS
SELECT	CustomerCode, CustomerName, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.WSale_BO_Customers;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.WSale_BO_PackCode (PackCode, PackDescription, PackCodeUnitType, PackToGallonRatio,
		Create_Dttm, Last_Update_Dttm
 ) AS LOCKING ROW ACCESS
SELECT	PackCode, PackDescription, PackCodeUnitType, PackToGallonRatio,
		Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.WSale_BO_PackCode;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.WSale_BO_Products (ProductCode, ProductDescription, Create_Dttm, Last_Update_Dttm
 ) AS LOCKING ROW ACCESS
SELECT	ProductCode, ProductDescription, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.WSale_BO_Products;
--------------------------------------------------------------------------------

Create View Prod_Edw_Base_Views.Wsale_BO_ReasonCD As Locking Row Access
Select * From Prod_Edw_Base.Wsale_BO_ReasonCD;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.WSale_BO_RecordTypes (RecordType, RecordTypeDescription, Create_Dttm, Last_Update_Dttm
 ) AS LOCKING ROW ACCESS
SELECT	RecordType, RecordTypeDescription, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.WSale_BO_RecordTypes;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.WSale_BO_Warehouses (	WarehouseCode, WarehouseDescription, Create_Dttm, Last_Update_Dttm
 ) AS LOCKING ROW ACCESS
SELECT	WarehouseCode, WarehouseDescription, Create_Dttm, Last_Update_Dttm
FROM	PROD_EDW_BASE.WSale_BO_Warehouses;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_CFN_Card_Master
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_CFN_CARD_MASTER;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSale_Combined_Cust_Prod_Sales
as Locking Row Access
Select * from PROD_EDW_BASE.WSALE_COMBINED_CUST_PROD_SALES;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_COMBINED_SALESDAT
as Locking Row Access
SELECT	TYPE_FLAG, Period, SM, CURRENT_SM, SOURCE_BILL_TO_NAME,
		SOURCE_SHIP_TO_NAME, CRM_BILL_TO_NAME, CRM_SHIP_TO_NAME, JDE_BILL_TO,
		JDE_SHIP_TO, Supply_Point, PCAT, Product_Code, Product_Description,
		BOL, UOM, QTY, Sales_Price, FreightSalesPrice, TotalSales, Tax, SalesServiceFee,
		Cost, Ancillary_Fees, EquipmentCharge, AdditiveType, AdditiveValue,
		INT_FRT, GM, QTY_ITD, SalesPrice_ITD, FreightSalesPrice_ITD,
		Sales_ITD, Tax_ITD, SalesServiceFee_ITD, Cost_ITD, Ancillary_ITD, EquipmentCharge_ITD,
		AdditiveValue_ITD, INT_FRT_ITD, GM_ITD, Origin, POO, Vendor,
		Vendor_Account_Number, Driver, Truck, TMW_Order_Number, PAK,
		Invoice_Number, Invoice_Create_Date, Delivery_Date, BHD, IBAJDEAddBookNum,
		InternalBAName, Units, Profit_Center, LiftingNumber, ProvisionName,
		MaxProvisionService, MinProvisionService, TransactionType, TransactionTypeGroup,
		Carrier, ContractNumber, SAP_CODE, Gallons, Gallons_ITD, SA_QTY,
		SA_Gallons, SA_Sales, SA_Profit, SA_Ancillary, Source, Source_Bill_to,
		Source_Ship_to, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSale_Combined_Salesdat;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_Combined_Salesdat_QV
as Locking Row Access
SELECT	TYPE_FLAG, Period, SM, CURRENT_SM, SOURCE_BILL_TO_NAME,
		SOURCE_SHIP_TO_NAME, CRM_BILL_TO_NAME, CRM_SHIP_TO_NAME, JDE_BILL_TO,
		JDE_SHIP_TO, Supply_Point, PCAT, Product_Code, Product_Description,
		BOL, UOM, QTY, Sales_Price, FreightSalesPrice, TotalSales, Tax, SalesServiceFee,
		Cost, Ancillary_Fees, EquipmentCharge, AdditiveType, AdditiveValue,
		INT_FRT, GM, QTY_ITD, SalesPrice_ITD, FreightSalesPrice_ITD,
		Sales_ITD, Tax_ITD, SalesServiceFee_ITD, Cost_ITD, Ancillary_ITD, EquipmentCharge_ITD,
		AdditiveValue_ITD, INT_FRT_ITD, GM_ITD, Origin, POO, Vendor,
		Vendor_Account_Number, Driver, Truck, TMW_Order_Number, PAK,
		Invoice_Number, Invoice_Create_Date, Delivery_Date, BHD, IBAJDEAddBookNum,
		InternalBAName, Units, Profit_Center, LiftingNumber, ProvisionName,
		MaxProvisionService, MinProvisionService, TransactionType, TransactionTypeGroup,
		Carrier, ContractNumber, SAP_CODE, Gallons, Gallons_ITD, SA_QTY,
		SA_Gallons, SA_Sales, SA_Profit, SA_Ancillary, Source, Source_Bill_to,
		Source_Ship_to, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSale_Combined_Salesdat


UNION ALL

SELECT	TYPE_FLAG, Period, SM, CURRENT_SM, SOURCE_BILL_TO_NAME,
		SOURCE_SHIP_TO_NAME, CRM_BILL_TO_NAME, CRM_SHIP_TO_NAME, JDE_BILL_TO,
		JDE_SHIP_TO, Supply_Point, 
		29 as PCAT, 
		Cast('Compliance' as varchar(100)) as Product_Code, 
		Cast('Compliance Fee' as Varchar(100))as Product_Description,
		BOL, UOM,
		Cast(Cast(1 as decimal(38,4) ) as  decimal(38,4) )as  QTY, 
		SA_Ancillary as  Sales_Price, 
		Cast(0 as decimal(38,4) ) as FreightSalesPrice, 
		SA_Ancillary as TotalSales, 
		Cast(0 as decimal(38,4) ) as Tax, 
		Cast(0 as decimal(38,4) ) as SalesServiceFee,
		Cast(0 as decimal(38,4) ) as Cost, 
		SA_Ancillary as Ancillary_Fees, 
		Cast(0 as decimal(38,4) ) as EquipmentCharge, 
		AdditiveType, 
		Cast(0 as decimal(38,4) ) as AdditiveValue,
		INT_FRT, 
		SA_Ancillary as GM, 
		Cast(1 as decimal(38,4) ) as  QTY_ITD, 
		SA_Ancillary as SalesPrice_ITD, 
		Cast(0 as decimal(38,4) ) as FreightSalesPrice_ITD,
		Cast(Cast(0 as decimal(38,4) ) as decimal(38,4) ) as Sales_ITD, 
		Cast(0 as decimal(38,4) ) as Tax_ITD, 
		Cast(0 as decimal(38,4) ) as SalesServiceFee_ITD, 
		Cast(0 as decimal(38,4) ) as Cost_ITD, 
		SA_Ancillary as Ancillary_ITD, 
		Cast(0 as decimal(38,4) ) as EquipmentCharge_ITD,
		Cast(0 as decimal(38,4) ) as AdditiveValue_ITD, 
		Cast(0 as decimal(38,4) ) as INT_FRT_ITD, 
		SA_Ancillary as GM_ITD, 
		Origin, POO, Vendor,
		Vendor_Account_Number, Driver, Truck, TMW_Order_Number, PAK,
		Invoice_Number, Invoice_Create_Date, Delivery_Date, BHD, IBAJDEAddBookNum,
		InternalBAName, Units, Profit_Center, LiftingNumber, ProvisionName,
		MaxProvisionService, MinProvisionService, TransactionType, TransactionTypeGroup,
		Carrier, ContractNumber, SAP_CODE, 
		Cast(0 as decimal(38,4) ) as Gallons, 
		Cast(0 as decimal(38,4) ) as Gallons_ITD, 
		Cast(1 as decimal(38,4) ) as  SA_QTY,
		Cast(0 as decimal(38,4) ) as SA_Gallons, 
		SA_ANcillary as SA_Sales, 
		SA_Ancillary as SA_Profit, 
		Cast(0 as decimal(38,4) ) as SA_Ancillary, 
		Source, 
		Source_Bill_to,
		Source_Ship_to, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSale_Combined_Salesdat
where SA_Ancillary <> 0 
and Source = 'RA'
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_CRM_CustMast 
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_CRM_CUSTMAST;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_DFI_JDE_F03B11 
as LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.WSALE_DFI_JDE_F03B11;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_DFI_JDE_F0411 
as LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.WSALE_DFI_JDE_F0411;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_DFI_JDE_F0911 
as LOCKING ROW ACCESS
SELECT * FROM PROD_EDW_BASE.WSALE_DFI_JDE_F0911;
--------------------------------------------------------------------------------

REPLACE             VIEW PROD_EDW_BASE_VIEWS.WSALE_EFF_DATE_COUNTS (TABLE_NAME,SOURCE_NAME,LOCATION,EFF_DATE,RECORD_CT) AS 
                LOCKING ROW
                ACCESS
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'BNSF RAILCAR' AS Source_Name, 
	CAST('WSALE_RAILCAR_BNSF_RAW' AS VARCHAR(20)) AS Location,
	CAST(Data_Load_Date AS DATE) AS EFF_DATE, 
	COUNT(CAST(Data_Load_Date AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSALE_RAILCAR_BNSF_RAW
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'BACKORDERS' AS Source_Name, 
	CAST('BO_Backorders' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_BO_Backorders
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'BACKORDERS' AS Source_Name, 
	CAST('BO_Customers' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_BO_Customers
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'BACKORDERS' AS Source_Name, 
	CAST('BO_PackCode' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_BO_PackCode
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'BACKORDERS' AS Source_Name, 
	CAST('BO_Products' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_BO_Products
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'BACKORDERS' AS Source_Name, 
	CAST('BO_RecordTypes' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_BO_RecordTypes
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'BACKORDERS' AS Source_Name, 
	CAST('BO_Warehouses' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_BO_Warehouses
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'MASTERDATA' AS Source_Name, 
	CAST('Master_Freight' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_Master_Freight
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'MASTERDATA' AS Source_Name, 
	CAST('Master_ExtFreight' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_Master_ExtFreight
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'MASTERDATA' AS Source_Name, 
	CAST('HarmProd' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_Master_HarmProd
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'MASTERDATA' AS Source_Name, 
	CAST('Sourcing' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_Master_Sourcing
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'MASTERDATA' AS Source_Name, 
	CAST('WRW_TankList' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_Master_WRW_Tanklist
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'MASTERDATA' AS Source_Name, 
	CAST('VendorSource' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_Master_VendorSource
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'MASTERDATA' AS Source_Name, 
	CAST('VS_LocCode' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_Master_VS_LocCode
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Bol' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Bol
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Customer' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Customer
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Inventory' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Inventory
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Order_Header' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Header
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Order_Line' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Line
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Order_Tax' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Tax
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Pack' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Pack
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Product' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Product
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Prodware_Price' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_Prodware_Price
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_WH' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_WH
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_PLPWMESS' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_PLPWMESS
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_PRODWARE' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_PRODWARE
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_PRODWARE_SORT' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_PRODWARE_SORT
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_PURCHASEORDER' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_PURCHASEORDER
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_SUPPLIERPRICING' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_SUPPLIERPRICING
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_INVTRANS' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_INVTRANS
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_SalesPerson_DCD' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_SALESPERSON_DCD
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Order_History' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_ORDER_HISTORY
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PDS' AS Source_Name, 
	CAST('PDS_Order_History_Taxes' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PDS_ORDER_HISTORY_TAXES
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'Advent' AS Source_Name, 
	CAST('Advent_Customer' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_ADVENT_CUSTOMER
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'Advent' AS Source_Name, 
	CAST('Advent_FuelHist' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_ADVENT_FUELHIST
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'Advent' AS Source_Name, 
	CAST('Advent_FuelSite' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_ADVENT_FUELSITE
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'Advent' AS Source_Name, 
	CAST('Advent_InvHist' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_ADVENT_INVHIST
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'Advent' AS Source_Name, 
	CAST('Advent_FuelSum' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_ADVENT_FUELSUM
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'Advent' AS Source_Name, 
	CAST('Advent_CustData' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_ADVENT_CUSTDATA
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'Advent' AS Source_Name, 
	CAST('Advent_SetupCL' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_ADVENT_SETUPCL
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_BinLocat' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_BinLocat
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_PickDetl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_PickDetl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_PickHead' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_PickHead
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_ProdMSTR' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_ProdMSTR
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_RecvDetl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_RecvDetl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_ShipHist' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_ShipHist
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_ShipLine' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_ShipLine
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_VendMSTR' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_VendMSTR
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_WRWVendor' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_WRWVendor
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'WMS' AS Source_Name, 
	CAST('WMS_ShipDetl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_WMS_ShipDetl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'LD' AS Source_Name, 
	CAST('LD_BulkTank' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_LD_BulkTank
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_Actives' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_Actives
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_Products' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_Products
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_RackPrices' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_RackPrices
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_Transactions' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_Transactions
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_TransAllowedProds' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_TransAllowedProds
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_TransMerchDetls' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_TransMerchDetls
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_TransProdDetls' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_TransProdDetls
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_TransPrompts' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_TransPrompts
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'PetroLead' AS Source_Name, 
	CAST('PL_TransTimeMetrics' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_PL_TransTimeMetrics
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_Customers' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_Customers
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_Employee' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_Employee
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_ItemInv' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_ItemInv
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_OrderLn' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_OrderLn
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_Orders' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_Orders
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_Parts' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_Parts
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_RepOrder' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_RepOrder
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_Shop' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_Shop
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_Units' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_Units
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_VendorItem' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_VendorItem
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMT' AS Source_Name, 
	CAST('TMT_Vendors' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMT_Vendors
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_C_OFR' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_C_OFR
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_C_TnkMdl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_C_TnkMdl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_Accident' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_Accident
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_Comp_Tnk_Detl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_Comp_Tnk_Detl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_Frgt_Detl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_Frgt_Detl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_Incident' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_incident
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_Injury' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_Injury
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_InvcDetl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_InvcDetl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_InvcHdr' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_InvcHdr
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_MPP' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_MPP
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_OdrHdr' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_OdrHdr
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_PayDetl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_PayDetl
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_PayHdr' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_PayHdr
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_SftRep' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_SftRep
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_SftSch' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_SftSch
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_FC_Stops' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_FC_Stops
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_F_Fuel_InvAmt' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_F_Fuel_InvAmt
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_F_TnkFCstLog' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_F_TnkFcstLog
GROUP BY 4
UNION ALL
SELECT	'WHOLESALE' AS TABLE_NAME, 
	'TMW' AS Source_Name, 
	CAST('TMW_F_WNRICTrnsl' AS VARCHAR(20)) AS Location,
	CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
	COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM	PROD_EDW_BASE_VIEWS.WSale_TMW_F_WNRICTrnsl
GROUP BY 4
UNION ALL
SELECT                'WHOLESALE' AS TABLE_NAME, 
                'SALESDAT' AS Source_Name, 
                CAST('DFI_Salesdat' AS VARCHAR(20)) AS Location,
                CAST(Last_Update_Dttm AS DATE) AS EFF_DATE, 
                COUNT(CAST(Last_Update_Dttm AS DATE)) AS RECORD_CT
FROM    PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat
GROUP BY 4
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_LD_BulkTank (	
      Ping_Id, 
      Ping_Date,
      Ping_Time,
      Ping_Source,
      Ping_Owner,
      Site,
      Tank,
      Active,
      Alarm_High_High,
      Alarm_High_High_Enabled,
      Alarm_High,
      Alarm_High_Enabled,
      Alarm_Low_Low,
      Alarm_Low_Low_Enabled,
      Alarm_Low,
      Alarm_Low_Enabled,
      Alarm_Status,
      Data_Table,
      Forecast_Critical_Date,
      Forecast_Critical_Time,
      Forecast_Low_Date,
      Forecast_Low_Time,
      Full_LD,
      Install_Date,
      Install_Time,
      Last_Date,
      Last_Time,
      Last_Inch,
      Load,
      Location,
      Low_LD,
      Max_Fill,
      Max_Capacity,
      Max_Inches,
      Min_Capacity,
      Min_Inches,
      Notes,
      Product_ID_LD,
      Product_Name,
      Site_Active,
      Validate_Date,
      Validate_Time,
      Volume,
      Temperature,
      Storage,
      Net_Volume,
      Create_Dttm,
      Last_Update_Dttm
) AS LOCKING ROW ACCESS
SELECT	
      Ping_Id, 
      Ping_Date,
      Ping_Time,
      Ping_Source,
      Ping_Owner,
      Site,
      Tank,
      Active,
      Alarm_High_High,
      Alarm_High_High_Enabled,
      Alarm_High,
      Alarm_High_Enabled,
      Alarm_Low_Low,
      Alarm_Low_Low_Enabled,
      Alarm_Low,
      Alarm_Low_Enabled,
      Alarm_Status,
      Data_Table,
      Forecast_Critical_Date,
      Forecast_Critical_Time,
      Forecast_Low_Date,
      Forecast_Low_Time,
      Full_LD,
      Install_Date,
      Install_Time,
      Last_Date,
      Last_Time,
      Last_Inch,
      Load,
      Location,
      Low_LD,
      Max_Fill,
      Max_Capacity,
      Max_Inches,
      Min_Capacity,
      Min_Inches,
      Notes,
      Product_ID_LD,
      Product_Name,
      Site_Active,
      Validate_Date,
      Validate_Time,
      Volume,
      Temperature,
      Storage,
      Net_Volume,
      Create_Dttm,
      Last_Update_Dttm
FROM	PROD_EDW_BASE.WSALE_LD_BulkTank;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Master_ExtFreight 
AS LOCKING ROW ACCESS
select	  Eff_Date,
		      Source_Company,
		      Ship_To,
		      Ship_From,
		      Plant_ID,
		      Pack_Type,
		      Price_Per_Gal,
		      Price_Per_Pound,
		      Vendor_Number,
		      Warehouse_Number,
		      Create_Dttm,
		      Last_Update_Dttm
from		  PROD_EDW_BASE.WSALE_MASTER_EXTFREIGHT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Master_Freight

	(Eff_Date, Source_Warehouse, Selling_Warehouse, Route, BulkRate_Gal, PackRate_Gal, Create_Dttm, Last_Update_Dttm) AS LOCKING ROW ACCESS

SELECT	Eff_Date, Source_Warehouse, Selling_Warehouse, Route, BulkRate_Gal, PackRate_Gal, Create_Dttm, Last_Update_Dttm

FROM	PROD_EDW_BASE.WSALE_MASTER_FREIGHT
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Master_HarmProd 

	(Eff_Date, Product_Name, Parent_Child, PDS_Prod_Code, Vendor_Code, Parent_Child_Id, Create_Dttm, Last_Update_Dttm) AS LOCKING ROW ACCESS

SELECT	eff_date, Product_Name, Parent_Child, PDS_Prod_Code, Vendor_Code, Parent_Child_Id, create_dttm, last_update_dttm

FROM	PROD_EDW_BASE.WSALE_MASTER_HARMPROD
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_MASTER_HARMPROD_CURRENT		
 
 (Eff_Date, Product_Name, Parent_Child, PDS_Prod_Code, Vendor_Code, Parent_Child_Id, Create_Dttm, Last_Update_Dttm) 

AS LOCKING ROW ACCESS
	Select hp.Eff_Date, hp.Product_Name, hp.Parent_Child, hp.PDS_Prod_Code, hp.Vendor_Code, 
	hp.Parent_Child_Id, hp.Create_Dttm, hp.Last_Update_Dttm
				From prod_edw_base_views.wsale_master_harmprod hp
				Inner Join
					(select pds_prod_code, max(eff_date) as max_eff_date
					from prod_edw_base_views.wsale_master_harmprod
					group by pds_prod_code
					) agg
				On
					hp.pds_prod_code = agg.pds_prod_code
				AND hp.eff_date = agg.max_eff_date;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Master_Sourcing 
AS LOCKING ROW ACCESS
SELECT 	*
FROM		PROD_EDW_BASE.WSALE_MASTER_SOURCING;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_Master_VendorSource
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_MASTER_VENDORSOURCE
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Master_VS_LocCode
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_MASTER_VS_LOCCODE
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_Master_Wrw_Tanklist 
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_MASTER_WRW_TANKLIST;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Bol (	bill_lading, point_origin, manifest_number, bol_type, sequence,
		product_code, pack_code, warehouse_code, reference_number, truck_code,
		driver_code, profit_center, profile_code, vendor_code, sub_vendor_code,
		freight_vendor_code, bol_date, cost_ex_tax, freight_per_unit,
		net_quantity, gross_quantity, invoice_number, invoice_line_number,
		purchase_type, purchase_order, vendor_invoice, modify_date, create_dttm,
		last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	bill_lading, point_origin, manifest_number, bol_type, sequence,
		product_code, pack_code, warehouse_code, reference_number, truck_code,
		driver_code, profit_center, profile_code, vendor_code, sub_vendor_code,
		freight_vendor_code, bol_date, cost_ex_tax, freight_per_unit,
		net_quantity, gross_quantity, invoice_number, invoice_line_number,
		purchase_type, purchase_order, vendor_invoice, modify_date, create_dttm,
		last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_BOL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_CustDat
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_CUSTDAT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_CustHist
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_CUSTHIST;
--------------------------------------------------------------------------------

replace view PROD_EDW_BASE_VIEWS.WSALE_PDS_Customer
as LOCKING ROW ACCESS
SELECT 	*
FROM  		PROD_EDW_BASE.WSALE_PDS_CUSTOMER
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_Cust_Contact
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_CUST_CONTACT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_Cust_Email
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_CUST_EMAIL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_Cust_Phone
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_CUST_PHONE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_Cust_QScreen
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_CUST_QSCREEN;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_EOM_FIFO 
	AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_EOM_FIFO;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Inventory (	product_code, pack_code, warehouse_code, batch_date, sequence,
		bill_lading, bill_lading_line, activity_date, quantity, cost,
		supply_vendor, freight_vendor, tran_type, point_origin, rb_st_rs_number,
		journal_ref_number, soure_profile, destination_profile, modify_date,
		create_dttm, last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	product_code, pack_code, warehouse_code, batch_date, sequence,
		bill_lading, bill_lading_line, activity_date, quantity, cost,
		supply_vendor, freight_vendor, tran_type, point_origin, rb_st_rs_number,
		journal_ref_number, soure_profile, destination_profile, modify_date,
		create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_INVENTORY;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_InvTrans AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_INVTRANS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_INVTRANS_MONTH_AVG		
 (product_code, PAK, WH, Month1, Month2, Month3, Month4, Month5, Month6, Month0) 

AS LOCKING ROW ACCESS
Select 
			Product_Code
			,PAK
			,WH
			,MAX( CASE WHEN Month_Interval = 1 THEN QTY ELSE NULL END ) as Month1	
			,MAX( CASE WHEN Month_Interval = 2 THEN QTY ELSE NULL END ) as Month2
			,MAX( CASE WHEN Month_Interval = 3 THEN QTY ELSE NULL END ) as Month3
			,MAX( CASE WHEN Month_Interval = 4 THEN QTY ELSE NULL END ) as Month4
			,MAX( CASE WHEN Month_Interval = 5 THEN QTY ELSE NULL END ) as Month5
			,MAX( CASE WHEN Month_Interval = 6 THEN QTY ELSE NULL END ) as Month6
			,MAX( CASE WHEN Month_Interval = 0 THEN QTY ELSE NULL END ) as Month0
			from 
			(	
				select 
				product_code, PAK, WH
				,CURRENT_DATE - act_date   MONTH(4) as Month_Interval
				,avg(qty) as QTY
				from prod_edw_base_views.wsale_pds_invtrans
				Where act_date between add_months(current_date, -5) and current_date
				Group by product_code, PAK, WH, Month_Interval
			) Agg_Trans
			Group by Product_Code, PAK, WH;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_INVTRANS_MONTH_SUM		
 (product_code, PAK, WH, Month1, Month2, Month3, Month4, Month5, Month6, Month0) 

AS LOCKING ROW ACCESS
Select 
			Product_Code
			,PAK
			,WH
			,MAX( CASE WHEN Month_Interval = 1 THEN QTY ELSE NULL END ) as Month1	
			,MAX( CASE WHEN Month_Interval = 2 THEN QTY ELSE NULL END ) as Month2
			,MAX( CASE WHEN Month_Interval = 3 THEN QTY ELSE NULL END ) as Month3
			,MAX( CASE WHEN Month_Interval = 4 THEN QTY ELSE NULL END ) as Month4
			,MAX( CASE WHEN Month_Interval = 5 THEN QTY ELSE NULL END ) as Month5
			,MAX( CASE WHEN Month_Interval = 6 THEN QTY ELSE NULL END ) as Month6
			,MAX( CASE WHEN Month_Interval = 0 THEN QTY ELSE NULL END ) as Month0
			from 
			(	
				select 
				product_code, PAK, WH
				,CURRENT_DATE - act_date   MONTH(4) as Month_Interval
				,sum(qty) as QTY
				from prod_edw_base_views.wsale_pds_invtrans
				Where act_date between add_months(current_date, -5) and current_date
				Group by product_code, PAK, WH, Month_Interval
			) Agg_Trans
			Group by Product_Code, PAK, WH;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Orders
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_ORDERS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_CLSD
AS LOCKING ROW ACCESS
SELECT	      RECORD_ID,
				      SM,
				      WH,
				      ACCT_NUM,
				      CUSTOMER,
				      PCAT,
				      PRODUCT,
				      PROD_DESC,
				      PACK,
				      INV_NUM,
				      post_date,
				      POO,
				      BOL_NUM,
				      QTY_ORD,
				      QTY_DEL,
				      INV_AMOUNT,
				      PROFIT,
				      ENTRY_DATE,
				      ENTRY_TIME,
				      ENTRY_BY,
				      ORD_STATUS,
				      FET,
				      FET_AMT,
				      ORD_SET,
				      SET_AMT,
				      MET,
				      MET_AMT,
				      ORD_ST_ZONE,
				      STAX,
				      DRUM_CHG,
				      INVOICE_LINE,
				      UOM,
				      TOTAL,
				      POSTED_PRICE,
				      QTY_TO_DEL,
				      PRICE_SOURCE,
				      EQUIVALENT_GAL,
				      PRICE_MULT,
				      SALES_TAX,
				      MAN_P_OVR,
				      MAN_PRICE_TEXT,
				      FIFO_WTAX,
				      FRTOUT_COST,
				      FRT_PER_UNIT,
				      FPCAT,
				      SLSTAXABLE,
				      PROMO_DISC,
				      PROMOVEND,
				      DELMSG,
				      PO_NUM,
				      PPU,
				      BILLTO,
				      DELZONE,
				      DELDT,
				      SPECIAL_INST,
				      DRIVER,
				      TRUCK,
				      DEL_RCPT_BOL,
				      ORIG_INV,
				      POST_SYS,
				      CONF_SYS,
				      REF,
				      DELETE_DT,
				      OR_TIME,
				      DELETED_BY,
				      REASON,
				      SST_EXEMPT,
				      create_dttm,
				      last_update_dttm
FROM			 PROD_EDW_BASE.WSALE_PDS_ORDERS_CLSD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_COMB
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_OPEN
union
SELECT	*
FROM	PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_CLSD;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_ORDERS_OPEN
AS LOCKING ROW ACCESS
SELECT	      RECORD_ID,
				      SM,
				      WH,
				      ACCT_NUM,
				      CUSTOMER,
				      PCAT,
				      PRODUCT,
				      PROD_DESC,
				      PACK,
				      INV_NUM,
				      post_date,
				      POO,
				      BOL_NUM,
				      QTY_ORD,
				      QTY_DEL,
				      INV_AMOUNT,
				      PROFIT,
				      ENTRY_DATE,
				      ENTRY_TIME,
				      ENTRY_BY,
				      ORD_STATUS,
				      FET,
				      FET_AMT,
				      ORD_SET,
				      SET_AMT,
				      MET,
				      MET_AMT,
				      ORD_ST_ZONE,
				      STAX,
				      DRUM_CHG,
				      INVOICE_LINE,
				      UOM,
				      TOTAL,
				      POSTED_PRICE,
				      QTY_TO_DEL,
				      PRICE_SOURCE,
				      EQUIVALENT_GAL,
				      PRICE_MULT,
				      SALES_TAX,
				      MAN_P_OVR,
				      MAN_PRICE_TEXT,
				      FIFO_WTAX,
				      FRTOUT_COST,
				      FRT_PER_UNIT,
				      FPCAT,
				      SLSTAXABLE,
				      PROMO_DISC,
				      PROMOVEND,
				      DELMSG,
				      PO_NUM,
				      PPU,
				      BILLTO,
				      DELZONE,
				      DELDT,
				      SPECIAL_INST,
				      DRIVER,
				      TRUCK,
				      DEL_RCPT_BOL,
				      ORIG_INV,
				      POST_SYS,
				      CONF_SYS,
				      REF,
				      DELETE_DT,
				      OR_TIME,
				      DELETED_BY,
				      REASON,
				      SST_EXEMPT,
				      create_dttm,
				      last_update_dttm
FROM			  PROD_EDW_BASE.WSALE_PDS_ORDERS_OPEN;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Header (	invoice_number, invoice_type, invoice_status_code, invoice_status,
		credit_status, order_date, delivery_date, confirm_date, post_date,
		ship_customer_code, bill_customer_code, warehouse_code, profit_center,
		salesman_code, plant_pickup, package_terms, fuel_terms, delivery_zone,
		purchase_order_number, driver_code, truck_code, fet_exempt_cat,
		set_exempt_cat, met_exempt_cat, sst_exempt_cat, order_total,
		order_cost_total, order_sales_total, freight, drums_delivered,
		drums_returned, spec_inst_1, spec_inst_2, spec_inst_3, spec_inst_4,
		del_loc_1, del_loc_2, delivery_time, ordered_by, del_ticket_path,
		invoice_path, modify_date, create_dttm, last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	invoice_number, invoice_type, invoice_status_code, invoice_status,
		credit_status, order_date, delivery_date, confirm_date, post_date,
		ship_customer_code, bill_customer_code, warehouse_code, profit_center,
		salesman_code, plant_pickup, package_terms, fuel_terms, delivery_zone,
		purchase_order_number, driver_code, truck_code, fet_exempt_cat,
		set_exempt_cat, met_exempt_cat, sst_exempt_cat, order_total,
		order_cost_total, order_sales_total, freight, drums_delivered,
		drums_returned, spec_inst_1, spec_inst_2, spec_inst_3, spec_inst_4,
		del_loc_1, del_loc_2, delivery_time, ordered_by, del_ticket_path,
		invoice_path, modify_date, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_ORDER_HEADER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_ORDER_HISTORY
(product_code, pack_code, warehouse_code, batch_date, sequence,
		invoice_number, invoice_line, invoice_date, quantity, total_sales,
		cost, freight, ship_cust_code, bill_cust_code, salesman_code,
		profit_center, pcat_code, source1, modify_date, create_dttm,
		last_update_dttm)

AS LOCKING ROW ACCESS

SELECT	product_code, pack_code, warehouse_code, batch_date, sequence,
		invoice_number, invoice_line, invoice_date, cast(quantity as decimal(11,2)) as quantity, total_sales,
		cast(cost as decimal(11,2)) as cost, freight, ship_cust_code, bill_cust_code, salesman_code,
		profit_center, cast(pcat_code as decimal(11,2)) as pcat_code, source1, modify_date, create_dttm,
		last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_ORDER_HISTORY;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_Order_History_Taxes AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_ORDER_HISTORY_TAXES;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Line (	invoice_number, line_number, product_code, pack_code, product_desc,
		unit_price_w_tax, qty_ordered, qty_delivered, extended_total,
		unit_cost, fifo_cost, point_origin, bill_lading, price_source,
		vendor_code, price_tier, modify_date, create_dttm, last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	invoice_number, line_number, product_code, pack_code, product_desc,
		unit_price_w_tax, qty_ordered, qty_delivered, extended_total,
		unit_cost, fifo_cost, point_origin, bill_lading, price_source,
		vendor_code, price_tier, modify_date, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_ORDER_LINE;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Order_Tax (	invoice_number, line_number, tax_type, auth_zone, rate_per_unit,
		extended_amount, sales_taxable, cust_exempt, vendor_paid, modify_date,
		create_dttm, last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	invoice_number, line_number, tax_type, auth_zone, rate_per_unit,
		extended_amount, sales_taxable, cust_exempt, vendor_paid, modify_date,
		create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_ORDER_TAX;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Pack (	pack_code, pack_name, abbreviation, multiplier, modify_date,
		create_dttm, last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	pack_code, pack_name, abbreviation, multiplier, modify_date,
		create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_PACK;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_PCAT 
(pcat_code, pcat_main, pcat_sub, prod_cat_name, modify_date,
		create_dttm, last_update_dttm)
AS LOCKING ROW ACCESS
SELECT		cast(pcat_code as decimal(11,2)) as pcat_code, pcat_main, pcat_sub, prod_cat_name, modify_date,
		create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_PCAT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_PLPWMess
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_PLPWMess;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Product (	product_code, name, pcat_code, vendor_code, unit_measure,
		tax_class, vend_prodcode, frt_table_col, sales_analysis_code,
		modify_date, create_dttm, last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	product_code, name, pcat_code, vendor_code, unit_measure,
		tax_class, vend_prodcode, frt_table_col, sales_analysis_code,
		modify_date, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_PRODUCT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_Prodware AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_PRODWARE;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Prodware_Price (	product_code, pack_code, warehouse_code, price_table, margin_type,
		margin, cost, price, modify_date, create_dttm, last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	product_code, pack_code, warehouse_code, price_table, margin_type,
		margin, cost, price, modify_date, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_PRODWARE_PRICE;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_Prodware_Sort AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_PRODWARE_SORT;
--------------------------------------------------------------------------------

Replace View  prod_edw_base_views.WSALE_PDS_PURCHASEORDER
--Change 2339
AS LOCKING ROW ACCESS
SELECT	PO_Number,
      			Line_Number,
      			Vendor_Number,
      			Vendor_Name,
      			Warehouse_Number,
      			Product_Code,
      			Product_Name,
      			PAK,
      			Ordered_Qty,
      			Received_Qty,
      			Retained_Qty,
      			Damaged_Qty,
      			Cancelled_Qty,
      			Cost_Unit,
      			Description,
      			Date_Expected,
      			Revised_Date_Expected,
      			case  
      				when Revised_Date_Expected is null  then Date_Expected
      				else	Revised_Date_Expected
      			end 	Final_Date_Expected,
      			Date_Closed,
      			Date_Print_Post,
      			Status,
      			Type1,
      			Requested_By,
      			Entered_By,
      			CREATE_DTTM,
      			LAST_UPDATE_DTTM
FROM		PROD_EDW_BASE.WSALE_PDS_PURCHASEORDER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_SalesDat
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_SALESDAT;
--------------------------------------------------------------------------------

Replace view prod_edw_base_views.WSale_PDS_SalesPerson_DCD AS Locking Row Access
select * from prod_edw_base.WSale_PDS_SalesPerson_DCD
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PDS_SupplierPricing AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PDS_SUPPLIERPRICING;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_PDS_Vendor
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.WSALE_PDS_VENDOR;
--------------------------------------------------------------------------------

Create View  PROD_EDW_BASE_VIEWS.WSale_PDS_WH (	warehouse_code, warehouse_name, modify_date, create_dttm,
		last_update_dttm
) AS LOCKING ROW ACCESS
SELECT	warehouse_code, warehouse_name, modify_date, create_dttm,
		last_update_dttm
FROM	PROD_EDW_BASE.WSALE_PDS_WH;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_Actives 
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_Actives;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_PL_LOCATION
as Locking Row ACCESS
Select * from PROD_EDW_BASE.WSALE_PL_Location;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_Products
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_Products;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_RackPrices
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_RackPrices;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_PL_RetailRack
as Locking Row ACCESS
Select * from PROD_EDW_BASE.WSALE_PL_RetailRack;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_PL_RetailRackPrice
as Locking Row ACCESS
Select * from PROD_EDW_BASE.WSALE_PL_RetailRackPrice;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_PL_SiteController
as Locking Row ACCESS
Select * from PROD_EDW_BASE.WSALE_PL_SiteController;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_PL_Transactions
as Locking Row ACCESS
Select * from PROD_EDW_BASE.WSALE_PL_Transactions;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_TransAllowedProds
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_TransAllowedProds;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_TransMerchDetls
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_TransMerchDetls;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_TransProdDetls
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_TransProdDetls;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_TransPrompts
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_TransPrompts;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_PL_TransTimeMetrics
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_PL_TransTimeMetrics;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSALE_PROD_FORECASTS
(Account_Number, Customer_name, Prod_Pak, Warehouse_Number, SalesRep,
SalesPerson_Name, Procut_Req_QTY, Frequency, Days_Since_Last_Msg) 
AS LOCKING ROW	ACCESS
	Select 
	                msg.msg_Account_Number as Account_Number
	                ,Case Account_Number
	                                WHEN 0 then 'ALL CUSTOMERS'
	                                ELSE cust.Customer_Name
	                End as Customer_name       
	               ,trim(msg.product) || trim(msg.pak) as Prod_Pak
	                ,msg.msg_Warehouse_Number as Warehouse_Number
	                ,msg.msg_SalesRep as SalesRep
	                ,sr.SalesPerson_Name
	                ,msg.msg_ProdReq_Qty as Procut_Req_QTY
	                ,msg.msg_Frequency as Frequency
	                ,current_date - msg.msg_ProdReq_Date as Days_Since_Last_Msg
	From 
	                PROD_EDW_BASE_VIEWS.WSale_PDS_PLPWMESS msg
	Inner Join
	                (Select Product, PAK, msg_Warehouse_Number, max(msg_ProdReq_Date) as Max_ProdReq_Date
	                                                                                From PROD_EDW_BASE_VIEWS.WSale_PDS_PLPWMESS 
	                                                                                Group by Product, PAK, msg_Warehouse_Number
	                ) msg_agg
	                ON msg.Product = msg_agg.Product
	                AND msg.PAK = msg_agg.PAK
	                AND msg.msg_Warehouse_Number = msg_agg.msg_Warehouse_Number
	                AND msg.msg_ProdReq_Date = msg_agg.Max_ProdReq_Date
	Left Outer Join
	                PROD_EDW_BASE_VIEWS.Wsale_PDS_SalesPerson_DCD sr
	On 
	                msg.msg_SalesRep = sr.SalesPerson_Code
	Left Outer Join
	                                                                PROD_EDW_BASE_VIEWS.WSale_PDS_Customer cust
	On          
	                                                                cust.Customer_Code = msg.msg_account_number;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_Railcar_BNSF_Raw
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.WSALE_RAILCAR_BNSF_RAW;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_Railcar_BNSF_Stg
AS LOCKING ROW ACCESS
SELECT	*
FROM		PROD_EDW_BASE.WSALE_RAILCAR_BNSF_STG;
--------------------------------------------------------------------------------

/* Deferred Tax */
REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_DEF_TAX 
AS LOCKING ROW ACCESS
Select 
'Deferred Tax' as Type_Flag, 
CAST(substr(cast (cast(b.GL_Date as date format 'YYYYMMDD') as char(8)),1,6) as Integer) as JDEAccountingPeriod,
	AccountingPeriod, 
	SalesmanCode, 		
	CAST(CUR_SM.TerritoryNum as varchar(100)) as  Current_SalesmanCode, 
	DestJDEAddBookNum as BillToJDEAddrBookNumber, 
	JDEAddressBookNumber as ShipToJDEAddrBookNumber,
	BANme, 
	PCAT, 
	InvoiceNumber, 
	MovementDate, 
	OriginLocaleID, 
	BOL, 
	UOM, 
	Volume, 
	cast(0 as DECIMAL(38,4)) as SalesPrice, 
	cast(0 as DECIMAL(38,4)) as FreightSalesPrice,
	cast(0 as DECIMAL(38,4)) as TotalSales,
	DFI_Value as Tax,
	cast(0 as DECIMAL(38,4)) as PurchPrice,
	cast(0 as DECIMAL(38,4)) as Ancillary_Fees, 
	cast(0 as DECIMAL(38,4)) as EquipmentCharge, 
	cast(0 as DECIMAL(38,4)) as FrtPurchPrice,
	cast(0 as DECIMAL(38,4)) as GrossMargin, 
	cast(0 as DECIMAL(38,4)) as Volume_ITD, 
	cast(0 as DECIMAL(38,4)) as SalesPrice_ITD, 
	cast(0 as DECIMAL(38,4)) as FreightSalesPrice_ITD,
	cast(0 as DECIMAL(38,4)) as Sales_ITD, 
	DFI_Value as Tax_ITD, 
	cast(0 as DECIMAL(38,4)) as PurchPrice_ITD, 
	cast(0 as DECIMAL(38,4)) as GrossMargin_ITD, 
	cast(0 as DECIMAL(38,4)) as Ancillary_Fees_ITD,
	cast(0 as DECIMAL(38,4)) as EquipmentCharge_ITD, 
	cast(0 as DECIMAL(38,4)) as FrtPurchPrice_ITD,
	SalesDataType,
	TransactionTypeID, 
	DlHdrID, 
	DestlocaleID, 
	OrderType, 
	SourceType, 
	TransactionType, 
	Origin, 
	Destination, 
	case when substring(a.Destination from 4 for 1)=' ' then substring(a.Destination from 5 for (length(a.Destination)-4)) 
					else	a.Destination end Destination_Trm, 
	ContractNumber, 
	ARFedDate, 
	DestAddressOne, 
	DestAddressTwo, 
	DestCity, 
	DestState, 
	DestZipCode, 
	PointOfOrigin, 
	InvoiceCreationDate, 
	ProvisionName, 
	MaxProvisionPriceService, 
	MinProvisionPriceService, 
	DriverName, 
	TruckNumber, 
	TMWOrderNumber, 
	TransactionTypeGroup, 
	LiftingNumber, 
	AccountDetailSource, 
	FTAProductCode, 
	'NA' as Vendor,
	InternalBANme, 
	IBAJDEAddBookNum, 
	Carrier, 
	MovementType, 
	'N/A' as Occurences_Flag /**/
from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT a 
INNER  join
					PROD_EDW_BASE.WSALE_DFI_JDE_F03B11 b on a.InvoiceNumber=b.Receipt_Matching_Ref
					LEFT OUTER JOIN 		(Select JDEAccountNum, TerritoryNum FROM PROD_EDW_BASE_VIEWS.WSale_CRM_CustMast GROUP BY 1, 2) CUR_SM ON
		ShipToJDEAddrBookNumber = CUR_SM.JDEAccountNum	
where InvoiceTypeID = 54
--------------------------------------------------------------------------------

-- WSALE_RA_EXC_NO_JDE
Replace View PROD_EDW_BASE_VIEWS.WSALE_RA_EXC_NO_JDE  as 
Locking Row Access (
	SELECT a.TransactionID, 
	a.AccountDetailSource, 
	a.ProductID, 
	a.MovementDate,
	a.SalesDataType, 
	a.MvtHdrID, 
	a.TransactionTypeID, 
	a.InvoiceTypeID, 
	a.DlHdrID, BOL, 
	a.OriginLocaleID,
	a.DestLocaleID, 
	a.OrderType, 
	a.SourceType, 
	a.TransactionType, 
	a.InvoiceNumber,
	a.AccountingPeriod,
	Case WHEN TransactionTypeID = 9999 THEN 
	CASE SUBSTR(AccountingPeriod, 1, LENGTH(AccountingPeriod) - 5)
	 WHEN 'January'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'01' as INT)
	 WHEN 'February'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'02' as INT)
	 WHEN 'March' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'03' as INT)
	 WHEN 'April' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'04' as INT)
	 WHEN 'May' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'05' as INT)
	 WHEN 'June'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'06' as INT)
	 WHEN 'July'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'07' as INT)
	 WHEN 'August'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'08' as INT)
	 WHEN 'September' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'09' as INT)
	 WHEN 'October' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'10' as INT)
	 WHEN 'November'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'11' as INT)
	 WHEN 'December' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'12' as INT)
	 ELSE -1 End 
	ELSE 
	COALESCE(Cast(Extract(Year from JDE_411.GL_Date) as char(4) ) || Cast( (Extract(Month from JDE_411.GL_Date)(Format '99')) as Varchar(2) ),
		Cast(Extract(Year from JDE_911.GL_Date) as char(4) ) || Cast( (Extract(Month from JDE_911.GL_Date)(Format '99'))  as Varchar(2)) ,
			substr(cast (cast(JDE_311.GL_Date as date format 'YYYYMMDD') as char(8)),1,6) ) 
	END as JDEAccountingPeriod,
	a.Product, 
	a.Origin, 
	a.Destination, 
	a.Volume, 
	a.UOM,
	a.DFI_Value, Currency, 
	a.ContractNumber, 
	a.BANme, 
	a.JDEAddressBookNumber,
	a.AccountDetailCreatedDate, 
	a.ARFedDate, 
	a.DestAddressOne, 
	a.DestAddressTwo,
	a.DestCity, 
	a.DestState, 
	a.DestZipCode, 
	a.PointOfOrigin, 
	a.InvoiceCreationDate,
	a.ProvisionName , 
	a.MaxProvisionPriceService, 
	a.MinProvisionPriceService,
	a.SalesmanCode, 
	a.DriverName, 
	a.TruckNumber, 
	a.TMWOrderNumber, 
	a.PrimaryGLAccount,
	a.OffsetGLAccount, 
	a.LiftingNumber, 
	a.MovementType, 
	a.FTAProductCode,
	a.DestJDEAddBookNum, 
	a.InternalBANme, 
	a.IBAJDEAddBookNum, 
	a.Carrier,
	a.PCAT, 
	a.BatchNumberAR, 
	a.BatchNumberAP, 
	a.BatchNumberGL, 
	a.PurchaseInvoiceNumber,
	a.TransactionTypeGroup, 
	a.create_dttm, 
	a.last_update_dttm
	FROM PROD_EDW_BASE.WSALE_DFI_SalesDat a
	LEFT OUTER JOIN PROD_EDW_BASE.WSale_DFI_JDE_F0411 JDE_411 ON a.BatchNumberAP = JDE_411.BatchNumberAP and a.PurchaseInvoiceNumber=JDE_411.Vend_Invc_Num and a.JDEAddressBookNumber = JDE_411.JDEAddressBookNumber 
	LEFT OUTER JOIN PROD_EDW_BASE.WSale_DFI_JDE_F0911 JDE_911 ON a.BatchNumberGL = JDE_911.Batch_ID
	LEFT OUTER JOIN PROD_EDW_BASE.WSALE_DFI_JDE_F03B11 JDE_311 ON a.InvoiceNumber = JDE_311.Receipt_Matching_Ref
	WHERE JDEAccountingPeriod is NULL
	AND TransactionTypeGroup in ('Purchase Price Rack' , 'Purchase Price Delivered', 'Sales Price Rack' , 'Sales Price Delivered'));
--------------------------------------------------------------------------------

-- WSALE_RA_EXC_PDS_Sales
Replace View PROD_EDW_BASE_VIEWS.WSALE_RA_EXC_PDS_Sales 
as locking row access (
Select RA.BOL as BOL, RA.JDEAccountingPeriod as RA_JDEAccountingPeriod, RA.SalesmanCode as RA_SalesmanCode, RA.Current_SalesmanCode as RA_Current_SalesmanCode, RA.BANme as RA_BANme, RA.PCAT as RA_PCat, 
RA.Volume as RA_Volume, CAST((CAST(PDS.Batch_Date AS DATE FORMAT 'YYYYMM')(CHAR(8))) as integer) as PDS_Period,
PDS.Cust_Code as PDS_Cust_Code, PDS.ProdCode as PDS_Prod_Code, PDS.Product as PDS_Product, RA.GL_Date, PDS.Batch_Date, ABS(Cast(RA.GL_Date as date) - Cast(PDS.Batch_Date as date)) as PeriodDiff
FROM  PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SUM_ITD RA
INNER JOIN PROD_EDW_BASE_VIEWS.WSale_PDS_SalesDat PDS
ON RA.BOL = PDS.BOL_Num );
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSALE_RA_EXC_Purch_No_Sale as
Locking Row Access
 (SELECT
		CASE WHEN EverSales.BOL IS NULL THEN 'Never Sold' ELSE CAST(EverSales.JDEAccountingPeriod as varchar(6)) END as Exc_Type,
		Purch.SalesDataType, Purch.OrderType, Purch.SourceType, Purch.TransactionTypeID,
		Purch.DlHdrID, Purch.BOL, Purch.MovementDate, Purch.OriginLocaleID, Purch.DestLocaleID, Purch.TransactionType,
		Null as Purch_InvoiceNumber, Purch.JDEAccountingPeriod, Purch.PeriodVolume, Purch.UOM, Purch.PeriodValue,
		Purch.PeriodUnitCost, Purch.Origin, Purch.Destination, Purch.Destination_Trm, Purch.ContractNumber,
		Purch.BANme, Purch.JDEAddressBookNumber, Purch.ARFedDate, Purch.DestAddressOne, Purch.DestAddressTwo,
		Purch.DestCity, Purch.DestState, Purch.DestZipCode, Purch.PointOfOrigin, Purch.InvoiceCreationDate,
		Purch.ProvisionName, Purch.MaxProvisionPriceService, Purch.MinProvisionPriceService,
		Purch.SalesmanCode, Purch.DriverName, Purch.TruckNumber, Purch.TMWOrderNumber, Purch.LiftingNumber,
		Purch.Carrier, Purch.MovementType, Purch.DestJDEAddBookNum, Purch.InternalBANme, Purch.IBAJDEAddBookNum,
		Purch.PCAT, Purch.TransactionTypeGroup, Purch.InvoiceTypeID, Purch.create_dttm, Purch.last_update_dttm
FROM	PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_PURCH_GRP Purch

-- Failing to join here means there are no sales in Salesdat prior/equal to this purchase
LEFT OUTER JOIN PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_Sum_ITD ITD
ON Purch.BOL = ITD.BOL and Purch.PCAT = ITD.PCat and Purch.OriginLocaleID = ITD.OriginLocaleID and Purch.OrderType = ITD.OrderType and Cast(Purch.MovementDate as date) = Cast(ITD.MovementDate as Date) 
AND ITD.Type_Flag in ('Sale, No Purchase - DFI', 'Sales - DFI', 'Sale, No Purchase - FOB', 'Sales - FOB', 'CR Sales') 
and Purch.JDEAccountingPeriod >= ITD.JDEAccountingPeriod

-- Failing to join here means there are never any sales later for this purchase
LEFT OUTER JOIN 
	(Select BOL, PCAT, OriginLocaleID, OrderType, Cast(MovementDate as date) as cMovementDate, JDEAccountingPeriod from PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT 
		Where TransactionTypeGroup in ('Sales Price Rack','Sales Price Delivered') 
		Group BY BOL, PCAT, OriginLocaleID, OrderType, Cast(MovementDate as date), JDEAccountingPeriod) EverSales
ON Purch.BOL = EverSales.BOL and Purch.PCAT = EverSales.PCat and Purch.OriginLocaleID = EverSales.OriginLocaleID and Purch.OrderType = EverSales.OrderType and Cast(Purch.MovementDate as date) = Cast(EverSales.cMovementDate as Date) 
and Purch.JDEAccountingPeriod <= EverSales.JDEAccountingPeriod

-- Failing here means no sales in PDS
LEFT OUTER JOIN 
	(Select BOL_Num, Del_Date FROM PROD_EDW_BASE_VIEWS.WSale_PDS_SalesDat GROUP BY BOL_Num, Del_Date) PDS ON Purch.BOL = PDS.BOL_Num and CAST(PDS.Del_Date as date) between Cast(Purch.MovementDate as Date) -7 and Cast(Purch.MovementDate as Date) +7

Where Purch.InvoiceNumber = 'Original'
AND ITD.BOL is null
AND PDS.BOL_Num is Null
AND (Cast(EverSales.JDEAccountingPeriod as integer) <> Purch.JDEAccountingPeriod OR EverSales.JDEAccountingPeriod is null)
);
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_INDEXCHT
as Locking Row ACCESS
Select * From PROD_EDW_BASE.WSALE_RA_INDEXCHT;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSALE_RA_PREV_SLS_GRP
as Locking Row Access 
Select * from PROD_EDW_BASE.WSALE_RA_PREV_SLS_GRP;
--------------------------------------------------------------------------------

/* #2 Update View to show column */
REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT
AS LOCKING ROW ACCESS 
	(
	SELECT a.TransactionID, 
	a.AccountDetailSource, 
	a.ProductID, 
	a.MovementDate,
	a.SalesDataType, 
	a.MvtHdrID, 
	a.TransactionTypeID, 
	a.InvoiceTypeID, 
	a.DlHdrID, BOL, 
	a.OriginLocaleID,
	a.DestLocaleID, 
	a.OrderType, 
	a.SourceType, 
	a.TransactionType, 
	a.InvoiceNumber,
	a.AccountingPeriod,
	Case WHEN TransactionTypeID = 9999 THEN 
	CASE SUBSTR(AccountingPeriod, 1, LENGTH(AccountingPeriod) - 5)
	 WHEN 'January'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'01' as INT)
	 WHEN 'February'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'02' as INT)
	 WHEN 'March' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'03' as INT)
	 WHEN 'April' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'04' as INT)
	 WHEN 'May' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'05' as INT)
	 WHEN 'June'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'06' as INT)
	 WHEN 'July'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'07' as INT)
	 WHEN 'August'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'08' as INT)
	 WHEN 'September' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'09' as INT)
	 WHEN 'October' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'10' as INT)
	 WHEN 'November'THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'11' as INT)
	 WHEN 'December' THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||'12' as INT)
	 ELSE -1 End 
	ELSE 
	COALESCE(Cast(Extract(Year from JDE_411.GL_Date) as char(4) ) || Cast( (Extract(Month from JDE_411.GL_Date)(Format '99')) as Varchar(2) ),
		Cast(Extract(Year from JDE_911.GL_Date) as char(4) ) || Cast( (Extract(Month from JDE_911.GL_Date)(Format '99'))  as Varchar(2)) ,
			substr(cast (cast(JDE_311.GL_Date as date format 'YYYYMMDD') as char(8)),1,6) ) 
	END as JDEAccountingPeriod,
	a.Product, 
	a.Origin, 
	a.Destination, 
	a.Volume, 
	a.GrossVolume,
	a.UOM,
	a.DFI_Value, Currency, 
	a.ContractNumber, 
	a.BANme, 
	a.JDEAddressBookNumber,
	a.AccountDetailCreatedDate, 
	a.ARFedDate, 
	a.DestAddressOne, 
	a.DestAddressTwo,
	a.DestCity, 
	a.DestState, 
	a.DestZipCode, 
	a.PointOfOrigin, 
	a.InvoiceCreationDate,
	a.ProvisionName , 
	a.MaxProvisionPriceService, 
	a.MinProvisionPriceService,
	a.SalesmanCode, 
	a.DriverName, 
	a.TruckNumber, 
	a.TMWOrderNumber, 
	a.PrimaryGLAccount,
	a.OffsetGLAccount, 
	a.LiftingNumber, 
	a.MovementType, 
	a.FTAProductCode,
	a.DestJDEAddBookNum, 
	a.InternalBANme, 
	a.IBAJDEAddBookNum, 
	a.Carrier,
	a.PCAT, 
	a.BatchNumberAR, 
	a.BatchNumberAP, 
	a.BatchNumberGL, 
	a.PurchaseInvoiceNumber,
	a.TransactionTypeGroup, 
	a.Dissmissed_Flag,
	a.Primary_Secondary_Flag,
	a.create_dttm, 
	a.last_update_dttm
	FROM PROD_EDW_BASE.WSALE_DFI_SalesDat a
	LEFT OUTER JOIN PROD_EDW_BASE.WSale_DFI_JDE_F0411 JDE_411 ON a.BatchNumberAP = JDE_411.BatchNumberAP and a.PurchaseInvoiceNumber=JDE_411.Vend_Invc_Num and a.JDEAddressBookNumber = JDE_411.JDEAddressBookNumber 
	LEFT OUTER JOIN PROD_EDW_BASE.WSale_DFI_JDE_F0911 JDE_911 ON a.BatchNumberGL = JDE_911.Batch_ID
	LEFT OUTER JOIN PROD_EDW_BASE.WSALE_DFI_JDE_F03B11 JDE_311 ON a.InvoiceNumber = JDE_311.Receipt_Matching_Ref
);
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_FRT
AS LOCKING ROW ACCESS
select 			SalesDataType,
					OrderType,
					SourceType,
	     			MvtHdrID,
					TransactionTypeID,
					DlHdrID,
					BOL,
					MovementDate,
	      			ProductID,
					OriginLocaleID,
					DestLocaleID,
					TransactionType,
					InvoiceNumber,
					AccountingPeriod,
				--	AccountDetailCreatedDate,
					Product,
	    			Origin,
					Destination,
					case when substring(Destination from 4 for 1)=' ' then substring(Destination from 5 for (length(Destination)-4)) 
					else	Destination end Destination_Trm,
					UOM,
					ContractNumber,
					BANme,
					JDEAddressBookNumber,
					BatchNumberGL,
					ARFedDate,
					DestAddressOne,
					DestAddressTwo,
					DestCity,
					DestState,
					DestZipCode,
					PointOfOrigin,
					InvoiceCreationDate,
					ProvisionName,
					MaxProvisionPriceService,
					MinProvisionPriceService,
					SalesmanCode,
					DriverName,
					TruckNumber,
					TMWOrderNumber,
					LiftingNumber,
					MovementType,
					AccountDetailSource,
					FTAProductCode,
					DestJDEAddBookNum,
					InternalBANme,
					IBAJDEAddBookNum,
					Carrier,
					PCAT,
					TransactionTypeGroup,
					SUM(Volume) as Volume,
					SUM(DFI_Value) as DFI_Value
from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT
where 		TransactionTypeGroup in ('Sales Price Freight Cust Pay','Sales Price Freight Surchrg Cust Pay')
GROUP BY SalesDataType,
					OrderType,
					SourceType,
	     			MvtHdrID,
					TransactionTypeID,
					DlHdrID,
					BOL,
					MovementDate,
	      			ProductID,
					OriginLocaleID,
					DestLocaleID,
					TransactionType,
					InvoiceNumber,
					AccountingPeriod,
				--	AccountDetailCreatedDate,
					Product,
	    			Origin,
					Destination,
					 Destination_Trm,
					UOM,
					ContractNumber,
					BANme,
					JDEAddressBookNumber,
					BatchNumberGL,
					ARFedDate,
					DestAddressOne,
					DestAddressTwo,
					DestCity,
					DestState,
					DestZipCode,
					PointOfOrigin,
					InvoiceCreationDate,
					ProvisionName,
					MaxProvisionPriceService,
					MinProvisionPriceService,
					SalesmanCode,
					DriverName,
					TruckNumber,
					TMWOrderNumber,
					LiftingNumber,
					MovementType,
					AccountDetailSource,
					FTAProductCode,
					DestJDEAddBookNum,
					InternalBANme,
					IBAJDEAddBookNum,
					Carrier,
					PCAT,
					TransactionTypeGroup
Having Sum(Volume) <> 0 and Sum(DFI_Value) <> 0
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_PURCH_GRP
as Locking Row Access 
Select * from PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_PURCH_STG AS LOCKING ROW ACCESS (
select 			Purch_Side.SalesDataType,
					Purch_Side.OrderType,
					Purch_Side.SourceType,
					Purch_Side.TransactionTypeID,
					Purch_Side.DlHdrID,
					Purch_Side.BOL,
					MAX(Purch_Side.MovementDate) as MovementDate,
					Purch_Side.OriginLocaleID,
					Purch_Side.DestLocaleID,
					Purch_Side.TransactionType,
					MAX(Purch_Side.InvoiceNumber) as InvoiceNumber,
				--	Purch_Side.AccountDetailCreatedDate,
					-- Get JDE Accounting Period. If Not Found in JDE_411, use JDE_911 instead
				Case WHEN Purch_Side.TransactionTypeID = 9999 THEN 
							CASE SUBSTR(AccountingPeriod, 1, LENGTH(AccountingPeriod) - 5)
							WHEN 'January' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '01' as INT)
							WHEN 'February' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '02' as INT)
							WHEN 'March' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '03' as INT)
							WHEN 'April' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '04' as INT)
							WHEN 'May' 			THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '05' as INT)
							WHEN 'June' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '06' as INT)
							WHEN 'July' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '07' as INT)
							WHEN 'August' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '08' as INT)
							WHEN 'September' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '09' as INT)
							WHEN 'October' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '10' as INT)
							WHEN 'November' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '11' as INT)
							WHEN 'December' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '12' as INT)
							ELSE -1 End		
				ELSE										 
					COALESCE(Cast(Extract(Year from JDE_411.GL_Date) as char(4) ) || Case WHEN Extract(Month from JDE_411.GL_Date) < 10 THEN '0' || Cast( Extract(Month from JDE_411.GL_Date) as Varchar(2)) ELSE 		Cast( Extract(Month from JDE_411.GL_Date) as Varchar(2)) END ,
								COALESCE(Cast(Extract(Year from JDE_911.GL_Date) as char(4) ) || Case WHEN Extract(Month from JDE_911.GL_Date) < 10 THEN '0' || Cast( Extract(Month from JDE_911.GL_Date) as Varchar(2)) ELSE Cast( Extract(Month from JDE_911.GL_Date) as Varchar(2)) END,
								substr(cast (cast(JDE_311.GL_Date as date format 'YYYYMMDD') as char(8)),1,6) ))	 
				END as JDEAccountingPeriod,
					cast(JDEAccountingPeriod as integer) as cJDEAccountingPeriod,
				--	Purch_Side.Product,
	    			Purch_Side.Origin,
					Purch_Side.Destination,
					case when substring(Purch_Side.Destination from 4 for 1)=' ' then substring(Purch_Side.Destination from 5 for (length(Purch_Side.Destination)-4)) 
					else	Purch_Side.Destination end Destination_Trm,
					Purch_Side.UOM,
					Purch_Side.ContractNumber,
					Purch_Side.BANme,
					Purch_Side.JDEAddressBookNumber,
					MAX(Purch_Side.ARFedDate) as ARFedDate, -- 03/15 to fix purchases with multiple invoices
					Purch_Side.DestAddressOne,
					Purch_Side.DestAddressTwo,
					Purch_Side.DestCity,
					Purch_Side.DestState,
					Purch_Side.DestZipCode,
					Purch_Side.PointOfOrigin,
					MAX(Purch_Side.InvoiceCreationDate) as InvoiceCreationDate, -- 03/15, to fix purchases with invoices 
					Purch_Side.ProvisionName,
					Purch_Side.MaxProvisionPriceService,
					Purch_Side.MinProvisionPriceService,
					Purch_Side.SalesmanCode,
					Purch_Side.DriverName,
					Purch_Side.TruckNumber,
					Purch_Side.TMWOrderNumber,
					Purch_Side.LiftingNumber,
					Purch_Side.MovementType,
					Purch_Side.AccountDetailSource,
		--			Purch_Side.FTAProductCode,
					Purch_Side.DestJDEAddBookNum,
					Purch_Side.InternalBANme,
					Purch_Side.IBAJDEAddBookNum,
					Purch_Side.Carrier,
					Purch_Side.PCAT,
					Purch_Side.TransactionTypeGroup,
					Purch_Side.InvoiceTypeID,
					--CASE WHEN VOLUME < 0 THEN 'Sale' ELSE 'Credit' END as TranType,
					sum(Purch_Side.Volume) as Volume,
					sum(Purch_Side.DFI_Value) as DFI_Value
from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT Purch_Side
	LEFT OUTER JOIN PROD_EDW_BASE.WSale_DFI_JDE_F0411 JDE_411 ON Purch_Side.BatchNumberAP = JDE_411.BatchNumberAP AND Purch_Side.PurchaseInvoiceNumber = JDE_411.Vend_Invc_Num
	LEFT OUTER JOIN PROD_EDW_BASE.WSale_DFI_JDE_F0911 JDE_911 ON Purch_Side.BatchNumberGL = JDE_911.Batch_ID
	LEFT OUTER JOIN PROD_EDW_BASE.WSALE_DFI_JDE_F03B11 JDE_311 ON Purch_Side.InvoiceNumber = JDE_311.Receipt_Matching_Ref
where 		Purch_Side.TransactionTypeGroup in ('Purchase Price Rack','Purchase Price Delivered') 
group by		Purch_Side.SalesDataType,
					Purch_Side.OrderType,
					Purch_Side.SourceType,
					Purch_Side.TransactionTypeID,
					Purch_Side.DlHdrID,
					Purch_Side.BOL,
				--	Purch_Side.MovementDate,
	      		--	Purch_Side.ProductID,
					Purch_Side.OriginLocaleID,
					Purch_Side.DestLocaleID,
					Purch_Side.TransactionType,
					-- Purch_Side.InvoiceNumber, Removed 03/15 to fix BOL's purchases that have InvoiceNumbers
					--Purch_Side.AccountDetailCreatedDate,
					--Purch_Side.Product,
	    			Purch_Side.Origin,
					Purch_Side.Destination,
					Purch_Side.UOM,
					Purch_Side.ContractNumber,
					Purch_Side.BANme,
					Purch_Side.JDEAddressBookNumber,
					JDEAccountingPeriod,
					cJDEAccountingPeriod,
					--Purch_Side.ARFedDate,
					Purch_Side.DestAddressOne,
					Purch_Side.DestAddressTwo,
					Purch_Side.DestCity,
					Purch_Side.DestState,
					Purch_Side.DestZipCode,
					Purch_Side.PointOfOrigin,
					--Purch_Side.InvoiceCreationDate,
					Purch_Side.ProvisionName,
					Purch_Side.MaxProvisionPriceService,
					Purch_Side.MinProvisionPriceService,
					Purch_Side.SalesmanCode,
					Purch_Side.DriverName,
					Purch_Side.TruckNumber,
					Purch_Side.TMWOrderNumber,
					Purch_Side.LiftingNumber,
					Purch_Side.MovementType,
					Purch_Side.AccountDetailSource,
				--	Purch_Side.FTAProductCode,
					Purch_Side.DestJDEAddBookNum,
					Purch_Side.InternalBANme,
					Purch_Side.IBAJDEAddBookNum,
					Purch_Side.Carrier,
					Purch_Side.PCAT,
					Purch_Side.TransactionTypeGroup,
					Purch_Side.InvoiceTypeID
					--TranType
 );
--------------------------------------------------------------------------------

--Change# 3031
/* Sales Group */
REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SLSD_GRP as LOCKING ROW ACCESS( 
select 			a.SalesDataType,
					a.OrderType,
					a.SourceType,
	     			a.MvtHdrID,
					a.TransactionTypeID,
					a.DlHdrID,
					a.BOL,
					a.MovementDate,
	      		--	a.ProductID,
					a.OriginLocaleID,
					a.DestLocaleID,
					a.TransactionType,
					a.InvoiceNumber,
					a.AccountingPeriod,
				--	a.AccountDetailCreatedDate,
					substr(cast (cast(b.GL_Date as date format 'YYYYMMDD') as char(8)),1,6) as JDEAccountingPeriod,
					b.GL_Date,
				--	a.Product,
	    			a.Origin,
					a.Destination,
					case when substring(a.Destination from 4 for 1)=' ' then substring(a.Destination from 5 for (length(a.Destination)-4)) 
					else	a.Destination end Destination_Trm,
					a.UOM,
					a.ContractNumber,
					a.BANme,
					a.JDEAddressBookNumber,
					a.ARFedDate,
					a.DestAddressOne,
					a.DestAddressTwo,
					a.DestCity,
					a.DestState,
					a.DestZipCode,
					a.PointOfOrigin,
					a.InvoiceCreationDate,
					a.ProvisionName,
					a.MaxProvisionPriceService,
					a.MinProvisionPriceService,
					a.SalesmanCode,
					a.DriverName,
					a.TruckNumber,
					a.TMWOrderNumber,
					a.LiftingNumber,
					a.MovementType,
					a.AccountDetailSource,
					a.FTAProductCode,
					a.DestJDEAddBookNum,
					a.InternalBANme,
					a.IBAJDEAddBookNum,
					a.Carrier,
					a.PCAT,
					a.TransactionTypeGroup,
					CASE WHEN ProvisionName = 'FMI Temporary Allowance' THEN 0 ELSE sum(a.Volume) END as Vol_Sold,
					CASE WHEN ProvisionName = 'FMI Temporary Allowance' THEN 0 ELSE sum(a.GrossVolume) END as GrossVolume,
					sum(a.DFI_Value) as Sales_Price
from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT a left outer join
					PROD_EDW_BASE.WSALE_DFI_JDE_F03B11 b on 
					a.InvoiceNumber=b.Receipt_Matching_Ref
where 		a.TransactionTypeGroup in ('Sales Price Rack','Sales Price Delivered') and
					a.InvoiceNumber is not null
group by		a.SalesDataType,
					a.OrderType,
					a.SourceType,
	     			a.MvtHdrID,
					a.TransactionTypeID,
					a.DlHdrID,
					a.BOL,
					a.MovementDate,
	      		--	a.ProductID,
					a.OriginLocaleID,
					a.DestLocaleID,
					a.TransactionType,
					a.InvoiceNumber,
					a.AccountingPeriod,
					--a.AccountDetailCreatedDate,
					--a.Product,
	    			a.Origin,
					a.Destination,
					a.UOM,
					a.ContractNumber,
					a.BANme,
					a.JDEAddressBookNumber,
					b.GL_Date,
					a.ARFedDate,
					a.DestAddressOne,
					a.DestAddressTwo,
					a.DestCity,
					a.DestState,
					a.DestZipCode,
					a.PointOfOrigin,
					a.InvoiceCreationDate,
					a.ProvisionName,
					a.MaxProvisionPriceService,
					a.MinProvisionPriceService,
					a.SalesmanCode,
					a.DriverName,
					a.TruckNumber,
					a.TMWOrderNumber,
					a.LiftingNumber,
					a.MovementType,
					a.AccountDetailSource,
					a.FTAProductCode,
					a.DestJDEAddBookNum,
					a.InternalBANme,
					a.IBAJDEAddBookNum,
					a.Carrier,
					a.PCAT,
					a.TransactionTypeGroup
);
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SLS_SRVC_FEE
--Change 3122
AS LOCKING ROW ACCESS
select 			SalesDataType,
					OrderType,
					SourceType,
	     			MvtHdrID,
					TransactionTypeID,
					DlHdrID,
					BOL,
					MovementDate,
	      			ProductID,
					OriginLocaleID,
					DestLocaleID,
					TransactionType,
					InvoiceNumber,
					AccountingPeriod,	
			CASE SUBSTR(AccountingPeriod, 1, LENGTH(AccountingPeriod) - 5)
							WHEN 'January' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '01' as INT)
							WHEN 'February' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '02' as INT)
							WHEN 'March' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '03' as INT)
							WHEN 'April' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '04' as INT)
							WHEN 'May' 			THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '05' as INT)
							WHEN 'June' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '06' as INT)
							WHEN 'July' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '07' as INT)
							WHEN 'August' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '08' as INT)
							WHEN 'September' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '09' as INT)
							WHEN 'October' 		THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '10' as INT)
							WHEN 'November' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '11' as INT)
							WHEN 'December' 	THEN CAST(SUBSTR(AccountingPeriod, LENGTH(AccountingPeriod) - 3, LENGTH(AccountingPeriod)-1) ||  '12' as INT)
			ELSE -1 END as JDEAccountingPeriod,
				--	AccountDetailCreatedDate,
					Product,
	    			Origin,
					Destination,
					case when substring(Destination from 4 for 1)=' ' then substring(Destination from 5 for (length(Destination)-4)) 
					else	Destination end Destination_Trm,
					UOM,
					ContractNumber,
					BANme,
					JDEAddressBookNumber,
					BatchNumberGL,
					ARFedDate,
					DestAddressOne,
					DestAddressTwo,
					DestCity,
					DestState,
					DestZipCode,
					PointOfOrigin,
					InvoiceCreationDate,
					ProvisionName,
					MaxProvisionPriceService,
					MinProvisionPriceService,
					SalesmanCode,
					DriverName,
					TruckNumber,
					TMWOrderNumber,
					LiftingNumber,
					MovementType,
					AccountDetailSource,
					FTAProductCode,
					DestJDEAddBookNum,
					InternalBANme,
					IBAJDEAddBookNum,
					Carrier,
					PCAT,
					TransactionTypeGroup,
					Volume,
					DFI_Value
from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT
where 		TransactionTypeGroup in ('Sales Service Fees')
;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SUM_ITD
as Locking Row Access
SELECT	Type_Flag, JDEAccountingPeriod, GL_Date, AccountingPeriod,
		SalesmanCode, Current_SalesmanCode, BillToJDEAddrBookNumber,
		ShipToJDEAddrBookNumber, VendorJDEAddrBookNumber, BANme, PCAT,
		InvoiceNumber, MovementDateTime, MovementDate, MovementTime,
		OriginLocaleID, BOL, UOM, Volume, GrossVolume, Prev_Sales_Vol,
		SalesPrice, Prev_Sales_Price, FreightSalesPrice, TotalSales,
		Tax, SalesServiceFee, Period_UnitPrice, PurchPrice, Ancillary_Fees, EquipmentCharge,
		Prev_Sale_Equip_Charge, FrtPurchPrice, Prev_Sale_Freight_Charge,
		AdditiveType, AdditiveValue, COGS, GrossMargin, Volume_ITD, GrossVolume_ITD,
		SalesPrice_ITD, FreightSalesPrice_ITD, Sales_ITD, Tax_ITD, SalesServiceFee_ITD, UnitPrice_ITD,
		PurchPrice_ITD, COGS_ITD, GrossMargin_ITD, Ancillary_Fees_ITD,
		EquipmentCharge_ITD, FrtPurchPrice_ITD, AdditiveValue_ITD, SalesDataType,
		TransactionTypeID, DlHdrID, DestLocaleID, OrderType, SourceType,
		TransactionType, Origin, Destination, DestinationTrm, ContractNumber,
		ARFedDate, DestAddressOne, DestAddressTwo, DestCity, DestState,
		DestZipCode, PointOfOrigin, InvoiceCreationDate, ProvisionName,
		MaxProvisionPriceService, MinProvisionPriceService, DriverName,
		TruckNumber, TMWOrderNumber, TransactionTypeGroup, LiftingNumber,
		AccountDetailSource, FTAProductCode, Vendor, InternalBANme, IBAJDEAddBookNum,
		Carrier, MovementType, PeriodSequence, PeriodRank, BOLJDECount,
		BOLCount, PeriodCount, AvgAcctPrd, create_dttm, last_update_dttm
FROM	PROD_EDW_BASE.WSALE_RA_Salesdat_Sum_ITD;
--------------------------------------------------------------------------------

/* Tax Group */
REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_TAX_GRP AS LOCKING ROW ACCESS ( 
select  BOL, 
        PCAT, 
        DestLocaleID,
        MvtHdrID, 
        InvoiceNumber,  
        cast(MovementDate as date) as MvDate,
        sum(DFI_Value) as Tot_Sls_Tax
from   PROD_EDW_BASE.WSALE_DFI_SALESDAT 
where  TransactionTypeGroup in ('Sales Tax AZ','Sales Tax CA','Sales Tax CO','Sales Tax FET','Sales Tax NM','Sales Tax NN','Sales Tax NV','Sales Tax TX','Sales Tax UT', 'NM Jobber Discount') and
		InvoiceNumber is not null 
group by    BOL, 
            PCAT, 
            DestLocaleID,
            MvtHdrID, 
            InvoiceNumber,  
            cast(MovementDate as date)                                                    			
		);
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_Views.WSale_RA_SLSD_STG as LOCKING ROW ACCESS (
	Select 					
		SC.SalesDataType,
		SC.MvtHdrID,
		SC.TransactionTypeID,
		SC.DlHdrID,
		SC.BOL,
		SC.MovementDate,
		SC.OriginLocaleID,
		SC.DestLocaleID,
		SC.OrderType,
		SC.SourceType,
		SC.TransactionType,
		SC.InvoiceNumber,
		SC.AccountingPeriod,
		TRIM(SC.JDEAccountingPeriod) as JDEAccountingPeriod,
		SC.Origin,
		SC.Destination,
		SC.DestinationTrm,
		SC.ContractNumber,
		SC.BANme,
		SC.BillToJDEAddrBookNumber,
		SC.ARFedDate,
		SC.DestAddressOne,
		SC.DestAddressTwo,
		SC.DestCity,
		SC.DestState,
		SC.DestZipCode,
		SC.PointOfOrigin,
		SC.InvoiceCreationDate,
		SC.ProvisionName,
		SC.MaxProvisionPriceService,
		SC.MinProvisionPriceService,
		SC.SalesmanCode,
		CUR_SM.TerritoryNum as Current_SalesmanCode,
		SC.DriverName,
		SC.TruckNumber,
		SC.TMWOrderNumber,
		SC.TransactionTypeGroup,
		SC.LiftingNumber,
		SC.MovementType,
		SC.AccountDetailSource,
		SC.FTAProductCode,
		CASE WHEN SC.cShipToJDEAddrBookNumber IS NULL THEN SC.BillToJDEAddrBookNumber ELSE SC.cShipToJDEAddrBookNumber END as ShipToJDEAddrBookNumber,
		SC.UOM,
		SC.Vendor,
		SC.InternalBANme,
		SC.IBAJDEAddBookNum,
		SC.Carrier,
		SC.PCAT,
		ZeroIfNull(SC.Volume) as Volume,
		ZeroIfNull(SC.Prev_Sales_Vol) as Prev_Sales_Vol,
		ZeroIfNull(SC.Prev_Sales_Price) as Prev_Sales_Price, 
		ZeroIfNull(SC.Prev_Sale_Freight_Charge) as Prev_Sale_Freight_Charge,
		ZeroIfNull(SC.Prev_Sale_Equip_Charge) as Prev_Sale_Equip_Charge,
		ZeroIfNull(SC.Purch_Volume) as Purch_Volume,
		ZeroIfNull(SC.SalesPrice) as SalesPrice,
		-- Dont flip freight value when records type is freight. We are flipping values because a Sales credit may come in but without FreightSales credit. In that case we need to make the credit ourselves, but if this isn't a sale we don't need to do that
		CASE WHEN Volume > 0 and Type_Flag <> 'Freight Only' THEN ZeroIfNull(SC.FreightSalesPrice) ELSE  ZeroIfNull(SC.FreightSalesPrice)*-1 END as FreightSalesPrice,
		ZeroIfNull(SC.TotalSales) as TotalSales,
		ZeroIfNull(SC.SalesTax) as Tax,
		ZeroIfNull(SC.Sales_Service_Fee) as SalesServiceFee,
		CASE WHEN Volume < 0 THEN ZeroIfNull(SC.PurchUnitPrice)*-1 ELSE ZeroIfNull(SC.PurchUnitPrice) END as PurchUnitPrice,
		--ZeroIfNull(SC.PurchUnitPrice) as PurchUnitPrice,
		ZeroIfNull(SC.PurchPrice) as PurchPrice,
		ZeroIfNull(SC.Ancillary_Fees) as Ancillary_Fees,
		ZeroIfNull(SC.EquipmentCharge) as EquipmentCharge,
		ZeroIfNull(SC.FrtPurchPrice) as FrtPurchPrice,
		ZeroIfNull(SC.COGs) as COGs,
		ZeroIfNull(SC.GrossMargin) as GrossMargin,
		SC.Type_Flag
	FROM (
	select 			FOB_Sls_Side.SalesDataType,
	     			FOB_Sls_Side.MvtHdrID,
					FOB_Sls_Side.TransactionTypeID,
					FOB_Sls_Side.DlHdrID,
					FOB_Sls_Side.BOL,
					FOB_Sls_Side.MovementDate,
					FOB_Sls_Side.OriginLocaleID,
					FOB_Sls_Side.DestLocaleID,
					FOB_Sls_Side.OrderType,
					FOB_Sls_Side.SourceType,
					FOB_Sls_Side.TransactionType,
					FOB_Sls_Side.InvoiceNumber,
					FOB_Sls_Side.AccountingPeriod,
					FOB_Sls_Side.JDEAccountingPeriod,
					FOB_Sls_Side.Origin,
					FOB_Sls_Side.Destination,
					FOB_Sls_Side.Destination_Trm as DestinationTrm,
					FOB_Sls_Side.ContractNumber,
					FOB_Sls_Side.BANme,
					FOB_Sls_Side.JDEAddressBookNumber as BillToJDEAddrBookNumber,
					FOB_Sls_Side.ARFedDate,
					FOB_Sls_Side.DestAddressOne,
					FOB_Sls_Side.DestAddressTwo,
					FOB_Sls_Side.DestCity,
					FOB_Sls_Side.DestState,
					FOB_Sls_Side.DestZipCode,
					FOB_Sls_Side.PointOfOrigin,
					FOB_Sls_Side.InvoiceCreationDate,
					FOB_Sls_Side.ProvisionName,
					FOB_Sls_Side.MaxProvisionPriceService,
					FOB_Sls_Side.MinProvisionPriceService,
					FOB_Sls_Side.SalesmanCode,
					FOB_Sls_Side.DriverName,
					FOB_Sls_Side.TruckNumber,
					FOB_Sls_Side.TMWOrderNumber,
					FOB_Sls_Side.TransactionTypeGroup,
					FOB_Sls_Side.LiftingNumber,
					FOB_Sls_Side.MovementType,
					FOB_Sls_Side.AccountDetailSource,
					FOB_Sls_Side.FTAProductCode,
					FOB_Sls_Side.DestJDEAddBookNum as cShipToJDEAddrBookNumber,
					FOB_Sls_Side.UOM,
					FOB_Purch_Side.BANme as Vendor,
					FOB_Sls_Side.InternalBANme,
					FOB_Sls_Side.IBAJDEAddBookNum,
					FOB_Sls_Side.Carrier,
					FOB_Sls_Side.PCAT,
					(FOB_Sls_Side.Vol_Sold*-1) as Volume,
					cast (null as decimal(38,4)) as Prev_Sales_Vol,
					cast(null as decimal(38,4)) as Prev_Sales_Price, 
					cast(null as decimal(38,4)) as Prev_Sale_Freight_Charge,
					cast(null as decimal(38,4)) as Prev_Sale_Equip_Charge,
					FOB_Purch_Side.PeriodVolume as Purch_Volume,
					FOB_Sls_Side.Sales_Price as SalesPrice,
					FOB_FrtSls_Side.Sum_Frt_Sales_Price as FreightSalesPrice,
					FOB_Tax_Side.Tot_Sls_Tax as SalesTax,
					cast(null as Decimal(38,4)) as Sales_Service_Fee,
					Coalesce(SalesPrice, 0)+Coalesce(FreightSalesPrice,0) as TotalSales,
					FOB_Purch_Side.PeriodUnitCost as PurchUnitPrice,
					(FOB_Sls_Side.Vol_Sold*-1)*FOB_Purch_Side.PeriodUnitCost as 	PurchPrice,
					FOB_Sls_Tax_and_Fee_Side.Ancillary_Fees as Ancillary_Fees,
					case when FOB_Sls_Side.Vol_Sold  > 0 then  FOB_EqpChg_Side.Tot_DFI_Value*-1  else   FOB_EqpChg_Side.Tot_DFI_Value END as EquipmentCharge,
					case when FOB_Sls_Side.Vol_Sold  < 0 then  FOB_Frt_Side.Sum_Frt_Purch_Price*-1 else   FOB_Frt_Side.Sum_Frt_Purch_Price END AS FrtPurchPrice,
					(COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0)) as COGs,
					COALESCE(TotalSales,0) + Sales_Service_Fee - (COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0) + COALESCE(FOB_EqpChg_Side.Tot_DFI_Value, 0)) as GrossMargin,
					CASE WHEN FOB_Purch_Side.BOL IS NULL THEN cast ('Sale, No Purchase - FOB' as varchar(32))  ELSE cast ('Sales - FOB' as varchar(32)) END as Type_Flag
	from 		PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SLSD_GRP FOB_Sls_Side
				left outer join PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP FOB_Purch_Side on
					FOB_Sls_Side.BOL 										=	FOB_Purch_Side.BOL and	
					FOB_Sls_Side.PCAT 									=	FOB_Purch_Side.PCAT and	
					FOB_Sls_Side.OriginLocaleID							=	FOB_Purch_Side.OriginLocaleID and
					cast(FOB_Sls_Side.MovementDate as date)				=  	CAST(FOB_Purch_Side.MovementDate as Date) and 
					FOB_Sls_Side.OrderType 								= 'F' AND
					--FOB_Sls_Side.OrderType								= FOB_Purch_Side.OrderType AND
					FOB_Sls_Side.JDEAccountingPeriod 						= FOB_Purch_Side.JDEAccountingPeriod 
	
					left outer join
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										InvoiceNumber,
										cast(MovementDate as Date) as MvDate,
										sum(case when TransactionTypeGroup in ('Sales Compliance Fee', 'Sales Ancillary Fee') then DFI_Value end) as "Ancillary_Fees"
					from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT 
					where 		TransactionTypeGroup in ('Sales Compliance Fee', 'Sales Ancillary Fee')  and
										OrderType = 'F' and
										InvoiceNumber is not null
					group by  	BOL, PCAT, DestLocaleID, MvtHdrID, InvoiceNumber, cast(MovementDate as Date)
					) FOB_Sls_Tax_and_Fee_Side on
					FOB_Sls_Side.BOL 											=	FOB_Sls_Tax_and_Fee_Side.BOL and	
					FOB_Sls_Side.PCAT 									=	FOB_Sls_Tax_and_Fee_Side.PCAT and	
					FOB_Sls_Side.DestLocaleID								=	FOB_Sls_Tax_and_Fee_Side.DestLocaleID and
					FOB_Sls_Side.MvtHdrID									=	FOB_Sls_Tax_and_Fee_Side.MvtHdrID and
					FOB_Sls_Side.InvoiceNumber							=	FOB_Sls_Tax_and_Fee_Side.InvoiceNumber and
					cast(FOB_Sls_Side.MovementDate as date) 	= FOB_Sls_Tax_and_Fee_Side.MvDate
					left outer join
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										cast(MovementDate as Date) as MvDate,
										sum(DFI_Value) as Sum_Frt_Purch_Price,
										sum(volume) as tot_vol, 
										sum((DFI_Value))/sum(volume) as frt_purch_unit_price 
					from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT 
					where 		TransactionTypeGroup = 'Freight Purchase Price' and
										OrderType = 'F' 
					group by		BOL, PCAT, DestLocaleID, MvtHdrID, cast(MovementDate as Date)
					having		tot_vol <> 0
					) FOB_Frt_Side on
					FOB_Sls_Side.BOL 											=	FOB_Frt_Side.BOL and	
					FOB_Sls_Side.PCAT 									=	FOB_Frt_Side.PCAT and	
					FOB_Sls_Side.DestLocaleID								=	FOB_Frt_Side.DestLocaleID and
					FOB_Sls_Side.MvtHdrID									=	FOB_Frt_Side.MvtHdrID and
					cast(FOB_Sls_Side.MovementDate as date) 	=  FOB_Frt_Side.MvDate AND
					FOB_Sls_Side.ProvisionName <> 'FMI Temporary Allowance'
					left outer join
					(
					select 			BOL, 
										PCAT, 
										OriginLocaleID,
										DestLocaleID,
										BANme as Vendor,
										cast(MovementDate as Date) as MvDate, 
										sum(volume) as tot_vol, 
										sum((DFI_Value*-1)) as Tot_DFI_Value
					 from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT  
					 where 		TransactionTypeGroup = 'Purchase Equipment Charges'  and
					 					OrderType = 'F'
					group by 	BOL, PCAT, OriginLocaleID, DestLocaleID, BANme, cast(MovementDate as Date)
					having 		tot_vol <> 0
					) FOB_EqpChg_Side on
					FOB_Sls_Side.BOL 											=	FOB_EqpChg_Side.BOL and	
					FOB_Sls_Side.PCAT 									=	FOB_EqpChg_Side.PCAT and	
					FOB_Sls_Side.OriginLocaleID							=	FOB_EqpChg_Side.OriginLocaleID and
					FOB_Sls_Side.DestLocaleID							=	FOB_EqpChg_Side.DestLocaleID and
					cast(FOB_Sls_Side.MovementDate as date)	=  FOB_EqpChg_Side.MvDate 
					
					/*** Begin Freight Sales ***/
					left outer join 
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										cast(MovementDate as Date) as MvDate,
										sum(DFI_Value) as Sum_Frt_Sales_Price,
										sum(volume) as tot_vol
										--sum((DFI_Value))/sum(volume) as frt_Sales_unit_price 
					from 			PROD_EDW_BASE_Views.WSALE_RA_SALESDAT_FRT
					where 		OrderType = 'F' 
					group by		BOL, PCAT, DestLocaleID, MvtHdrID, cast(MovementDate as Date)
					having		tot_vol <> 0
					) FOB_FrtSls_Side on
					FOB_Sls_Side.BOL 											=	FOB_FrtSls_Side.BOL and	
					FOB_Sls_Side.PCAT 									=	FOB_FrtSls_Side.PCAT and	
					FOB_Sls_Side.DestLocaleID								=	FOB_FrtSls_Side.DestLocaleID and
					FOB_Sls_Side.MvtHdrID									=	FOB_FrtSls_Side.MvtHdrID and
					cast(FOB_Sls_Side.MovementDate as date) 	=  FOB_FrtSls_Side.MvDate
					/*** End Freight Sales ***/
					
					/*** Begin Taxes ***/
					left outer join PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_TAX_GRP FOB_Tax_Side on 
					FOB_Sls_Side.BOL 							= FOB_Tax_Side.BOL and
					FOB_Sls_Side.PCat 							= FOB_Tax_Side.PCat and
					FOB_Sls_Side.DestLocaleID					= FOB_Tax_Side.DestLocaleID and
					FOB_Sls_Side.MvtHdrID						= FOB_Tax_Side.MvtHdrID and
					FOB_Sls_Side.InvoiceNumber					= FOB_Tax_Side.InvoiceNumber and
					cast(FOB_Sls_Side.MovementDate as date)		= FOB_Tax_Side.MvDate
					/*** End Taxes ***/
					
	where		FOB_Sls_Side.OrderType = 'F' 				
	union all
	--DFI Side
	select 		DFI_Sls_Side.SalesDataType,
	     			DFI_Sls_Side.MvtHdrID,
					DFI_Sls_Side.TransactionTypeID,
					DFI_Sls_Side.DlHdrID,
					DFI_Sls_Side.BOL,
					DFI_Sls_Side.MovementDate,
	      			--DFI_Sls_Side.ProductID,
					DFI_Sls_Side.OriginLocaleID,
					DFI_Sls_Side.DestLocaleID,
					DFI_Sls_Side.OrderType,
					DFI_Sls_Side.SourceType,
					DFI_Sls_Side.TransactionType,
					DFI_Sls_Side.InvoiceNumber,
					DFI_Sls_Side.AccountingPeriod,
					--DFI_Sls_Side.AccountDetailCreatedDate,
					DFI_Sls_Side.JDEAccountingPeriod,
					--DFI_Sls_Side.Product,
					DFI_Sls_Side.Origin,
					DFI_Sls_Side.Destination,
					DFI_Sls_Side.Destination_Trm as DestinationTrm,
					DFI_Sls_Side.ContractNumber,
					DFI_Sls_Side.BANme,
					DFI_Sls_Side.JDEAddressBookNumber as BillToJDEAddrBookNumber,
					DFI_Sls_Side.ARFedDate,
					DFI_Sls_Side.DestAddressOne,
					DFI_Sls_Side.DestAddressTwo,
					DFI_Sls_Side.DestCity,
					DFI_Sls_Side.DestState,
					DFI_Sls_Side.DestZipCode,
					DFI_Sls_Side.PointOfOrigin,
					DFI_Sls_Side.InvoiceCreationDate,
					DFI_Sls_Side.ProvisionName,
					DFI_Sls_Side.MaxProvisionPriceService,
					DFI_Sls_Side.MinProvisionPriceService,
					DFI_Sls_Side.SalesmanCode,
					DFI_Sls_Side.DriverName,
					DFI_Sls_Side.TruckNumber,
					DFI_Sls_Side.TMWOrderNumber,
					DFI_Sls_Side.TransactionTypeGroup,
					DFI_Sls_Side.LiftingNumber,
					DFI_Sls_Side.MovementType,
					DFI_Sls_Side.AccountDetailSource,
					DFI_Sls_Side.FTAProductCode,
					DFI_Sls_Side.DestJDEAddBookNum as cShipToJDEAddrBookNumber,
					DFI_Sls_Side.UOM,
					DFI_Purch_Side.BANme as Vendor,
					DFI_Sls_Side.InternalBANme,
					DFI_Sls_Side.IBAJDEAddBookNum,
					DFI_Sls_Side.Carrier,
					DFI_Sls_Side.PCAT,
					(DFI_Sls_Side.Vol_Sold*-1) as Volume,
					cast(null as decimal(38,4)) as Prev_Sales_Vol,
					cast(null as decimal(38,4)) as Prev_Sales_Price, 
					cast(null as decimal(38,4)) as Prev_Sale_Freight_Charge,
					cast(null as decimal(38,4)) as Prev_Sale_Equip_Charge,
					DFI_Purch_Side.PeriodVolume as Purch_Volume,
					DFI_Sls_Side.Sales_Price as SalesPrice,
					DFI_FrtSls_Side.Sum_Frt_Sales_Price as FreightSalesPrice,
					DFI_Tax_Side.Tot_Sls_Tax as SalesTax,
					cast(null as Decimal(38,4)) as Sales_Service_Fee,
					Coalesce(SalesPrice, 0)+Coalesce(FreightSalesPrice,0) as TotalSales,
					DFI_Purch_Side.PeriodUnitCost as PurchUnitPrice,
					(DFI_Sls_Side.Vol_Sold*-1)*DFI_Purch_Side.PeriodUnitCost as 	PurchPrice,
					DFI_Sls_Tax_and_Fee_Side.Ancillary_Fees as Ancillary_Fees,
					case when DFI_Sls_Side.Vol_Sold  > 0 then  DFI_EqpChg_Side.Tot_DFI_Value*-1  else   DFI_EqpChg_Side.Tot_DFI_Value END as EquipmentCharge,
					/*DFI_Frt_Side.Sum_Frt_Purch_Price*-1 as FrtPurchPrice,*/
					case when DFI_Sls_Side.Vol_Sold  < 0 then  DFI_Frt_Side.Sum_Frt_Purch_Price*-1 else   DFI_Frt_Side.Sum_Frt_Purch_Price END AS FrtPurchPrice,
					(COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0)) as COGs,
					COALESCE(TotalSales,0) + Sales_Service_Fee - (COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0) + COALESCE(DFI_EqpChg_Side.Tot_DFI_Value, 0)) as GrossMargin,
					CASE WHEN DFI_Purch_Side.BOL IS NULL THEN cast ('Sale, No Purchase - DFI' as varchar(32)) ELSE  cast ('Sales - DFI' as varchar(32)) END as Type_Flag
	from 		PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SLSD_GRP DFI_Sls_Side
				left outer join  PROD_EDW_BASE.WSale_RA_Salesdat_PURCH_GRP DFI_Purch_Side on 
					DFI_Sls_Side.BOL 									=	DFI_Purch_Side.BOL and	
					DFI_Sls_Side.PCAT 								=	DFI_Purch_Side.PCAT and	
					DFI_Sls_Side.OriginLocaleID						=	DFI_Purch_Side.OriginLocaleID and
					DFI_Sls_Side.JDEAccountingPeriod 					= DFI_Purch_Side.JDEAccountingPeriod and 
					DFI_Sls_Side.OrderType							= 'D' AND
					--DFI_Sls_Side.OrderType							= DFI_Purch_Side.OrderType AND
					cast(DFI_Sls_Side.MovementDate as date)		between  CAST(DFI_Purch_Side.MovementDate as Date)-14 and CAST(DFI_Purch_Side.MovementDate as Date)+14

					left outer join
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										InvoiceNumber,
										cast(MovementDate as Date) as MvDate,
										sum(case when TransactionTypeGroup in('Sales Compliance Fee', 'Sales Ancillary Fee') then DFI_Value end) as "Ancillary_Fees"
					from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT 
					where 		TransactionTypeGroup in ('Sales Compliance Fee', 'Sales Ancillary Fee')  and
										OrderType = 'D' and
										InvoiceNumber is not null
					group by  	BOL, PCAT, DestLocaleID, MvtHdrID, InvoiceNumber, cast(MovementDate as Date)
					) DFI_Sls_Tax_and_Fee_Side on
					DFI_Sls_Side.BOL 												=	DFI_Sls_Tax_and_Fee_Side.BOL and	
					DFI_Sls_Side.PCAT 									=	DFI_Sls_Tax_and_Fee_Side.PCAT and	
					DFI_Sls_Side.DestLocaleID								=	DFI_Sls_Tax_and_Fee_Side.DestLocaleID and
					DFI_Sls_Side.MvtHdrID										=	DFI_Sls_Tax_and_Fee_Side.MvtHdrID and
					DFI_Sls_Side.InvoiceNumber								=	DFI_Sls_Tax_and_Fee_Side.InvoiceNumber and
					cast(DFI_Sls_Side.MovementDate as date) 		= DFI_Sls_Tax_and_Fee_Side.MvDate
					left outer join
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										cast(MovementDate as Date) as MvDate,
										sum(DFI_Value) as Sum_Frt_Purch_Price,
										sum(volume) as tot_vol, 
										sum((DFI_Value))/sum(volume) as frt_purch_unit_price 
					from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT 
					where 		TransactionTypeGroup = 'Freight Purchase Price' and
										OrderType = 'D' 
					group by		BOL, PCAT, DestLocaleID, MvtHdrID, cast(MovementDate as Date)
					having		tot_vol <> 0
					) DFI_Frt_Side on
					DFI_Sls_Side.BOL 												=	DFI_Frt_Side.BOL and	
					DFI_Sls_Side.PCAT 									=	DFI_Frt_Side.PCAT and	
					DFI_Sls_Side.DestLocaleID								=	DFI_Frt_Side.DestLocaleID and
					DFI_Sls_Side.MvtHdrID										=	DFI_Frt_Side.MvtHdrID and
					cast(DFI_Sls_Side.MovementDate as date) 		=  DFI_Frt_Side.MvDate and 
					DFI_Sls_Side.ProvisionName <> 'FMI Temporary Allowance'
					left outer join
					(
					select 			BOL, 
										PCAT, 
										OriginLocaleID,
										DestLocaleID,
										BANme as Vendor,
										cast(MovementDate as Date) as MvDate, 
										sum(volume) as tot_vol, 
										sum((DFI_Value*-1)) as Tot_DFI_Value
					 from 			PROD_EDW_BASE.WSALE_DFI_SALESDAT  
					 where 		TransactionTypeGroup = 'Purchase Equipment Charges'  and
					 					OrderType = 'D'
					group by 	BOL, PCAT, OriginLocaleID, DestLocaleID, BANme, cast(MovementDate as Date)
					having 		tot_vol <> 0
					) DFI_EqpChg_Side on
					DFI_Sls_Side.BOL 											=	DFI_EqpChg_Side.BOL and	
					DFI_Sls_Side.PCAT 									=	DFI_EqpChg_Side.PCAT and	
					DFI_Sls_Side.OriginLocaleID							=	DFI_EqpChg_Side.OriginLocaleID and
					DFI_Sls_Side.DestLocaleID							=	DFI_EqpChg_Side.DestLocaleID and
					cast(DFI_Sls_Side.MovementDate as date)	=  DFI_EqpChg_Side.MvDate 
				/*** Begin Freight Sales ***/
					left outer join 
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										cast(MovementDate as Date) as MvDate,
										sum(DFI_Value) as Sum_Frt_Sales_Price,
										sum(volume) as tot_vol
										--sum((DFI_Value))/sum(volume) as frt_Sales_unit_price 
					from 			PROD_EDW_BASE_Views.WSALE_RA_SALESDAT_FRT
					where 		OrderType = 'D' 
					group by		BOL, PCAT, DestLocaleID, MvtHdrID, cast(MovementDate as Date)
					having		tot_vol <> 0
					) DFI_FrtSls_Side on
					DFI_Sls_Side.BOL 											=	DFI_FrtSls_Side.BOL and	
					DFI_Sls_Side.PCAT 									=	DFI_FrtSls_Side.PCAT and	
					DFI_Sls_Side.DestLocaleID								=	DFI_FrtSls_Side.DestLocaleID and
					DFI_Sls_Side.MvtHdrID									=	DFI_FrtSls_Side.MvtHdrID and
					cast(DFI_Sls_Side.MovementDate as date) 	=  DFI_FrtSls_Side.MvDate
				/*** End Freight Sales ***/
				/*** Begin Taxes ***/
					left outer join PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_TAX_GRP DFI_Tax_Side on 
					DFI_Sls_Side.BOL 							= DFI_Tax_Side.BOL and
					DFI_Sls_Side.PCat 							= DFI_Tax_Side.PCat and
					DFI_Sls_Side.DestLocaleID					= DFI_Tax_Side.DestLocaleID and
					DFI_Sls_Side.MvtHdrID						= DFI_Tax_Side.MvtHdrID and
					DFI_Sls_Side.InvoiceNumber					= DFI_Tax_Side.InvoiceNumber and
					cast(DFI_Sls_Side.MovementDate as date)		= DFI_Tax_Side.MvDate
				/*** End Taxes ***/
	where		DFI_Sls_Side.OrderType = 'D' 	
	union all
	--FRT Side
	select 		Frt_Sls_Side .SalesDataType,
	     			Frt_Sls_Side .MvtHdrID,
					Frt_Sls_Side .TransactionTypeID,
					Frt_Sls_Side .DlHdrID,
					Frt_Sls_Side .BOL,
					Frt_Sls_Side .MovementDate,
	      			--Frt_Sls_Side .ProductID,
					Frt_Sls_Side .OriginLocaleID,
					Frt_Sls_Side .DestLocaleID,
					Frt_Sls_Side .OrderType,
					Frt_Sls_Side .SourceType,
					Frt_Sls_Side .TransactionType,
					Frt_Sls_Side .InvoiceNumber,
					Frt_Sls_Side .AccountingPeriod,
					--Frt_Sls_Side .AccountDetailCreatedDate,
					-- If can't get GL date from JDE_FP_FRT, try to get it from JDE_GL_FRT
					COALESCE(substr(cast (cast(JDE_FP_FRT.GL_Date as date format 'YYYYMMDD') as char(8)),1,6), substr(cast (cast(JDE_GL_FRT.GL_Date as date format 'YYYYMMDD') as char(8)),1,6)) as JDEAccountingPeriod,
					--Frt_Sls_Side .Product,
					Frt_Sls_Side .Origin,
					Frt_Sls_Side .Destination,
					Frt_Sls_Side .Destination_Trm as DestinationTrm,
					Frt_Sls_Side .ContractNumber,
					Frt_Sls_Side .BANme,
					Frt_Sls_Side .JDEAddressBookNumber as BillToJDEAddrBookNumber,
					Frt_Sls_Side .ARFedDate,
					Frt_Sls_Side .DestAddressOne,
					Frt_Sls_Side .DestAddressTwo,
					Frt_Sls_Side .DestCity,
					Frt_Sls_Side .DestState,
					Frt_Sls_Side .DestZipCode,
					Frt_Sls_Side .PointOfOrigin,
					Frt_Sls_Side .InvoiceCreationDate,
					Frt_Sls_Side .ProvisionName,
					Frt_Sls_Side .MaxProvisionPriceService,
					Frt_Sls_Side .MinProvisionPriceService,
					Frt_Sls_Side .SalesmanCode,
					Frt_Sls_Side .DriverName,
					Frt_Sls_Side .TruckNumber,
					Frt_Sls_Side .TMWOrderNumber,
					Frt_Sls_Side .TransactionTypeGroup,
					Frt_Sls_Side .LiftingNumber,
					Frt_Sls_Side .MovementType,
					Frt_Sls_Side .AccountDetailSource,
					Frt_Sls_Side .FTAProductCode,
					Frt_Sls_Side .DestJDEAddBookNum as cShipToJDEAddrBookNumber,
					Frt_Sls_Side .UOM,
					cast (null as varchar(100)) as Vendor,
					Frt_Sls_Side .InternalBANme,
					Frt_Sls_Side .IBAJDEAddBookNum,
					Frt_Sls_Side .Carrier,
					Frt_Sls_Side .PCAT,
					(Frt_Sls_Side.Volume*-1) as Volume,
					cast(null as decimal(38,4)) as Prev_Sales_Vol,
					cast(null as decimal(38,4)) as Prev_Sales_Price, 
					cast(null as decimal(38,4)) as Prev_Sale_Freight_Charge,
					cast(null as decimal(38,4)) as Prev_Sale_Equip_Charge,
					cast(null as decimal(38,4)) as Purch_Volume,
					cast (null as decimal(38,4)) as SalesPrice,
					Coalesce(Frt_Sls_Side.DFI_Value, 0)+Coalesce(Frt_Srchrg_Side.Sum_Frt_Srchrg_Sales_Price,0) as FreightSalesPrice,
					Frt_Tax_Side.Tot_Sls_Tax as SalesTax,
					cast(null as Decimal(38,4)) as Sales_Service_Fee,
					Coalesce(Frt_Sls_Side.DFI_Value, 0)+Coalesce(Frt_Srchrg_Side.Sum_Frt_Srchrg_Sales_Price,0) as TotalSales,
					cast (null as decimal(38,4))  as PurchUnitPrice,
					cast (null as decimal(38,4))  as PurchPrice,
					cast (null as decimal(38,4))  as Ancillary_Fees,
					cast (null as decimal(38,4))  as EquipmentCharge,
					cast (null as decimal(38,4))  as FrtPurchPrice,
					(COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0)) as COGs,
					COALESCE(TotalSales,0) + Sales_Service_Fee - (COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0) + COALESCE(EquipmentCharge, 0)) as GrossMargin,
					'Freight Only' as Type_Flag
	from 		PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_FRT Frt_Sls_Side  				
					left outer join 
					PROD_EDW_BASE.WSALE_DFI_JDE_F03B11 JDE_FP_FRT on
					Frt_Sls_Side.InvoiceNumber=JDE_FP_FRT.Receipt_Matching_Ref
					left outer join 
					PROD_EDW_BASE.WSALE_DFI_JDE_F0911 JDE_GL_FRT on
					Frt_Sls_Side.BatchNumberGL=JDE_GL_FRT.Batch_ID
					left outer join 
					(
					select  		BOL, 
										PCAT, 
										DestLocaleID,
										MvtHdrID, 
										cast(MovementDate as Date) as MvDate,
										sum(DFI_Value) as Sum_Frt_Srchrg_Sales_Price,
										sum(volume) as tot_vol
										--sum((DFI_Value))/sum(volume) as frt_Sales_unit_price 
					from 			PROD_EDW_BASE_Views.WSALE_RA_SALESDAT_FRT
					where			TransactionTypeGroup = 'Sales Price Freight Surchrg Cust Pay'
					group by		BOL, PCAT, DestLocaleID, MvtHdrID, cast(MovementDate as Date)
					having		tot_vol <> 0
					) Frt_Srchrg_Side on
					Frt_Sls_Side.BOL 											=	Frt_Srchrg_Side.BOL and	
					Frt_Sls_Side.PCAT 									=	Frt_Srchrg_Side.PCAT and	
					Frt_Sls_Side.DestLocaleID								=	Frt_Srchrg_Side.DestLocaleID and
					Frt_Sls_Side.MvtHdrID									=	Frt_Srchrg_Side.MvtHdrID and
					cast(Frt_Sls_Side.MovementDate as date) 	=  Frt_Srchrg_Side.MvDate
				/*** Begin Taxes ***/
					left outer join PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_TAX_GRP FRT_Tax_Side on 
					Frt_Sls_Side.BOL 							= FRT_Tax_Side.BOL and
					Frt_Sls_Side.PCat 							= FRT_Tax_Side.PCat and
					Frt_Sls_Side.DestLocaleID					= FRT_Tax_Side.DestLocaleID and
					Frt_Sls_Side.MvtHdrID						= FRT_Tax_Side.MvtHdrID and
					Frt_Sls_Side.InvoiceNumber					= FRT_Tax_Side.InvoiceNumber and
					cast(Frt_Sls_Side.MovementDate as date)		= FRT_Tax_Side.MvDate
				/*** End Taxes ***/
					LEFT OUTER JOIN PROD_EDW_BASE.WSALE_DFI_SALESDAT Sales_Side ON
					Frt_Sls_Side.BOL 			= Sales_Side.BOL AND
					Frt_Sls_Side.PCAT 	= Sales_Side.PCAT AND
					cast(Sales_Side.MovementDate as date) between  cast(Frt_Sls_Side.MovementDate as date) -14 and cast(Frt_Sls_Side.MovementDate as date) +14
					AND Sales_Side.TransactionTypeGroup in ('Sales Price Rack','Sales Price Delivered')
		where 		Frt_Sls_Side.TransactionTypeGroup in  ('Sales Price Freight Cust Pay') 
					AND Sales_Side.BOL IS NULL
					AND Sales_Side.PCAT IS NULL
	UNION ALL
	
-- Sales Service Fees
	select 		Sls_Srvc_Side .SalesDataType,
	     			Sls_Srvc_Side .MvtHdrID,
					Sls_Srvc_Side .TransactionTypeID,
					Sls_Srvc_Side .DlHdrID,
					Sls_Srvc_Side .BOL,
					Sls_Srvc_Side .MovementDate,
	      			--Sls_Srvc_Side .ProductID,
					Sls_Srvc_Side .OriginLocaleID,
					Sls_Srvc_Side .DestLocaleID,
					Sls_Srvc_Side .OrderType,
					Sls_Srvc_Side .SourceType,
					Sls_Srvc_Side .TransactionType,
					Sls_Srvc_Side .InvoiceNumber,
					Sls_Srvc_Side .AccountingPeriod,
					--Sls_Srvc_Side .AccountDetailCreatedDate,
					-- If can't get GL date from JDE_FP_FRT, try to get it from JDE_GL_FRT
					CAST(Sls_Srvc_Side.JDEAccountingPeriod as char(8)) as JDEAccountingPeriod,
					--Sls_Srvc_Side .Product,
					Sls_Srvc_Side .Origin,
					Sls_Srvc_Side .Destination,
					Sls_Srvc_Side .Destination_Trm as DestinationTrm,
					Sls_Srvc_Side .ContractNumber,
					Sls_Srvc_Side .BANme,
					Sls_Srvc_Side .JDEAddressBookNumber as BillToJDEAddrBookNumber,
					Sls_Srvc_Side .ARFedDate,
					Sls_Srvc_Side .DestAddressOne,
					Sls_Srvc_Side .DestAddressTwo,
					Sls_Srvc_Side .DestCity,
					Sls_Srvc_Side .DestState,
					Sls_Srvc_Side .DestZipCode,
					Sls_Srvc_Side .PointOfOrigin,
					Sls_Srvc_Side .InvoiceCreationDate,
					Sls_Srvc_Side .ProvisionName,
					Sls_Srvc_Side .MaxProvisionPriceService,
					Sls_Srvc_Side .MinProvisionPriceService,
					Sls_Srvc_Side .SalesmanCode,
					Sls_Srvc_Side .DriverName,
					Sls_Srvc_Side .TruckNumber,
					Sls_Srvc_Side .TMWOrderNumber,
					Sls_Srvc_Side .TransactionTypeGroup,
					Sls_Srvc_Side .LiftingNumber,
					Sls_Srvc_Side .MovementType,
					Sls_Srvc_Side .AccountDetailSource,
					Sls_Srvc_Side .FTAProductCode,
					Sls_Srvc_Side .DestJDEAddBookNum as cShipToJDEAddrBookNumber,
					Sls_Srvc_Side .UOM,
					cast (null as varchar(100)) as Vendor,
					Sls_Srvc_Side .InternalBANme,
					Sls_Srvc_Side .IBAJDEAddBookNum,
					Sls_Srvc_Side .Carrier,
					Sls_Srvc_Side .PCAT,
					CASE WHEN TransactionType = 'AC-Service Fees - WRPT (they Pay)' AND BANme = 'Union Pacific Railroad' THEN (Sls_Srvc_Side.Volume*-1) Else Sls_Srvc_Side.Volume END as Volume,
					cast(null as decimal(38,4)) as Prev_Sales_Vol,
					cast(null as decimal(38,4)) as Prev_Sales_Price, 
					cast(null as decimal(38,4)) as Prev_Sale_Freight_Charge,
					cast(null as decimal(38,4)) as Prev_Sale_Equip_Charge,
					cast(null as decimal(38,4)) as Purch_Volume,
					cast (null as decimal(38,4)) as SalesPrice,
					cast(null as Decimal(38,4))  as FreightSalesPrice,
					cast(null as Decimal(38,4)) as SalesTax,
					COALESCE(CAST(Sls_Srvc_Side.DFI_Value as Decimal(38,4)), 0) as Sales_Service_Fee,
					cast(null as Decimal(38,4)) as TotalSales,
					cast (null as decimal(38,4))  as PurchUnitPrice,
					cast (null as decimal(38,4))  as PurchPrice,
					cast (null as decimal(38,4))  as Ancillary_Fees,
					cast (null as decimal(38,4))  as EquipmentCharge,
					cast (null as decimal(38,4))  as FrtPurchPrice,
					(COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0)) as COGs,
					COALESCE(TotalSales,0) + Sales_Service_Fee - (COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0) + COALESCE(EquipmentCharge, 0)) as GrossMargin,
					'Sales Service Fee' as Type_Flag
	from 		PROD_EDW_BASE_VIEWS.WSALE_RA_SALESDAT_SLS_SRVC_FEE Sls_Srvc_Side  		

UNION ALL
	-- Start Edit
select 		Coalesce(Prev_PRD_Sales.SalesDataType, Purch_Side.SalesDataType) as SalesDataType,
	     			 -1 as MvtHdrID,
					Coalesce(Prev_PRD_Sales.TransactionTypeID, Purch_Side.TransactionTypeID) as TransactionTypeID,
					Coalesce(Prev_PRD_Sales.DlHdrID, Purch_Side.DlHdrID) as DlHdrID,
					Purch_Side.BOL,
					Coalesce(Prev_PRD_Sales.MovementDate, Purch_Side.MovementDate) as MovementDate,
	      			--Purch_Side.ProductID,
					Coalesce(Prev_PRD_Sales.OriginLocaleID, Purch_Side.OriginLocaleID) as OriginLocaleID,
					Coalesce(Prev_PRD_Sales.DestLocaleID, Purch_Side.DestLocaleID) as DestLocaleID,
					Coalesce(Prev_PRD_Sales.OrderType, Purch_Side.OrderType) as OrderType,
					Coalesce(Prev_PRD_Sales.SourceType, Purch_Side.SourceType) as SourceType,
					Coalesce(Prev_PRD_Sales.TransactionType, Purch_Side.TransactionType) as TransactionType,
					Coalesce(Prev_PRD_Sales.InvoiceNumber, Purch_Side.InvoiceNumber) as InvoiceNumber,
					Prev_PRD_Sales.AccountingPeriod as AccountingPeriod,

					
						 Cast(Purch_Side.JDEAccountingPeriod as char(8)) as JDEAccountingPeriod,
					-- substr(cast (cast(b.GL_Date as date format 'YYYYMMDD') as char(8)),1,6) as JDEAccountingPeriod,
					--Purch_Side.Product,
					Coalesce(Prev_PRD_Sales.Origin, Purch_Side.Origin) as Origin,
					Coalesce(Prev_PRD_Sales.Destination, Purch_Side.Destination) as Destination,
					Coalesce(Prev_PRD_Sales.Destination_Trm, case when substring(Purch_Side.Destination from 4 for 1)=' ' then substring(Purch_Side.Destination from 5 for (length(Purch_Side.Destination)-4)) 
						else	Purch_Side.Destination end )as DestinationTrm,
					Coalesce(Prev_PRD_Sales.ContractNumber, Purch_Side.ContractNumber) as ContractNumber,
					Coalesce(Prev_PRD_Sales.BANme, Purch_Side.BANme) as BANme,
					Coalesce(Prev_PRD_Sales.JDEAddressBookNumber, Purch_Side.JDEAddressBookNumber) as BillToJDEAddrBookNumber,
					Coalesce(Prev_PRD_Sales.ARFedDate, Purch_Side.ARFedDate) as ARFedDate,
					Coalesce(Prev_PRD_Sales.DestAddressOne, Purch_Side.DestAddressOne) as DestAddressOne,
					Coalesce(Prev_PRD_Sales.DestAddressTwo, Purch_Side.DestAddressTwo) as DestAddressTwo,
					Coalesce(Prev_PRD_Sales.DestCity, Purch_Side.DestCity) as DestCity,
					Coalesce(Prev_PRD_Sales.DestState, Purch_Side.DestState) as DestState,
					Coalesce(Prev_PRD_Sales.DestZipCode, Purch_Side.DestZipCode) as DestZipCode,
					Coalesce(Prev_PRD_Sales.PointOfOrigin, Purch_Side.PointOfOrigin) as PointOfOrigin,
					Coalesce(Prev_PRD_Sales.InvoiceCreationDate, Purch_Side.InvoiceCreationDate) as InvoiceCreationDate,
					Coalesce(Prev_PRD_Sales.ProvisionName, Purch_Side.ProvisionName) as ProvisionName,
					Coalesce(Prev_PRD_Sales.MaxProvisionPriceService, Purch_Side.MaxProvisionPriceService) as MaxProvisionPriceService,
					Coalesce(Prev_PRD_Sales.MinProvisionPriceService, Purch_Side.MinProvisionPriceService) as MinProvisionPriceService,
					Coalesce(Prev_PRD_Sales.SalesmanCode, Purch_Side.SalesmanCode) as SalesmanCode,
					Coalesce(Prev_PRD_Sales.DriverName, Purch_Side.DriverName) as DriverName,
					Coalesce(Prev_PRD_Sales.TruckNumber, Purch_Side.TruckNumber) as TruckNumber,
					Coalesce(Prev_PRD_Sales.TMWOrderNumber, Purch_Side.TMWOrderNumber) as TMWOrderNumber, 
					Coalesce(Prev_PRD_Sales.TransactionTypeGroup, Purch_Side.TransactionTypeGroup) as TransactionTypeGroup,
					Coalesce(Prev_PRD_Sales.LiftingNumber, Purch_Side.LiftingNumber) as LiftingNumber,
					Coalesce(Prev_PRD_Sales.MovementType, Purch_Side.MovementType) as MovementType,
					Prev_PRD_Sales.AccountDetailSource as AccountDetailSource,
					Prev_PRD_Sales.FTAProductCode as FTAProductCode,
					Coalesce(Prev_PRD_Sales.DestJDEAddBookNum, Purch_Side.DestJDEAddBookNum) as cShipToJDEAddrBookNumber,
					Coalesce(Prev_PRD_Sales.UOM, Purch_Side.UOM) as UOM,
					Purch_Side.Banme as Vendor,
					Coalesce(Prev_PRD_Sales.InternalBANme, Purch_Side.InternalBANme) as InternalBANme,
					Coalesce(Prev_PRD_Sales.IBAJDEAddBookNum, Purch_Side.IBAJDEAddBookNum) as IBAJDEAddBookNum,
					Coalesce(Prev_PRD_Sales.Carrier, Purch_Side.Carrier) as Carrier,
					Coalesce(Prev_PRD_Sales.PCAT, Purch_Side.PCAT) as PCAT,
					-- If there is Sales Volume, flip sign if it is Rebill
					--CASE WHEN Purch_Side.PeriodVolume > 0 THEN Coalesce(Prev_PRD_Sales.Vol_Sold*-1, Purch_Side.PeriodVolume) ELSE Coalesce(Prev_PRD_Sales.Vol_Sold, Purch_Side.PeriodVolume) END as Volume, -- Commented out on 09/10
					cast (null as decimal(38,4)) as Volume,
					CASE WHEN Purch_Side.PeriodVolume > 0 THEN Prev_PRD_Sales.Vol_Sold*-1 ELSE Prev_PRD_Sales.Vol_Sold END as Prev_Sales_Vol, 
					CASE WHEN Purch_Side.PeriodVolume > 0 THEN Prev_PRD_Sales.Sales_Price ELSE Prev_PRD_Sales.Sales_Price*-1 END as Prev_Sales_Price, 
					Prev_PRD_Sales.Prev_Sale_Freight_Charge,
					Prev_Prd_Sales.Prev_Sale_Equip_Charge,
					Purch_Side.PeriodVolume as Purch_Volume,
					cast (null as decimal(38,4)) as SalesPrice,
					cast (null as decimal(38,4)) as FreightSalesPrice,
					cast (null as decimal(38,4)) as SalesTax,
					cast(null as Decimal(38,4)) as Sales_Service_Fee,
					cast (null as decimal(38,4)) as TotalSales,
					(Purch_Side.PeriodValue)*-1/ CASE WHEN Purch_Side.PeriodVolume > 0 THEN Purch_Side.PeriodVolume ELSE Purch_Side.PeriodVolume*-1 END as PurchUnitPrice,
					ABS(PurchUnitPrice) * CASE WHEN Purch_Side.PeriodVolume > 0 THEN Coalesce(Prev_PRD_Sales.Vol_Sold*-1, Purch_Side.PeriodVolume) ELSE Coalesce(Prev_PRD_Sales.Vol_Sold, Purch_Side.PeriodVolume) END  as PurchPrice, --Purch_Side.DFI_Value *-1 as PurchPrice,
					cast (null as decimal(38,4)) as  Ancillary_Fees,
					cast (null as decimal(38,4)) as EquipmentCharge,
					cast (null as decimal(38,4)) as FrtPurchPrice,
					(COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0)) as COGs,
					COALESCE(TotalSales,0) + Sales_Service_Fee - (COALESCE(PurchPrice,0) + COALESCE(FrtPurchPrice,0)) as GrossMargin,
					'Purchase, Previous Sales' as Type_Flag
	from 		PROD_EDW_BASE_VIEWS.WSale_RA_Salesdat_PURCH_GRP Purch_Side 
	-- Join to Previous PRD Sales if available
	LEFT OUTER JOIN PROD_EDW_BASE.WSALE_RA_PREV_SLS_GRP Prev_PRD_Sales
			 ON
			Purch_Side.BOL 			= Prev_PRD_Sales.BOL AND
			Purch_Side.PCAT 		= Prev_PRD_Sales.PCAT AND
		Purch_Side.JDEAccountingPeriod = Prev_PRD_Sales.JDEAccountingPeriod AND 
		cast(Prev_PRD_Sales.MovementDate as date) between  cast(Purch_Side.MovementDate as date) -14 and cast(Purch_Side.MovementDate as date) +14
		AND Prev_PRD_Sales.TransactionTypeGroup in ('Sales Price Rack','Sales Price Delivered')
	where 		Purch_Side.TransactionTypeGroup in ('Purchase Price Rack','Purchase Price Delivered')  
		AND 

			Prev_PRD_Sales.BOL IS NOT NULL -- Restate Sales record by displaying purchase side with previous data
				--AND (Prev_PRD_Sales. vol_sold > 0  and Purch_Volume < 0)
				-- OLD and  ((Prev_PRD_Sales. vol_sold < 0  and Purch_Volume > 0) OR (Prev_PRD_Sales. vol_sold > 0  and Purch_Volume < 0)) -- Do Not restate sales if previous sales is credit; it is already restated in the sales credit  
			AND Purch_Side.InvoiceNumber = 'Original'
	-- End Edit
	) SC
	LEFT OUTER JOIN
		(Select JDEAccountNum, TerritoryNum FROM PROD_EDW_BASE_VIEWS.WSale_CRM_CustMast GROUP BY 1, 2) CUR_SM ON
			ShipToJDEAddrBookNumber = CUR_SM.JDEAccountNum	
	);
--------------------------------------------------------------------------------

/* Salesdat Stage Sum */
REPLACE VIEW PROD_EDW_BASE_VIEWS.WSale_RA_SLSD_STG_SUM as 
--Change 3122
LOCKING ROW ACCESS
(
SELECT	
	MAX(SalesDataType) as SalesDataType,
	TransactionTypeID,
	MAX(DlHdrID) as DlHdrID,
	BOL,
	MAX(MovementDate) as MovementDate,
	OriginLocaleID,
	DestLocaleID,
	OrderType,
	MAX(SourceType) as SourceType,
	MAX(TransactionType) as TransactionType,
	InvoiceNumber,
	MAX(AccountingPeriod) as AccountingPeriod,
	JDEAccountingPeriod,
	MAX(Origin) as Origin,
	MAX(Destination) as Destination,
	MAX(DestinationTrm) as DestinationTrm,
	MAX(ContractNumber) as ContractNumber,
	BANme,
	MAX(BillToJDEAddrBookNumber) as BillToJDEAddrBookNumber,
	MAX(ARFedDate) as ARFedDate,
	MAX(DestAddressOne) as DestAddressOne,
	MAX(DestAddressTwo) as DestAddressTwo,
	MAX(DestCity) as DestCity,
	MAX(DestState) as DestState,
	MAX(DestZipCode) as DestZipCode,
	MAX(PointOfOrigin) as PointOfOrigin,
	MAX(InvoiceCreationDate) as InvoiceCreationDate,
	MAX(ProvisionName) as ProvisionName,
	MAX(MaxProvisionPriceService) as MaxProvisionPriceService,
	MAX(MinProvisionPriceService) as MinProvisionPriceService,
	SalesmanCode,
	MAX(Current_SalesmanCode) as Current_SalesmanCode,
	MAX(DriverName) as DriverName,
	MAX(TruckNumber) as TruckNumber,
	MAX(TMWOrderNumber) as TMWOrderNumber,
	MAX(TransactionTypeGroup) as TransactionTypeGroup,
	MAX(LiftingNumber) as LiftingNumber,
	MAX(MovementType) as MovementType,
	MAX(AccountDetailSource) as AccountDetailSource,
	MAX(FTAProductCode) as FTAProductCode,
	MAX(ShipToJDEAddrBookNumber) as ShipToJDEAddrBookNumber,
	UOM,
	MAX(Vendor) as Vendor,
	InternalBANme,
	IBAJDEAddBookNum,
	MAX(Carrier) as Carrier,
	PCAT,
	SUM(Volume) as Volume,
	SUM(Prev_Sales_Vol) as Prev_Sales_Vol,
	SUM(Prev_Sales_Price) as Prev_Sales_Price,
	SUM(Prev_Sale_Freight_Charge) as Prev_Sale_Freight_Charge,
	SUM(Prev_Sale_Equip_Charge) as Prev_Sale_Equip_Charge,
	SUM(Purch_Volume) as Purch_Volume,
	AVG(Purch_Volume) as Avg_Purch_Volume,
	SUM(SalesPrice) as SalesPrice,
	SUM(FreightSalesPrice) as FreightSalesPrice,
	SUM(TotalSales) as TotalSales,
	SUM(Tax) as Tax,
	SUM(SalesServiceFee) as SalesServiceFee,
	SUM(PurchUnitPrice) as PurchUnitPrice,
	SUM(PurchPrice) as PurchPrice,
	SUM(Ancillary_Fees) as Ancillary_Fees,
	SUM(EquipmentCharge) as EquipmentCharge,
	SUM(FrtPurchPrice) as FrtPurchPrice,
	SUM(COGs) as COGs,
	SUM(GrossMargin) as GrossMargin,
	Type_Flag
FROM	PROD_EDW_BASE_VIEWS.WSale_RA_SLSD_STG
GROUP BY 
	TransactionTypeID,
	BOL,
	OriginLocaleID,
	DestLocaleID,
	OrderType,
	InvoiceNumber,
	JDEAccountingPeriod,
	BANme,
	SalesmanCode,
	UOM,
	InternalBANme,
	IBAJDEAddBookNum,
	PCAT,
	Type_Flag
);
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_TIERCHT
as Locking Row ACCESS
Select * From PROD_EDW_BASE.WSALE_RA_TIERCHT;
--------------------------------------------------------------------------------

REPLACE VIEW PROD_EDW_BASE_VIEWS.WSALE_RA_TWCHT
as Locking Row ACCESS
Select * From PROD_EDW_BASE.WSALE_RA_TWCHT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Customers
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_CUSTOMERS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Employee
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_EMPLOYEE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Iteminv
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_ITEMINV;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_OrderLn
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_ORDERLN;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Orders
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_ORDERS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Parts
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_PARTS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_RepOrder
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_REPORDER;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Shop
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_SHOP;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSALE_TMT_STDFLUIDS
as SELECT * FROM PROD_EDW_BASE.WSALE_TMT_STDFLUIDS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Units
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_UNITS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_VendorItem
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_VENDORITEM;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_TMT_Vendors
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMT_VENDORS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_C_OFR
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_C_OFR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_C_TnkMdl
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_C_TNKMDL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_Accident
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_ACCIDENT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_Comp_Tnk_Detl
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_COMP_TNK_DETL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_Frgt_Detl
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_FRGT_DETL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_Incident
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_INCIDENT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_Injury
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_INJURY;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_InvcDetl
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_INVCDETL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_InvcHdr
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_INVCHDR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_MPP
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_MPP;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_OdrHdr
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_ODRHDR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_PayDetl
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_PAYDETL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_PayHdr
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_PAYHDR;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_SftRep
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_SFTREP;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_SftSch
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_SFTSCH;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_Stops
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_STOPS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_FC_Tra_Prfl
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_FC_TRA_PRFL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_F_Fuel_InvAmt
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_F_FUEL_INVAMT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_F_TnkFcstLog
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_F_TNKFCSTLOG;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_TMW_F_WNRICTrnsl
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_TMW_F_WNRICTRNSL;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_WMS_BinLocat (	
      ROW_ID, BINLABEL, PRODUCT, QUANTITY, PACKSIZE, USER_ID, COUNTED, EXTENDED, PO_NUM,
      WAREHOUSE, RESERVED, CREATE_DATE, CREATE_TIME,LINE_NUM,CLIENTNAME, WAREHOUSE_ZONE,
      LOCATION, INNERPACK, BINTYPE, LICENSE_PLATE, EXTRA1, EXTRA2, ADDED_UNIT_COST,
      CUST_NUM, DATE_RECVD, DATE_SHIPPED, PACKSLIP, ORDER_SEQ, PO_LINE_UNIT_COST,
      TOTAL_UNIT_COST, VEND_NUM, PROD_CLASS, RECV_SLIP, SALESMAN, SO_LINE_UNIT_PRICE,
      GROSS_PROFIT, FROMTABLE, CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT	
ROW_ID, BINLABEL, PRODUCT, QUANTITY, PACKSIZE, USER_ID, COUNTED, EXTENDED, PO_NUM,
      WAREHOUSE, RESERVED, CREATE_DATE, CREATE_TIME,LINE_NUM,CLIENTNAME, WAREHOUSE_ZONE,
      LOCATION, INNERPACK, BINTYPE, LICENSE_PLATE, EXTRA1, EXTRA2, ADDED_UNIT_COST,
      CUST_NUM, DATE_RECVD, DATE_SHIPPED, PACKSLIP, ORDER_SEQ, PO_LINE_UNIT_COST,
      TOTAL_UNIT_COST, VEND_NUM, PROD_CLASS, RECV_SLIP, SALESMAN, SO_LINE_UNIT_PRICE,
      GROSS_PROFIT, FROMTABLE, CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_BINLOCAT;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_WMS_Binlocat_Hrly
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_WMS_BINLOCAT_HRLY;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_WMS_PickDetl (ROW_ID, VEND_NUM, PACKSLIP, PIN_NUMBER, HOST_ORDER, ORDER_SEQ,
		CUST_SEQ, COMMENT_IN, ALLOCATED, HELD_REPL, HELD_SHORT, COUNTED,
		IS_COMPLETE, COMPLETE, WAREHOUSE_ZONE, BINLABEL, PICKLINES, N_ALLOC, QTY_ORIGNL,
		QTY_TOPICK, QTY_PICKED, PACKSIZE, PRODUCT, DESCRIPT, UPC, EXTENDED,
		SUBSTITUTE, CUST_XREF, UNITMEASUR, PROD_CLASS, HAZMAT, INSTRUCT1,
		INSTRUCT2, INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7,
		WAREHOUSE, PICK_ATTR, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4,
		ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10,
		EXTRA, WAVE, TOTLABEL, CUST_PO, DISCOUNT, UNIT_PRICE, RETAIL_PR,
		VALUE_PR, TKT_DESCR, SELL_PRICE, CTRY_ORIG, TAX1, TAX2, TAX3,
		TAX4, VENDOR_NUM, PRI_SEQU, CUST_NUM, DROP_PO, DROP_PLINE, EDP_NUM,
		IS_KIT, IS_CMPN, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, VLP,
		QTY_KIT, COUNTER, DAYS_EXPIRY, RESERVETYPE, SHARE_ID, UOM_TEXT,
		ALT_WHSE, BO_NUMBER, FAIRSHARE, HOST_SEQ, INNERPACK, KIT_TYPE,
		ORDER_NUM, LICENSEPLATE, MFG_BACKFLUSH, BILLEDDATE, LOCATION,
		SALESMAN, CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT	ROW_ID, VEND_NUM, PACKSLIP, PIN_NUMBER, HOST_ORDER, ORDER_SEQ,
		CUST_SEQ, COMMENT_IN, ALLOCATED, HELD_REPL, HELD_SHORT, COUNTED,
		IS_COMPLETE, COMPLETE, WAREHOUSE_ZONE, BINLABEL, PICKLINES, N_ALLOC, QTY_ORIGNL,
		QTY_TOPICK, QTY_PICKED, PACKSIZE, PRODUCT, DESCRIPT, UPC, EXTENDED,
		SUBSTITUTE, CUST_XREF, UNITMEASUR, PROD_CLASS, HAZMAT, INSTRUCT1,
		INSTRUCT2, INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7,
		WAREHOUSE, PICK_ATTR, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4,
		ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10,
		EXTRA, WAVE, TOTLABEL, CUST_PO, DISCOUNT, UNIT_PRICE, RETAIL_PR,
		VALUE_PR, TKT_DESCR, SELL_PRICE, CTRY_ORIG, TAX1, TAX2, TAX3,
		TAX4, VENDOR_NUM, PRI_SEQU, CUST_NUM, DROP_PO, DROP_PLINE, EDP_NUM,
		IS_KIT, IS_CMPN, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, VLP,
		QTY_KIT, COUNTER, DAYS_EXPIRY, RESERVETYPE, SHARE_ID, UOM_TEXT,
		ALT_WHSE, BO_NUMBER, FAIRSHARE, HOST_SEQ, INNERPACK, KIT_TYPE,
		ORDER_NUM, LICENSEPLATE, MFG_BACKFLUSH, BILLEDDATE, LOCATION,
		SALESMAN, CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_PICKDETL;
--------------------------------------------------------------------------------

Create VIEW PROD_EDW_BASE_VIEWS.WSale_WMS_PickHead (	ROW_ID, DATE_UPLD, TIME_UPLD, PACKSLIP, PIN_NUMBER, HOST_ORDER,
		WAVE, BIG_NUMBER, ERR_MSG, ORDER_NUM, BO_NUMBER, CUST_NUM, SHIP_TO,
		STORE_NUM, DEPT_NUM, SHP_CNSLDT, CUST_PO, PO_TYPE, AUTO_LABEL,
		IS_PRINT2, ALLOC_1, ALLOC_2, HELD_SHORT, SHORTED, RE_ALLOC, ALL_PICKED,
		ALL_REPKD, IS_PRINT3, IS_SHIPPED, IS_PRINTED, IS_PRINT4, UPLOADED,
		IS_NUKED, IS_STARTED, EXPORTED, OK_BO, BATCH_REF, CART_SPLIT,
		DATE_CREAT, DATE_ORDER, DATE_CANCL, DATE_REQD, DATE_SHIP, TIME_REQD,
		PRIORITY, HOT_PICK, N_LINES, N_SIZE0, N_SIZE1, N_SIZE2, N_SIZE3,
		N_SIZE4, N_SIZE5, N_UNITS, N_CUBE, EST_TOT_KG, EST_TOT_PC, ZONEX,
		ZONE1, ZONE2, ZONE3, ZONE4, ZONE5, ZONE6, ZONE7, ZONE8, ZONE9,
		ISDELIVERY, ZONE10, ZONE11, ZONE12, ZONE13, ZONE14, ZONE15, ZONE16,
		ZONE17, ZONE18, ZONE19, ZONE20, ZONE21, ZONE22, ZONE23, ZONE24,
		ZONE25, ZONE26, INCL_PICKZ, EXCL_PICKZ, INCL_REPLZ, ORD_GROUP,
		USERID, FULL_CART, LB_TICKETS, LB_PLANNER, LB_BATCH, LBL_RULES,
		LB_1LABEL, LB_DISP, CUST_LTYPE, LBL_CODE, LBL_INSTR, LBL_TEXT,
		TKT_TYPE, PICKSLPRPT, PACKSLPRPT, PROMO_DESC, INSTRUCT1, INSTRUCT2,
		INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7, PACKLANE,
		TRAILER_NO, CARTONTYPE, HOST_PRIOR, SHIP_CODE, SHIP_VIA, SHIP_SERVC,
		SHP_HD_MSG, SHP_OPTION, SERVICE, SHIP_NUM, PICKUP_NUM, COST_SHIP,
		SHIP_CUBE, SHIP_WGHT, SHIP_CRTNS, MANIFEST, COD, CAPTURE_BC,
		SHIP_PAY, SHIP_ACCT, TRUCK_ROUT, TRUCK_STOP, TIME_DLVRY, SHIP_NAME,
		SHIP_ADD1, SHIP_ADD2, SHIP_CITY, SHIP_PROV, SHIP_ZIP, SHIP_CNTRY,
		SHIP_ATTN, SHIP_TELNO, BILL_NAME, BILL_ADD1, BILL_ADD2, BILL_CITY,
		BILL_PROV, BILL_ZIP, BILL_CNTRY, STOR_NAME, STOR_ADD1, STOR_ADD2,
		STOR_CITY, STOR_PROV, STOR_ZIP, STOR_CNTRY, SHPR_NAME, SHPR_ADD1,
		SHPR_ADD2, SHPR_CITY, SHPR_PROV, SHPR_ZIP, FILL_RATE, NXT_DTLACT,
		EST_TOT_SC, ASSEMBLY, PRODUCT, QTYORDERED, QTYTOBUILD, QTY_BUILT,
		BINLABEL, CLIENT_NUM, COSTCENTER, SHIPWOTHER, SPLIT_XPRY, SHIP_COMPL,
		CLIENTMH10, CLIENTNAME, BATCH_WITH, TRANSCODE, SPECIAL1, SPECIAL2,
		SPECIAL3, INV_AMOUNT, INV_FRGHT, INV_TAX1, INV_TAX2, INV_TAX3,
		INV_TAX4, SHIPTO_FAX, MODIF, IN_REPACK, PROCESS, PROCSTEP, GIFTCERTNO,
		GIFTCERTAM, GIFTCERTUD, TIME_CREAT, TIME_SHIP, BUS_TELNO, E_MAIL,
		CC_NUMBER, CC_EXPIRY, CC_STATUS, FAX, PACK_HOLD, BILL_ATTN, INV_SH,
		ASSEMBLYNO, LB_PREINV, LB_PACKSLP, INV_GROSS, PROMO_AMT, PROMO_DISC,
		PROMO_USED, DROP_PO, DATE_MODFY, HANDLE, IS_KIT, EXPIRYDAYS,
		MIXED_LOTS, LB_DISPN, IS_SCANNED, FIRST_PICK, ACCOUNT_NO, WAVE_SEQ,
		T48, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, ENDOFLINE, ALL_BATCHD,
		PALLETSCAN, LB_PICKING, VALUE_GROS, VALUE_FILL, OLD_WAVE, CUST_GROUP,
		DATE_REQUEST, NEEDS_CC_PRERATE, PAYMENT_TYPE, SORT_SLAP, TO_WAREHOUSE,
		TRANSACTIONID, ISLOCKED, CC_DEBIT, REPRINTINV, ALLOC_OPTS, BOL_NUM,
		CARR_LTYPE, CUST_CTYPE, HELDFORMAT, INV_NUM, IS_BOL_ASSIGN, LB_CRYSTAL,
		LB_CUSTOMER, LOCATION, N_ALLOCL, CUST_NOFM, SHIP_UDF1, SHIP_UDF2,
		AUTO_PICK, SATISFACTION, DUE_IN, SURPRISE, N_LABELS, MFG_TO_BINLABEL,
		MFG_PLANNER_ID, MFG_BUYER_ID, MFG_START_DATE, MFG_FINISHED_GOOD_ID,
		MFG_FINISHED_GOOD_DESC, MFG_FINISHED_GOOD_CLASS, MFG_MO_ENDING_QTY,
		MFG_FIRST_WORK_CENTER, MFG_MO_DESCRIPTION, UPS_SPECIAL, RESIDENTIAL,
		COD_PAY, BILLEDDATE, SHPR_ADDR1, SHPR_ADDR2, SHPR_CNTRY, SHPR_PHONE,
		ASSY_NOTE1, ASSY_NOTE2, ASSY_NOTE3, ASSY_NOTE4, ASSY_NOTE5, WORKAREA,
		N_ALLOCU, ASSIGN_TO, LOADED, MODIFIED_TIME, STAGE_LOC, CREATE_DTTM,
		LAST_UPDATE_DTTM
 ) AS 
	LOCKING ROW
	ACCESS
SELECT	ROW_ID, DATE_UPLD, TIME_UPLD, PACKSLIP, PIN_NUMBER, HOST_ORDER,
		WAVE, BIG_NUMBER, ERR_MSG, ORDER_NUM, BO_NUMBER, CUST_NUM, SHIP_TO,
		STORE_NUM, DEPT_NUM, SHP_CNSLDT, CUST_PO, PO_TYPE, AUTO_LABEL,
		IS_PRINT2, ALLOC_1, ALLOC_2, HELD_SHORT, SHORTED, RE_ALLOC, ALL_PICKED,
		ALL_REPKD, IS_PRINT3, IS_SHIPPED, IS_PRINTED, IS_PRINT4, UPLOADED,
		IS_NUKED, IS_STARTED, EXPORTED, OK_BO, BATCH_REF, CART_SPLIT,
		DATE_CREAT, DATE_ORDER, DATE_CANCL, DATE_REQD, DATE_SHIP, TIME_REQD,
		PRIORITY, HOT_PICK, N_LINES, N_SIZE0, N_SIZE1, N_SIZE2, N_SIZE3,
		N_SIZE4, N_SIZE5, N_UNITS, N_CUBE, EST_TOT_KG, EST_TOT_PC, ZONEX,
		ZONE1, ZONE2, ZONE3, ZONE4, ZONE5, ZONE6, ZONE7, ZONE8, ZONE9,
		ISDELIVERY, ZONE10, ZONE11, ZONE12, ZONE13, ZONE14, ZONE15, ZONE16,
		ZONE17, ZONE18, ZONE19, ZONE20, ZONE21, ZONE22, ZONE23, ZONE24,
		ZONE25, ZONE26, INCL_PICKZ, EXCL_PICKZ, INCL_REPLZ, ORD_GROUP,
		USERID, FULL_CART, LB_TICKETS, LB_PLANNER, LB_BATCH, LBL_RULES,
		LB_1LABEL, LB_DISP, CUST_LTYPE, LBL_CODE, LBL_INSTR, LBL_TEXT,
		TKT_TYPE, PICKSLPRPT, PACKSLPRPT, PROMO_DESC, INSTRUCT1, INSTRUCT2,
		INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7, PACKLANE,
		TRAILER_NO, CARTONTYPE, HOST_PRIOR, SHIP_CODE, SHIP_VIA, SHIP_SERVC,
		SHP_HD_MSG, SHP_OPTION, SERVICE, SHIP_NUM, PICKUP_NUM, COST_SHIP,
		SHIP_CUBE, SHIP_WGHT, SHIP_CRTNS, MANIFEST, COD, CAPTURE_BC,
		SHIP_PAY, SHIP_ACCT, TRUCK_ROUT, TRUCK_STOP, TIME_DLVRY, SHIP_NAME,
		SHIP_ADD1, SHIP_ADD2, SHIP_CITY, SHIP_PROV, SHIP_ZIP, SHIP_CNTRY,
		SHIP_ATTN, SHIP_TELNO, BILL_NAME, BILL_ADD1, BILL_ADD2, BILL_CITY,
		BILL_PROV, BILL_ZIP, BILL_CNTRY, STOR_NAME, STOR_ADD1, STOR_ADD2,
		STOR_CITY, STOR_PROV, STOR_ZIP, STOR_CNTRY, SHPR_NAME, SHPR_ADD1,
		SHPR_ADD2, SHPR_CITY, SHPR_PROV, SHPR_ZIP, FILL_RATE, NXT_DTLACT,
		EST_TOT_SC, ASSEMBLY, PRODUCT, QTYORDERED, QTYTOBUILD, QTY_BUILT,
		BINLABEL, CLIENT_NUM, COSTCENTER, SHIPWOTHER, SPLIT_XPRY, SHIP_COMPL,
		CLIENTMH10, CLIENTNAME, BATCH_WITH, TRANSCODE, SPECIAL1, SPECIAL2,
		SPECIAL3, INV_AMOUNT, INV_FRGHT, INV_TAX1, INV_TAX2, INV_TAX3,
		INV_TAX4, SHIPTO_FAX, MODIF, IN_REPACK, PROCESS, PROCSTEP, GIFTCERTNO,
		GIFTCERTAM, GIFTCERTUD, TIME_CREAT, TIME_SHIP, BUS_TELNO, E_MAIL,
		CC_NUMBER, CC_EXPIRY, CC_STATUS, FAX, PACK_HOLD, BILL_ATTN, INV_SH,
		ASSEMBLYNO, LB_PREINV, LB_PACKSLP, INV_GROSS, PROMO_AMT, PROMO_DISC,
		PROMO_USED, DROP_PO, DATE_MODFY, HANDLE, IS_KIT, EXPIRYDAYS,
		MIXED_LOTS, LB_DISPN, IS_SCANNED, FIRST_PICK, ACCOUNT_NO, WAVE_SEQ,
		T48, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, ENDOFLINE, ALL_BATCHD,
		PALLETSCAN, LB_PICKING, VALUE_GROS, VALUE_FILL, OLD_WAVE, CUST_GROUP,
		DATE_REQUEST, NEEDS_CC_PRERATE, PAYMENT_TYPE, SORT_SLAP, TO_WAREHOUSE,
		TRANSACTIONID, ISLOCKED, CC_DEBIT, REPRINTINV, ALLOC_OPTS, BOL_NUM,
		CARR_LTYPE, CUST_CTYPE, HELDFORMAT, INV_NUM, IS_BOL_ASSIGN, LB_CRYSTAL,
		LB_CUSTOMER, LOCATION, N_ALLOCL, CUST_NOFM, SHIP_UDF1, SHIP_UDF2,
		AUTO_PICK, SATISFACTION, DUE_IN, SURPRISE, N_LABELS, MFG_TO_BINLABEL,
		MFG_PLANNER_ID, MFG_BUYER_ID, MFG_START_DATE, MFG_FINISHED_GOOD_ID,
		MFG_FINISHED_GOOD_DESC, MFG_FINISHED_GOOD_CLASS, MFG_MO_ENDING_QTY,
		MFG_FIRST_WORK_CENTER, MFG_MO_DESCRIPTION, UPS_SPECIAL, RESIDENTIAL,
		COD_PAY, BILLEDDATE, SHPR_ADDR1, SHPR_ADDR2, SHPR_CNTRY, SHPR_PHONE,
		ASSY_NOTE1, ASSY_NOTE2, ASSY_NOTE3, ASSY_NOTE4, ASSY_NOTE5, WORKAREA,
		N_ALLOCU, ASSIGN_TO, LOADED, MODIFIED_TIME, STAGE_LOC, CREATE_DTTM,
		LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_PICKHEAD
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.WSale_WMS_ProdMSTR (	ROW_ID, PRODUCT, ITEMTYPE, DESCRIPT, UNITMEASUR, IS_SERIAL,
		BINLABEL, DYNAMICBIN, AGGRE_BIN, BULKSLOT, CARTON_DEF, LOC_SIZE,
		ZONE_CODE, BOOK_COUNT, REPLEN_QTY, Q_ALLOCATE, TIE_COUNT, HIGHCOUNT,
		WEIGHT, HEIGHT, WIDTH, LENG, CUBAGE, FLOOR_STK, SELL_PRICE, COST_PRICE,
		UPC, EXTENDED, SUBSTITUTE, AVG_PICKS, AVG_UNITS, AVG_CUBE, PROD_CLASS,
		RECV_ATTR, PICK_ATTR, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4,
		ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10,
		ASSEMBLY, FIFTY_RULE, LEAD_TIME, ORDERGROUPS, REFORECAST, VEND_PACKSIZE,
		DATECREATE, DATE_MODFY, SIZE1, SIZE2, SIZE3, SIZE4, SIZE5, FORECAST,
		DFLTRANDOM, HANDLECODE, SIZECODE, REACHCODE, EXPIRYDATE, MIN_PACK1,
		MIN_PACK2, MIN_PACK3, MIN_PACK4, MIN_PACK5, MIN_UNITS, MIN_INNER,
		MIN_CARTON, CONV_QTY, STOCK_ITEM, M_T_D, VEND_NUM, ON_HAND, ON_SALES,
		ON_PURCH, NET_STOCK, FREE_SAMPL, EDP_NUM, FREIGHT_CL, TARIFF_CL,
		C_ORIGIN, HAZMAT, CLIENTNAME, VEND_PROD, TRIG_PNT, TRIG_VAL,
		ORD_GROUP, REORDER, BUYER, GRP_LIMIT1, GRP_LIMIT2, GRP_LIMIT3,
		GRP_LIMIT4, GRP_LIMIT5, GRP_LIMIT6, GRP_LIMIT7, GRP_LIMIT8, GRP_LIMIT9,
		COMMODITY, STACKABLE, RECYCLABLE, EXPLODEKIT, TOLERANCE, SHELF_LIFE,
		MAX_PACK1, MAX_PACK2, MAX_PACK3, MAX_PACK4, MAX_PACK5, CURRENCY_ID,
		FORECAST_6, FORECAST_TYPE, F_TYPE, INNERPACK1, INNERPACK2, INNERPACK3,
		INNERPACK4, INNERPACK5, INVENTORY_QTY, RESERVE_MIN, SKU_ID, STATUS,
		STOCKOUT, BOX_SIZE, PROD_UDF1, PROD_UDF2, PROD_UDF3, PROD_UDF4,
		PROD_UDF5, PACK_CLASS, LASTCOUNT, OVERDUE, STOCK_STATUS, CLIENTNO,
		MIN_QTY, MAX_QTY, ITEM_OWNER, EXPIRY_DAYS, MODIFIED_TIME, STICKY_BIN,
		CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT	ROW_ID, PRODUCT, ITEMTYPE, DESCRIPT, UNITMEASUR, IS_SERIAL,
		BINLABEL, DYNAMICBIN, AGGRE_BIN, BULKSLOT, CARTON_DEF, LOC_SIZE,
		ZONE_CODE, BOOK_COUNT, REPLEN_QTY, Q_ALLOCATE, TIE_COUNT, HIGHCOUNT,
		WEIGHT, HEIGHT, WIDTH, LENG, CUBAGE, FLOOR_STK, SELL_PRICE, COST_PRICE,
		UPC, EXTENDED, SUBSTITUTE, AVG_PICKS, AVG_UNITS, AVG_CUBE, PROD_CLASS,
		RECV_ATTR, PICK_ATTR, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4,
		ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10,
		ASSEMBLY, FIFTY_RULE, LEAD_TIME, ORDERGROUPS, REFORECAST, VEND_PACKSIZE,
		DATECREATE, DATE_MODFY, SIZE1, SIZE2, SIZE3, SIZE4, SIZE5, FORECAST,
		DFLTRANDOM, HANDLECODE, SIZECODE, REACHCODE, EXPIRYDATE, MIN_PACK1,
		MIN_PACK2, MIN_PACK3, MIN_PACK4, MIN_PACK5, MIN_UNITS, MIN_INNER,
		MIN_CARTON, CONV_QTY, STOCK_ITEM, M_T_D, VEND_NUM, ON_HAND, ON_SALES,
		ON_PURCH, NET_STOCK, FREE_SAMPL, EDP_NUM, FREIGHT_CL, TARIFF_CL,
		C_ORIGIN, HAZMAT, CLIENTNAME, VEND_PROD, TRIG_PNT, TRIG_VAL,
		ORD_GROUP, REORDER, BUYER, GRP_LIMIT1, GRP_LIMIT2, GRP_LIMIT3,
		GRP_LIMIT4, GRP_LIMIT5, GRP_LIMIT6, GRP_LIMIT7, GRP_LIMIT8, GRP_LIMIT9,
		COMMODITY, STACKABLE, RECYCLABLE, EXPLODEKIT, TOLERANCE, SHELF_LIFE,
		MAX_PACK1, MAX_PACK2, MAX_PACK3, MAX_PACK4, MAX_PACK5, CURRENCY_ID,
		FORECAST_6, FORECAST_TYPE, F_TYPE, INNERPACK1, INNERPACK2, INNERPACK3,
		INNERPACK4, INNERPACK5, INVENTORY_QTY, RESERVE_MIN, SKU_ID, STATUS,
		STOCKOUT, BOX_SIZE, PROD_UDF1, PROD_UDF2, PROD_UDF3, PROD_UDF4,
		PROD_UDF5, PACK_CLASS, LASTCOUNT, OVERDUE, STOCK_STATUS, CLIENTNO,
		MIN_QTY, MAX_QTY, ITEM_OWNER, EXPIRY_DAYS, MODIFIED_TIME, STICKY_BIN,
		CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_PRODMSTR;
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.WSale_WMS_RecvDetl (ROW_ID, COO, UOM_TEXT, PO_NUM, RECV_SLIP, WAVE, LINE_NUM,
		BINLABEL, PRODUCT, DESCRIPT, EXTENDED, PACKSLIP, QTY_ORDER, QTY_RECVD,
		CARTONS, IS_SPECIAL, STATUS, FREIGHT_ST, PUNITMESUR, PROD_CLASS,
		DATE_CREAT, CUST_NUM, CUST_NAME, CUST_ORDER, CUST_LINE, RECV_ATTR,
		ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6,
		ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10, RMA_CODE, WAREHOUSE,
		DATE_EXPRY, QTY_SUBTOT, ORIGBIN, COMMENT_IN, SELL_PRICE, DISCOUNT,
		COST_PRICE, HOST_PONUM, EXTRA, BACKORDER, LAST_DATE, EXTRA1,
		EXTRA2, EXTRA3, EXTRA4, EXTRA5, CON_STATUS, LOCATION, RECV_PACKSLIP,
		VESSEL_NO, DATE_LEFT_PORT, EST_ARR_DATE, CREDIT_NOW, DATE_EXPCT,
		HOST_LINENUM, INSTRUCT1, INSTRUCT2, INSTRUCT3, INSTRUCT4, INSTRUCT5,
		INSTRUCT6, INSTRUCT7, QTY_UNALL, RESTOCK_CHG, RE_INVOICE, RE_SHIP,
		RMA_RCODE, RMA_REASON, VEND_PROD, INSPECTION, TRANSACTIONID,
		ASSIGN_TO, ASN, CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT	ROW_ID, COO, UOM_TEXT, PO_NUM, RECV_SLIP, WAVE, LINE_NUM,
		BINLABEL, PRODUCT, DESCRIPT, EXTENDED, PACKSLIP, QTY_ORDER, QTY_RECVD,
		CARTONS, IS_SPECIAL, STATUS, FREIGHT_ST, PUNITMESUR, PROD_CLASS,
		DATE_CREAT, CUST_NUM, CUST_NAME, CUST_ORDER, CUST_LINE, RECV_ATTR,
		ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6,
		ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10, RMA_CODE, WAREHOUSE,
		DATE_EXPRY, QTY_SUBTOT, ORIGBIN, COMMENT_IN, SELL_PRICE, DISCOUNT,
		COST_PRICE, HOST_PONUM, EXTRA, BACKORDER, LAST_DATE, EXTRA1,
		EXTRA2, EXTRA3, EXTRA4, EXTRA5, CON_STATUS, LOCATION, RECV_PACKSLIP,
		VESSEL_NO, DATE_LEFT_PORT, EST_ARR_DATE, CREDIT_NOW, DATE_EXPCT,
		HOST_LINENUM, INSTRUCT1, INSTRUCT2, INSTRUCT3, INSTRUCT4, INSTRUCT5,
		INSTRUCT6, INSTRUCT7, QTY_UNALL, RESTOCK_CHG, RE_INVOICE, RE_SHIP,
		RMA_RCODE, RMA_REASON, VEND_PROD, INSPECTION, TRANSACTIONID,
		ASSIGN_TO, ASN, CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_RECVDETL;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_WMS_Recvdetl_Hrly
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_WMS_RECVDETL_HRLY;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_WMS_Serials
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_WMS_SERIALS;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSale_WMS_Serials_Log
AS LOCKING ROW ACCESS
SELECT	*
FROM	PROD_EDW_BASE.WSALE_WMS_SERIALS_LOG;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_WMS_ShipDetl (
ROW_ID, DISCOUNT, QTY_TOPICK, QTY_ORIGNL, SELL_PRICE, WH_ATTRIBUTES,
PACKSLIP, HOST_ORDER, TOTLABEL, ORDER_NUM, ORDER_SEQ, STATUS,
COMMENT_IN, DATECREATE, USERID, BINLABEL, WAREHOUSE_ZONE, 
PRODUCT, DESCRIPT, EXTENDED, SUBSTITUTE, QTY, PACKSIZE, ATTRIBUTE1, ATTRIBUTE2,
ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7,ATTRIBUTE8, ATTRIBUTE9,
ATTRIBUT10, ALLOC_COST, PO_NUM, CLIENTNAME, COMMODITY, FIFO_DATE, BILLEDDATE,
EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, LOCATION, WAREHOUSE,
CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT
ROW_ID, DISCOUNT, QTY_TOPICK, QTY_ORIGNL, SELL_PRICE, WH_ATTRIBUTES,
PACKSLIP, HOST_ORDER, TOTLABEL, ORDER_NUM, ORDER_SEQ, STATUS,
COMMENT_IN, DATECREATE, USERID, BINLABEL, WAREHOUSE_ZONE, 
PRODUCT, DESCRIPT, EXTENDED, SUBSTITUTE, QTY, PACKSIZE, ATTRIBUTE1, ATTRIBUTE2,
ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7,ATTRIBUTE8, ATTRIBUTE9,
ATTRIBUT10, ALLOC_COST, PO_NUM, CLIENTNAME, COMMODITY, FIFO_DATE, BILLEDDATE,
EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, LOCATION, WAREHOUSE,
CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_SHIPDETL;
--------------------------------------------------------------------------------

Create View PROD_EDW_BASE_VIEWS.WSale_WMS_ShipHist (ROW_ID, DATE_UPLD, TIME_UPLD, PACKSLIP, PIN_NUMBER, HOST_ORDER,
		WAVE, BIG_NUMBER, ERR_MSG, ORDER_NUM, BO_NUMBER, CUST_NUM, SHIP_TO,
		STORE_NUM, DEPT_NUM, SHP_CNSLDT, CUST_PO, PO_TYPE, AUTO_LABEL,
		IS_PRINT2, ALLOC_1, ALLOC_2, HELD_SHORT, SHORTED, RE_ALLOC, ALL_PICKED,
		ALL_REPKD, IS_PRINT3, IS_SHIPPED, IS_PRINTED, IS_PRINT4, UPLOADED,
		IS_NUKED, IS_STARTED, EXPORTED, OK_BO, BATCH_REF, CART_SPLIT,
		DATE_CREAT, DATE_ORDER, DATE_CANCL, DATE_REQD, DATE_SHIP, TIME_REQD,
		PRIORITY, HOT_PICK, N_LINES, N_SIZE0, N_SIZE1, N_SIZE2, N_SIZE3,
		N_SIZE4, N_SIZE5, N_UNITS, N_CUBE, EST_TOT_KG, EST_TOT_PC, ZONEX,
		ZONE1, ZONE2, ZONE3, ZONE4, ZONE5, ZONE6, ZONE7, ZONE8, ZONE9,
		ISDELIVERY, ZONE10, ZONE11, ZONE12, ZONE13, ZONE14, ZONE15, ZONE16,
		ZONE17, ZONE18, ZONE19, ZONE20, ZONE21, ZONE22, ZONE23, ZONE24,
		ZONE25, ZONE26, INCL_PICKZ, EXCL_PICKZ, INCL_REPLZ, ORD_GROUP,
		USERID, FULL_CART, LB_TICKETS, LB_PLANNER, LB_BATCH, LBL_RULES,
		LB_1LABEL, LB_DISP, CUST_LTYPE, LBL_CODE, LBL_INSTR, LBL_TEXT,
		TKT_TYPE, PICKSLPRPT, PACKSLPRPT, PROMO_DESC, INSTRUCT1, INSTRUCT2,
		INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7, PACKLANE,
		TRAILER_NO, CARTONTYPE, HOST_PRIOR, SHIP_CODE, SHIP_VIA, SHIP_SERVC,
		SHP_HD_MSG, SHP_OPTION, SERVICE, SHIP_NUM, PICKUP_NUM, COST_SHIP,
		SHIP_CUBE, SHIP_WGHT, SHIP_CRTNS, MANIFEST, COD, CAPTURE_BC,
		SHIP_PAY, SHIP_ACCT, TRUCK_ROUT, TRUCK_STOP, TIME_DLVRY, SHIP_NAME,
		SHIP_ADD1, SHIP_ADD2, SHIP_CITY, SHIP_PROV, SHIP_ZIP, SHIP_CNTRY,
		SHIP_ATTN, SHIP_TELNO, BILL_NAME, BILL_ADD1, BILL_ADD2, BILL_CITY,
		BILL_PROV, BILL_ZIP, BILL_CNTRY, STOR_NAME, STOR_ADD1, STOR_ADD2,
		STOR_CITY, STOR_PROV, STOR_ZIP, STOR_CNTRY, SHPR_NAME, SHPR_ADD1,
		SHPR_ADD2, SHPR_CITY, SHPR_PROV, SHPR_ZIP, FILL_RATE, NXT_DTLACT,
		EST_TOT_SC, ASSEMBLY, PRODUCT, QTYORDERED, QTYTOBUILD, QTY_BUILT,
		BINLABEL, CLIENT_NUM, COSTCENTER, SHIPWOTHER, SPLIT_XPRY, SHIP_COMPL,
		CLIENTMH10, CLIENTNAME, BATCH_WITH, TRANSCODE, SPECIAL1, SPECIAL2,
		SPECIAL3, INV_AMOUNT, INV_FRGHT, INV_TAX1, INV_TAX2, INV_TAX3,
		INV_TAX4, SHIPTO_FAX, MODIF, IN_REPACK, PROCESS, PROCSTEP, GIFTCERTNO,
		GIFTCERTAM, GIFTCERTUD, TIME_CREAT, TIME_SHIP, BUS_TELNO, E_MAIL,
		CC_NUMBER, CC_EXPIRY, CC_STATUS, FAX, PACK_HOLD, BILL_ATTN, INV_SH,
		ASSEMBLYNO, LB_PREINV, LB_PACKSLP, INV_GROSS, PROMO_AMT, PROMO_DISC,
		PROMO_USED, DROP_PO, DATE_MODFY, HANDLE, IS_KIT, EXPIRYDAYS,
		MIXED_LOTS, LB_DISPN, IS_SCANNED, FIRST_PICK, ACCOUNT_NO, WAVE_SEQ,
		T48, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, ENDOFLINE, ALL_BATCHD,
		PALLETSCAN, LB_PICKING, VALUE_GROS, VALUE_FILL, OLD_WAVE, CUST_GROUP,
		DATE_REQUEST, NEEDS_CC_PRERATE, PAYMENT_TYPE, SORT_SLAP, TO_WAREHOUSE,
		TRANSACTIONID, ISLOCKED, CC_DEBIT, REPRINTINV, ALLOC_OPTS, BOL_NUM,
		CARR_LTYPE, CUST_CTYPE, HELDFORMAT, INV_NUM, IS_BOL_ASSIGN, LB_CRYSTAL,
		LB_CUSTOMER, LOCATION, N_ALLOCL, CUST_NOFM, SHIP_UDF1, SHIP_UDF2,
		AUTO_PICK, SATISFACTION, DUE_IN, SURPRISE, N_LABELS, MFG_TO_BINLABEL,
		MFG_PLANNER_ID, MFG_BUYER_ID, MFG_START_DATE, MFG_FINISHED_GOOD_ID,
		MFG_FINISHED_GOOD_DESC, MFG_FINISHED_GOOD_CLASS, MFG_MO_ENDING_QTY,
		MFG_FIRST_WORK_CENTER, MFG_MO_DESCRIPTION, UPS_SPECIAL, RESIDENTIAL,
		COD_PAY, BILLEDDATE, SHPR_ADDR1, SHPR_ADDR2, SHPR_CNTRY, SHPR_PHONE,
		PH_ROW_ID, CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT	ROW_ID, DATE_UPLD, TIME_UPLD, PACKSLIP, PIN_NUMBER, HOST_ORDER,
		WAVE, BIG_NUMBER, ERR_MSG, ORDER_NUM, BO_NUMBER, CUST_NUM, SHIP_TO,
		STORE_NUM, DEPT_NUM, SHP_CNSLDT, CUST_PO, PO_TYPE, AUTO_LABEL,
		IS_PRINT2, ALLOC_1, ALLOC_2, HELD_SHORT, SHORTED, RE_ALLOC, ALL_PICKED,
		ALL_REPKD, IS_PRINT3, IS_SHIPPED, IS_PRINTED, IS_PRINT4, UPLOADED,
		IS_NUKED, IS_STARTED, EXPORTED, OK_BO, BATCH_REF, CART_SPLIT,
		DATE_CREAT, DATE_ORDER, DATE_CANCL, DATE_REQD, DATE_SHIP, TIME_REQD,
		PRIORITY, HOT_PICK, N_LINES, N_SIZE0, N_SIZE1, N_SIZE2, N_SIZE3,
		N_SIZE4, N_SIZE5, N_UNITS, N_CUBE, EST_TOT_KG, EST_TOT_PC, ZONEX,
		ZONE1, ZONE2, ZONE3, ZONE4, ZONE5, ZONE6, ZONE7, ZONE8, ZONE9,
		ISDELIVERY, ZONE10, ZONE11, ZONE12, ZONE13, ZONE14, ZONE15, ZONE16,
		ZONE17, ZONE18, ZONE19, ZONE20, ZONE21, ZONE22, ZONE23, ZONE24,
		ZONE25, ZONE26, INCL_PICKZ, EXCL_PICKZ, INCL_REPLZ, ORD_GROUP,
		USERID, FULL_CART, LB_TICKETS, LB_PLANNER, LB_BATCH, LBL_RULES,
		LB_1LABEL, LB_DISP, CUST_LTYPE, LBL_CODE, LBL_INSTR, LBL_TEXT,
		TKT_TYPE, PICKSLPRPT, PACKSLPRPT, PROMO_DESC, INSTRUCT1, INSTRUCT2,
		INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7, PACKLANE,
		TRAILER_NO, CARTONTYPE, HOST_PRIOR, SHIP_CODE, SHIP_VIA, SHIP_SERVC,
		SHP_HD_MSG, SHP_OPTION, SERVICE, SHIP_NUM, PICKUP_NUM, COST_SHIP,
		SHIP_CUBE, SHIP_WGHT, SHIP_CRTNS, MANIFEST, COD, CAPTURE_BC,
		SHIP_PAY, SHIP_ACCT, TRUCK_ROUT, TRUCK_STOP, TIME_DLVRY, SHIP_NAME,
		SHIP_ADD1, SHIP_ADD2, SHIP_CITY, SHIP_PROV, SHIP_ZIP, SHIP_CNTRY,
		SHIP_ATTN, SHIP_TELNO, BILL_NAME, BILL_ADD1, BILL_ADD2, BILL_CITY,
		BILL_PROV, BILL_ZIP, BILL_CNTRY, STOR_NAME, STOR_ADD1, STOR_ADD2,
		STOR_CITY, STOR_PROV, STOR_ZIP, STOR_CNTRY, SHPR_NAME, SHPR_ADD1,
		SHPR_ADD2, SHPR_CITY, SHPR_PROV, SHPR_ZIP, FILL_RATE, NXT_DTLACT,
		EST_TOT_SC, ASSEMBLY, PRODUCT, QTYORDERED, QTYTOBUILD, QTY_BUILT,
		BINLABEL, CLIENT_NUM, COSTCENTER, SHIPWOTHER, SPLIT_XPRY, SHIP_COMPL,
		CLIENTMH10, CLIENTNAME, BATCH_WITH, TRANSCODE, SPECIAL1, SPECIAL2,
		SPECIAL3, INV_AMOUNT, INV_FRGHT, INV_TAX1, INV_TAX2, INV_TAX3,
		INV_TAX4, SHIPTO_FAX, MODIF, IN_REPACK, PROCESS, PROCSTEP, GIFTCERTNO,
		GIFTCERTAM, GIFTCERTUD, TIME_CREAT, TIME_SHIP, BUS_TELNO, E_MAIL,
		CC_NUMBER, CC_EXPIRY, CC_STATUS, FAX, PACK_HOLD, BILL_ATTN, INV_SH,
		ASSEMBLYNO, LB_PREINV, LB_PACKSLP, INV_GROSS, PROMO_AMT, PROMO_DISC,
		PROMO_USED, DROP_PO, DATE_MODFY, HANDLE, IS_KIT, EXPIRYDAYS,
		MIXED_LOTS, LB_DISPN, IS_SCANNED, FIRST_PICK, ACCOUNT_NO, WAVE_SEQ,
		T48, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, ENDOFLINE, ALL_BATCHD,
		PALLETSCAN, LB_PICKING, VALUE_GROS, VALUE_FILL, OLD_WAVE, CUST_GROUP,
		DATE_REQUEST, NEEDS_CC_PRERATE, PAYMENT_TYPE, SORT_SLAP, TO_WAREHOUSE,
		TRANSACTIONID, ISLOCKED, CC_DEBIT, REPRINTINV, ALLOC_OPTS, BOL_NUM,
		CARR_LTYPE, CUST_CTYPE, HELDFORMAT, INV_NUM, IS_BOL_ASSIGN, LB_CRYSTAL,
		LB_CUSTOMER, LOCATION, N_ALLOCL, CUST_NOFM, SHIP_UDF1, SHIP_UDF2,
		AUTO_PICK, SATISFACTION, DUE_IN, SURPRISE, N_LABELS, MFG_TO_BINLABEL,
		MFG_PLANNER_ID, MFG_BUYER_ID, MFG_START_DATE, MFG_FINISHED_GOOD_ID,
		MFG_FINISHED_GOOD_DESC, MFG_FINISHED_GOOD_CLASS, MFG_MO_ENDING_QTY,
		MFG_FIRST_WORK_CENTER, MFG_MO_DESCRIPTION, UPS_SPECIAL, RESIDENTIAL,
		COD_PAY, BILLEDDATE, SHPR_ADDR1, SHPR_ADDR2, SHPR_CNTRY, SHPR_PHONE,
		PH_ROW_ID, CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_SHIPHIST;
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_WMS_ShipLine (ROW_ID, VEND_NUM, PACKSLIP, PIN_NUMBER, HOST_ORDER, ORDER_SEQ,
		CUST_SEQ, COMMENT_IN, ALLOCATED, HELD_REPL, HELD_SHORT, COUNTED,
		IS_COMPLETE, COMPLETE, WAREHOUSE_ZONE, BINLABEL, PICKLINES, N_ALLOC, QTY_ORIGNL,
		QTY_TOPICK, QTY_PICKED, PACKSIZE, PRODUCT, DESCRIPT, UPC, EXTENDED,
		SUBSTITUTE, CUST_XREF, UNITMEASUR, PROD_CLASS, HAZMAT, INSTRUCT1,
		INSTRUCT2, INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7,
		WAREHOUSE, PICK_ATTR, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4,
		ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10,
		EXTRA, WAVE, TOTLABEL, CUST_PO, DISCOUNT, UNIT_PRICE, RETAIL_PR,
		VALUE_PR, TKT_DESCR, SELL_PRICE, CTRY_ORIG, TAX1, TAX2, TAX3,
		TAX4, VENDOR_NUM, PRI_SEQU, CUST_NUM, DROP_PO, DROP_PLINE, EDP_NUM,
		IS_KIT, IS_CMPN, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, VLP,
		QTY_KIT, COUNTER, DAYS_EXPIRY, RESERVETYPE, SHARE_ID, UOM_TEXT,
		ALT_WHSE, BO_NUMBER, FAIRSHARE, HOST_SEQ, INNERPACK, KIT_TYPE,
		ORDER_NUM, LICENSEPLATE, MFG_BACKFLUSH, BILLEDDATE, LOCATION,
		CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT	ROW_ID, VEND_NUM, PACKSLIP, PIN_NUMBER, HOST_ORDER, ORDER_SEQ,
		CUST_SEQ, COMMENT_IN, ALLOCATED, HELD_REPL, HELD_SHORT, COUNTED,
		IS_COMPLETE, COMPLETE, WAREHOUSE_ZONE, BINLABEL, PICKLINES, N_ALLOC, QTY_ORIGNL,
		QTY_TOPICK, QTY_PICKED, PACKSIZE, PRODUCT, DESCRIPT, UPC, EXTENDED,
		SUBSTITUTE, CUST_XREF, UNITMEASUR, PROD_CLASS, HAZMAT, INSTRUCT1,
		INSTRUCT2, INSTRUCT3, INSTRUCT4, INSTRUCT5, INSTRUCT6, INSTRUCT7,
		WAREHOUSE, PICK_ATTR, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4,
		ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUT10,
		EXTRA, WAVE, TOTLABEL, CUST_PO, DISCOUNT, UNIT_PRICE, RETAIL_PR,
		VALUE_PR, TKT_DESCR, SELL_PRICE, CTRY_ORIG, TAX1, TAX2, TAX3,
		TAX4, VENDOR_NUM, PRI_SEQU, CUST_NUM, DROP_PO, DROP_PLINE, EDP_NUM,
		IS_KIT, IS_CMPN, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, VLP,
		QTY_KIT, COUNTER, DAYS_EXPIRY, RESERVETYPE, SHARE_ID, UOM_TEXT,
		ALT_WHSE, BO_NUMBER, FAIRSHARE, HOST_SEQ, INNERPACK, KIT_TYPE,
		ORDER_NUM, LICENSEPLATE, MFG_BACKFLUSH, BILLEDDATE, LOCATION,
		CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_SHIPLINE;
--------------------------------------------------------------------------------

Replace View  PROD_EDW_BASE_VIEWS.WSALE_WMS_SHIPLINE_SO
AS LOCKING ROW ACCESS
select 		a.*,b.ship_name
from 		PROD_EDW_BASE.WSALE_WMS_SHIPLINE a,
				PROD_EDW_BASE.WSALE_PDS_CUSTOMER b
where		a.cust_num=b.customer_code 	and 
				b.ship_name not like 'Intra-co%';
--------------------------------------------------------------------------------

Replace View PROD_EDW_BASE_VIEWS.WSale_WMS_VendMSTR (ROW_ID, VEND_FAX, DLVRY_DAYS, VEND_PROV, VEND_ZIP, VEND_PHONE,
		VEND_CNTRY, VEND_NUM, VEND_NAME, PRI_SEQU, CUSTSAN, SHIPTOSAN,
		DESTSAN, VENDSAN, VENDCODE, CUSTNAME, BISACFILE, ORDEXT, ACKFILE,
		RENAMEACK, CRLFOUT, CRLFIN, CASCTYPE, E_MAIL, DISCOUNT, VEND_ADD1,
		VEND_ADD2, VEND_CITY, MIN_ORDER, MIN_PREPAID, QC_INSPECT, VEND_UNIQ,
		PRINTERTYPE, MODIFIED_DATE, MODIFIED_TIME, CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS LOCKING ROW ACCESS
SELECT	ROW_ID, VEND_FAX, DLVRY_DAYS, VEND_PROV, VEND_ZIP, VEND_PHONE,
		VEND_CNTRY, VEND_NUM, VEND_NAME, PRI_SEQU, CUSTSAN, SHIPTOSAN,
		DESTSAN, VENDSAN, VENDCODE, CUSTNAME, BISACFILE, ORDEXT, ACKFILE,
		RENAMEACK, CRLFOUT, CRLFIN, CASCTYPE, E_MAIL, DISCOUNT, VEND_ADD1,
		VEND_ADD2, VEND_CITY, MIN_ORDER, MIN_PREPAID, QC_INSPECT, VEND_UNIQ,
		PRINTERTYPE, MODIFIED_DATE, MODIFIED_TIME, CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_VENDMSTR;
--------------------------------------------------------------------------------

Replace VIEW PROD_EDW_BASE_VIEWS.WSale_WMS_WRWVendor (	PRODPACK, WH, ROPT, ROQTY, VSP4, VSP9, WHDEST, WRWSP,
		REPACK, VSP3, CREATE_DTTM, LAST_UPDATE_DTTM
 ) AS 
	LOCKING ROW
	ACCESS
SELECT	PRODPACK, WH, ROPT, ROQTY, VSP4, VSP9, WHDEST, WRWSP,
		REPACK, VSP3, CREATE_DTTM, LAST_UPDATE_DTTM
FROM	PROD_EDW_BASE.WSALE_WMS_WRWVENDOR